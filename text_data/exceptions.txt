Skip to content

[ ![logo](../../../img/logo-white.svg) ](../../.. "PydanticAI")

PydanticAI

pydantic_graph.exceptions

Type to start searching

[ pydantic/pydantic-ai

  * v0.0.50
  * 8k
  * 687

](https://github.com/pydantic/pydantic-ai "Go to repository")

[ ![logo](../../../img/logo-white.svg) ](../../.. "PydanticAI") PydanticAI

[ pydantic/pydantic-ai

  * v0.0.50
  * 8k
  * 687

](https://github.com/pydantic/pydantic-ai "Go to repository")

  * [ Introduction  ](../../..)
  * [ Installation  ](../../../install/)
  * [ Getting Help  ](../../../help/)
  * [ Contributing  ](../../../contributing/)
  * [ Troubleshooting  ](../../../troubleshooting/)
  * Documentation  Documentation 
    * [ Agents  ](../../../agents/)
    * [ Models  ](../../../models/)
    * [ Dependencies  ](../../../dependencies/)
    * [ Function Tools  ](../../../tools/)
    * [ Common Tools  ](../../../common-tools/)
    * [ Results  ](../../../results/)
    * [ Messages and chat history  ](../../../message-history/)
    * [ Unit testing  ](../../../testing/)
    * [ Debugging and Monitoring  ](../../../logfire/)
    * [ Multi-agent Applications  ](../../../multi-agent-applications/)
    * [ Graphs  ](../../../graph/)
    * [ Evals  ](../../../evals/)
    * [ Image, Audio & Document Input  ](../../../input/)
    * [ MCP  ](../../../mcp/)

MCP

      * [ Client  ](../../../mcp/client/)
      * [ Server  ](../../../mcp/server/)
      * [ MCP Run Python  ](../../../mcp/run-python/)
    * [ Command Line Interface (CLI)  ](../../../cli/)
  * [ Examples  ](../../../examples/)

Examples

    * [ Pydantic Model  ](../../../examples/pydantic-model/)
    * [ Weather agent  ](../../../examples/weather-agent/)
    * [ Bank support  ](../../../examples/bank-support/)
    * [ SQL Generation  ](../../../examples/sql-gen/)
    * [ Flight booking  ](../../../examples/flight-booking/)
    * [ RAG  ](../../../examples/rag/)
    * [ Stream markdown  ](../../../examples/stream-markdown/)
    * [ Stream whales  ](../../../examples/stream-whales/)
    * [ Chat App with FastAPI  ](../../../examples/chat-app/)
    * [ Question Graph  ](../../../examples/question-graph/)
  * API Reference  API Reference 
    * [ pydantic_ai.agent  ](../../agent/)
    * [ pydantic_ai.tools  ](../../tools/)
    * [ pydantic_ai.common_tools  ](../../common_tools/)
    * [ pydantic_ai.result  ](../../result/)
    * [ pydantic_ai.messages  ](../../messages/)
    * [ pydantic_ai.exceptions  ](../../exceptions/)
    * [ pydantic_ai.settings  ](../../settings/)
    * [ pydantic_ai.usage  ](../../usage/)
    * [ pydantic_ai.mcp  ](../../mcp/)
    * [ pydantic_ai.format_as_xml  ](../../format_as_xml/)
    * [ pydantic_ai.models  ](../../models/base/)
    * [ pydantic_ai.models.openai  ](../../models/openai/)
    * [ pydantic_ai.models.anthropic  ](../../models/anthropic/)
    * [ pydantic_ai.models.bedrock  ](../../models/bedrock/)
    * [ pydantic_ai.models.cohere  ](../../models/cohere/)
    * [ pydantic_ai.models.gemini  ](../../models/gemini/)
    * [ pydantic_ai.models.groq  ](../../models/groq/)
    * [ pydantic_ai.models.instrumented  ](../../models/instrumented/)
    * [ pydantic_ai.models.mistral  ](../../models/mistral/)
    * [ pydantic_ai.models.test  ](../../models/test/)
    * [ pydantic_ai.models.function  ](../../models/function/)
    * [ pydantic_ai.models.fallback  ](../../models/fallback/)
    * [ pydantic_ai.models.wrapper  ](../../models/wrapper/)
    * [ pydantic_ai.providers  ](../../providers/)
    * [ pydantic_graph  ](../graph/)
    * [ pydantic_graph.nodes  ](../nodes/)
    * [ pydantic_graph.persistence  ](../persistence/)
    * [ pydantic_graph.mermaid  ](../mermaid/)
    * pydantic_graph.exceptions  [ pydantic_graph.exceptions  ](./) Table of contents 
      * exceptions 
      * GraphSetupError 
        * message 
      * GraphRuntimeError 
        * message 
      * GraphNodeStatusError 
        * check 
    * [ pydantic_evals.dataset  ](../../pydantic_evals/dataset/)
    * [ pydantic_evals.evaluators  ](../../pydantic_evals/evaluators/)
    * [ pydantic_evals.reporting  ](../../pydantic_evals/reporting/)
    * [ pydantic_evals.otel  ](../../pydantic_evals/otel/)
    * [ pydantic_evals.generation  ](../../pydantic_evals/generation/)

Table of contents

  * exceptions 
  * GraphSetupError 
    * message 
  * GraphRuntimeError 
    * message 
  * GraphNodeStatusError 
    * check 

# `pydantic_graph.exceptions`

###  GraphSetupError

Bases:
`[TypeError](https://docs.python.org/3/library/exceptions.html#TypeError)`

Error caused by an incorrectly configured graph.

Source code in `pydantic_graph/pydantic_graph/exceptions.py`

    
    
     7
     8
     9
    10
    11
    12
    13
    14
    15

|

    
    
    class GraphSetupError(TypeError):
        """Error caused by an incorrectly configured graph."""
    
        message: str
        """Description of the mistake."""
    
        def __init__(self, message: str):
            self.message = message
            super().__init__(message)
      
  
---|---  
  
####  message `instance-attribute`

    
    
    message: [str](https://docs.python.org/3/library/stdtypes.html#str) = message
    

Description of the mistake.

###  GraphRuntimeError

Bases:
`[RuntimeError](https://docs.python.org/3/library/exceptions.html#RuntimeError)`

Error caused by an issue during graph execution.

Source code in `pydantic_graph/pydantic_graph/exceptions.py`

    
    
    18
    19
    20
    21
    22
    23
    24
    25
    26

|

    
    
    class GraphRuntimeError(RuntimeError):
        """Error caused by an issue during graph execution."""
    
        message: str
        """The error message."""
    
        def __init__(self, message: str):
            self.message = message
            super().__init__(message)
      
  
---|---  
  
####  message `instance-attribute`

    
    
    message: [str](https://docs.python.org/3/library/stdtypes.html#str) = message
    

The error message.

###  GraphNodeStatusError

Bases: `GraphRuntimeError`

Error caused by trying to run a node that already has status `'running'`,
`'success'`, or `'error'`.

Source code in `pydantic_graph/pydantic_graph/exceptions.py`

    
    
    29
    30
    31
    32
    33
    34
    35
    36
    37
    38
    39
    40

|

    
    
    class GraphNodeStatusError(GraphRuntimeError):
        """Error caused by trying to run a node that already has status `'running'`, `'success'`, or `'error'`."""
    
        def __init__(self, actual_status: 'SnapshotStatus'):
            self.actual_status = actual_status
            super().__init__(f"Incorrect snapshot status {actual_status!r}, must be 'created' or 'pending'.")
    
        @classmethod
        def check(cls, status: 'SnapshotStatus') -> None:
            """Check if the status is valid."""
            if status not in {'created', 'pending'}:
                raise cls(status)
      
  
---|---  
  
####  check `classmethod`

    
    
    check(status: [SnapshotStatus](../persistence/#pydantic_graph.persistence.SnapshotStatus "pydantic_graph.persistence.SnapshotStatus")) -> None
    

Check if the status is valid.

Source code in `pydantic_graph/pydantic_graph/exceptions.py`

    
    
    36
    37
    38
    39
    40

|

    
    
    @classmethod
    def check(cls, status: 'SnapshotStatus') -> None:
        """Check if the status is valid."""
        if status not in {'created', 'pending'}:
            raise cls(status)
      
  
---|---  
  
Â© Pydantic Services Inc. 2024 to present

