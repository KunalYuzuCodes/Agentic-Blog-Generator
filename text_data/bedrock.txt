Skip to content

[ ![logo](../../../img/logo-white.svg) ](../../.. "PydanticAI")

PydanticAI

pydantic_ai.models.bedrock

Type to start searching

[ pydantic/pydantic-ai

  * v0.0.50
  * 8k
  * 687

](https://github.com/pydantic/pydantic-ai "Go to repository")

[ ![logo](../../../img/logo-white.svg) ](../../.. "PydanticAI") PydanticAI

[ pydantic/pydantic-ai

  * v0.0.50
  * 8k
  * 687

](https://github.com/pydantic/pydantic-ai "Go to repository")

  * [ Introduction  ](../../..)
  * [ Installation  ](../../../install/)
  * [ Getting Help  ](../../../help/)
  * [ Contributing  ](../../../contributing/)
  * [ Troubleshooting  ](../../../troubleshooting/)
  * Documentation  Documentation 
    * [ Agents  ](../../../agents/)
    * [ Models  ](../../../models/)
    * [ Dependencies  ](../../../dependencies/)
    * [ Function Tools  ](../../../tools/)
    * [ Common Tools  ](../../../common-tools/)
    * [ Results  ](../../../results/)
    * [ Messages and chat history  ](../../../message-history/)
    * [ Unit testing  ](../../../testing/)
    * [ Debugging and Monitoring  ](../../../logfire/)
    * [ Multi-agent Applications  ](../../../multi-agent-applications/)
    * [ Graphs  ](../../../graph/)
    * [ Evals  ](../../../evals/)
    * [ Image, Audio & Document Input  ](../../../input/)
    * [ MCP  ](../../../mcp/)

MCP

      * [ Client  ](../../../mcp/client/)
      * [ Server  ](../../../mcp/server/)
      * [ MCP Run Python  ](../../../mcp/run-python/)
    * [ Command Line Interface (CLI)  ](../../../cli/)
  * [ Examples  ](../../../examples/)

Examples

    * [ Pydantic Model  ](../../../examples/pydantic-model/)
    * [ Weather agent  ](../../../examples/weather-agent/)
    * [ Bank support  ](../../../examples/bank-support/)
    * [ SQL Generation  ](../../../examples/sql-gen/)
    * [ Flight booking  ](../../../examples/flight-booking/)
    * [ RAG  ](../../../examples/rag/)
    * [ Stream markdown  ](../../../examples/stream-markdown/)
    * [ Stream whales  ](../../../examples/stream-whales/)
    * [ Chat App with FastAPI  ](../../../examples/chat-app/)
    * [ Question Graph  ](../../../examples/question-graph/)
  * API Reference  API Reference 
    * [ pydantic_ai.agent  ](../../agent/)
    * [ pydantic_ai.tools  ](../../tools/)
    * [ pydantic_ai.common_tools  ](../../common_tools/)
    * [ pydantic_ai.result  ](../../result/)
    * [ pydantic_ai.messages  ](../../messages/)
    * [ pydantic_ai.exceptions  ](../../exceptions/)
    * [ pydantic_ai.settings  ](../../settings/)
    * [ pydantic_ai.usage  ](../../usage/)
    * [ pydantic_ai.mcp  ](../../mcp/)
    * [ pydantic_ai.format_as_xml  ](../../format_as_xml/)
    * [ pydantic_ai.models  ](../base/)
    * [ pydantic_ai.models.openai  ](../openai/)
    * [ pydantic_ai.models.anthropic  ](../anthropic/)
    * pydantic_ai.models.bedrock  [ pydantic_ai.models.bedrock  ](./) Table of contents 
      * Setup 
        * bedrock 
        * LatestBedrockModelNames 
        * BedrockModelName 
        * BedrockModelSettings 
        * BedrockConverseModel 
          * model_name 
          * system 
          * __init__ 
        * BedrockStreamedResponse 
          * model_name 
    * [ pydantic_ai.models.cohere  ](../cohere/)
    * [ pydantic_ai.models.gemini  ](../gemini/)
    * [ pydantic_ai.models.groq  ](../groq/)
    * [ pydantic_ai.models.instrumented  ](../instrumented/)
    * [ pydantic_ai.models.mistral  ](../mistral/)
    * [ pydantic_ai.models.test  ](../test/)
    * [ pydantic_ai.models.function  ](../function/)
    * [ pydantic_ai.models.fallback  ](../fallback/)
    * [ pydantic_ai.models.wrapper  ](../wrapper/)
    * [ pydantic_ai.providers  ](../../providers/)
    * [ pydantic_graph  ](../../pydantic_graph/graph/)
    * [ pydantic_graph.nodes  ](../../pydantic_graph/nodes/)
    * [ pydantic_graph.persistence  ](../../pydantic_graph/persistence/)
    * [ pydantic_graph.mermaid  ](../../pydantic_graph/mermaid/)
    * [ pydantic_graph.exceptions  ](../../pydantic_graph/exceptions/)
    * [ pydantic_evals.dataset  ](../../pydantic_evals/dataset/)
    * [ pydantic_evals.evaluators  ](../../pydantic_evals/evaluators/)
    * [ pydantic_evals.reporting  ](../../pydantic_evals/reporting/)
    * [ pydantic_evals.otel  ](../../pydantic_evals/otel/)
    * [ pydantic_evals.generation  ](../../pydantic_evals/generation/)

Table of contents

  * Setup 
    * bedrock 
    * LatestBedrockModelNames 
    * BedrockModelName 
    * BedrockModelSettings 
    * BedrockConverseModel 
      * model_name 
      * system 
      * __init__ 
    * BedrockStreamedResponse 
      * model_name 

# `pydantic_ai.models.bedrock`

## Setup

For details on how to set up authentication with this model, see [model
configuration for Bedrock](../../../models/#bedrock).

###  LatestBedrockModelNames `module-attribute`

    
    
    LatestBedrockModelNames = [Literal](https://docs.python.org/3/library/typing.html#typing.Literal "typing.Literal")[
        "amazon.titan-tg1-large",
        "amazon.titan-text-lite-v1",
        "amazon.titan-text-express-v1",
        "us.amazon.nova-pro-v1:0",
        "us.amazon.nova-lite-v1:0",
        "us.amazon.nova-micro-v1:0",
        "anthropic.claude-3-5-sonnet-20241022-v2:0",
        "us.anthropic.claude-3-5-sonnet-20241022-v2:0",
        "anthropic.claude-3-5-haiku-20241022-v1:0",
        "us.anthropic.claude-3-5-haiku-20241022-v1:0",
        "anthropic.claude-instant-v1",
        "anthropic.claude-v2:1",
        "anthropic.claude-v2",
        "anthropic.claude-3-sonnet-20240229-v1:0",
        "us.anthropic.claude-3-sonnet-20240229-v1:0",
        "anthropic.claude-3-haiku-20240307-v1:0",
        "us.anthropic.claude-3-haiku-20240307-v1:0",
        "anthropic.claude-3-opus-20240229-v1:0",
        "us.anthropic.claude-3-opus-20240229-v1:0",
        "anthropic.claude-3-5-sonnet-20240620-v1:0",
        "us.anthropic.claude-3-5-sonnet-20240620-v1:0",
        "anthropic.claude-3-7-sonnet-20250219-v1:0",
        "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
        "cohere.command-text-v14",
        "cohere.command-r-v1:0",
        "cohere.command-r-plus-v1:0",
        "cohere.command-light-text-v14",
        "meta.llama3-8b-instruct-v1:0",
        "meta.llama3-70b-instruct-v1:0",
        "meta.llama3-1-8b-instruct-v1:0",
        "us.meta.llama3-1-8b-instruct-v1:0",
        "meta.llama3-1-70b-instruct-v1:0",
        "us.meta.llama3-1-70b-instruct-v1:0",
        "meta.llama3-1-405b-instruct-v1:0",
        "us.meta.llama3-2-11b-instruct-v1:0",
        "us.meta.llama3-2-90b-instruct-v1:0",
        "us.meta.llama3-2-1b-instruct-v1:0",
        "us.meta.llama3-2-3b-instruct-v1:0",
        "us.meta.llama3-3-70b-instruct-v1:0",
        "mistral.mistral-7b-instruct-v0:2",
        "mistral.mixtral-8x7b-instruct-v0:1",
        "mistral.mistral-large-2402-v1:0",
        "mistral.mistral-large-2407-v1:0",
    ]
    

Latest Bedrock models.

###  BedrockModelName `module-attribute`

    
    
    BedrockModelName = [Union](https://docs.python.org/3/library/typing.html#typing.Union "typing.Union")[[str](https://docs.python.org/3/library/stdtypes.html#str), LatestBedrockModelNames]
    

Possible Bedrock model names.

Since Bedrock supports a variety of date-stamped models, we explicitly list
the latest models but allow any name in the type hints. See [the Bedrock
docs](https://docs.aws.amazon.com/bedrock/latest/userguide/models-
supported.html) for a full list.

###  BedrockModelSettings

Bases: `[ModelSettings](../../settings/#pydantic_ai.settings.ModelSettings
"pydantic_ai.settings.ModelSettings")`

Settings for Bedrock models.

ALL FIELDS MUST BE `bedrock_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER
MODELS.

Source code in `pydantic_ai_slim/pydantic_ai/models/bedrock.py`

    
    
    115
    116
    117
    118
    119

|

    
    
    class BedrockModelSettings(ModelSettings):
        """Settings for Bedrock models.
    
        ALL FIELDS MUST BE `bedrock_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.
        """
      
  
---|---  
  
###  BedrockConverseModel `dataclass`

Bases: `[Model](../base/#pydantic_ai.models.Model "pydantic_ai.models.Model")`

A model that uses the Bedrock Converse API.

Source code in `pydantic_ai_slim/pydantic_ai/models/bedrock.py`

    
    
    122
    123
    124
    125
    126
    127
    128
    129
    130
    131
    132
    133
    134
    135
    136
    137
    138
    139
    140
    141
    142
    143
    144
    145
    146
    147
    148
    149
    150
    151
    152
    153
    154
    155
    156
    157
    158
    159
    160
    161
    162
    163
    164
    165
    166
    167
    168
    169
    170
    171
    172
    173
    174
    175
    176
    177
    178
    179
    180
    181
    182
    183
    184
    185
    186
    187
    188
    189
    190
    191
    192
    193
    194
    195
    196
    197
    198
    199
    200
    201
    202
    203
    204
    205
    206
    207
    208
    209
    210
    211
    212
    213
    214
    215
    216
    217
    218
    219
    220
    221
    222
    223
    224
    225
    226
    227
    228
    229
    230
    231
    232
    233
    234
    235
    236
    237
    238
    239
    240
    241
    242
    243
    244
    245
    246
    247
    248
    249
    250
    251
    252
    253
    254
    255
    256
    257
    258
    259
    260
    261
    262
    263
    264
    265
    266
    267
    268
    269
    270
    271
    272
    273
    274
    275
    276
    277
    278
    279
    280
    281
    282
    283
    284
    285
    286
    287
    288
    289
    290
    291
    292
    293
    294
    295
    296
    297
    298
    299
    300
    301
    302
    303
    304
    305
    306
    307
    308
    309
    310
    311
    312
    313
    314
    315
    316
    317
    318
    319
    320
    321
    322
    323
    324
    325
    326
    327
    328
    329
    330
    331
    332
    333
    334
    335
    336
    337
    338
    339
    340
    341
    342
    343
    344
    345
    346
    347
    348
    349
    350
    351
    352
    353
    354
    355
    356
    357
    358
    359
    360
    361
    362
    363
    364
    365
    366
    367
    368
    369
    370
    371
    372
    373
    374
    375
    376
    377
    378
    379
    380
    381
    382
    383
    384
    385
    386
    387
    388
    389
    390
    391
    392
    393
    394
    395
    396
    397
    398
    399
    400
    401
    402
    403
    404
    405
    406
    407

|

    
    
    @dataclass(init=False)
    class BedrockConverseModel(Model):
        """A model that uses the Bedrock Converse API."""
    
        client: BedrockRuntimeClient
    
        _model_name: BedrockModelName = field(repr=False)
        _system: str = field(default='bedrock', repr=False)
    
        @property
        def model_name(self) -> str:
            """The model name."""
            return self._model_name
    
        @property
        def system(self) -> str:
            """The system / model provider, ex: openai."""
            return self._system
    
        def __init__(
            self,
            model_name: BedrockModelName,
            *,
            provider: Literal['bedrock'] | Provider[BaseClient] = 'bedrock',
        ):
            """Initialize a Bedrock model.
    
            Args:
                model_name: The name of the model to use.
                model_name: The name of the Bedrock model to use. List of model names available
                    [here](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html).
                provider: The provider to use for authentication and API access. Can be either the string
                    'bedrock' or an instance of `Provider[BaseClient]`. If not provided, a new provider will be
                    created using the other parameters.
            """
            self._model_name = model_name
    
            if isinstance(provider, str):
                provider = infer_provider(provider)
            self.client = cast('BedrockRuntimeClient', provider.client)
    
        def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[ToolTypeDef]:
            tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]
            if model_request_parameters.result_tools:
                tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]
            return tools
    
        @staticmethod
        def _map_tool_definition(f: ToolDefinition) -> ToolTypeDef:
            return {
                'toolSpec': {
                    'name': f.name,
                    'description': f.description,
                    'inputSchema': {'json': f.parameters_json_schema},
                }
            }
    
        @property
        def base_url(self) -> str:
            return str(self.client.meta.endpoint_url)
    
        async def request(
            self,
            messages: list[ModelMessage],
            model_settings: ModelSettings | None,
            model_request_parameters: ModelRequestParameters,
        ) -> tuple[ModelResponse, result.Usage]:
            response = await self._messages_create(messages, False, model_settings, model_request_parameters)
            return await self._process_response(response)
    
        @asynccontextmanager
        async def request_stream(
            self,
            messages: list[ModelMessage],
            model_settings: ModelSettings | None,
            model_request_parameters: ModelRequestParameters,
        ) -> AsyncIterator[StreamedResponse]:
            response = await self._messages_create(messages, True, model_settings, model_request_parameters)
            yield BedrockStreamedResponse(_model_name=self.model_name, _event_stream=response)
    
        async def _process_response(self, response: ConverseResponseTypeDef) -> tuple[ModelResponse, result.Usage]:
            items: list[ModelResponsePart] = []
            if message := response['output'].get('message'):
                for item in message['content']:
                    if text := item.get('text'):
                        items.append(TextPart(content=text))
                    else:
                        tool_use = item.get('toolUse')
                        assert tool_use is not None, f'Found a content that is not a text or tool use: {item}'
                        items.append(
                            ToolCallPart(
                                tool_name=tool_use['name'],
                                args=tool_use['input'],
                                tool_call_id=tool_use['toolUseId'],
                            ),
                        )
            usage = result.Usage(
                request_tokens=response['usage']['inputTokens'],
                response_tokens=response['usage']['outputTokens'],
                total_tokens=response['usage']['totalTokens'],
            )
            return ModelResponse(items, model_name=self.model_name), usage
    
        @overload
        async def _messages_create(
            self,
            messages: list[ModelMessage],
            stream: Literal[True],
            model_settings: ModelSettings | None,
            model_request_parameters: ModelRequestParameters,
        ) -> EventStream[ConverseStreamOutputTypeDef]:
            pass
    
        @overload
        async def _messages_create(
            self,
            messages: list[ModelMessage],
            stream: Literal[False],
            model_settings: ModelSettings | None,
            model_request_parameters: ModelRequestParameters,
        ) -> ConverseResponseTypeDef:
            pass
    
        async def _messages_create(
            self,
            messages: list[ModelMessage],
            stream: bool,
            model_settings: ModelSettings | None,
            model_request_parameters: ModelRequestParameters,
        ) -> ConverseResponseTypeDef | EventStream[ConverseStreamOutputTypeDef]:
            tools = self._get_tools(model_request_parameters)
            support_tools_choice = self.model_name.startswith(('anthropic', 'us.anthropic'))
            if not tools or not support_tools_choice:
                tool_choice: ToolChoiceTypeDef = {}
            elif not model_request_parameters.allow_text_result:
                tool_choice = {'any': {}}
            else:
                tool_choice = {'auto': {}}
    
            system_prompt, bedrock_messages = await self._map_message(messages)
            inference_config = self._map_inference_config(model_settings)
    
            params = {
                'modelId': self.model_name,
                'messages': bedrock_messages,
                'system': [{'text': system_prompt}],
                'inferenceConfig': inference_config,
                **(
                    {'toolConfig': {'tools': tools, **({'toolChoice': tool_choice} if tool_choice else {})}}
                    if tools
                    else {}
                ),
            }
    
            if stream:
                model_response = await anyio.to_thread.run_sync(functools.partial(self.client.converse_stream, **params))
                model_response = model_response['stream']
            else:
                model_response = await anyio.to_thread.run_sync(functools.partial(self.client.converse, **params))
            return model_response
    
        @staticmethod
        def _map_inference_config(
            model_settings: ModelSettings | None,
        ) -> InferenceConfigurationTypeDef:
            model_settings = model_settings or {}
            inference_config: InferenceConfigurationTypeDef = {}
    
            if max_tokens := model_settings.get('max_tokens'):
                inference_config['maxTokens'] = max_tokens
            if temperature := model_settings.get('temperature'):
                inference_config['temperature'] = temperature
            if top_p := model_settings.get('top_p'):
                inference_config['topP'] = top_p
            # TODO(Marcelo): This is not included in model_settings yet.
            # if stop_sequences := model_settings.get('stop_sequences'):
            #     inference_config['stopSequences'] = stop_sequences
    
            return inference_config
    
        async def _map_message(self, messages: list[ModelMessage]) -> tuple[str, list[MessageUnionTypeDef]]:
            """Just maps a `pydantic_ai.Message` to the Bedrock `MessageUnionTypeDef`."""
            system_prompt: str = ''
            bedrock_messages: list[MessageUnionTypeDef] = []
            for m in messages:
                if isinstance(m, ModelRequest):
                    for part in m.parts:
                        if isinstance(part, SystemPromptPart):
                            system_prompt += part.content
                        elif isinstance(part, UserPromptPart):
                            bedrock_messages.extend(await self._map_user_prompt(part))
                        elif isinstance(part, ToolReturnPart):
                            assert part.tool_call_id is not None
                            bedrock_messages.append(
                                {
                                    'role': 'user',
                                    'content': [
                                        {
                                            'toolResult': {
                                                'toolUseId': part.tool_call_id,
                                                'content': [{'text': part.model_response_str()}],
                                                'status': 'success',
                                            }
                                        }
                                    ],
                                }
                            )
                        elif isinstance(part, RetryPromptPart):
                            # TODO(Marcelo): We need to add a test here.
                            if part.tool_name is None:  # pragma: no cover
                                bedrock_messages.append({'role': 'user', 'content': [{'text': part.model_response()}]})
                            else:
                                assert part.tool_call_id is not None
                                bedrock_messages.append(
                                    {
                                        'role': 'user',
                                        'content': [
                                            {
                                                'toolResult': {
                                                    'toolUseId': part.tool_call_id,
                                                    'content': [{'text': part.model_response()}],
                                                    'status': 'error',
                                                }
                                            }
                                        ],
                                    }
                                )
                elif isinstance(m, ModelResponse):
                    content: list[ContentBlockOutputTypeDef] = []
                    for item in m.parts:
                        if isinstance(item, TextPart):
                            content.append({'text': item.content})
                        else:
                            assert isinstance(item, ToolCallPart)
                            content.append(self._map_tool_call(item))
                    bedrock_messages.append({'role': 'assistant', 'content': content})
                else:
                    assert_never(m)
            return system_prompt, bedrock_messages
    
        @staticmethod
        async def _map_user_prompt(part: UserPromptPart) -> list[MessageUnionTypeDef]:
            content: list[ContentBlockUnionTypeDef] = []
            if isinstance(part.content, str):
                content.append({'text': part.content})
            else:
                document_count = 0
                for item in part.content:
                    if isinstance(item, str):
                        content.append({'text': item})
                    elif isinstance(item, BinaryContent):
                        format = item.format
                        if item.is_document:
                            document_count += 1
                            name = f'Document {document_count}'
                            assert format in ('pdf', 'txt', 'csv', 'doc', 'docx', 'xls', 'xlsx', 'html', 'md')
                            content.append({'document': {'name': name, 'format': format, 'source': {'bytes': item.data}}})
                        elif item.is_image:
                            assert format in ('jpeg', 'png', 'gif', 'webp')
                            content.append({'image': {'format': format, 'source': {'bytes': item.data}}})
                        else:
                            raise NotImplementedError('Binary content is not supported yet.')
                    elif isinstance(item, (ImageUrl, DocumentUrl)):
                        response = await cached_async_http_client().get(item.url)
                        response.raise_for_status()
                        if item.kind == 'image-url':
                            format = item.media_type.split('/')[1]
                            assert format in ('jpeg', 'png', 'gif', 'webp'), f'Unsupported image format: {format}'
                            image: ImageBlockTypeDef = {'format': format, 'source': {'bytes': response.content}}
                            content.append({'image': image})
                        elif item.kind == 'document-url':
                            document_count += 1
                            name = f'Document {document_count}'
                            data = response.content
                            content.append({'document': {'name': name, 'format': item.format, 'source': {'bytes': data}}})
                    elif isinstance(item, AudioUrl):  # pragma: no cover
                        raise NotImplementedError('Audio is not supported yet.')
                    else:
                        assert_never(item)
            return [{'role': 'user', 'content': content}]
    
        @staticmethod
        def _map_tool_call(t: ToolCallPart) -> ContentBlockOutputTypeDef:
            return {
                'toolUse': {'toolUseId': _utils.guard_tool_call_id(t=t), 'name': t.tool_name, 'input': t.args_as_dict()}
            }
      
  
---|---  
  
####  model_name `property`

    
    
    model_name: [str](https://docs.python.org/3/library/stdtypes.html#str)
    

The model name.

####  system `property`

    
    
    system: [str](https://docs.python.org/3/library/stdtypes.html#str)
    

The system / model provider, ex: openai.

####  __init__

    
    
    __init__(
        model_name: BedrockModelName,
        *,
        provider: (
            [Literal](https://docs.python.org/3/library/typing.html#typing.Literal "typing.Literal")["bedrock"] | [Provider](../../providers/#pydantic_ai.providers.Provider "pydantic_ai.providers.Provider")[BaseClient]
        ) = "bedrock"
    )
    

Initialize a Bedrock model.

Parameters:

Name | Type | Description | Default  
---|---|---|---  
`model_name` |  `BedrockModelName` |  The name of the model to use. |  _required_  
`model_name` |  `BedrockModelName` |  The name of the Bedrock model to use. List of model names available [here](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html). |  _required_  
`provider` |  `[Literal](https://docs.python.org/3/library/typing.html#typing.Literal "typing.Literal")['bedrock'] | [Provider](../../providers/#pydantic_ai.providers.Provider "pydantic_ai.providers.Provider")[BaseClient]` |  The provider to use for authentication and API access. Can be either the string 'bedrock' or an instance of `Provider[BaseClient]`. If not provided, a new provider will be created using the other parameters. |  `'bedrock'`  
  
Source code in `pydantic_ai_slim/pydantic_ai/models/bedrock.py`

    
    
    141
    142
    143
    144
    145
    146
    147
    148
    149
    150
    151
    152
    153
    154
    155
    156
    157
    158
    159
    160
    161

|

    
    
    def __init__(
        self,
        model_name: BedrockModelName,
        *,
        provider: Literal['bedrock'] | Provider[BaseClient] = 'bedrock',
    ):
        """Initialize a Bedrock model.
    
        Args:
            model_name: The name of the model to use.
            model_name: The name of the Bedrock model to use. List of model names available
                [here](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html).
            provider: The provider to use for authentication and API access. Can be either the string
                'bedrock' or an instance of `Provider[BaseClient]`. If not provided, a new provider will be
                created using the other parameters.
        """
        self._model_name = model_name
    
        if isinstance(provider, str):
            provider = infer_provider(provider)
        self.client = cast('BedrockRuntimeClient', provider.client)
      
  
---|---  
  
###  BedrockStreamedResponse `dataclass`

Bases: `[StreamedResponse](../base/#pydantic_ai.models.StreamedResponse
"pydantic_ai.models.StreamedResponse")`

Implementation of `StreamedResponse` for Bedrock models.

Source code in `pydantic_ai_slim/pydantic_ai/models/bedrock.py`

    
    
    410
    411
    412
    413
    414
    415
    416
    417
    418
    419
    420
    421
    422
    423
    424
    425
    426
    427
    428
    429
    430
    431
    432
    433
    434
    435
    436
    437
    438
    439
    440
    441
    442
    443
    444
    445
    446
    447
    448
    449
    450
    451
    452
    453
    454
    455
    456
    457
    458
    459
    460
    461
    462
    463
    464
    465
    466
    467
    468
    469
    470
    471
    472
    473
    474
    475
    476
    477
    478
    479
    480
    481

|

    
    
    @dataclass
    class BedrockStreamedResponse(StreamedResponse):
        """Implementation of `StreamedResponse` for Bedrock models."""
    
        _model_name: BedrockModelName
        _event_stream: EventStream[ConverseStreamOutputTypeDef]
        _timestamp: datetime = field(default_factory=_utils.now_utc)
    
        async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:
            """Return an async iterator of [`ModelResponseStreamEvent`][pydantic_ai.messages.ModelResponseStreamEvent]s.
    
            This method should be implemented by subclasses to translate the vendor-specific stream of events into
            pydantic_ai-format events.
            """
            chunk: ConverseStreamOutputTypeDef
            tool_id: str | None = None
            async for chunk in _AsyncIteratorWrapper(self._event_stream):
                # TODO(Marcelo): Switch this to `match` when we drop Python 3.9 support.
                if 'messageStart' in chunk:
                    continue
                if 'messageStop' in chunk:
                    continue
                if 'metadata' in chunk:
                    if 'usage' in chunk['metadata']:
                        self._usage += self._map_usage(chunk['metadata'])
                    continue
                if 'contentBlockStart' in chunk:
                    index = chunk['contentBlockStart']['contentBlockIndex']
                    start = chunk['contentBlockStart']['start']
                    if 'toolUse' in start:
                        tool_use_start = start['toolUse']
                        tool_id = tool_use_start['toolUseId']
                        tool_name = tool_use_start['name']
                        maybe_event = self._parts_manager.handle_tool_call_delta(
                            vendor_part_id=index,
                            tool_name=tool_name,
                            args=None,
                            tool_call_id=tool_id,
                        )
                        if maybe_event:
                            yield maybe_event
                if 'contentBlockDelta' in chunk:
                    index = chunk['contentBlockDelta']['contentBlockIndex']
                    delta = chunk['contentBlockDelta']['delta']
                    if 'text' in delta:
                        yield self._parts_manager.handle_text_delta(vendor_part_id=index, content=delta['text'])
                    if 'toolUse' in delta:
                        tool_use = delta['toolUse']
                        maybe_event = self._parts_manager.handle_tool_call_delta(
                            vendor_part_id=index,
                            tool_name=tool_use.get('name'),
                            args=tool_use.get('input'),
                            tool_call_id=tool_id,
                        )
                        if maybe_event:
                            yield maybe_event
    
        @property
        def timestamp(self) -> datetime:
            return self._timestamp
    
        @property
        def model_name(self) -> str:
            """Get the model name of the response."""
            return self._model_name
    
        def _map_usage(self, metadata: ConverseStreamMetadataEventTypeDef) -> result.Usage:
            return result.Usage(
                request_tokens=metadata['usage']['inputTokens'],
                response_tokens=metadata['usage']['outputTokens'],
                total_tokens=metadata['usage']['totalTokens'],
            )
      
  
---|---  
  
####  model_name `property`

    
    
    model_name: [str](https://docs.python.org/3/library/stdtypes.html#str)
    

Get the model name of the response.

© Pydantic Services Inc. 2024 to present

