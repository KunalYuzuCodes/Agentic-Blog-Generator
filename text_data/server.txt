Skip to content

[ ![logo](../../img/logo-white.svg) ](../.. "PydanticAI")

PydanticAI

Server

Type to start searching

[ pydantic/pydantic-ai

  * v0.0.50
  * 8k
  * 687

](https://github.com/pydantic/pydantic-ai "Go to repository")

[ ![logo](../../img/logo-white.svg) ](../.. "PydanticAI") PydanticAI

[ pydantic/pydantic-ai

  * v0.0.50
  * 8k
  * 687

](https://github.com/pydantic/pydantic-ai "Go to repository")

  * [ Introduction  ](../..)
  * [ Installation  ](../../install/)
  * [ Getting Help  ](../../help/)
  * [ Contributing  ](../../contributing/)
  * [ Troubleshooting  ](../../troubleshooting/)
  * Documentation  Documentation 
    * [ Agents  ](../../agents/)
    * [ Models  ](../../models/)
    * [ Dependencies  ](../../dependencies/)
    * [ Function Tools  ](../../tools/)
    * [ Common Tools  ](../../common-tools/)
    * [ Results  ](../../results/)
    * [ Messages and chat history  ](../../message-history/)
    * [ Unit testing  ](../../testing/)
    * [ Debugging and Monitoring  ](../../logfire/)
    * [ Multi-agent Applications  ](../../multi-agent-applications/)
    * [ Graphs  ](../../graph/)
    * [ Evals  ](../../evals/)
    * [ Image, Audio & Document Input  ](../../input/)
    * [ MCP  ](../)

MCP

      * [ Client  ](../client/)
      * [ Server  ](./)
      * [ MCP Run Python  ](../run-python/)
    * [ Command Line Interface (CLI)  ](../../cli/)
  * [ Examples  ](../../examples/)

Examples

    * [ Pydantic Model  ](../../examples/pydantic-model/)
    * [ Weather agent  ](../../examples/weather-agent/)
    * [ Bank support  ](../../examples/bank-support/)
    * [ SQL Generation  ](../../examples/sql-gen/)
    * [ Flight booking  ](../../examples/flight-booking/)
    * [ RAG  ](../../examples/rag/)
    * [ Stream markdown  ](../../examples/stream-markdown/)
    * [ Stream whales  ](../../examples/stream-whales/)
    * [ Chat App with FastAPI  ](../../examples/chat-app/)
    * [ Question Graph  ](../../examples/question-graph/)
  * API Reference  API Reference 
    * [ pydantic_ai.agent  ](../../api/agent/)
    * [ pydantic_ai.tools  ](../../api/tools/)
    * [ pydantic_ai.common_tools  ](../../api/common_tools/)
    * [ pydantic_ai.result  ](../../api/result/)
    * [ pydantic_ai.messages  ](../../api/messages/)
    * [ pydantic_ai.exceptions  ](../../api/exceptions/)
    * [ pydantic_ai.settings  ](../../api/settings/)
    * [ pydantic_ai.usage  ](../../api/usage/)
    * [ pydantic_ai.mcp  ](../../api/mcp/)
    * [ pydantic_ai.format_as_xml  ](../../api/format_as_xml/)
    * [ pydantic_ai.models  ](../../api/models/base/)
    * [ pydantic_ai.models.openai  ](../../api/models/openai/)
    * [ pydantic_ai.models.anthropic  ](../../api/models/anthropic/)
    * [ pydantic_ai.models.bedrock  ](../../api/models/bedrock/)
    * [ pydantic_ai.models.cohere  ](../../api/models/cohere/)
    * [ pydantic_ai.models.gemini  ](../../api/models/gemini/)
    * [ pydantic_ai.models.groq  ](../../api/models/groq/)
    * [ pydantic_ai.models.instrumented  ](../../api/models/instrumented/)
    * [ pydantic_ai.models.mistral  ](../../api/models/mistral/)
    * [ pydantic_ai.models.test  ](../../api/models/test/)
    * [ pydantic_ai.models.function  ](../../api/models/function/)
    * [ pydantic_ai.models.fallback  ](../../api/models/fallback/)
    * [ pydantic_ai.models.wrapper  ](../../api/models/wrapper/)
    * [ pydantic_ai.providers  ](../../api/providers/)
    * [ pydantic_graph  ](../../api/pydantic_graph/graph/)
    * [ pydantic_graph.nodes  ](../../api/pydantic_graph/nodes/)
    * [ pydantic_graph.persistence  ](../../api/pydantic_graph/persistence/)
    * [ pydantic_graph.mermaid  ](../../api/pydantic_graph/mermaid/)
    * [ pydantic_graph.exceptions  ](../../api/pydantic_graph/exceptions/)
    * [ pydantic_evals.dataset  ](../../api/pydantic_evals/dataset/)
    * [ pydantic_evals.evaluators  ](../../api/pydantic_evals/evaluators/)
    * [ pydantic_evals.reporting  ](../../api/pydantic_evals/reporting/)
    * [ pydantic_evals.otel  ](../../api/pydantic_evals/otel/)
    * [ pydantic_evals.generation  ](../../api/pydantic_evals/generation/)

# Server

PydanticAI models can also be used within MCP Servers.

Here's a simple example of a [Python MCP
server](https://github.com/modelcontextprotocol/python-sdk) using PydanticAI
within a tool call:

mcp_server.py

    
    
    from mcp.server.fastmcp import FastMCP
    
    from pydantic_ai import Agent
    
    server = FastMCP('PydanticAI Server')
    server_agent = Agent(
        'anthropic:claude-3-5-haiku-latest', system_prompt='always reply in rhyme'
    )
    
    
    @server.tool()
    async def poet(theme: str) -> str:
        """Poem generator"""
        r = await server_agent.run(f'write a poem about {theme}')
        return r.data
    
    
    if __name__ == '__main__':
        server.run()
    

This server can be queried with any MCP client. Here is an example using a
direct Python client:

mcp_client.py

    
    
    import asyncio
    import os
    
    from mcp import ClientSession, StdioServerParameters
    from mcp.client.stdio import stdio_client
    
    
    async def client():
        server_params = StdioServerParameters(
            command='uv', args=['run', 'mcp_server.py', 'server'], env=os.environ
        )
        async with stdio_client(server_params) as (read, write):
            async with ClientSession(read, write) as session:
                await session.initialize()
                result = await session.call_tool('poet', {'theme': 'socks'})
                print(result.content[0].text)
                """
                Oh, socks, those garments soft and sweet,
                That nestle softly 'round our feet,
                From cotton, wool, or blended thread,
                They keep our toes from feeling dread.
                """
    
    
    if __name__ == '__main__':
        asyncio.run(client())
    

Note:
[sampling](https://modelcontextprotocol.io/docs/concepts/sampling#sampling),
whereby servers may request LLM completions from the client, is not yet
supported in PydanticAI.

Â© Pydantic Services Inc. 2024 to present

