{"directed": true, "multigraph": false, "graph": {}, "nodes": [{"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\npydantic_ai....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:0"}, {"type": "concept", "id": "pydanticai"}, {"type": "concept", "id": "logoimglogowhitesvg"}, {"type": "concept", "id": "pydanticpydanticai"}, {"type": "concept", "id": "v0050"}, {"type": "concept", "id": "httpsgithubcompydanticpydanticai"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:1"}, {"type": "concept", "id": "tools"}, {"type": "concept", "id": "contributing"}, {"type": "concept", "id": "troubleshooting"}, {"type": "concept", "id": "documentation"}, {"type": "concept", "id": "agents"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:2"}, {"type": "concept", "id": "input"}, {"type": "concept", "id": "image"}, {"type": "concept", "id": "audio"}, {"type": "concept", "id": "document"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:3"}, {"type": "concept", "id": "examples"}, {"type": "concept", "id": "client"}, {"type": "concept", "id": "mcpclient"}, {"type": "concept", "id": "server"}, {"type": "concept", "id": "mcpserver"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:4"}, {"type": "concept", "id": "agent"}, {"type": "concept", "id": "model"}, {"type": "concept", "id": "stream"}, {"type": "concept", "id": "reference"}, {"type": "concept", "id": "pydanticaiagent"}, {"type": "document", "content": "* end_strategy \n        * name \n        * model_settings \n        * result_type \n        * instrumen...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:5"}, {"type": "concept", "id": "endstrategy"}, {"type": "concept", "id": "usage"}, {"type": "concept", "id": "modelsettings"}, {"type": "concept", "id": "resulttype"}, {"type": "concept", "id": "instrument"}, {"type": "document", "content": "* new_messages_json \n        * usage \n      * EndStrategy \n      * RunResultDataT \n      * capture_r...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:6"}, {"type": "concept", "id": "newmessagesjson"}, {"type": "concept", "id": "runresultdatat"}, {"type": "concept", "id": "capturerunmessages"}, {"type": "document", "content": "* [ pydantic_ai.models.anthropic  ](../models/anthropic/)\n    * [ pydantic_ai.models.bedrock  ](../m...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:7"}, {"type": "concept", "id": "pydanticgraphnodes"}, {"type": "concept", "id": "pydanticaimodelsanthropic"}, {"type": "concept", "id": "modelsanthropic"}, {"type": "concept", "id": "pydanticaimodelsbedrock"}, {"type": "concept", "id": "modelsbedrock"}, {"type": "document", "content": "* [ pydantic_graph.nodes  ](../pydantic_graph/nodes/)\n    * [ pydantic_graph.persistence  ](../pydan...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:8"}, {"type": "concept", "id": "pydanticgraphpersistence"}, {"type": "concept", "id": "pydanticgraphmermaid"}, {"type": "concept", "id": "pydanticgraphexceptions"}, {"type": "concept", "id": "pydanticevalsdataset"}, {"type": "document", "content": "Table of contents...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:9"}, {"type": "concept", "id": "table"}, {"type": "concept", "id": "contents"}, {"type": "document", "content": "* agent \n  * Agent \n    * model \n    * __init__ \n    * end_strategy \n    * name \n    * model_setting...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:10"}, {"type": "document", "content": "# `pydantic_ai.agent`\n\n###  Agent `dataclass`\n\nBases: `[Generic](https://docs.python.org/3/library/t...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:11"}, {"type": "concept", "id": "resultdatatresultpydanticairesultresultdatat"}, {"type": "concept", "id": "generic"}, {"type": "document", "content": "Minimal usage example:\n\n    \n    \n    from pydantic_ai import Agent\n    \n    agent = Agent('openai:g...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:12"}, {"type": "concept", "id": "minimal"}, {"type": "concept", "id": "example"}, {"type": "document", "content": "75\n      76\n      77\n      78\n      79\n      80\n      81\n      82\n      83\n      84\n      85\n      8...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:13"}, {"type": "document", "content": "154\n     155\n     156\n     157\n     158\n     159\n     160\n     161\n     162\n     163\n     164\n     1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:14"}, {"type": "document", "content": "234\n     235\n     236\n     237\n     238\n     239\n     240\n     241\n     242\n     243\n     244\n     2...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:15"}, {"type": "document", "content": "314\n     315\n     316\n     317\n     318\n     319\n     320\n     321\n     322\n     323\n     324\n     3...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:16"}, {"type": "document", "content": "394\n     395\n     396\n     397\n     398\n     399\n     400\n     401\n     402\n     403\n     404\n     4...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:17"}, {"type": "document", "content": "474\n     475\n     476\n     477\n     478\n     479\n     480\n     481\n     482\n     483\n     484\n     4...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:18"}, {"type": "document", "content": "554\n     555\n     556\n     557\n     558\n     559\n     560\n     561\n     562\n     563\n     564\n     5...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:19"}, {"type": "document", "content": "634\n     635\n     636\n     637\n     638\n     639\n     640\n     641\n     642\n     643\n     644\n     6...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:20"}, {"type": "document", "content": "714\n     715\n     716\n     717\n     718\n     719\n     720\n     721\n     722\n     723\n     724\n     7...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:21"}, {"type": "document", "content": "794\n     795\n     796\n     797\n     798\n     799\n     800\n     801\n     802\n     803\n     804\n     8...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:22"}, {"type": "document", "content": "874\n     875\n     876\n     877\n     878\n     879\n     880\n     881\n     882\n     883\n     884\n     8...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:23"}, {"type": "document", "content": "954\n     955\n     956\n     957\n     958\n     959\n     960\n     961\n     962\n     963\n     964\n     9...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:24"}, {"type": "document", "content": "1034\n    1035\n    1036\n    1037\n    1038\n    1039\n    1040\n    1041\n    1042\n    1043\n    1044\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:25"}, {"type": "document", "content": "1114\n    1115\n    1116\n    1117\n    1118\n    1119\n    1120\n    1121\n    1122\n    1123\n    1124\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:26"}, {"type": "document", "content": "1194\n    1195\n    1196\n    1197\n    1198\n    1199\n    1200\n    1201\n    1202\n    1203\n    1204\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:27"}, {"type": "document", "content": "1274\n    1275\n    1276\n    1277\n    1278\n    1279\n    1280\n    1281\n    1282\n    1283\n    1284\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:28"}, {"type": "document", "content": "|...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:29"}, {"type": "document", "content": "@final\n    @dataclasses.dataclass(init=False)\n    class Agent(Generic[AgentDepsT, ResultDataT]):\n   ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:30"}, {"type": "concept", "id": "class"}, {"type": "concept", "id": "result"}, {"type": "document", "content": "print(result.data)\n        #> Paris\n        ```\n        \"\"\"\n    \n        model: models.Model | model...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:31"}, {"type": "concept", "id": "default"}, {"type": "document", "content": "Note, if `model_settings` is provided by `run`, `run_sync`, or `run_stream`, those settings will\n   ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:32"}, {"type": "concept", "id": "dataclassesfieldreprfalse"}, {"type": "concept", "id": "provided"}, {"type": "document", "content": "_result_tool_name: str = dataclasses.field(repr=False)\n        _result_tool_description: str | None ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:33"}, {"type": "concept", "id": "dictstr"}, {"type": "concept", "id": "resulttoolname"}, {"type": "concept", "id": "resulttooldescription"}, {"type": "concept", "id": "resultschema"}, {"type": "document", "content": "_mcp_servers: Sequence[MCPServer] = dataclasses.field(repr=False)\n        _default_retries: int = da...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:34"}, {"type": "concept", "id": "dataclassesfielddefaultnone"}, {"type": "concept", "id": "reprfalse"}, {"type": "concept", "id": "mcpservers"}, {"type": "document", "content": "model_settings: ModelSettings | None = None,\n            retries: int = 1,\n            result_tool_n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:35"}, {"type": "concept", "id": "retries"}, {"type": "document", "content": "model: The default model to use for this agent, if not provide,\n                    you must provide...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:36"}, {"type": "concept", "id": "provide"}, {"type": "concept", "id": "allow"}, {"type": "document", "content": "If you're not using deps, but want type checking to pass, you can set `deps=None` to satisfy Pyright...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:37"}, {"type": "concept", "id": "final"}, {"type": "document", "content": "result_retries: The maximum number of retries to allow for result validation, defaults to `retries`....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:38"}, {"type": "concept", "id": "register"}, {"type": "concept", "id": "resultretries"}, {"type": "document", "content": "which checks for the necessary environment variables. Set this to `false`\n                    to def...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:39"}, {"type": "concept", "id": "which"}, {"type": "concept", "id": "checks"}, {"type": "concept", "id": "necessary"}, {"type": "concept", "id": "environment"}, {"type": "document", "content": "If this isn't set, then the last value set by\n                    [`Agent.instrument_all()`][pydanti...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:40"}, {"type": "concept", "id": "selfmodel"}, {"type": "concept", "id": "value"}, {"type": "concept", "id": "agentinstrumentallpydanticaiagentinstrumentall"}, {"type": "document", "content": "self._deps_type = deps_type\n    \n            self._result_tool_name = result_tool_name\n            s...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:41"}, {"type": "concept", "id": "selfdepstype"}, {"type": "document", "content": "self._mcp_servers = mcp_servers\n            for tool in tools:\n                if isinstance(tool, T...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:42"}, {"type": "concept", "id": "selfmcpservers"}, {"type": "concept", "id": "isinstancetool"}, {"type": "document", "content": "message_history: list[_messages.ModelMessage] | None = None,\n            model: models.Model | model...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:43"}, {"type": "concept", "id": "messagehistory"}, {"type": "concept", "id": "listmessagesmodelmessage"}, {"type": "concept", "id": "modelsmodel"}, {"type": "concept", "id": "modelsknownmodelname"}, {"type": "document", "content": "model: models.Model | models.KnownModelName | str | None = None,\n            deps: AgentDepsT = None...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:44"}, {"type": "concept", "id": "agentdepst"}, {"type": "document", "content": "model_settings: ModelSettings | None = None,\n            usage_limits: _usage.UsageLimits | None = N...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:45"}, {"type": "concept", "id": "async"}, {"type": "concept", "id": "graph"}, {"type": "document", "content": "print(agent_run.data)\n                #> Paris\n            ```\n    \n            Args:\n              ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:46"}, {"type": "concept", "id": "optional"}, {"type": "concept", "id": "conversation"}, {"type": "document", "content": "usage_limits: Optional limits on model request count or token usage.\n                usage: Optional...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:47"}, {"type": "concept", "id": "infername"}, {"type": "concept", "id": "usagelimits"}, {"type": "concept", "id": "limits"}, {"type": "document", "content": "usage_limits=usage_limits,\n                usage=usage,\n            ) as agent_run:\n                ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:48"}, {"type": "concept", "id": "agentrun"}, {"type": "concept", "id": "agentrunresult"}, {"type": "concept", "id": "usagelimitsusagelimits"}, {"type": "document", "content": "model_settings: ModelSettings | None = None,\n            usage_limits: _usage.UsageLimits | None = N...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:49"}, {"type": "concept", "id": "nodes"}, {"type": "concept", "id": "executed"}, {"type": "document", "content": "stream of events coming from the execution of tools.\n    \n            The `AgentRun` also provides m...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:50"}, {"type": "concept", "id": "events"}, {"type": "document", "content": "print(nodes)\n                '''\n                [\n                    ModelRequestNode(\n           ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:51"}, {"type": "concept", "id": "printnodes"}, {"type": "concept", "id": "modelrequestnode"}, {"type": "concept", "id": "requestmodelrequest"}, {"type": "concept", "id": "parts"}, {"type": "concept", "id": "userpromptpart"}, {"type": "document", "content": "model_name='gpt-4o',\n                            timestamp=datetime.datetime(...),\n                 ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:52"}, {"type": "concept", "id": "validators"}, {"type": "concept", "id": "modelnamegpt4o"}, {"type": "concept", "id": "timestampdatetimedatetime"}, {"type": "document", "content": "message_history: History of the conversation so far.\n                model: Optional model to use fo...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:53"}, {"type": "document", "content": "\"\"\"\n            if infer_name and self.name is None:\n                self._infer_name(inspect.curren...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:54"}, {"type": "concept", "id": "build"}, {"type": "concept", "id": "state"}, {"type": "concept", "id": "usageusage"}, {"type": "document", "content": "retries=0,\n                run_step=0,\n            )\n    \n            # We consider it a user error ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:55"}, {"type": "concept", "id": "consider"}, {"type": "concept", "id": "though"}, {"type": "concept", "id": "retries0"}, {"type": "concept", "id": "runstep0"}, {"type": "document", "content": "for v in self._function_tools.values():\n                v.current_retry = 0\n    \n            model_s...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:56"}, {"type": "concept", "id": "agentname"}, {"type": "concept", "id": "tracer"}, {"type": "document", "content": "},\n            )\n    \n            graph_deps = _agent_graph.GraphAgentDeps[AgentDepsT, RunResultData...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:57"}, {"type": "concept", "id": "graphdeps"}, {"type": "concept", "id": "agentgraphgraphagentdepsagentdepst"}, {"type": "concept", "id": "userdepsdeps"}, {"type": "concept", "id": "promptuserprompt"}, {"type": "document", "content": "run_span=run_span,\n                tracer=tracer,\n            )\n            start_node = _agent_grap...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:58"}, {"type": "concept", "id": "startnode"}, {"type": "concept", "id": "runspanrunspan"}, {"type": "concept", "id": "tracertracer"}, {"type": "concept", "id": "agentgraphuserpromptnodeagentdepst"}, {"type": "concept", "id": "userpromptuserprompt"}, {"type": "document", "content": "@overload\n        def run_sync(\n            self,\n            user_prompt: str | Sequence[_messages....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:59"}, {"type": "concept", "id": "overload"}, {"type": "concept", "id": "runsync"}, {"type": "concept", "id": "userprompt"}, {"type": "concept", "id": "sequencemessagesusercontent"}, {"type": "document", "content": "*,\n            result_type: type[RunResultDataT] | None,\n            message_history: list[_messages...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:60"}, {"type": "concept", "id": "typerunresultdatat"}, {"type": "document", "content": "message_history: list[_messages.ModelMessage] | None = None,\n            model: models.Model | model...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:61"}, {"type": "concept", "id": "method"}, {"type": "document", "content": "Example:\n            ```python\n            from pydantic_ai import Agent\n    \n            agent = Ag...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:62"}, {"type": "document", "content": "message_history: History of the conversation so far.\n                model: Optional model to use fo...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:63"}, {"type": "document", "content": "\"\"\"\n            if infer_name and self.name is None:\n                self._infer_name(inspect.curren...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:64"}, {"type": "concept", "id": "selfname"}, {"type": "concept", "id": "selfinfernameinspectcurrentframe"}, {"type": "concept", "id": "return"}, {"type": "document", "content": "*,\n            result_type: None = None,\n            message_history: list[_messages.ModelMessage] |...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:65"}, {"type": "document", "content": "*,\n            result_type: type[RunResultDataT],\n            message_history: list[_messages.ModelM...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:66"}, {"type": "document", "content": "*,\n            result_type: type[RunResultDataT] | None = None,\n            message_history: list[_m...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:67"}, {"type": "document", "content": "agent = Agent('openai:gpt-4o')\n    \n            async def main():\n                async with agent.r...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:68"}, {"type": "document", "content": "message_history: History of the conversation so far.\n                model: Optional model to use fo...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:69"}, {"type": "document", "content": "#   Before that, though, we should add an event for when we reach the final result of the stream.\n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:70"}, {"type": "concept", "id": "frame"}, {"type": "concept", "id": "before"}, {"type": "concept", "id": "should"}, {"type": "concept", "id": "event"}, {"type": "document", "content": "infer_name=False,\n            ) as agent_run:\n                first_node = agent_run.next_node  # st...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:71"}, {"type": "concept", "id": "firstnode"}, {"type": "concept", "id": "first"}, {"type": "concept", "id": "infernamefalse"}, {"type": "document", "content": ") -> FinalResult[models.StreamedResponse] | None:\n                                result_schema = gr...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:72"}, {"type": "concept", "id": "isinstancenewpart"}, {"type": "concept", "id": "finalresultmodelsstreamedresponse"}, {"type": "concept", "id": "graphctxdepsresultschema"}, {"type": "document", "content": "for call, _ in result_schema.find_tool([new_part]):\n                                                ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:73"}, {"type": "concept", "id": "finalresultdetails"}, {"type": "concept", "id": "yielded"}, {"type": "concept", "id": "resultschemafindtoolnewpart"}, {"type": "concept", "id": "finalresults"}, {"type": "document", "content": "async def on_complete() -> None:\n                                    \"\"\"Called when the stream has c...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:74"}, {"type": "concept", "id": "oncomplete"}, {"type": "concept", "id": "called"}, {"type": "concept", "id": "completed"}, {"type": "document", "content": "]\n    \n                                    parts: list[_messages.ModelRequestPart] = []\n            ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:75"}, {"type": "concept", "id": "listmessagesmodelrequestpart"}, {"type": "concept", "id": "agentgraphprocessfunctiontools"}, {"type": "document", "content": "#   Maybe we should move the incrementing of the retry count to where we actually make a request?\n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:76"}, {"type": "concept", "id": "maybe"}, {"type": "concept", "id": "incrementing"}, {"type": "concept", "id": "retry"}, {"type": "document", "content": "streamed_response,\n                                    graph_ctx.deps.result_schema,\n               ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:77"}, {"type": "concept", "id": "nextnode"}, {"type": "concept", "id": "streamedresponse"}, {"type": "concept", "id": "agentgraphbuildruncontextgraphctx"}, {"type": "concept", "id": "graphctxdepsresultvalidators"}, {"type": "document", "content": "if not yielded:\n                raise exceptions.AgentRunError('Agent run finished without producing...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:78"}, {"type": "concept", "id": "utilsunset"}, {"type": "concept", "id": "dependencies"}, {"type": "concept", "id": "override"}, {"type": "document", "content": "model: The model to use instead of the model passed to the agent run.\n            \"\"\"\n            if...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:79"}, {"type": "concept", "id": "overridedepsbefore"}, {"type": "concept", "id": "selfoverridedeps"}, {"type": "concept", "id": "overridemodelbefore"}, {"type": "document", "content": "self._override_deps = override_deps_before\n                if _utils.is_set(override_model_before):\n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:80"}, {"type": "concept", "id": "callableruncontextagentdepst"}, {"type": "concept", "id": "awaitablestr"}, {"type": "concept", "id": "callable"}, {"type": "concept", "id": "systemprompt"}, {"type": "document", "content": "@overload\n        def system_prompt(\n            self, /, *, dynamic: bool = False\n        ) -> Call...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:81"}, {"type": "concept", "id": "systempromptsystempromptfuncagentdepst"}, {"type": "concept", "id": "dynamic"}, {"type": "concept", "id": "false"}, {"type": "concept", "id": "callablesystempromptsystempromptfuncagentdepst"}, {"type": "document", "content": "Can decorate a sync or async functions.\n    \n            The decorator can be used either bare (`age...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:82"}, {"type": "concept", "id": "function"}, {"type": "concept", "id": "decorate"}, {"type": "concept", "id": "decorator"}, {"type": "concept", "id": "agentsystemprompt"}, {"type": "document", "content": "Example:\n            ```python\n            from pydantic_ai import Agent, RunContext\n    \n          ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:83"}, {"type": "concept", "id": "python"}, {"type": "document", "content": "self._system_prompt_functions.append(runner)\n                    if dynamic:\n                       ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:84"}, {"type": "concept", "id": "resultdatat"}, {"type": "concept", "id": "resultvalidator"}, {"type": "document", "content": "@overload\n        def result_validator(\n            self, func: Callable[[RunContext[AgentDepsT], Re...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:85"}, {"type": "concept", "id": "awaitableresultdatat"}, {"type": "concept", "id": "callableresultdatat"}, {"type": "document", "content": ") -> _result.ResultValidatorFunc[AgentDepsT, ResultDataT]:\n            \"\"\"Decorator to register a re...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:86"}, {"type": "concept", "id": "resultresultvalidatorfuncagentdepst"}, {"type": "document", "content": "if 'wrong' in data:\n                    raise ModelRetry('wrong response')\n                return da...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:87"}, {"type": "concept", "id": "raise"}, {"type": "concept", "id": "modelretrywrong"}, {"type": "concept", "id": "response"}, {"type": "concept", "id": "toolfunccontextagentdepst"}, {"type": "document", "content": "@overload\n        def tool(\n            self,\n            /,\n            *,\n            name: str | ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:88"}, {"type": "concept", "id": "toolparams"}, {"type": "concept", "id": "docstringformat"}, {"type": "document", "content": "name: str | None = None,\n            retries: int | None = None,\n            prepare: ToolPrepareFun...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:89"}, {"type": "concept", "id": "description"}, {"type": "concept", "id": "prepare"}, {"type": "concept", "id": "toolpreparefuncagentdepst"}, {"type": "document", "content": "[learn more](../tools.md#function-tools-and-schema).\n    \n            We can't add overloads for eve...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:90"}, {"type": "concept", "id": "signature"}, {"type": "concept", "id": "agenttool"}, {"type": "concept", "id": "ctxdeps"}, {"type": "document", "content": "print(result.data)\n            #> {\"foobar\":1,\"spam\":1.0}\n            ```\n    \n            Args:\n   ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:91"}, {"type": "concept", "id": "defaults"}, {"type": "concept", "id": "printresultdata"}, {"type": "document", "content": "docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFo...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:92"}, {"type": "concept", "id": "format"}, {"type": "concept", "id": "docstring"}, {"type": "document", "content": "# noinspection PyTypeChecker\n                    self._register_function(\n                        fu...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:93"}, {"type": "concept", "id": "noinspection"}, {"type": "concept", "id": "pytypechecker"}, {"type": "concept", "id": "selfregisterfunction"}, {"type": "document", "content": ")\n                return func\n    \n        @overload\n        def tool_plain(self, func: ToolFuncPlai...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:94"}, {"type": "concept", "id": "toolfuncplaintoolparams"}, {"type": "concept", "id": "toolplain"}, {"type": "document", "content": "self,\n            func: ToolFuncPlain[ToolParams] | None = None,\n            /,\n            *,\n     ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:95"}, {"type": "document", "content": "[learn more](../tools.md#function-tools-and-schema).\n    \n            We can't add overloads for eve...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:96"}, {"type": "concept", "id": "learn"}, {"type": "document", "content": "#> {\"foobar\":123,\"spam\":3.14}\n            ```\n    \n            Args:\n                func: The tool ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:97"}, {"type": "concept", "id": "foobar123spam314"}, {"type": "document", "content": "docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFo...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:98"}, {"type": "document", "content": "func_,\n                        False,\n                        name,\n                        retries,...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:99"}, {"type": "document", "content": "takes_ctx: bool,\n            name: str | None,\n            retries: int | None,\n            prepare:...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:100"}, {"type": "concept", "id": "takesctx"}, {"type": "document", "content": "require_parameter_descriptions=require_parameter_descriptions,\n                schema_generator=sche...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:101"}, {"type": "concept", "id": "toolname"}, {"type": "concept", "id": "requireparameterdescriptionsrequireparameterdescriptions"}, {"type": "concept", "id": "schemageneratorschemagenerator"}, {"type": "concept", "id": "selfregistertooltool"}, {"type": "concept", "id": "registertoolself"}, {"type": "document", "content": "if self._result_schema and tool.name in self._result_schema.tools:\n                raise exceptions....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:102"}, {"type": "concept", "id": "selfresultschema"}, {"type": "document", "content": "if some_model := self._override_model:\n                # we don't want `override()` to cover up erro...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:103"}, {"type": "concept", "id": "somemodel"}, {"type": "concept", "id": "selfoverridemodel"}, {"type": "document", "content": "model_ = self.model = models.infer_model(self.model)\n            else:\n                raise excepti...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:104"}, {"type": "concept", "id": "modelsinfermodelselfmodel"}, {"type": "document", "content": "\"\"\"Get deps for a run.\n    \n            If we've overridden deps via `_override_deps`, use that, oth...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:105"}, {"type": "concept", "id": "functionframe"}, {"type": "concept", "id": "overridden"}, {"type": "concept", "id": "overridedeps"}, {"type": "concept", "id": "otherwise"}, {"type": "document", "content": "if function_frame is not None:  # pragma: no branch\n                if parent_frame := function_fram...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:106"}, {"type": "concept", "id": "pragma"}, {"type": "concept", "id": "branch"}, {"type": "concept", "id": "globals"}, {"type": "document", "content": "@property\n        @deprecated(\n            'The `last_run_messages` attribute has been removed, use ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:107"}, {"type": "concept", "id": "lastrunmessages"}, {"type": "concept", "id": "attribute"}, {"type": "concept", "id": "removed"}, {"type": "document", "content": "self, result_type: type[RunResultDataT] | None\n        ) -> _result.ResultSchema[RunResultDataT] | N...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:108"}, {"type": "concept", "id": "resultresultschemarunresultdatat"}, {"type": "concept", "id": "selfresultvalidators"}, {"type": "document", "content": ") -> TypeGuard[_agent_graph.ModelRequestNode[T, S]]:\n            \"\"\"Check if the node is a `ModelReq...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:109"}, {"type": "concept", "id": "narrowing"}, {"type": "concept", "id": "check"}, {"type": "concept", "id": "preserves"}, {"type": "document", "content": "\"\"\"\n            return isinstance(node, _agent_graph.CallToolsNode)\n    \n        @staticmethod\n     ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:110"}, {"type": "concept", "id": "isinstancenode"}, {"type": "concept", "id": "staticmethod"}, {"type": "concept", "id": "agentgraphagentnodet"}, {"type": "concept", "id": "endresultfinalresults"}, {"type": "document", "content": ") -> TypeGuard[End[result.FinalResult[S]]]:\n            \"\"\"Check if the node is a `End`, narrowing t...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:111"}, {"type": "concept", "id": "typeguardendresultfinalresults"}, {"type": "document", "content": "await exit_stack.enter_async_context(mcp_server)\n                yield\n            finally:\n        ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:112"}, {"type": "concept", "id": "await"}, {"type": "concept", "id": "exitstackenterasynccontextmcpserver"}, {"type": "concept", "id": "yield"}, {"type": "concept", "id": "finally"}, {"type": "concept", "id": "exitstackaclose"}, {"type": "document", "content": "model: [Model](../models/base/#pydantic_ai.models.Model \"pydantic_ai.models.Model\") | [KnownModelNam...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:113"}, {"type": "concept", "id": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "concept", "id": "pydanticaimodelsmodel"}, {"type": "concept", "id": "knownmodelnamemodelsbasepydanticaimodelsknownmodelname"}, {"type": "concept", "id": "pydanticaimodelsknownmodelname"}, {"type": "document", "content": "__init__(\n        model: [Model](../models/base/#pydantic_ai.models.Model \"pydantic_ai.models.Model\"...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:114"}, {"type": "concept", "id": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "document", "content": "system_prompt: [str](https://docs.python.org/3/library/stdtypes.html#str) | [Sequence](https://docs....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:115"}, {"type": "concept", "id": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "concept", "id": "collectionsabcsequencestrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "concept", "id": "depstype"}, {"type": "document", "content": "result_tool_name: [str](https://docs.python.org/3/library/stdtypes.html#str) = \"final_result\",\n     ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:116"}, {"type": "concept", "id": "pydanticaitoolsagentdepst"}, {"type": "concept", "id": "finalresult"}, {"type": "document", "content": "] = (),\n        mcp_servers: [Sequence](https://docs.python.org/3/library/collections.abc.html#colle...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:117"}, {"type": "concept", "id": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "concept", "id": "collectionsabcsequencemcpservermcppydanticaimcpmcpserver"}, {"type": "document", "content": "Create an agent.\n\nParameters:...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:118"}, {"type": "concept", "id": "create"}, {"type": "concept", "id": "parameters"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`model` |  `[Model](../models/base/#pydantic...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:119"}, {"type": "document", "content": "`result_type` |  `[type](https://docs.python.org/3/library/functions.html#type)[[ResultDataT](../res...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:120"}, {"type": "concept", "id": "system"}, {"type": "concept", "id": "prompts"}, {"type": "document", "content": "`deps_type` |  `[type](https://docs.python.org/3/library/functions.html#type)[[AgentDepsT](../tools/...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:121"}, {"type": "concept", "id": "checking"}, {"type": "concept", "id": "typehttpsdocspythonorg3libraryfunctionshtmltypeagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "document", "content": "`model_settings` |  `[ModelSettings](../settings/#pydantic_ai.settings.ModelSettings \"pydantic_ai.se...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:122"}, {"type": "document", "content": "`result_retries` |  `[int](https://docs.python.org/3/library/functions.html#int) | None` |  The maxi...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:123"}, {"type": "document", "content": "`mcp_servers` |  `[Sequence](https://docs.python.org/3/library/collections.abc.html#collections.abc....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:124"}, {"type": "document", "content": "`defer_model_check` |  `[bool](https://docs.python.org/3/library/functions.html#bool)` |  by default...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:125"}, {"type": "concept", "id": "defermodelcheck"}, {"type": "document", "content": "`instrument` |  `[InstrumentationSettings](../models/instrumented/#pydantic_ai.models.instrumented.I...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:126"}, {"type": "concept", "id": "instrumentationsettingsmodelsinstrumentedpydanticaimodelsinstrumentedinstrumentationsettings"}, {"type": "concept", "id": "pydanticaimodelsinstrumentedinstrumentationsettings"}, {"type": "document", "content": "145\n    146\n    147\n    148\n    149\n    150\n    151\n    152\n    153\n    154\n    155\n    156\n    157\n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:127"}, {"type": "document", "content": "def __init__(\n        self,\n        model: models.Model | models.KnownModelName | str | None = None,...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:128"}, {"type": "document", "content": "end_strategy: EndStrategy = 'early',\n        instrument: InstrumentationSettings | bool | None = Non...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:129"}, {"type": "document", "content": "parameterize the agent, and therefore get the best out of static type checking.\n                If y...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:130"}, {"type": "document", "content": "result_tool_description: The description of the final result tool.\n            result_retries: The m...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:131"}, {"type": "document", "content": "it's evaluated to create a [`Model`][pydantic_ai.models.Model] instance immediately,\n               ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:132"}, {"type": "concept", "id": "evaluated"}, {"type": "concept", "id": "modelpydanticaimodelsmodel"}, {"type": "document", "content": "which will use Logfire if it's configured.\n                Set to an instance of [`InstrumentationSe...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:133"}, {"type": "concept", "id": "logfire"}, {"type": "concept", "id": "configured"}, {"type": "document", "content": "self.result_type = result_type\n        self.instrument = instrument\n    \n        self._deps_type = d...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:134"}, {"type": "concept", "id": "selfresulttype"}, {"type": "concept", "id": "selfinstrument"}, {"type": "document", "content": "self._function_tools = {}\n    \n        self._default_retries = retries\n        self._max_result_retr...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:135"}, {"type": "concept", "id": "selffunctiontools"}, {"type": "concept", "id": "selfdefaultretries"}, {"type": "concept", "id": "selfmaxresultretries"}, {"type": "document", "content": "end_strategy: EndStrategy = end_strategy\n    \n\nStrategy for handling tool calls when a final result ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:136"}, {"type": "concept", "id": "instanceattribute"}, {"type": "concept", "id": "strategy"}, {"type": "document", "content": "Optional model request settings to use for this agents's runs, by default.\n\nNote, if `model_settings...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:137"}, {"type": "concept", "id": "settings"}, {"type": "document", "content": "####  instrument `instance-attribute`\n\n    \n    \n    instrument: [InstrumentationSettings](../models...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:138"}, {"type": "concept", "id": "instrumentall"}, {"type": "document", "content": "Set the instrumentation options for all agents where `instrument` is not set.\n\nSource code in `pydan...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:139"}, {"type": "concept", "id": "instrumentation"}, {"type": "concept", "id": "options"}, {"type": "concept", "id": "where"}, {"type": "document", "content": "run(\n        user_prompt: [str](https://docs.python.org/3/library/stdtypes.html#str) | [Sequence](ht...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:140"}, {"type": "concept", "id": "collectionsabcsequenceusercontent"}, {"type": "document", "content": "deps: [AgentDepsT](../tools/#pydantic_ai.tools.AgentDepsT \"pydantic_ai.tools.AgentDepsT\") = None,\n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:141"}, {"type": "concept", "id": "agentdepsttoolspydanticaitoolsagentdepst"}, {"type": "concept", "id": "modelsettingssettingspydanticaisettingsmodelsettings"}, {"type": "concept", "id": "pydanticaisettingsmodelsettings"}, {"type": "document", "content": "run(\n        user_prompt: [str](https://docs.python.org/3/library/stdtypes.html#str) | [Sequence](ht...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:142"}, {"type": "document", "content": "model: [Model](../models/base/#pydantic_ai.models.Model \"pydantic_ai.models.Model\") | [KnownModelNam...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:143"}, {"type": "document", "content": "infer_name: [bool](https://docs.python.org/3/library/functions.html#bool) = True\n    ) -> AgentRunRe...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:144"}, {"type": "concept", "id": "agentrunresultrunresultdatat"}, {"type": "document", "content": "model: [Model](../models/base/#pydantic_ai.models.Model \"pydantic_ai.models.Model\") | [KnownModelNam...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:145"}, {"type": "document", "content": "infer_name: [bool](https://docs.python.org/3/library/functions.html#bool) = True\n    ) -> AgentRunRe...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:146"}, {"type": "concept", "id": "agentrunresultanyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "concept", "id": "typingany"}, {"type": "document", "content": "Run the agent with a user prompt in async mode.\n\nThis method builds an internal agent graph (using s...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:147"}, {"type": "concept", "id": "prompt"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`user_prompt` |  `[str](https://docs.python....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:148"}, {"type": "document", "content": "`message_history` |  `[list](https://docs.python.org/3/library/stdtypes.html#list)[[ModelMessage](.....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:149"}, {"type": "concept", "id": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "concept", "id": "pydanticaimessagesmodelmessage"}, {"type": "document", "content": "`model_settings` |  `[ModelSettings](../settings/#pydantic_ai.settings.ModelSettings \"pydantic_ai.se...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:150"}, {"type": "concept", "id": "request"}, {"type": "document", "content": "Type | Description  \n---|---  \n`AgentRunResult[[Any](https://docs.python.org/3/library/typing.html#t...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:151"}, {"type": "concept", "id": "source"}, {"type": "document", "content": "async def run(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent],\n        *,\n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:152"}, {"type": "document", "content": "runs the graph to completion. The result of the run is returned.\n    \n        Example:\n        ```py...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:153"}, {"type": "document", "content": "message_history: History of the conversation so far.\n            model: Optional model to use for th...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:154"}, {"type": "document", "content": "self._infer_name(inspect.currentframe())\n        async with self.iter(\n            user_prompt=user_...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:155"}, {"type": "concept", "id": "selfiter"}, {"type": "document", "content": "iter(\n        user_prompt: [str](https://docs.python.org/3/library/stdtypes.html#str) | [Sequence](h...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:156"}, {"type": "document", "content": "model: [Model](../models/base/#pydantic_ai.models.Model \"pydantic_ai.models.Model\") | [KnownModelNam...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:157"}, {"type": "document", "content": "infer_name: [bool](https://docs.python.org/3/library/functions.html#bool) = True\n    ) -> [AsyncIter...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:158"}, {"type": "concept", "id": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "concept", "id": "collectionsabcasynciteratoragentrunagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "document", "content": "A contextmanager which can be used to iterate over the agent graph's nodes as\nthey are executed.\n\nTh...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.392189", "id": "text_data\\agent.txt:159"}, {"type": "document", "content": "from pydantic_ai import Agent\n    \n    agent = Agent('openai:gpt-4o')\n    \n    async def main():\n   ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:160"}, {"type": "concept", "id": "capital"}, {"type": "concept", "id": "france"}, {"type": "document", "content": ")\n            ),\n            CallToolsNode(\n                model_response=ModelResponse(\n          ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:161"}, {"type": "concept", "id": "calltoolsnode"}, {"type": "concept", "id": "modelresponsemodelresponse"}, {"type": "concept", "id": "partstextpartcontentparis"}, {"type": "concept", "id": "partkindtext"}, {"type": "document", "content": "Parameters:...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:162"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`user_prompt` |  `[str](https://docs.python....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:163"}, {"type": "document", "content": "`message_history` |  `[list](https://docs.python.org/3/library/stdtypes.html#list)[[ModelMessage](.....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:164"}, {"type": "document", "content": "`model_settings` |  `[ModelSettings](../settings/#pydantic_ai.settings.ModelSettings \"pydantic_ai.se...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:165"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[AsyncIterator](https://docs.python.org/3/library/collections.abc.ht...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:166"}, {"type": "concept", "id": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "document", "content": "335\n    336\n    337\n    338\n    339\n    340\n    341\n    342\n    343\n    344\n    345\n    346\n    347\n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:167"}, {"type": "document", "content": "423\n    424\n    425\n    426\n    427\n    428\n    429\n    430\n    431\n    432\n    433\n    434\n    435\n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:168"}, {"type": "document", "content": "|...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:169"}, {"type": "document", "content": "@asynccontextmanager\n    async def iter(\n        self,\n        user_prompt: str | Sequence[_messages...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:170"}, {"type": "concept", "id": "asynccontextmanager"}, {"type": "document", "content": "This method builds an internal agent graph (using system prompts, tools and result schemas) and then...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:171"}, {"type": "document", "content": "agent = Agent('openai:gpt-4o')\n    \n        async def main():\n            nodes = []\n            asy...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:172"}, {"type": "document", "content": "kind='request',\n                    )\n                ),\n                CallToolsNode(\n            ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:173"}, {"type": "concept", "id": "kindrequest"}, {"type": "document", "content": "user_prompt: User input to start/continue the conversation.\n            result_type: Custom result t...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:174"}, {"type": "document", "content": "usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.\n   ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:175"}, {"type": "document", "content": "# Build the initial state\n        state = _agent_graph.GraphAgentState(\n            message_history=...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:176"}, {"type": "document", "content": "# TODO: Instead of this, copy the function tools to ensure they don't share current_retry state betw...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:177"}, {"type": "concept", "id": "instead"}, {"type": "document", "content": "'agent_name': agent_name,\n                'logfire.msg': f'{agent_name} run',\n            },\n       ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:178"}, {"type": "concept", "id": "logfiremsg"}, {"type": "concept", "id": "fagentname"}, {"type": "document", "content": "mcp_servers=self._mcp_servers,\n            run_span=run_span,\n            tracer=tracer,\n        )\n ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:179"}, {"type": "concept", "id": "mcpserversselfmcpservers"}, {"type": "document", "content": "run_sync(\n        user_prompt: [str](https://docs.python.org/3/library/stdtypes.html#str) | [Sequenc...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:180"}, {"type": "document", "content": "deps: [AgentDepsT](../tools/#pydantic_ai.tools.AgentDepsT \"pydantic_ai.tools.AgentDepsT\") = None,\n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:181"}, {"type": "document", "content": "run_sync(\n        user_prompt: [str](https://docs.python.org/3/library/stdtypes.html#str) | [Sequenc...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:182"}, {"type": "document", "content": "model: [Model](../models/base/#pydantic_ai.models.Model \"pydantic_ai.models.Model\") | [KnownModelNam...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:183"}, {"type": "document", "content": "infer_name: [bool](https://docs.python.org/3/library/functions.html#bool) = True\n    ) -> AgentRunRe...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:184"}, {"type": "document", "content": "model: [Model](../models/base/#pydantic_ai.models.Model \"pydantic_ai.models.Model\") | [KnownModelNam...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.408141", "id": "text_data\\agent.txt:185"}, {"type": "document", "content": "infer_name: [bool](https://docs.python.org/3/library/functions.html#bool) = True\n    ) -> AgentRunRe...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:186"}, {"type": "document", "content": "Synchronously run the agent with a user prompt.\n\nThis is a convenience method that wraps `self.run` ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:187"}, {"type": "concept", "id": "synchronously"}, {"type": "concept", "id": "convenience"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`user_prompt` |  `[str](https://docs.python....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:188"}, {"type": "document", "content": "`message_history` |  `[list](https://docs.python.org/3/library/stdtypes.html#list)[[ModelMessage](.....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:189"}, {"type": "document", "content": "`model_settings` |  `[ModelSettings](../settings/#pydantic_ai.settings.ModelSettings \"pydantic_ai.se...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:190"}, {"type": "document", "content": "Type | Description  \n---|---  \n`AgentRunResult[[Any](https://docs.python.org/3/library/typing.html#t...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:191"}, {"type": "document", "content": "def run_sync(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent],\n        *,\n ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:192"}, {"type": "document", "content": "You therefore can't use this method inside async code or if there's an active event loop.\n    \n     ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:193"}, {"type": "document", "content": "message_history: History of the conversation so far.\n            model: Optional model to use for th...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:194"}, {"type": "document", "content": "self._infer_name(inspect.currentframe())\n        return get_event_loop().run_until_complete(\n       ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:195"}, {"type": "concept", "id": "geteventlooprununtilcomplete"}, {"type": "concept", "id": "selfrun"}, {"type": "document", "content": "run_stream(\n        user_prompt: [str](https://docs.python.org/3/library/stdtypes.html#str) | [Seque...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:196"}, {"type": "concept", "id": "runstream"}, {"type": "document", "content": "deps: [AgentDepsT](../tools/#pydantic_ai.tools.AgentDepsT \"pydantic_ai.tools.AgentDepsT\") = None,\n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:197"}, {"type": "document", "content": "[StreamedRunResult](../result/#pydantic_ai.result.StreamedRunResult \"pydantic_ai.result.StreamedRunR...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:198"}, {"type": "concept", "id": "streamedrunresultresultpydanticairesultstreamedrunresult"}, {"type": "concept", "id": "pydanticairesultstreamedrunresultagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "concept", "id": "pydanticairesultresultdatat"}, {"type": "document", "content": "message_history: [list](https://docs.python.org/3/library/stdtypes.html#list)[[ModelMessage](../mess...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:199"}, {"type": "document", "content": "usage_limits: [UsageLimits](../usage/#pydantic_ai.usage.UsageLimits \"pydantic_ai.usage.UsageLimits\")...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:200"}, {"type": "concept", "id": "usagelimitsusagepydanticaiusageusagelimits"}, {"type": "concept", "id": "pydanticaiusageusagelimits"}, {"type": "concept", "id": "usageusagepydanticaiusageusage"}, {"type": "document", "content": "]\n    \n    \n    \n    run_stream(\n        user_prompt: [str](https://docs.python.org/3/library/stdtyp...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:201"}, {"type": "document", "content": "model: [Model](../models/base/#pydantic_ai.models.Model \"pydantic_ai.models.Model\") | [KnownModelNam...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:202"}, {"type": "document", "content": "infer_name: [bool](https://docs.python.org/3/library/functions.html#bool) = True\n    ) -> [AsyncIter...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:203"}, {"type": "concept", "id": "collectionsabcasynciteratorstreamedrunresultresultpydanticairesultstreamedrunresult"}, {"type": "document", "content": "Run the agent with a user prompt in async mode, returning a streamed response.\n\nExample:\n\n    \n    \n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:204"}, {"type": "concept", "id": "returning"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`user_prompt` |  `[str](https://docs.python....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:205"}, {"type": "document", "content": "`message_history` |  `[list](https://docs.python.org/3/library/stdtypes.html#list)[[ModelMessage](.....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:206"}, {"type": "document", "content": "`model_settings` |  `[ModelSettings](../settings/#pydantic_ai.settings.ModelSettings \"pydantic_ai.se...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:207"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[AsyncIterator](https://docs.python.org/3/library/collections.abc.ht...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:208"}, {"type": "document", "content": "616\n    617\n    618\n    619\n    620\n    621\n    622\n    623\n    624\n    625\n    626\n    627\n    628\n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:209"}, {"type": "document", "content": "704\n    705\n    706\n    707\n    708\n    709\n    710\n    711\n    712\n    713\n    714\n    715\n    716\n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.409312", "id": "text_data\\agent.txt:210"}, {"type": "document", "content": "|...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:211"}, {"type": "document", "content": "@asynccontextmanager\n    async def run_stream(  # noqa C901\n        self,\n        user_prompt: str |...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:212"}, {"type": "document", "content": "Example:\n        ```python\n        from pydantic_ai import Agent\n    \n        agent = Agent('openai:...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:213"}, {"type": "document", "content": "message_history: History of the conversation so far.\n            model: Optional model to use for th...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:214"}, {"type": "document", "content": "# TODO: We need to deprecate this now that we have the `iter` method.\n        #   Before that, thoug...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:215"}, {"type": "concept", "id": "deprecate"}, {"type": "document", "content": "usage=usage,\n            infer_name=False,\n        ) as agent_run:\n            first_node = agent_ru...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:216"}, {"type": "document", "content": "result_schema = graph_ctx.deps.result_schema\n                            async for maybe_part_event ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:217"}, {"type": "concept", "id": "maybepartevent"}, {"type": "document", "content": "return FinalResult(s, call.tool_name, call.tool_call_id)\n                            return None\n   ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:218"}, {"type": "concept", "id": "messages"}, {"type": "document", "content": "by `StreamedRunResult._marked_completed`.\n                                \"\"\"\n                      ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:219"}, {"type": "concept", "id": "toolcalls"}, {"type": "concept", "id": "streamedrunresultmarkedcompleted"}, {"type": "concept", "id": "lastmessage"}, {"type": "concept", "id": "messages1"}, {"type": "concept", "id": "assert"}, {"type": "document", "content": "final_result_details.tool_name,\n                                    final_result_details.tool_call_i...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:220"}, {"type": "concept", "id": "count"}, {"type": "concept", "id": "finalresultdetailstoolname"}, {"type": "document", "content": "if parts:\n                                    messages.append(_messages.ModelRequest(parts))\n    \n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:221"}, {"type": "concept", "id": "messagesappendmessagesmodelrequestparts"}, {"type": "concept", "id": "streamedrunresult"}, {"type": "document", "content": ")\n                            break\n                next_node = await agent_run.next(node)\n         ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:222"}, {"type": "concept", "id": "break"}, {"type": "concept", "id": "agentrunnextnode"}, {"type": "document", "content": "override(\n        *,\n        deps: [AgentDepsT](../tools/#pydantic_ai.tools.AgentDepsT \"pydantic_ai....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.410449", "id": "text_data\\agent.txt:223"}, {"type": "concept", "id": "unset"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`deps` |  `[AgentDepsT](../tool...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411035", "id": "text_data\\agent.txt:224"}, {"type": "concept", "id": "passed"}, {"type": "document", "content": "757\n    758\n    759\n    760\n    761\n    762\n    763\n    764\n    765\n    766\n    767\n    768\n    769\n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411035", "id": "text_data\\agent.txt:225"}, {"type": "document", "content": "@contextmanager\n    def override(\n        self,\n        *,\n        deps: AgentDepsT | _utils.Unset =...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411035", "id": "text_data\\agent.txt:226"}, {"type": "document", "content": "override_deps_before = self._override_deps\n            self._override_deps = _utils.Some(deps)\n     ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411035", "id": "text_data\\agent.txt:227"}, {"type": "document", "content": "system_prompt(\n        func: [Callable](https://docs.python.org/3/library/typing.html#typing.Callabl...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411035", "id": "text_data\\agent.txt:228"}, {"type": "concept", "id": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "concept", "id": "typingcallableruncontexttoolspydanticaitoolsruncontext"}, {"type": "concept", "id": "pydanticaitoolsruncontextagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "document", "content": "system_prompt(\n        func: [Callable](https://docs.python.org/3/library/typing.html#typing.Callabl...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411035", "id": "text_data\\agent.txt:229"}, {"type": "concept", "id": "typingcallable"}, {"type": "concept", "id": "runcontexttoolspydanticaitoolsruncontext"}, {"type": "document", "content": "],\n    ) -> [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"typing.Callabl...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411035", "id": "text_data\\agent.txt:230"}, {"type": "concept", "id": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "document", "content": "system_prompt(func: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"typing...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:231"}, {"type": "concept", "id": "systempromptfunc"}, {"type": "document", "content": ") -> [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"typing.Callable\")[[],...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:232"}, {"type": "concept", "id": "collectionsabcawaitablestrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "document", "content": "[SystemPromptFunc](../tools/#pydantic_ai.tools.SystemPromptFunc \"pydantic_ai._system_prompt.SystemPr...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:233"}, {"type": "concept", "id": "systempromptfunctoolspydanticaitoolssystempromptfunc"}, {"type": "concept", "id": "pydanticaisystempromptsystempromptfuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "document", "content": "[[SystemPromptFunc](../tools/#pydantic_ai.tools.SystemPromptFunc \"pydantic_ai._system_prompt.SystemP...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:234"}, {"type": "document", "content": "Decorator to register a system prompt function.\n\nOptionally takes [`RunContext`](../tools/#pydantic_...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:235"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`func` |  `[SystemPromptFunc](....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:236"}, {"type": "document", "content": "from pydantic_ai import Agent, RunContext\n    \n    agent = Agent('test', deps_type=str)\n    \n    @ag...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:237"}, {"type": "concept", "id": "import"}, {"type": "concept", "id": "runcontext"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n    \n    \n    814\n    815\n    816\n    817\n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:238"}, {"type": "concept", "id": "pydanticaislimpydanticaiagentpy"}, {"type": "document", "content": "def system_prompt(\n        self,\n        func: _system_prompt.SystemPromptFunc[AgentDepsT] | None = ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:239"}, {"type": "document", "content": "(`agent.system_prompt(...)`), see the examples below.\n    \n        Overloads for every possible sign...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:240"}, {"type": "concept", "id": "below"}, {"type": "document", "content": "def simple_system_prompt() -> str:\n            return 'foobar'\n    \n        @agent.system_prompt(dyn...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:241"}, {"type": "concept", "id": "runner"}, {"type": "concept", "id": "simplesystemprompt"}, {"type": "document", "content": "return func_\n    \n            return decorator\n        else:\n            assert not dynamic, \"dynami...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:242"}, {"type": "concept", "id": "selfsystempromptfunctionsappendsystempromptsystempromptrunneragentdepstfunc"}, {"type": "document", "content": "result_validator(\n        func: [Callable](https://docs.python.org/3/library/typing.html#typing.Call...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411376", "id": "text_data\\agent.txt:243"}, {"type": "document", "content": "[[RunContext](../tools/#pydantic_ai.tools.RunContext \"pydantic_ai.tools.RunContext\")[[AgentDepsT](.....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:244"}, {"type": "document", "content": "[Awaitable](https://docs.python.org/3/library/collections.abc.html#collections.abc.Awaitable \"collec...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:245"}, {"type": "concept", "id": "collectionsabcawaitableresultdatatresultpydanticairesultresultdatat"}, {"type": "document", "content": "[Awaitable](https://docs.python.org/3/library/collections.abc.html#collections.abc.Awaitable \"collec...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:246"}, {"type": "document", "content": ") -> [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"typing.Callable\")[[[R...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:247"}, {"type": "concept", "id": "typingcallableresultdatatresultpydanticairesultresultdatat"}, {"type": "document", "content": ") -> [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"typing.Callable\")[[[R...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:248"}, {"type": "document", "content": ") -> ResultValidatorFunc[[AgentDepsT](../tools/#pydantic_ai.tools.AgentDepsT \"pydantic_ai.tools.Agen...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:249"}, {"type": "concept", "id": "resultvalidatorfuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "document", "content": "Decorator to register a result validator function.\n\nOptionally takes [`RunContext`](../tools/#pydant...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:250"}, {"type": "concept", "id": "validator"}, {"type": "document", "content": "Example:\n\n    \n    \n    from pydantic_ai import Agent, ModelRetry, RunContext\n    \n    agent = Agent...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:251"}, {"type": "concept", "id": "agentresultvalidator"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n    \n    \n    892\n    893\n    894\n    895\n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:252"}, {"type": "document", "content": "def result_validator(\n        self, func: _result.ResultValidatorFunc[AgentDepsT, ResultDataT], /\n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:253"}, {"type": "document", "content": "@agent.result_validator\n        def result_validator_simple(data: str) -> str:\n            if 'wrong...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:254"}, {"type": "document", "content": "tool(\n        func: [ToolFuncContext](../tools/#pydantic_ai.tools.ToolFuncContext \"pydantic_ai.tools...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:255"}, {"type": "concept", "id": "toolfunccontexttoolspydanticaitoolstoolfunccontext"}, {"type": "concept", "id": "pydanticaitoolstoolfunccontextagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "concept", "id": "toolparamstoolspydanticaitoolstoolparams"}, {"type": "concept", "id": "pydanticaitoolstoolparams"}, {"type": "document", "content": "prepare: [ToolPrepareFunc](../tools/#pydantic_ai.tools.ToolPrepareFunc \"pydantic_ai.tools.ToolPrepar...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:256"}, {"type": "concept", "id": "toolpreparefunctoolspydanticaitoolstoolpreparefunc"}, {"type": "concept", "id": "pydanticaitoolstoolpreparefuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "document", "content": "] = GenerateToolJsonSchema\n    ) -> [Callable](https://docs.python.org/3/library/typing.html#typing....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:257"}, {"type": "document", "content": "]\n    \n    \n    \n    tool(\n        func: (\n            [ToolFuncContext](../tools/#pydantic_ai.tools...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:258"}, {"type": "document", "content": "docstring_format: [DocstringFormat](../tools/#pydantic_ai.tools.DocstringFormat \"pydantic_ai.tools.D...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:259"}, {"type": "concept", "id": "docstringformattoolspydanticaitoolsdocstringformat"}, {"type": "concept", "id": "pydanticaitoolsdocstringformat"}, {"type": "concept", "id": "requireparameterdescriptions"}, {"type": "document", "content": "Decorator to register a tool function which takes\n[`RunContext`](../tools/#pydantic_ai.tools.RunCont...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:260"}, {"type": "concept", "id": "functions"}, {"type": "document", "content": "Example:\n\n    \n    \n    from pydantic_ai import Agent, RunContext\n    \n    agent = Agent('test', dep...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:261"}, {"type": "concept", "id": "float"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`func` |  `[ToolFuncContext](../tools/#pydan...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:262"}, {"type": "document", "content": "`prepare` |  `[ToolPrepareFunc](../tools/#pydantic_ai.tools.ToolPrepareFunc \"pydantic_ai.tools.ToolP...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:263"}, {"type": "concept", "id": "custom"}, {"type": "document", "content": "`docstring_format` |  `[DocstringFormat](../tools/#pydantic_ai.tools.DocstringFormat \"pydantic_ai.to...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:264"}, {"type": "document", "content": "`schema_generator` |  `[type](https://docs.python.org/3/library/functions.html#type)[[GenerateJsonSc...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:265"}, {"type": "concept", "id": "generatetooljsonschema"}, {"type": "concept", "id": "schemagenerator"}, {"type": "concept", "id": "typehttpsdocspythonorg3libraryfunctionshtmltypegeneratejsonschemahttpsdocspydanticdevlatestapijsonschemapydanticjsonschemageneratejsonschema"}, {"type": "concept", "id": "pydanticjsonschemageneratejsonschema"}, {"type": "concept", "id": "schema"}, {"type": "document", "content": "945\n     946\n     947\n     948\n     949\n     950\n     951\n     952\n     953\n     954\n     955\n     9...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:266"}, {"type": "document", "content": "def tool(\n        self,\n        func: ToolFuncContext[AgentDepsT, ToolParams] | None = None,\n       ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:267"}, {"type": "document", "content": "[learn more](../tools.md#function-tools-and-schema).\n    \n        We can't add overloads for every p...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:268"}, {"type": "document", "content": "#> {\"foobar\":1,\"spam\":1.0}\n        ```\n    \n        Args:\n            func: The tool function to reg...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:269"}, {"type": "concept", "id": "foobar1spam10"}, {"type": "document", "content": "Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n        ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.411924", "id": "text_data\\agent.txt:270"}, {"type": "concept", "id": "inferred"}, {"type": "document", "content": "retries,\n                    prepare,\n                    docstring_format,\n                    requ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:271"}, {"type": "document", "content": "tool_plain(\n        func: [ToolFuncPlain](../tools/#pydantic_ai.tools.ToolFuncPlain \"pydantic_ai.too...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:272"}, {"type": "concept", "id": "toolfuncplaintoolspydanticaitoolstoolfuncplain"}, {"type": "concept", "id": "pydanticaitoolstoolfuncplaintoolparamstoolspydanticaitoolstoolparams"}, {"type": "document", "content": "prepare: [ToolPrepareFunc](../tools/#pydantic_ai.tools.ToolPrepareFunc \"pydantic_ai.tools.ToolPrepar...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:273"}, {"type": "document", "content": "] = GenerateToolJsonSchema\n    ) -> [Callable](https://docs.python.org/3/library/typing.html#typing....", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:274"}, {"type": "document", "content": "/,\n        *,\n        name: [str](https://docs.python.org/3/library/stdtypes.html#str) | None = None...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:275"}, {"type": "concept", "id": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "document", "content": "[GenerateJsonSchema](https://docs.pydantic.dev/latest/api/json_schema/#pydantic.json_schema.Generate...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:276"}, {"type": "concept", "id": "generatejsonschemahttpsdocspydanticdevlatestapijsonschemapydanticjsonschemageneratejsonschema"}, {"type": "document", "content": "Decorator to register a tool function which DOES NOT take `RunContext` as an\nargument.\n\nCan decorate...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:277"}, {"type": "document", "content": "Example:\n\n    \n    \n    from pydantic_ai import Agent, RunContext\n    \n    agent = Agent('test')\n   ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:278"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`func` |  `[ToolFuncPlain](../tools/#pydanti...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:279"}, {"type": "document", "content": "`prepare` |  `[ToolPrepareFunc](../tools/#pydantic_ai.tools.ToolPrepareFunc \"pydantic_ai.tools.ToolP...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:280"}, {"type": "document", "content": "`docstring_format` |  `[DocstringFormat](../tools/#pydantic_ai.tools.DocstringFormat \"pydantic_ai.to...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:281"}, {"type": "document", "content": "`schema_generator` |  `[type](https://docs.python.org/3/library/functions.html#type)[[GenerateJsonSc...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:282"}, {"type": "document", "content": "1041\n    1042\n    1043\n    1044\n    1045\n    1046\n    1047\n    1048\n    1049\n    1050\n    1051\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:283"}, {"type": "document", "content": "def tool_plain(\n        self,\n        func: ToolFuncPlain[ToolParams] | None = None,\n        /,\n    ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:284"}, {"type": "document", "content": "[learn more](../tools.md#function-tools-and-schema).\n    \n        We can't add overloads for every p...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:285"}, {"type": "document", "content": "```\n    \n        Args:\n            func: The tool function to register.\n            name: The name o...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:286"}, {"type": "document", "content": "Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n        ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:287"}, {"type": "document", "content": "prepare,\n                    docstring_format,\n                    require_parameter_descriptions,\n ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:288"}, {"type": "document", "content": "is_model_request_node(\n        node: AgentNode[T, S] | [End](../pydantic_graph/nodes/#pydantic_graph...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:289"}, {"type": "concept", "id": "ismodelrequestnode"}, {"type": "concept", "id": "agentnodet"}, {"type": "concept", "id": "endpydanticgraphnodespydanticgraphnodesend"}, {"type": "concept", "id": "pydanticgraphendfinalresults"}, {"type": "document", "content": "|\n\n    \n    \n    @staticmethod\n    def is_model_request_node(\n        node: _agent_graph.AgentNode[T...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:290"}, {"type": "document", "content": "is_call_tools_node(\n        node: AgentNode[T, S] | [End](../pydantic_graph/nodes/#pydantic_graph.no...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:291"}, {"type": "concept", "id": "iscalltoolsnode"}, {"type": "document", "content": "|\n\n    \n    \n    @staticmethod\n    def is_call_tools_node(\n        node: _agent_graph.AgentNode[T, S...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:292"}, {"type": "document", "content": "is_user_prompt_node(\n        node: AgentNode[T, S] | [End](../pydantic_graph/nodes/#pydantic_graph.n...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:293"}, {"type": "concept", "id": "isuserpromptnode"}, {"type": "document", "content": "|\n\n    \n    \n    @staticmethod\n    def is_user_prompt_node(\n        node: _agent_graph.AgentNode[T, ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:294"}, {"type": "document", "content": "is_end_node(\n        node: AgentNode[T, S] | [End](../pydantic_graph/nodes/#pydantic_graph.nodes.End...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.413127", "id": "text_data\\agent.txt:295"}, {"type": "concept", "id": "isendnode"}, {"type": "document", "content": "|\n\n    \n    \n    @staticmethod\n    def is_end_node(\n        node: _agent_graph.AgentNode[T, S] | End...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:296"}, {"type": "concept", "id": "runmcpservers"}, {"type": "document", "content": "Returns: a context manager to start and shutdown the servers.\n\nSource code in `pydantic_ai_slim/pyda...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:297"}, {"type": "concept", "id": "returns"}, {"type": "concept", "id": "context"}, {"type": "concept", "id": "manager"}, {"type": "concept", "id": "start"}, {"type": "concept", "id": "shutdown"}, {"type": "document", "content": "|\n\n    \n    \n    @asynccontextmanager\n    async def run_mcp_servers(self) -> AsyncIterator[None]:\n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:298"}, {"type": "concept", "id": "runmcpserversself"}, {"type": "concept", "id": "asynciteratornone"}, {"type": "document", "content": "Bases: `[Generic](https://docs.python.org/3/library/typing.html#typing.Generic\n\"typing.Generic\")[[Ag...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:299"}, {"type": "concept", "id": "instance"}, {"type": "concept", "id": "bases"}, {"type": "concept", "id": "generichttpsdocspythonorg3librarytypinghtmltypinggeneric"}, {"type": "concept", "id": "typinggenericagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "document", "content": "from pydantic_ai import Agent\n    \n    agent = Agent('openai:gpt-4o')\n    \n    async def main():\n   ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:300"}, {"type": "document", "content": ")\n                    ],\n                    kind='request',\n                )\n            ),\n      ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:301"}, {"type": "document", "content": "You can also manually drive the iteration using the `next` method for more\ngranular control.\n\nSource...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:302"}, {"type": "concept", "id": "manually"}, {"type": "concept", "id": "drive"}, {"type": "concept", "id": "iteration"}, {"type": "concept", "id": "using"}, {"type": "document", "content": "1305\n    1306\n    1307\n    1308\n    1309\n    1310\n    1311\n    1312\n    1313\n    1314\n    1315\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:303"}, {"type": "document", "content": "1384\n    1385\n    1386\n    1387\n    1388\n    1389\n    1390\n    1391\n    1392\n    1393\n    1394\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:304"}, {"type": "document", "content": "1464\n    1465\n    1466\n    1467\n    1468\n    1469\n    1470\n    1471\n    1472\n    1473\n    1474\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:305"}, {"type": "document", "content": "|...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:306"}, {"type": "document", "content": "@dataclasses.dataclass(repr=False)\n    class AgentRun(Generic[AgentDepsT, ResultDataT]):\n        \"\"\"...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:307"}, {"type": "document", "content": "async def main():\n            nodes = []\n            # Iterate through the run, recording each node ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:308"}, {"type": "document", "content": "],\n                        kind='request',\n                    )\n                ),\n                ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:309"}, {"type": "document", "content": "more granular control.\n        \"\"\"\n    \n        _graph_run: GraphRun[\n            _agent_graph.Graph...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:310"}, {"type": "concept", "id": "graphrun"}, {"type": "concept", "id": "property"}, {"type": "concept", "id": "graphruncontextagentgraphgraphagentstate"}, {"type": "concept", "id": "granular"}, {"type": "document", "content": "\"\"\"The next node that will be run in the agent graph.\n    \n            This is the next node that wi...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:311"}, {"type": "document", "content": "with an [`AgentRunResult`][pydantic_ai.agent.AgentRunResult].\n            \"\"\"\n            graph_run_...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:312"}, {"type": "concept", "id": "graphrunresult"}, {"type": "concept", "id": "agentrunresultpydanticaiagentagentrunresult"}, {"type": "concept", "id": "selfgraphrunresult"}, {"type": "document", "content": "return self\n    \n        async def __anext__(\n            self,\n        ) -> _agent_graph.AgentNode[...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:313"}, {"type": "concept", "id": "agentgraphagentnodeagentdepst"}, {"type": "document", "content": "\"\"\"Manually drive the agent run by passing in the node you want to run next.\n    \n            This l...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:314"}, {"type": "document", "content": "nodes = [next_node]\n                    while not isinstance(next_node, End):\n                      ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:315"}, {"type": "concept", "id": "while"}, {"type": "concept", "id": "isinstancenextnode"}, {"type": "document", "content": "parts=[\n                                    UserPromptPart(\n                                        ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:316"}, {"type": "concept", "id": "contentwhat"}, {"type": "document", "content": "timestamp=datetime.datetime(...),\n                                kind='response',\n                 ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:317"}, {"type": "concept", "id": "kindresponse"}, {"type": "concept", "id": "enddatafinalresultdataparis"}, {"type": "document", "content": "the run has completed.\n            \"\"\"\n            # Note: It might be nice to expose a synchronous ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:318"}, {"type": "concept", "id": "might"}, {"type": "document", "content": "def __repr__(self) -> str:\n            result = self._graph_run.result\n            result_repr = '<r...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:319"}, {"type": "concept", "id": "reprself"}, {"type": "concept", "id": "resultrepr"}, {"type": "concept", "id": "finished"}, {"type": "document", "content": "ctx: [GraphRunContext](../pydantic_graph/nodes/#pydantic_graph.nodes.GraphRunContext \"pydantic_graph...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:320"}, {"type": "concept", "id": "graphruncontextpydanticgraphnodespydanticgraphnodesgraphruncontext"}, {"type": "concept", "id": "pydanticgraphgraphruncontext"}, {"type": "concept", "id": "graphagentstate"}, {"type": "concept", "id": "graphagentdepsagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "document", "content": "The current context of the agent run.\n\n####  next_node `property`\n\n    \n    \n    next_node: (\n      ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.414224", "id": "text_data\\agent.txt:321"}, {"type": "concept", "id": "current"}, {"type": "document", "content": "####  result `property`\n\n    \n    \n    result: AgentRunResult[[ResultDataT](../result/#pydantic_ai.r...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:322"}, {"type": "concept", "id": "agentrunresultresultdatatresultpydanticairesultresultdatat"}, {"type": "document", "content": "####  __aiter__\n\n    \n    \n    __aiter__() -> (\n        [AsyncIterator](https://docs.python.org/3/li...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:323"}, {"type": "concept", "id": "aiter"}, {"type": "concept", "id": "collectionsabcasynciterator"}, {"type": "concept", "id": "agentnodeagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "document", "content": "1404\n    1405\n    1406\n    1407\n    1408\n\n|\n\n    \n    \n    def __aiter__(\n        self,\n    ) -> Asy...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:324"}, {"type": "concept", "id": "anext"}, {"type": "concept", "id": "asynciteratoragentgraphagentnodeagentdepst"}, {"type": "document", "content": "Advance to the next node automatically based on the last returned node.\n\nSource code in `pydantic_ai...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:325"}, {"type": "concept", "id": "advance"}, {"type": "concept", "id": "automatically"}, {"type": "concept", "id": "based"}, {"type": "concept", "id": "returned"}, {"type": "document", "content": "next(\n        node: AgentNode[[AgentDepsT](../tools/#pydantic_ai.tools.AgentDepsT \"pydantic_ai.tools...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:326"}, {"type": "document", "content": "Manually drive the agent run by passing in the node you want to run next.\n\nThis lets you inspect or ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:327"}, {"type": "concept", "id": "passing"}, {"type": "concept", "id": "inspect"}, {"type": "document", "content": "from pydantic_ai import Agent\n    from pydantic_graph import End\n    \n    agent = Agent('openai:gpt-...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:328"}, {"type": "document", "content": "system_prompt_functions=[],\n                    system_prompt_dynamic_functions={},\n                ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:329"}, {"type": "concept", "id": "systempromptfunctions"}, {"type": "concept", "id": "systempromptdynamicfunctions"}, {"type": "document", "content": "parts=[TextPart(content='Paris', part_kind='text')],\n                        model_name='gpt-4o',\n  ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:330"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`node` |  `AgentNode[[AgentDeps...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:331"}, {"type": "document", "content": "Type | Description  \n---|---  \n`AgentNode[[AgentDepsT](../tools/#pydantic_ai.tools.AgentDepsT \"pydan...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:332"}, {"type": "document", "content": "`AgentNode[[AgentDepsT](../tools/#pydantic_ai.tools.AgentDepsT \"pydantic_ai.tools.AgentDepsT\"), [Res...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:333"}, {"type": "document", "content": "1420\n    1421\n    1422\n    1423\n    1424\n    1425\n    1426\n    1427\n    1428\n    1429\n    1430\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:334"}, {"type": "document", "content": "async def next(\n        self,\n        node: _agent_graph.AgentNode[AgentDepsT, ResultDataT],\n    ) -...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:335"}, {"type": "document", "content": "next_node = agent_run.next_node  # start with the first node\n                nodes = [next_node]\n   ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:336"}, {"type": "document", "content": "request=ModelRequest(\n                            parts=[\n                                UserPrompt...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:337"}, {"type": "document", "content": "timestamp=datetime.datetime(...),\n                            kind='response',\n                     ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:338"}, {"type": "document", "content": "# on this class, or else IDEs won't warn you if you accidentally use `for` instead of `async for` to...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:339"}, {"type": "concept", "id": "accidentally"}, {"type": "document", "content": "usage() -> [Usage](../usage/#pydantic_ai.usage.Usage \"pydantic_ai.usage.Usage\")\n    \n\nGet usage stat...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:340"}, {"type": "concept", "id": "statistics"}, {"type": "concept", "id": "including"}, {"type": "concept", "id": "token"}, {"type": "document", "content": "The final result of an agent run.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:341"}, {"type": "document", "content": "1506\n    1507\n    1508\n    1509\n    1510\n    1511\n    1512\n    1513\n    1514\n    1515\n    1516\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:342"}, {"type": "document", "content": "1585\n    1586\n    1587\n    1588\n    1589\n    1590\n    1591\n    1592\n    1593\n    1594\n    1595\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:343"}, {"type": "document", "content": "|...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:344"}, {"type": "document", "content": "@dataclasses.dataclass\n    class AgentRunResult(Generic[ResultDataT]):\n        \"\"\"The final result o...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:345"}, {"type": "concept", "id": "dataclassesdataclass"}, {"type": "concept", "id": "agentrunresultgenericresultdatat"}, {"type": "document", "content": "\"\"\"\n            if not self._result_tool_name:\n                raise ValueError('Cannot set result t...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:346"}, {"type": "concept", "id": "selfresulttoolname"}, {"type": "concept", "id": "valueerrorcannot"}, {"type": "document", "content": "\"\"\"Return the history of _messages.\n    \n            Args:\n                result_tool_return_conten...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.415333", "id": "text_data\\agent.txt:347"}, {"type": "concept", "id": "resulttoolreturncontent"}, {"type": "concept", "id": "content"}, {"type": "concept", "id": "message"}, {"type": "document", "content": "else:\n                return self._state.message_history\n    \n        def all_messages_json(self, *,...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:348"}, {"type": "concept", "id": "bytes"}, {"type": "document", "content": "JSON bytes representing the messages.\n            \"\"\"\n            return _messages.ModelMessagesType...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:349"}, {"type": "document", "content": "the conversation and want to set the response to the result tool call. If `None`, the last message w...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:350"}, {"type": "document", "content": "This provides a convenient way to modify the content of the result tool call if you want to continue...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:351"}, {"type": "concept", "id": "provides"}, {"type": "concept", "id": "convenient"}, {"type": "concept", "id": "modify"}, {"type": "document", "content": "all_messages(\n        *, result_tool_return_content: [str](https://docs.python.org/3/library/stdtype...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:352"}, {"type": "concept", "id": "allmessages"}, {"type": "document", "content": "Return the history of _messages.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:353"}, {"type": "document", "content": "1531\n    1532\n    1533\n    1534\n    1535\n    1536\n    1537\n    1538\n    1539\n    1540\n    1541\n    1...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:354"}, {"type": "document", "content": "def all_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMess...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:355"}, {"type": "document", "content": "else:\n            return self._state.message_history\n      \n  \n---|---  \n  \n####  all_messages_json...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:356"}, {"type": "concept", "id": "selfstatemessagehistory"}, {"type": "concept", "id": "allmessagesjson"}, {"type": "document", "content": "all_messages_json(\n        *, result_tool_return_content: [str](https://docs.python.org/3/library/st...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:357"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[bytes](https://docs.python.org/3/library/stdtypes.html#bytes)` |  J...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:358"}, {"type": "concept", "id": "byteshttpsdocspythonorg3librarystdtypeshtmlbytes"}, {"type": "concept", "id": "representing"}, {"type": "document", "content": "def all_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n        \"\"\"R...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:359"}, {"type": "document", "content": "\"\"\"\n        return _messages.ModelMessagesTypeAdapter.dump_json(\n            self.all_messages(resul...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:360"}, {"type": "concept", "id": "messagesmodelmessagestypeadapterdumpjson"}, {"type": "concept", "id": "selfallmessagesresulttoolreturncontentresulttoolreturncontent"}, {"type": "concept", "id": "newmessages"}, {"type": "document", "content": "new_messages(\n        *, result_tool_return_content: [str](https://docs.python.org/3/library/stdtype...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:361"}, {"type": "document", "content": "Messages from older runs are excluded.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|-...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:362"}, {"type": "concept", "id": "older"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[list](https://docs.python.org/3/library/stdtypes.html#list)[[ModelM...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:363"}, {"type": "document", "content": "def new_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMess...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:364"}, {"type": "document", "content": "Returns:\n            List of new messages.\n        \"\"\"\n        return self.all_messages(result_tool_...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:365"}, {"type": "concept", "id": "selfallmessagesresulttoolreturncontentresulttoolreturncontentselfnewmessageindex"}, {"type": "document", "content": "new_messages_json(\n        *, result_tool_return_content: [str](https://docs.python.org/3/library/st...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:366"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[bytes](https://docs.python.org/3/library/stdtypes.html#bytes)` |  J...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:367"}, {"type": "document", "content": "def new_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n        \"\"\"R...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:368"}, {"type": "document", "content": "\"\"\"\n        return _messages.ModelMessagesTypeAdapter.dump_json(\n            self.new_messages(resul...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:369"}, {"type": "concept", "id": "selfnewmessagesresulttoolreturncontentresulttoolreturncontent"}, {"type": "document", "content": "usage() -> [Usage](../usage/#pydantic_ai.usage.Usage \"pydantic_ai.usage.Usage\")\n    \n\nReturn the usa...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:370"}, {"type": "concept", "id": "moduleattribute"}, {"type": "document", "content": "capture_run_messages = capture_run_messages\n    \n\n###  InstrumentationSettings `dataclass`\n\nOptions ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:371"}, {"type": "concept", "id": "instrumentationsettings"}, {"type": "concept", "id": "dataclass"}, {"type": "concept", "id": "instrumenting"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/instrumented.py`\n\n    \n    \n    52\n    53\n    54...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:372"}, {"type": "concept", "id": "pydanticaislimpydanticaimodelsinstrumentedpy"}, {"type": "document", "content": "@dataclass(init=False)\n    class InstrumentationSettings:\n        \"\"\"Options for instrumenting model...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:373"}, {"type": "concept", "id": "fieldreprfalse"}, {"type": "concept", "id": "eventlogger"}, {"type": "concept", "id": "eventmode"}, {"type": "concept", "id": "literalattributes"}, {"type": "document", "content": "event_mode: Literal['attributes', 'logs'] = 'attributes',\n            tracer_provider: TracerProvide...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:374"}, {"type": "concept", "id": "attributes"}, {"type": "concept", "id": "tracerprovider"}, {"type": "concept", "id": "provider"}, {"type": "document", "content": "event_logger_provider: The OpenTelemetry event logger provider to use.\n                    If not pr...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:375"}, {"type": "concept", "id": "eventloggerprovider"}, {"type": "concept", "id": "logger"}, {"type": "concept", "id": "version"}, {"type": "document", "content": "self.event_mode = event_mode\n      \n  \n---|---  \n  \n####  __init__...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:376"}, {"type": "concept", "id": "selfeventmode"}, {"type": "document", "content": "__init__(\n        *,\n        event_mode: [Literal](https://docs.python.org/3/library/typing.html#typ...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:377"}, {"type": "concept", "id": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`event_mode` |  `[Literal](https://docs.pyth...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:378"}, {"type": "concept", "id": "opentelemetry"}, {"type": "document", "content": "`event_logger_provider` |  `EventLoggerProvider | None` |  The OpenTelemetry event logger provider t...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:379"}, {"type": "concept", "id": "global"}, {"type": "document", "content": "69\n    70\n    71\n    72\n    73\n    74\n    75\n    76\n    77\n    78\n    79\n    80\n    81\n    82\n    83...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:380"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        event_mode: Literal['attributes', 'logs'] = 'attribut...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:381"}, {"type": "document", "content": "event_logger_provider: The OpenTelemetry event logger provider to use.\n                If not provid...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:382"}, {"type": "document", "content": "self.event_mode = event_mode\n      \n  \n---|---  \n  \n\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\agent.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agent.txt:383"}, {"type": "concept", "id": "pydantic"}, {"type": "concept", "id": "services"}, {"type": "concept", "id": "present"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nAgents\n\nType to st...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:383"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:384"}, {"type": "concept", "id": "introduction"}, {"type": "document", "content": "* Reflection and self-correction \n      * Model errors \n    * [ Models  ](../models/)\n    * [ Depend...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:385"}, {"type": "concept", "id": "models"}, {"type": "concept", "id": "results"}, {"type": "concept", "id": "testing"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:386"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:387"}, {"type": "concept", "id": "examplespydanticmodel"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:388"}, {"type": "concept", "id": "pydanticaimessages"}, {"type": "concept", "id": "apimessages"}, {"type": "concept", "id": "pydanticaiexceptions"}, {"type": "concept", "id": "apiexceptions"}, {"type": "concept", "id": "pydanticaisettings"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:389"}, {"type": "concept", "id": "pydanticaimodelsinstrumented"}, {"type": "concept", "id": "apimodelsinstrumented"}, {"type": "concept", "id": "pydanticaimodelsmistral"}, {"type": "concept", "id": "apimodelsmistral"}, {"type": "concept", "id": "pydanticaimodelstest"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:390"}, {"type": "concept", "id": "apipydanticgraphexceptions"}, {"type": "concept", "id": "apipydanticevalsdataset"}, {"type": "concept", "id": "pydanticevalsevaluators"}, {"type": "document", "content": "Table of contents\n\n  * Introduction \n  * Running Agents \n    * Iterating Over an Agent's Graph \n    ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:391"}, {"type": "document", "content": "The [`Agent`](../api/agent/#pydantic_ai.agent.Agent) class has full API\ndocumentation, but conceptua...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:392"}, {"type": "concept", "id": "agentapiagentpydanticaiagentagent"}, {"type": "concept", "id": "conceptually"}, {"type": "concept", "id": "think"}, {"type": "document", "content": "**Component** | **Description**  \n---|---  \nSystem prompt(s) | A set of instructions for the LLM wri...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:393"}, {"type": "concept", "id": "specified"}, {"type": "document", "content": "In typing terms, agents are generic in their dependency and result types,\ne.g., an agent which requi...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:394"}, {"type": "concept", "id": "liststr"}, {"type": "concept", "id": "typing"}, {"type": "concept", "id": "terms"}, {"type": "document", "content": "Here's a toy example of an agent that simulates a roulette wheel:\n\nroulette_wheel.py...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:395"}, {"type": "concept", "id": "heres"}, {"type": "concept", "id": "simulates"}, {"type": "concept", "id": "roulette"}, {"type": "document", "content": "from pydantic_ai import Agent, RunContext\n    \n    roulette_agent = Agent(  \n        'openai:gpt-4o'...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:396"}, {"type": "concept", "id": "square"}, {"type": "concept", "id": "winner"}, {"type": "document", "content": "print(result.data)  \n    #> True\n    \n    result = roulette_agent.run_sync('I bet five is the winner...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:397"}, {"type": "concept", "id": "rouletteagentrunsynci"}, {"type": "concept", "id": "depssuccessnumber"}, {"type": "document", "content": "1.   2.   3.   4. \n\nAgents are designed for reuse, like FastAPI Apps\n\nAgents are intended to be inst...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:398"}, {"type": "concept", "id": "designed"}, {"type": "concept", "id": "reuse"}, {"type": "concept", "id": "fastapi"}, {"type": "concept", "id": "intended"}, {"type": "document", "content": "1. [`agent.run()`](../api/agent/#pydantic_ai.agent.Agent.run) \u2014 a coroutine which returns a [`RunRes...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:399"}, {"type": "concept", "id": "coroutine"}, {"type": "concept", "id": "runresultapiagentpydanticaiagentagentrunresult"}, {"type": "document", "content": "4. [`agent.iter()`](../api/agent/#pydantic_ai.agent.Agent.iter) \u2014 a context manager which returns an...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:400"}, {"type": "concept", "id": "agentiterapiagentpydanticaiagentagentiter"}, {"type": "document", "content": "Here's a simple example demonstrating the first three:\n\nrun_agent.py\n\n    \n    \n    from pydantic_ai...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:401"}, {"type": "document", "content": "You can also pass messages from previous runs to continue a conversation or\nprovide context, as desc...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:402"}, {"type": "concept", "id": "pydanticgraph"}, {"type": "document", "content": "In many scenarios, you don't need to worry about pydantic-graph at all;\ncalling `agent.run(...)` sim...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:403"}, {"type": "concept", "id": "scenarios"}, {"type": "concept", "id": "worry"}, {"type": "document", "content": "[`End`](../api/pydantic_graph/nodes/#pydantic_graph.nodes.End), you have the\nfinal result along with...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:404"}, {"type": "concept", "id": "endapipydanticgraphnodespydanticgraphnodesend"}, {"type": "concept", "id": "along"}, {"type": "concept", "id": "detailed"}, {"type": "document", "content": "#### `async for` iteration\n\nHere's an example of using `async for` with `iter` to record each node t...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:405"}, {"type": "document", "content": "from pydantic_ai import Agent\n    \n    agent = Agent('openai:gpt-4o')\n    \n    \n    async def main()...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:406"}, {"type": "document", "content": "timestamp=datetime.datetime(...),\n                            part_kind='user-prompt',\n             ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:407"}, {"type": "concept", "id": "partkinduserprompt"}, {"type": "document", "content": "* The `AgentRun` is an async iterator that yields each node (`BaseNode` or `End`) in the flow.\n  * T...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:408"}, {"type": "concept", "id": "iterator"}, {"type": "concept", "id": "yields"}, {"type": "document", "content": "from pydantic_ai import Agent\n    from pydantic_graph import End\n    \n    agent = Agent('openai:gpt-...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:409"}, {"type": "document", "content": "system_prompt_functions=[],\n                    system_prompt_dynamic_functions={},\n                ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:410"}, {"type": "document", "content": "parts=[TextPart(content='Paris', part_kind='text')],\n                        model_name='gpt-4o',\n  ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:411"}, {"type": "document", "content": "1.   2.   3.   4. \n\n#### Accessing usage and the final result\n\nYou can retrieve usage statistics (to...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:412"}, {"type": "concept", "id": "object"}, {"type": "concept", "id": "containing"}, {"type": "concept", "id": "streaming"}, {"type": "document", "content": "import asyncio\n    from dataclasses import dataclass\n    from datetime import date\n    \n    from pyd...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:413"}, {"type": "concept", "id": "location"}, {"type": "concept", "id": "forecastdate"}, {"type": "document", "content": "# In real code: call a historical weather API or DB\n            return (\n                f'The weath...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:414"}, {"type": "concept", "id": "weather"}, {"type": "concept", "id": "historical"}, {"type": "document", "content": "else:\n            return await ctx.deps.get_historic_weather(location, forecast_date)\n    \n    \n    ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:415"}, {"type": "concept", "id": "ctxdepsgethistoricweatherlocation"}, {"type": "document", "content": "output_messages.append(\n                        '=== ModelRequestNode: streaming partial request tok...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:416"}, {"type": "concept", "id": "outputmessagesappend"}, {"type": "concept", "id": "requeststream"}, {"type": "concept", "id": "isinstanceevent"}, {"type": "document", "content": "output_messages.append(\n                                        f'[Request] Part {event.index} text ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:417"}, {"type": "concept", "id": "frequest"}, {"type": "concept", "id": "eventindex"}, {"type": "concept", "id": "delta"}, {"type": "concept", "id": "eventdeltacontentdeltar"}, {"type": "document", "content": ")\n                elif Agent.is_call_tools_node(node):\n                    # A handle-response node ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:418"}, {"type": "concept", "id": "calls"}, {"type": "concept", "id": "handlestream"}, {"type": "concept", "id": "agentiscalltoolsnodenode"}, {"type": "document", "content": ")\n                            elif isinstance(event, FunctionToolResultEvent):\n                     ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:419"}, {"type": "concept", "id": "runresultdata"}, {"type": "concept", "id": "functiontoolresultevent"}, {"type": "document", "content": "'=== ModelRequestNode: streaming partial request tokens ===',\n            '[Request] Starting part 0...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:420"}, {"type": "concept", "id": "partial"}, {"type": "concept", "id": "toolcallid0001"}, {"type": "document", "content": "'=== ModelRequestNode: streaming partial request tokens ===',\n            \"[Request] Starting part 0...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:421"}, {"type": "document", "content": "* * *\n\n### Additional Configuration\n\n#### Usage Limits\n\nPydanticAI offers a\n[`UsageLimits`](../api/u...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:422"}, {"type": "concept", "id": "limit"}, {"type": "concept", "id": "tokens"}, {"type": "concept", "id": "additional"}, {"type": "concept", "id": "configuration"}, {"type": "document", "content": "from pydantic_ai import Agent\n    from pydantic_ai.exceptions import UsageLimitExceeded\n    from pyd...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:423"}, {"type": "concept", "id": "usagelimitexceeded"}, {"type": "concept", "id": "resultsync"}, {"type": "concept", "id": "agentrunsync"}, {"type": "document", "content": ")\n    except UsageLimitExceeded as e:\n        print(e)\n        #> Exceeded the response_tokens_limit...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:424"}, {"type": "concept", "id": "except"}, {"type": "concept", "id": "printe"}, {"type": "concept", "id": "exceeded"}, {"type": "concept", "id": "responsetokenslimit"}, {"type": "document", "content": "Restricting the number of requests can be useful in preventing infinite loops\nor excessive tool call...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:425"}, {"type": "concept", "id": "restricting"}, {"type": "concept", "id": "number"}, {"type": "concept", "id": "requests"}, {"type": "concept", "id": "useful"}, {"type": "concept", "id": "preventing"}, {"type": "document", "content": "from typing_extensions import TypedDict\n    \n    from pydantic_ai import Agent, ModelRetry\n    from ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:426"}, {"type": "concept", "id": "infiniteretrytool"}, {"type": "concept", "id": "typingextensions"}, {"type": "document", "content": "try:\n        result_sync = agent.run_sync(\n            'Begin infinite retry loop!', usage_limits=Us...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:427"}, {"type": "concept", "id": "begin"}, {"type": "concept", "id": "infinite"}, {"type": "document", "content": "1.   2. \n\nNote\n\nThis is especially relevant if you've registered many tools. The\n`request_limit` can...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:428"}, {"type": "concept", "id": "structure"}, {"type": "concept", "id": "especially"}, {"type": "concept", "id": "relevant"}, {"type": "concept", "id": "youve"}, {"type": "document", "content": "There are two ways to apply these settings: 1\\. Passing to\n`run{_sync,_stream}` functions via the `m...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:429"}, {"type": "concept", "id": "these"}, {"type": "concept", "id": "argument"}, {"type": "concept", "id": "setting"}, {"type": "document", "content": "from pydantic_ai import Agent\n    \n    agent = Agent('openai:gpt-4o')\n    \n    result_sync = agent.r...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:430"}, {"type": "concept", "id": "agentopenaigpt4o"}, {"type": "document", "content": "from pydantic_ai import Agent, UnexpectedModelBehavior\n    from pydantic_ai.models.gemini import Gem...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:431"}, {"type": "concept", "id": "category"}, {"type": "concept", "id": "unexpectedmodelbehavior"}, {"type": "document", "content": "'category': 'HARM_CATEGORY_HATE_SPEECH',\n                        'threshold': 'BLOCK_LOW_AND_ABOVE',...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:432"}, {"type": "concept", "id": "safety"}, {"type": "concept", "id": "harmcategoryhatespeech"}, {"type": "concept", "id": "threshold"}, {"type": "document", "content": "1. \n\n## Runs vs. Conversations\n\nAn agent **run** might represent an entire conversation \u2014 there's no...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:433"}, {"type": "concept", "id": "multiple"}, {"type": "concept", "id": "conversations"}, {"type": "document", "content": "conversation_example.py\n\n    \n    \n    from pydantic_ai import Agent\n    \n    agent = Agent('openai:...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:434"}, {"type": "concept", "id": "albert"}, {"type": "concept", "id": "einstein"}, {"type": "concept", "id": "famous"}, {"type": "document", "content": "Typing is (somewhat) optional\n\nPydanticAI is designed to make type checking as useful as possible fo...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:435"}, {"type": "concept", "id": "hints"}, {"type": "concept", "id": "types"}, {"type": "document", "content": "In particular, agents are generic in both the type of their dependencies and\nthe type of results the...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:436"}, {"type": "concept", "id": "particular"}, {"type": "concept", "id": "their"}, {"type": "document", "content": "Consider the following script with type mistakes:\n\ntype_mistakes.py\n\n    \n    \n    from dataclasses ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:437"}, {"type": "concept", "id": "following"}, {"type": "document", "content": "1.   2.   3. \n\nRunning `mypy` on this will give the following output:\n\n    \n    \n    \u27a4 uv run mypy t...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:438"}, {"type": "concept", "id": "running"}, {"type": "concept", "id": "error"}, {"type": "concept", "id": "incompatible"}, {"type": "document", "content": "Generally, system prompts fall into two categories:\n\n  1. **Static system prompts** : These are know...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:439"}, {"type": "concept", "id": "defined"}, {"type": "concept", "id": "known"}, {"type": "document", "content": "Here's an example using both types of system prompts:\n\nsystem_prompts.py\n\n    \n    \n    from datetim...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:440"}, {"type": "document", "content": "1.   2.   3.   4. \n\n_(This example is complete, it can be run \"as is\")_\n\n## Reflection and self-corr...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:441"}, {"type": "concept", "id": "validation"}, {"type": "document", "content": "* The default retry count is **1** but can be altered for the [entire agent](../api/agent/#pydantic_...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:442"}, {"type": "concept", "id": "altered"}, {"type": "document", "content": "from pydantic import BaseModel\n    \n    from pydantic_ai import Agent, RunContext, ModelRetry\n    \n ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:443"}, {"type": "concept", "id": "userid"}, {"type": "concept", "id": "modelretry"}, {"type": "document", "content": ")\n        return user_id\n    \n    \n    result = agent.run_sync(\n        'Send a message to John Doe ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:444"}, {"type": "concept", "id": "coffee"}, {"type": "document", "content": "## Model errors\n\nIf models behave unexpectedly (e.g., the retry limit is exceeded, or their API\nretu...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:445"}, {"type": "concept", "id": "errors"}, {"type": "concept", "id": "behave"}, {"type": "concept", "id": "unexpectedly"}, {"type": "document", "content": "from pydantic_ai import Agent, ModelRetry, UnexpectedModelBehavior, capture_run_messages\n    \n    ag...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:446"}, {"type": "concept", "id": "modelretryplease"}, {"type": "concept", "id": "again"}, {"type": "document", "content": "print('messages:', messages)\n            \"\"\"\n            messages:\n            [\n                Mod...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:447"}, {"type": "concept", "id": "printmessages"}, {"type": "concept", "id": "modelrequest"}, {"type": "document", "content": "tool_call_id='pyd_ai_tool_call_id',\n                            part_kind='tool-call',\n             ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:448"}, {"type": "concept", "id": "toolcallidpydaitoolcallid"}, {"type": "concept", "id": "partkindtoolcall"}, {"type": "document", "content": "],\n                    kind='request',\n                ),\n                ModelResponse(\n           ...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:449"}, {"type": "concept", "id": "modelresponse"}, {"type": "concept", "id": "toolcallpart"}, {"type": "concept", "id": "toolnamecalcvolume"}, {"type": "document", "content": "1.   2. \n\n_(This example is complete, it can be run \"as is\")_\n\nNote\n\nIf you call [`run`](../api/agen...", "source": "text_data\\agents.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\agents.txt:450"}, {"type": "concept", "id": "complete"}, {"type": "concept", "id": "runapiagentpydanticaiagentagentrun"}, {"type": "concept", "id": "runsyncapiagentpydanticaiagentagentrunsync"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](img/logo-white.svg) ](. \"PydanticAI\")\n\nPydanticAI\n\nIntroduction\n\nType to ...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:450"}, {"type": "document", "content": "* Introduction  [ Introduction  ](.) Table of contents \n    * Why use PydanticAI \n    * Hello World ...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:451"}, {"type": "document", "content": "* [ Multi-agent Applications  ](multi-agent-applications/)\n    * [ Graphs  ](graph/)\n    * [ Evals  ...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:452"}, {"type": "concept", "id": "evals"}, {"type": "concept", "id": "multiagent"}, {"type": "concept", "id": "applications"}, {"type": "concept", "id": "multiagentapplications"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](mcp/client/)\n      * [ Server  ](mcp/server/)\n      * [ MCP Run Python  ](m...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:453"}, {"type": "document", "content": "* [ Pydantic Model  ](examples/pydantic-model/)\n    * [ Weather agent  ](examples/weather-agent/)\n  ...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:454"}, {"type": "document", "content": "* [ pydantic_ai.exceptions  ](api/exceptions/)\n    * [ pydantic_ai.settings  ](api/settings/)\n    * ...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:455"}, {"type": "concept", "id": "apisettings"}, {"type": "concept", "id": "pydanticaiusage"}, {"type": "document", "content": "* [ pydantic_ai.models.mistral  ](api/models/mistral/)\n    * [ pydantic_ai.models.test  ](api/models...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:456"}, {"type": "concept", "id": "apimodelstest"}, {"type": "concept", "id": "pydanticaimodelsfunction"}, {"type": "document", "content": "* [ pydantic_evals.evaluators  ](api/pydantic_evals/evaluators/)\n    * [ pydantic_evals.reporting  ]...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:457"}, {"type": "concept", "id": "apipydanticevalsevaluators"}, {"type": "concept", "id": "pydanticevalsreporting"}, {"type": "concept", "id": "apipydanticevalsreporting"}, {"type": "concept", "id": "pydanticevalsotel"}, {"type": "document", "content": "Table of contents\n\n  * Why use PydanticAI \n  * Hello World Example \n  * Tools & Dependency Injection...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:458"}, {"type": "document", "content": "_Agent Framework / shim to use Pydantic with LLMs_\n\n[ ![CI](https://github.com/pydantic/pydantic-\nai...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:459"}, {"type": "concept", "id": "framework"}, {"type": "concept", "id": "cihttpsgithubcompydanticpydantic"}, {"type": "concept", "id": "aiactionsworkflowsciymlbadgesvgeventpush"}, {"type": "document", "content": "PydanticAI is a Python agent framework designed to make it less painful to\nbuild production grade ap...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:460"}, {"type": "document", "content": "## Why use PydanticAI\n\n  * **Built by the Pydantic Team** : Built by the team behind [Pydantic](http...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:461"}, {"type": "concept", "id": "built"}, {"type": "concept", "id": "openai"}, {"type": "concept", "id": "anthropic"}, {"type": "document", "content": "* **Type-safe** : Designed to make [type checking](agents/#static-type-checking) as powerful and inf...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:462"}, {"type": "concept", "id": "responses"}, {"type": "concept", "id": "typesafe"}, {"type": "concept", "id": "checkingagentsstatictypechecking"}, {"type": "concept", "id": "powerful"}, {"type": "document", "content": "* **Dependency Injection System** : Offers an optional [dependency injection](dependencies/) system ...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:463"}, {"type": "concept", "id": "dependency"}, {"type": "document", "content": "## Hello World Example\n\nHere's a minimal example of PydanticAI:\n\nhello_world.py\n\n    \n    \n    from ...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:464"}, {"type": "concept", "id": "hello"}, {"type": "concept", "id": "world"}, {"type": "document", "content": "Not very interesting yet, but we can easily add \"tools\", dynamic system\nprompts, and structured resp...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:465"}, {"type": "concept", "id": "interesting"}, {"type": "concept", "id": "easily"}, {"type": "document", "content": "from dataclasses import dataclass\n    \n    from pydantic import BaseModel, Field\n    from pydantic_a...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:466"}, {"type": "concept", "id": "databaseconn"}, {"type": "document", "content": "result_type=SupportResult,  \n        system_prompt=(  \n            'You are a support agent in our b...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:467"}, {"type": "concept", "id": "support"}, {"type": "concept", "id": "runcontextsupportdependencies"}, {"type": "document", "content": "id=ctx.deps.customer_id,\n            include_pending=include_pending,\n        )\n    \n    \n    ...  \n...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:468"}, {"type": "concept", "id": "balance"}, {"type": "concept", "id": "depsdeps"}, {"type": "document", "content": "1.   2.   3.   4.   5.   6.   7.   8.   9.   10.   11.   12.   13. \n\nComplete `bank_support.py` exam...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:469"}, {"type": "concept", "id": "banksupportpy"}, {"type": "document", "content": "bank_support_with_logfire.py\n\n    \n    \n    ...\n    from pydantic_ai import Agent, RunContext\n    \n ...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:470"}, {"type": "concept", "id": "banksupportwithlogfirepy"}, {"type": "document", "content": "See [Monitoring and Performance](logfire/) to learn more.\n\n## Next Steps\n\nTo try PydanticAI yourself...", "source": "text_data\\ai.pydantic.dev.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\ai.pydantic.dev.txt:471"}, {"type": "concept", "id": "monitoring"}, {"type": "concept", "id": "performancelogfire"}, {"type": "concept", "id": "steps"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:471"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:472"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:473"}, {"type": "concept", "id": "graphs"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:474"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:475"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:476"}, {"type": "concept", "id": "pydanticairesult"}, {"type": "document", "content": "* __init__ \n          * model_name \n          * system \n        * AnthropicStreamedResponse \n       ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:477"}, {"type": "concept", "id": "modelname"}, {"type": "concept", "id": "anthropicstreamedresponse"}, {"type": "concept", "id": "timestamp"}, {"type": "document", "content": "* [ pydantic_graph  ](../../pydantic_graph/graph/)\n    * [ pydantic_graph.nodes  ](../../pydantic_gr...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:478"}, {"type": "document", "content": "Table of contents\n\n  * Setup \n    * anthropic \n    * LatestAnthropicModelNames \n    * AnthropicModel...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:479"}, {"type": "concept", "id": "setup"}, {"type": "concept", "id": "latestanthropicmodelnames"}, {"type": "document", "content": "###  LatestAnthropicModelNames `module-attribute`\n\n    \n    \n    LatestAnthropicModelNames = [Litera...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:480"}, {"type": "concept", "id": "anthropicmodelname"}, {"type": "document", "content": "Possible Anthropic model names.\n\nSince Anthropic supports a variety of date-stamped models, we expli...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:481"}, {"type": "concept", "id": "possible"}, {"type": "concept", "id": "names"}, {"type": "document", "content": "|\n\n    \n    \n    class AnthropicModelSettings(ModelSettings):\n        \"\"\"Settings used for an Anthro...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:482"}, {"type": "concept", "id": "anthropicmetadata"}, {"type": "concept", "id": "metadataparam"}, {"type": "document", "content": "###  AnthropicModel `dataclass`\n\nBases: `[Model](../base/#pydantic_ai.models.Model \"pydantic_ai.mode...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:483"}, {"type": "concept", "id": "anthropicmodel"}, {"type": "document", "content": "98\n     99\n    100\n    101\n    102\n    103\n    104\n    105\n    106\n    107\n    108\n    109\n    110\n ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:484"}, {"type": "document", "content": "186\n    187\n    188\n    189\n    190\n    191\n    192\n    193\n    194\n    195\n    196\n    197\n    198\n...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:485"}, {"type": "document", "content": "276\n    277\n    278\n    279\n    280\n    281\n    282\n    283\n    284\n    285\n    286\n    287\n    288\n...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:486"}, {"type": "document", "content": "366\n    367\n    368\n    369\n    370\n    371\n    372\n    373\n    374\n    375\n    376\n    377\n    378...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:487"}, {"type": "document", "content": "|...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:488"}, {"type": "document", "content": "@dataclass(init=False)\n    class AnthropicModel(Model):\n        \"\"\"A model that uses the Anthropic A...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.416458", "id": "text_data\\anthropic.txt:489"}, {"type": "document", "content": "def __init__(\n            self,\n            model_name: AnthropicModelName,\n            *,\n         ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:490"}, {"type": "concept", "id": "providerasyncanthropic"}, {"type": "document", "content": "if isinstance(provider, str):\n                provider = infer_provider(provider)\n            self.c...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:491"}, {"type": "concept", "id": "modelrequestparameters"}, {"type": "concept", "id": "isinstanceprovider"}, {"type": "document", "content": "return self._process_response(response), _map_usage(response)\n    \n        @asynccontextmanager\n    ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:492"}, {"type": "document", "content": "\"\"\"The model name.\"\"\"\n            return self._model_name\n    \n        @property\n        def system(...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:493"}, {"type": "concept", "id": "messagescreate"}, {"type": "document", "content": "model_settings: AnthropicModelSettings,\n            model_request_parameters: ModelRequestParameters...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:494"}, {"type": "concept", "id": "anthropicmodelsettings"}, {"type": "concept", "id": "anthropicmessage"}, {"type": "document", "content": "if not model_request_parameters.allow_text_result:\n                    tool_choice = {'type': 'any'}...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:495"}, {"type": "concept", "id": "toolchoice"}, {"type": "concept", "id": "allowparalleltoolcalls"}, {"type": "concept", "id": "modelrequestparametersallowtextresult"}, {"type": "concept", "id": "modelsettingsgetparalleltoolcalls"}, {"type": "document", "content": "model=self._model_name,\n                    tools=tools or NOT_GIVEN,\n                    tool_choic...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:496"}, {"type": "concept", "id": "notgiven"}, {"type": "concept", "id": "modelselfmodelname"}, {"type": "concept", "id": "toolstools"}, {"type": "concept", "id": "toolchoicetoolchoice"}, {"type": "document", "content": "raise\n    \n        def _process_response(self, response: AnthropicMessage) -> ModelResponse:\n       ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:497"}, {"type": "concept", "id": "isinstanceitem"}, {"type": "concept", "id": "processresponseself"}, {"type": "document", "content": ")\n                    )\n    \n            return ModelResponse(items, model_name=response.model)\n    ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:498"}, {"type": "concept", "id": "modelresponseitems"}, {"type": "concept", "id": "modelnameresponsemodel"}, {"type": "document", "content": "return AnthropicStreamedResponse(\n                _model_name=self._model_name, _response=peekable_r...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:499"}, {"type": "concept", "id": "selfmaptooldefinitionr"}, {"type": "concept", "id": "modelrequestparametersresulttools"}, {"type": "document", "content": "system_prompt: str = ''\n            anthropic_messages: list[MessageParam] = []\n            for m in...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.422441", "id": "text_data\\anthropic.txt:500"}, {"type": "concept", "id": "isinstancerequestpart"}, {"type": "concept", "id": "anthropicmessages"}, {"type": "concept", "id": "listmessageparam"}, {"type": "document", "content": "user_content_params.append(content)\n                        elif isinstance(request_part, ToolReturn...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:501"}, {"type": "concept", "id": "toolresultblockparam"}, {"type": "concept", "id": "usercontentparamsappendcontent"}, {"type": "concept", "id": "toolreturnpart"}, {"type": "concept", "id": "tooluseidguardtoolcallidtrequestpart"}, {"type": "document", "content": "if request_part.tool_name is None:\n                                retry_param = TextBlockParam(type...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:502"}, {"type": "concept", "id": "retryparam"}, {"type": "concept", "id": "requestparttoolname"}, {"type": "concept", "id": "textblockparamtypetext"}, {"type": "concept", "id": "textrequestpartmodelresponse"}, {"type": "document", "content": "elif isinstance(m, ModelResponse):\n                    assistant_content_params: list[TextBlockParam...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:503"}, {"type": "concept", "id": "tooluseblockparam"}, {"type": "concept", "id": "isinstancem"}, {"type": "concept", "id": "assistantcontentparams"}, {"type": "concept", "id": "listtextblockparam"}, {"type": "document", "content": ")\n                            assistant_content_params.append(tool_use_block_param)\n                ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:504"}, {"type": "concept", "id": "assistantcontentparamsappendtooluseblockparam"}, {"type": "concept", "id": "anthropicmessagesappendmessageparamroleassistant"}, {"type": "concept", "id": "contentassistantcontentparams"}, {"type": "concept", "id": "assertneverm"}, {"type": "document", "content": "if isinstance(item, str):\n                        yield TextBlockParam(text=item, type='text')\n     ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:505"}, {"type": "concept", "id": "itemmediatype"}, {"type": "concept", "id": "textblockparamtextitem"}, {"type": "concept", "id": "typetext"}, {"type": "document", "content": "media_type='application/pdf',\n                                    type='base64',\n                   ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:506"}, {"type": "concept", "id": "typedocument"}, {"type": "concept", "id": "itemurl"}, {"type": "concept", "id": "mediatypeapplicationpdf"}, {"type": "document", "content": "elif item.media_type == 'text/plain':\n                            response = await cached_async_http...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:507"}, {"type": "concept", "id": "runtimeerrorfunsupported"}, {"type": "concept", "id": "textplain"}, {"type": "document", "content": "@staticmethod\n        def _map_tool_definition(f: ToolDefinition) -> ToolParam:\n            return {...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:508"}, {"type": "concept", "id": "maptooldefinitionf"}, {"type": "concept", "id": "tooldefinition"}, {"type": "concept", "id": "toolparam"}, {"type": "document", "content": "__init__(\n        model_name: AnthropicModelName,\n        *,\n        provider: (\n            [Litera...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:509"}, {"type": "document", "content": "Initialize an Anthropic model.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---  ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:510"}, {"type": "concept", "id": "initialize"}, {"type": "document", "content": "116\n    117\n    118\n    119\n    120\n    121\n    122\n    123\n    124\n    125\n    126\n    127\n    128\n...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:511"}, {"type": "document", "content": "def __init__(\n        self,\n        model_name: AnthropicModelName,\n        *,\n        provider: Lit...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:512"}, {"type": "document", "content": "provider = infer_provider(provider)\n        self.client = provider.client\n      \n  \n---|---  \n  \n###...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:513"}, {"type": "concept", "id": "inferproviderprovider"}, {"type": "concept", "id": "selfclient"}, {"type": "concept", "id": "providerclient"}, {"type": "document", "content": "model_name: AnthropicModelName\n    \n\nThe model name.\n\n####  system `property`\n\n    \n    \n    system:...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:514"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/anthropic.py`\n\n    \n    \n    410\n    411\n    412...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:515"}, {"type": "concept", "id": "pydanticaislimpydanticaimodelsanthropicpy"}, {"type": "document", "content": "@dataclass\n    class AnthropicStreamedResponse(StreamedResponse):\n        \"\"\"Implementation of `Stre...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:516"}, {"type": "concept", "id": "currentblock"}, {"type": "concept", "id": "anthropicstreamedresponsestreamedresponse"}, {"type": "document", "content": "yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=current_block.text)\n  ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:517"}, {"type": "concept", "id": "maybeevent"}, {"type": "concept", "id": "selfpartsmanagerhandletextdeltavendorpartidcontent"}, {"type": "concept", "id": "contentcurrentblocktext"}, {"type": "concept", "id": "isinstancecurrentblock"}, {"type": "document", "content": "if isinstance(event.delta, TextDelta):\n                        yield self._parts_manager.handle_text...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:518"}, {"type": "concept", "id": "valid"}, {"type": "concept", "id": "isinstanceeventdelta"}, {"type": "concept", "id": "textdelta"}, {"type": "document", "content": "except JSONDecodeError:\n                            current_json += event.delta.partial_json\n       ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:519"}, {"type": "concept", "id": "jsondecodeerror"}, {"type": "concept", "id": "currentjson"}, {"type": "concept", "id": "eventdeltapartialjson"}, {"type": "document", "content": "current_block = None\n    \n        @property\n        def model_name(self) -> AnthropicModelName:\n    ...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:520"}, {"type": "concept", "id": "modelnameself"}, {"type": "document", "content": "model_name: AnthropicModelName\n    \n\nGet the model name of the response.\n\n####  timestamp `property`...", "source": "text_data\\anthropic.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\anthropic.txt:521"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nBank support...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\bank-support.txt:521"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\bank-support.txt:522"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\bank-support.txt:523"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\bank-support.txt:524"}, {"type": "document", "content": "* [ Pydantic Model  ](../pydantic-model/)\n    * [ Weather agent  ](../weather-agent/)\n    * Bank sup...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\bank-support.txt:525"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../../api/messages/)\n    * [ pydantic_ai.exceptions  ](../../api/excepti...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\bank-support.txt:526"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../api/models/groq/)\n    * [ pydantic_ai.models.instrumented  ](.....", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\bank-support.txt:527"}, {"type": "concept", "id": "pydanticaimodelsgroq"}, {"type": "concept", "id": "apimodelsgroq"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../api/pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\bank-support.txt:528"}, {"type": "concept", "id": "apipydanticgraphmermaid"}, {"type": "document", "content": "Table of contents\n\n  * Running the Example \n  * Example Code \n\n# Bank support\n\nSmall but complete ex...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.423192", "id": "text_data\\bank-support.txt:529"}, {"type": "concept", "id": "pydanticaiexamplesbanksupport"}, {"type": "document", "content": "from dataclasses import dataclass\n    \n    from pydantic import BaseModel, Field\n    \n    from pydan...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\bank-support.txt:530"}, {"type": "concept", "id": "database"}, {"type": "concept", "id": "classmethod"}, {"type": "document", "content": "raise ValueError('Customer not found')\n    \n    \n    @dataclass\n    class SupportDependencies:\n     ...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\bank-support.txt:531"}, {"type": "concept", "id": "customer"}, {"type": "concept", "id": "level"}, {"type": "concept", "id": "query"}, {"type": "document", "content": "\"Reply using the customer's name.\"\n        ),\n    )\n    \n    \n    @support_agent.system_prompt\n    a...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\bank-support.txt:532"}, {"type": "concept", "id": "customers"}, {"type": "document", "content": "return f'${balance:.2f}'\n    \n    \n    if __name__ == '__main__':\n        deps = SupportDependencies...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\bank-support.txt:533"}, {"type": "concept", "id": "transactions"}, {"type": "document", "content": "\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\bank-support.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\bank-support.txt:534"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:534"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:535"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:536"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:537"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:538"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:539"}, {"type": "concept", "id": "pydanticaimodels"}, {"type": "document", "content": "* ALLOW_MODEL_REQUESTS \n      * check_allow_model_requests \n      * override_allow_model_requests \n ...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:540"}, {"type": "concept", "id": "allowmodelrequests"}, {"type": "concept", "id": "checkallowmodelrequests"}, {"type": "concept", "id": "overrideallowmodelrequests"}, {"type": "concept", "id": "pydanticaimodelsopenai"}, {"type": "document", "content": "* [ pydantic_ai.providers  ](../../providers/)\n    * [ pydantic_graph  ](../../pydantic_graph/graph/...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:541"}, {"type": "document", "content": "Table of contents\n\n  * models \n  * KnownModelName \n  * ModelRequestParameters \n  * Model \n    * requ...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:542"}, {"type": "concept", "id": "knownmodelname"}, {"type": "document", "content": "KnownModelName = [TypeAliasType](https://typing-extensions.readthedocs.io/en/latest/index.html#typin...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:543"}, {"type": "concept", "id": "typealiastypehttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionstypealiastype"}, {"type": "concept", "id": "typingextensionstypealiastype"}, {"type": "concept", "id": "literalhttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionsliteral"}, {"type": "concept", "id": "typingextensionsliteral"}, {"type": "document", "content": "\"bedrock:amazon.titan-text-express-v1\",\n            \"bedrock:us.amazon.nova-pro-v1:0\",\n            \"...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:544"}, {"type": "concept", "id": "bedrockamazontitantextexpressv1"}, {"type": "concept", "id": "bedrockusamazonnovaprov10"}, {"type": "concept", "id": "bedrockusamazonnovalitev10"}, {"type": "concept", "id": "bedrockusamazonnovamicrov10"}, {"type": "concept", "id": "bedrockanthropicclaude35sonnet20241022v20"}, {"type": "document", "content": "\"bedrock:anthropic.claude-3-haiku-20240307-v1:0\",\n            \"bedrock:us.anthropic.claude-3-haiku-2...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:545"}, {"type": "concept", "id": "bedrockanthropicclaude3haiku20240307v10"}, {"type": "concept", "id": "bedrockusanthropicclaude3haiku20240307v10"}, {"type": "concept", "id": "bedrockanthropicclaude3opus20240229v10"}, {"type": "concept", "id": "bedrockusanthropicclaude3opus20240229v10"}, {"type": "concept", "id": "bedrockanthropicclaude35sonnet20240620v10"}, {"type": "document", "content": "\"bedrock:meta.llama3-8b-instruct-v1:0\",\n            \"bedrock:meta.llama3-70b-instruct-v1:0\",\n       ...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:546"}, {"type": "concept", "id": "bedrockmetallama38binstructv10"}, {"type": "concept", "id": "bedrockmetallama370binstructv10"}, {"type": "concept", "id": "bedrockmetallama318binstructv10"}, {"type": "concept", "id": "bedrockusmetallama318binstructv10"}, {"type": "concept", "id": "bedrockmetallama3170binstructv10"}, {"type": "document", "content": "\"bedrock:mistral.mixtral-8x7b-instruct-v0:1\",\n            \"bedrock:mistral.mistral-large-2402-v1:0\",...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:547"}, {"type": "concept", "id": "bedrockmistralmixtral8x7binstructv01"}, {"type": "concept", "id": "bedrockmistralmistrallarge2402v10"}, {"type": "concept", "id": "bedrockmistralmistrallarge2407v10"}, {"type": "concept", "id": "claude35sonnetlatest"}, {"type": "concept", "id": "claude3opuslatest"}, {"type": "document", "content": "\"cohere:command-r7b-12-2024\",\n            \"deepseek:deepseek-chat\",\n            \"deepseek:deepseek-r...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:548"}, {"type": "concept", "id": "coherecommandr7b122024"}, {"type": "concept", "id": "deepseekdeepseekchat"}, {"type": "concept", "id": "deepseekdeepseekreasoner"}, {"type": "concept", "id": "googleglagemini10pro"}, {"type": "concept", "id": "googleglagemini15flash"}, {"type": "document", "content": "\"google-vertex:gemini-1.5-flash-8b\",\n            \"google-vertex:gemini-1.5-pro\",\n            \"google...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:549"}, {"type": "concept", "id": "googlevertexgemini15flash8b"}, {"type": "concept", "id": "googlevertexgemini15pro"}, {"type": "concept", "id": "googlevertexgemini20flashexp"}, {"type": "concept", "id": "googlevertexgemini20flashthinkingexp0121"}, {"type": "concept", "id": "googlevertexgeminiexp1206"}, {"type": "document", "content": "\"gpt-4-0125-preview\",\n            \"gpt-4-0314\",\n            \"gpt-4-0613\",\n            \"gpt-4-1106-pr...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:550"}, {"type": "concept", "id": "gpt40125preview"}, {"type": "concept", "id": "gpt40314"}, {"type": "concept", "id": "gpt40613"}, {"type": "concept", "id": "gpt41106preview"}, {"type": "concept", "id": "gpt432k"}, {"type": "document", "content": "\"gpt-4o-mini-search-preview\",\n            \"gpt-4o-mini-search-preview-2025-03-11\",\n            \"gpt-...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.424353", "id": "text_data\\base.txt:551"}, {"type": "concept", "id": "gpt4ominisearchpreview"}, {"type": "concept", "id": "gpt4ominisearchpreview20250311"}, {"type": "concept", "id": "gpt4osearchpreview"}, {"type": "concept", "id": "gpt4osearchpreview20250311"}, {"type": "concept", "id": "groqdistilwhisperlargev3en"}, {"type": "document", "content": "\"groq:deepseek-r1-distill-qwen-32b\",\n            \"groq:deepseek-r1-distill-llama-70b\",\n            \"...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:552"}, {"type": "concept", "id": "groqdeepseekr1distillqwen32b"}, {"type": "concept", "id": "groqdeepseekr1distillllama70b"}, {"type": "concept", "id": "groqllama3370bspecdec"}, {"type": "concept", "id": "groqllama321bpreview"}, {"type": "concept", "id": "groqllama323bpreview"}, {"type": "document", "content": "\"openai:chatgpt-4o-latest\",\n            \"openai:gpt-3.5-turbo\",\n            \"openai:gpt-3.5-turbo-01...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:553"}, {"type": "concept", "id": "openaichatgpt4olatest"}, {"type": "concept", "id": "openaigpt35turbo"}, {"type": "concept", "id": "openaigpt35turbo0125"}, {"type": "concept", "id": "openaigpt35turbo0301"}, {"type": "concept", "id": "openaigpt35turbo0613"}, {"type": "document", "content": "\"openai:gpt-4-vision-preview\",\n            \"openai:gpt-4o\",\n            \"openai:gpt-4o-2024-05-13\",\n...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:554"}, {"type": "concept", "id": "openaigpt4visionpreview"}, {"type": "concept", "id": "openaigpt4o"}, {"type": "concept", "id": "openaigpt4o20240513"}, {"type": "concept", "id": "openaigpt4o20240806"}, {"type": "concept", "id": "openaigpt4o20241120"}, {"type": "document", "content": "\"openai:o1\",\n            \"openai:o1-2024-12-17\",\n            \"openai:o1-mini\",\n            \"openai:o...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:555"}, {"type": "concept", "id": "openaio1"}, {"type": "concept", "id": "openaio120241217"}, {"type": "concept", "id": "openaio1mini"}, {"type": "concept", "id": "openaio1mini20240912"}, {"type": "concept", "id": "openaio1preview"}, {"type": "document", "content": "Known model names that can be used with the `model` parameter of\n[`Agent`](../../agent/#pydantic_ai....", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:556"}, {"type": "document", "content": "Bases: `[ABC](https://docs.python.org/3/library/abc.html#abc.ABC \"abc.ABC\")`\n\nAbstract class for a m...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:557"}, {"type": "concept", "id": "abchttpsdocspythonorg3libraryabchtmlabcabc"}, {"type": "concept", "id": "abcabc"}, {"type": "concept", "id": "abstract"}, {"type": "document", "content": "class Model(ABC):\n        \"\"\"Abstract class for a model.\"\"\"\n    \n        @abstractmethod\n        asy...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:558"}, {"type": "document", "content": "\"\"\"Make a request to the model and return a streaming response.\"\"\"\n            # This method is not ...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:559"}, {"type": "concept", "id": "required"}, {"type": "document", "content": "\"\"\"The system / model provider, ex: openai.\n    \n            Use to populate the `gen_ai.system` Ope...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:560"}, {"type": "concept", "id": "populate"}, {"type": "document", "content": "request(\n        messages: [list](https://docs.python.org/3/library/stdtypes.html#list)[[ModelMessag...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:561"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n    \n    \n    253\n    254\n    255\n...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:562"}, {"type": "document", "content": "request_stream(\n        messages: [list](https://docs.python.org/3/library/stdtypes.html#list)[[Mode...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:563"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n    \n    \n    263\n    264\n    265\n...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:564"}, {"type": "concept", "id": "pydanticaislimpydanticaimodelsinitpy"}, {"type": "document", "content": "|\n\n    \n    \n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: ...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:565"}, {"type": "document", "content": "model_name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe model name.\n\n####  ...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:566"}, {"type": "document", "content": "Bases: `[ABC](https://docs.python.org/3/library/abc.html#abc.ABC \"abc.ABC\")`\n\nStreamed response from...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:567"}, {"type": "concept", "id": "streamed"}, {"type": "document", "content": "@dataclass\n    class StreamedResponse(ABC):\n        \"\"\"Streamed response from an LLM when calling a ...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:568"}, {"type": "concept", "id": "initfalse"}, {"type": "concept", "id": "selfeventiterator"}, {"type": "concept", "id": "asynciteratormodelresponsestreamevent"}, {"type": "document", "content": "return self._event_iterator\n    \n        @abstractmethod\n        async def _get_event_iterator(self)...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:569"}, {"type": "document", "content": "yield\n    \n        def get(self) -> ModelResponse:\n            \"\"\"Build a [`ModelResponse`][pydantic...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:570"}, {"type": "document", "content": "@property\n        @abstractmethod\n        def timestamp(self) -> datetime:\n            \"\"\"Get the ti...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:571"}, {"type": "concept", "id": "abstractmethod"}, {"type": "concept", "id": "timestampself"}, {"type": "concept", "id": "datetime"}, {"type": "document", "content": "__aiter__() -> [AsyncIterator](https://docs.python.org/3/library/collections.abc.html#collections.ab...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:572"}, {"type": "concept", "id": "collectionsabcasynciteratormodelresponsestreameventmessagespydanticaimessagesmodelresponsestreamevent"}, {"type": "concept", "id": "pydanticaimessagesmodelresponsestreamevent"}, {"type": "document", "content": "309\n    310\n    311\n    312\n    313\n\n|\n\n    \n    \n    def __aiter__(self) -> AsyncIterator[ModelResp...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:573"}, {"type": "concept", "id": "modelresponsemessagespydanticaimessagesmodelresponse"}, {"type": "concept", "id": "aiterself"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n    \n    \n    328\n    329\n    330\n...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:574"}, {"type": "document", "content": "334\n    335\n    336\n\n|\n\n    \n    \n    def usage(self) -> Usage:\n        \"\"\"Get the usage of the resp...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:575"}, {"type": "document", "content": "Whether to allow requests to models.\n\nThis global setting allows you to disable request to most mode...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.425484", "id": "text_data\\base.txt:576"}, {"type": "document", "content": "Raises:\n\nType | Description  \n---|---  \n`[RuntimeError](https://docs.python.org/3/library/exceptions...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\base.txt:577"}, {"type": "concept", "id": "raises"}, {"type": "concept", "id": "runtimeerrorhttpsdocspythonorg3libraryexceptionshtmlruntimeerror"}, {"type": "document", "content": "|\n\n    \n    \n    def check_allow_model_requests() -> None:\n        \"\"\"Check if model requests are al...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\base.txt:578"}, {"type": "concept", "id": "allowed"}, {"type": "document", "content": "override_allow_model_requests(\n        allow_model_requests: [bool](https://docs.python.org/3/librar...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\base.txt:579"}, {"type": "concept", "id": "iteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabciterator"}, {"type": "document", "content": "|\n\n    \n    \n    @contextmanager\n    def override_allow_model_requests(allow_model_requests: bool) -...", "source": "text_data\\base.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\base.txt:580"}, {"type": "concept", "id": "oldvalue"}, {"type": "concept", "id": "pyright"}, {"type": "concept", "id": "ignorereportconstantredefinition"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:580"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:581"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:582"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:583"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:584"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:585"}, {"type": "document", "content": "* model_name \n          * system \n          * __init__ \n        * BedrockStreamedResponse \n         ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:586"}, {"type": "concept", "id": "bedrockstreamedresponse"}, {"type": "concept", "id": "pydanticaimodelscohere"}, {"type": "document", "content": "* [ pydantic_graph.nodes  ](../../pydantic_graph/nodes/)\n    * [ pydantic_graph.persistence  ](../.....", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:587"}, {"type": "document", "content": "Table of contents\n\n  * Setup \n    * bedrock \n    * LatestBedrockModelNames \n    * BedrockModelName \n...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:588"}, {"type": "concept", "id": "latestbedrockmodelnames"}, {"type": "document", "content": "LatestBedrockModelNames = [Literal](https://docs.python.org/3/library/typing.html#typing.Literal \"ty...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:589"}, {"type": "concept", "id": "typingliteral"}, {"type": "concept", "id": "amazontitantg1large"}, {"type": "concept", "id": "amazontitantextlitev1"}, {"type": "document", "content": "\"us.anthropic.claude-3-sonnet-20240229-v1:0\",\n        \"anthropic.claude-3-haiku-20240307-v1:0\",\n    ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:590"}, {"type": "concept", "id": "usanthropicclaude3sonnet20240229v10"}, {"type": "concept", "id": "anthropicclaude3haiku20240307v10"}, {"type": "concept", "id": "usanthropicclaude3haiku20240307v10"}, {"type": "concept", "id": "anthropicclaude3opus20240229v10"}, {"type": "concept", "id": "usanthropicclaude3opus20240229v10"}, {"type": "document", "content": "\"us.meta.llama3-1-8b-instruct-v1:0\",\n        \"meta.llama3-1-70b-instruct-v1:0\",\n        \"us.meta.lla...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:591"}, {"type": "concept", "id": "usmetallama318binstructv10"}, {"type": "concept", "id": "metallama3170binstructv10"}, {"type": "concept", "id": "usmetallama3170binstructv10"}, {"type": "concept", "id": "metallama31405binstructv10"}, {"type": "concept", "id": "usmetallama3211binstructv10"}, {"type": "document", "content": "Latest Bedrock models.\n\n###  BedrockModelName `module-attribute`\n\n    \n    \n    BedrockModelName = [...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:592"}, {"type": "concept", "id": "bedrock"}, {"type": "concept", "id": "latest"}, {"type": "concept", "id": "bedrockmodelname"}, {"type": "document", "content": "Settings for Bedrock models.\n\nALL FIELDS MUST BE `bedrock_` PREFIXED SO YOU CAN MERGE THEM WITH OTHE...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:593"}, {"type": "concept", "id": "fields"}, {"type": "concept", "id": "prefixed"}, {"type": "document", "content": "122\n    123\n    124\n    125\n    126\n    127\n    128\n    129\n    130\n    131\n    132\n    133\n    134\n...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:594"}, {"type": "document", "content": "210\n    211\n    212\n    213\n    214\n    215\n    216\n    217\n    218\n    219\n    220\n    221\n    222\n...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:595"}, {"type": "document", "content": "300\n    301\n    302\n    303\n    304\n    305\n    306\n    307\n    308\n    309\n    310\n    311\n    312\n...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:596"}, {"type": "document", "content": "390\n    391\n    392\n    393\n    394\n    395\n    396\n    397\n    398\n    399\n    400\n    401\n    402\n...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:597"}, {"type": "document", "content": "|...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:598"}, {"type": "document", "content": "@dataclass(init=False)\n    class BedrockConverseModel(Model):\n        \"\"\"A model that uses the Bedro...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:599"}, {"type": "document", "content": "):\n            \"\"\"Initialize a Bedrock model.\n    \n            Args:\n                model_name: The...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:600"}, {"type": "document", "content": "provider = infer_provider(provider)\n            self.client = cast('BedrockRuntimeClient', provider....", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:601"}, {"type": "document", "content": "'description': f.description,\n                    'inputSchema': {'json': f.parameters_json_schema},...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:602"}, {"type": "document", "content": "async def request_stream(\n            self,\n            messages: list[ModelMessage],\n            mo...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:603"}, {"type": "document", "content": "if text := item.get('text'):\n                        items.append(TextPart(content=text))\n          ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.426645", "id": "text_data\\bedrock.txt:604"}, {"type": "concept", "id": "tooluse"}, {"type": "concept", "id": "itemgettext"}, {"type": "concept", "id": "itemsappendtextpartcontenttext"}, {"type": "concept", "id": "itemgettooluse"}, {"type": "document", "content": "response_tokens=response['usage']['outputTokens'],\n                total_tokens=response['usage']['t...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:605"}, {"type": "document", "content": "model_settings: ModelSettings | None,\n            model_request_parameters: ModelRequestParameters,\n...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:606"}, {"type": "concept", "id": "converseresponsetypedef"}, {"type": "concept", "id": "supporttoolschoice"}, {"type": "document", "content": "tool_choice: ToolChoiceTypeDef = {}\n            elif not model_request_parameters.allow_text_result:...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:607"}, {"type": "concept", "id": "inferenceconfig"}, {"type": "concept", "id": "bedrockmessages"}, {"type": "document", "content": "if tools\n                    else {}\n                ),\n            }\n    \n            if stream:\n  ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:608"}, {"type": "concept", "id": "params"}, {"type": "concept", "id": "inferenceconfigurationtypedef"}, {"type": "document", "content": "inference_config: InferenceConfigurationTypeDef = {}\n    \n            if max_tokens := model_setting...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:609"}, {"type": "concept", "id": "maxtokens"}, {"type": "concept", "id": "temperature"}, {"type": "concept", "id": "stopsequences"}, {"type": "document", "content": "\"\"\"Just maps a `pydantic_ai.Message` to the Bedrock `MessageUnionTypeDef`.\"\"\"\n            system_pro...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:610"}, {"type": "concept", "id": "isinstancepart"}, {"type": "concept", "id": "pydanticaimessage"}, {"type": "concept", "id": "messageuniontypedef"}, {"type": "document", "content": "{\n                                    'role': 'user',\n                                    'content':...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:611"}, {"type": "concept", "id": "toolresult"}, {"type": "concept", "id": "tooluseid"}, {"type": "concept", "id": "parttoolcallid"}, {"type": "concept", "id": "partmodelresponsestr"}, {"type": "document", "content": "elif isinstance(part, RetryPromptPart):\n                            # TODO(Marcelo): We need to add ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:612"}, {"type": "concept", "id": "retrypromptpart"}, {"type": "concept", "id": "todomarcelo"}, {"type": "concept", "id": "parttoolname"}, {"type": "document", "content": "'toolResult': {\n                                                    'toolUseId': part.tool_call_id,\n...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:613"}, {"type": "concept", "id": "partmodelresponse"}, {"type": "document", "content": "if isinstance(item, TextPart):\n                            content.append({'text': item.content})\n  ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:614"}, {"type": "concept", "id": "contentappendtext"}, {"type": "concept", "id": "textpart"}, {"type": "concept", "id": "itemcontent"}, {"type": "document", "content": "content.append({'text': part.content})\n            else:\n                document_count = 0\n        ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:615"}, {"type": "concept", "id": "documentcount"}, {"type": "concept", "id": "partcontent"}, {"type": "document", "content": "elif item.is_image:\n                            assert format in ('jpeg', 'png', 'gif', 'webp')\n    ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:616"}, {"type": "concept", "id": "imageurl"}, {"type": "concept", "id": "itemisimage"}, {"type": "concept", "id": "contentappendimage"}, {"type": "document", "content": "image: ImageBlockTypeDef = {'format': format, 'source': {'bytes': response.content}}\n               ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:617"}, {"type": "concept", "id": "responsecontent"}, {"type": "document", "content": "return [{'role': 'user', 'content': content}]\n    \n        @staticmethod\n        def _map_tool_call(...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:618"}, {"type": "concept", "id": "maptoolcallt"}, {"type": "document", "content": "model_name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe model name.\n\n####  ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:619"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`model_name` |  `BedrockModelName` |  The na...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:620"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/bedrock.py`...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:621"}, {"type": "concept", "id": "pydanticaislimpydanticaimodelsbedrockpy"}, {"type": "document", "content": "141\n    142\n    143\n    144\n    145\n    146\n    147\n    148\n    149\n    150\n    151\n    152\n    153\n...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:622"}, {"type": "document", "content": "def __init__(\n        self,\n        model_name: BedrockModelName,\n        *,\n        provider: Liter...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:623"}, {"type": "concept", "id": "providerbaseclient"}, {"type": "document", "content": "\"\"\"\n        self._model_name = model_name\n    \n        if isinstance(provider, str):\n            pro...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:624"}, {"type": "concept", "id": "selfmodelname"}, {"type": "document", "content": "Bases: `[StreamedResponse](../base/#pydantic_ai.models.StreamedResponse\n\"pydantic_ai.models.Streamed...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:625"}, {"type": "concept", "id": "streamedresponsebasepydanticaimodelsstreamedresponse"}, {"type": "concept", "id": "pydanticaimodelsstreamedresponse"}, {"type": "concept", "id": "implementation"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/bedrock.py`\n\n    \n    \n    410\n    411\n    412\n ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:626"}, {"type": "document", "content": "@dataclass\n    class BedrockStreamedResponse(StreamedResponse):\n        \"\"\"Implementation of `Stream...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:627"}, {"type": "concept", "id": "bedrockstreamedresponsestreamedresponse"}, {"type": "document", "content": "\"\"\"\n            chunk: ConverseStreamOutputTypeDef\n            tool_id: str | None = None\n          ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:628"}, {"type": "concept", "id": "chunk"}, {"type": "concept", "id": "continue"}, {"type": "concept", "id": "conversestreamoutputtypedef"}, {"type": "concept", "id": "toolid"}, {"type": "document", "content": "start = chunk['contentBlockStart']['start']\n                    if 'toolUse' in start:\n             ...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:629"}, {"type": "concept", "id": "chunkcontentblockstartstart"}, {"type": "concept", "id": "toolusestart"}, {"type": "document", "content": "index = chunk['contentBlockDelta']['contentBlockIndex']\n                    delta = chunk['contentBl...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:630"}, {"type": "concept", "id": "index"}, {"type": "document", "content": "yield maybe_event\n    \n        @property\n        def timestamp(self) -> datetime:\n            return...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:631"}, {"type": "concept", "id": "resultusage"}, {"type": "document", "content": "model_name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nGet the model name of t...", "source": "text_data\\bedrock.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\bedrock.txt:632"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nChat App wit...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\chat-app.txt:632"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\chat-app.txt:633"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\chat-app.txt:634"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.427778", "id": "text_data\\chat-app.txt:635"}, {"type": "document", "content": "* [ Pydantic Model  ](../pydantic-model/)\n    * [ Weather agent  ](../weather-agent/)\n    * [ Bank s...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.428906", "id": "text_data\\chat-app.txt:636"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../api/result/)\n    * [ pydantic_ai.messages  ](../../api/messages/)\n  ...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.428906", "id": "text_data\\chat-app.txt:637"}, {"type": "concept", "id": "apiresult"}, {"type": "document", "content": "* [ pydantic_ai.models.gemini  ](../../api/models/gemini/)\n    * [ pydantic_ai.models.groq  ](../../...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.428906", "id": "text_data\\chat-app.txt:638"}, {"type": "concept", "id": "pydanticaimodelsgemini"}, {"type": "concept", "id": "apimodelsgemini"}, {"type": "document", "content": "* [ pydantic_graph.persistence  ](../../api/pydantic_graph/persistence/)\n    * [ pydantic_graph.merm...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.428906", "id": "text_data\\chat-app.txt:639"}, {"type": "concept", "id": "apipydanticgraphpersistence"}, {"type": "document", "content": "Table of contents\n\n  * Running the Example \n  * Example Code \n\n# Chat App with FastAPI\n\nSimple chat ...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.428906", "id": "text_data\\chat-app.txt:640"}, {"type": "concept", "id": "demonstrates"}, {"type": "concept", "id": "between"}, {"type": "document", "content": "pipuv\n\n    \n    \n    python -m pydantic_ai_examples.chat_app\n    \n    \n    \n    uv run -m pydantic_a...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.428906", "id": "text_data\\chat-app.txt:641"}, {"type": "concept", "id": "pydanticaiexampleschatapp"}, {"type": "concept", "id": "pipuv"}, {"type": "concept", "id": "localhost8000httplocalhost8000"}, {"type": "document", "content": "from __future__ import annotations as _annotations\n    \n    import asyncio\n    import json\n    impor...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.428906", "id": "text_data\\chat-app.txt:642"}, {"type": "concept", "id": "annotations"}, {"type": "concept", "id": "future"}, {"type": "document", "content": "from pydantic_ai import Agent\n    from pydantic_ai.exceptions import UnexpectedModelBehavior\n    fro...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.428906", "id": "text_data\\chat-app.txt:643"}, {"type": "document", "content": "app = fastapi.FastAPI(lifespan=lifespan)\n    logfire.instrument_fastapi(app)\n    \n    \n    @app.get(...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.428906", "id": "text_data\\chat-app.txt:644"}, {"type": "concept", "id": "fileresponse"}, {"type": "concept", "id": "fileresponsethisdir"}, {"type": "document", "content": "msgs = await database.get_messages()\n        return Response(\n            b'\\n'.join(json.dumps(to_c...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.428906", "id": "text_data\\chat-app.txt:645"}, {"type": "concept", "id": "databasegetmessages"}, {"type": "document", "content": "'timestamp': first_part.timestamp.isoformat(),\n                    'content': first_part.content,\n  ...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:646"}, {"type": "concept", "id": "firstpartcontent"}, {"type": "document", "content": "\"\"\"Streams new line delimited JSON `Message`s to the client.\"\"\"\n            # stream the user prompt...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:647"}, {"type": "concept", "id": "history"}, {"type": "concept", "id": "streams"}, {"type": "document", "content": "async for text in result.stream(debounce_by=0.01):\n                    # text here is a `str` and th...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:648"}, {"type": "concept", "id": "resultstreamdebounceby001"}, {"type": "concept", "id": "frontend"}, {"type": "document", "content": "\"\"\"Rudimentary database to store chat messages in SQLite.\n    \n        The SQLite standard library p...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:649"}, {"type": "concept", "id": "executor"}, {"type": "concept", "id": "sqlite"}, {"type": "concept", "id": "rudimentary"}, {"type": "concept", "id": "store"}, {"type": "document", "content": "con = await loop.run_in_executor(executor, cls._connect, file)\n                slf = cls(con, loop, ...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:650"}, {"type": "concept", "id": "loopruninexecutorexecutor"}, {"type": "concept", "id": "clsconnect"}, {"type": "concept", "id": "clscon"}, {"type": "document", "content": "await self._asyncify(\n                self._execute,\n                'INSERT INTO messages (message_...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:651"}, {"type": "concept", "id": "selfasyncify"}, {"type": "concept", "id": "selfexecute"}, {"type": "concept", "id": "messagelist"}, {"type": "document", "content": "self, sql: LiteralString, *args: Any, commit: bool = False\n        ) -> sqlite3.Cursor:\n            ...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:652"}, {"type": "concept", "id": "commit"}, {"type": "concept", "id": "kwargs"}, {"type": "concept", "id": "ignore"}, {"type": "concept", "id": "literalstring"}, {"type": "document", "content": "Simple HTML page to render the app:\n\nchat_app.html...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:653"}, {"type": "concept", "id": "simple"}, {"type": "concept", "id": "render"}, {"type": "concept", "id": "chatapphtml"}, {"type": "document", "content": "<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewp...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:654"}, {"type": "concept", "id": "fontweight"}, {"type": "concept", "id": "display"}, {"type": "concept", "id": "block"}, {"type": "document", "content": "width: 30px;\n          height: 30px;\n          border: 3px solid #222;\n          border-bottom-color...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:655"}, {"type": "concept", "id": "rotation"}, {"type": "concept", "id": "transform"}, {"type": "concept", "id": "width"}, {"type": "concept", "id": "height"}, {"type": "concept", "id": "border"}, {"type": "document", "content": "<div id=\"spinner\"></div>\n        </div>\n        <form method=\"post\">\n          <input id=\"prompt-inp...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:656"}, {"type": "concept", "id": "script"}, {"type": "concept", "id": "idspinnerdiv"}, {"type": "concept", "id": "methodpost"}, {"type": "concept", "id": "idpromptinput"}, {"type": "document", "content": "// and transpile the TypeScript code in the browser\n      // this is (arguably) A neat demo trick, b...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:657"}, {"type": "concept", "id": "const"}, {"type": "concept", "id": "jscode"}, {"type": "concept", "id": "transpile"}, {"type": "document", "content": "TypeScript to handle rendering the messages, to keep this simple (and at the\nrisk of offending front...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:658"}, {"type": "concept", "id": "typescript"}, {"type": "concept", "id": "browser"}, {"type": "concept", "id": "handle"}, {"type": "concept", "id": "rendering"}, {"type": "document", "content": "// BIG FAT WARNING: to avoid the complexity of npm, this typescript is compiled in the browser\n    /...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:659"}, {"type": "concept", "id": "warning"}, {"type": "concept", "id": "avoid"}, {"type": "concept", "id": "complexity"}, {"type": "document", "content": "if (response.ok) {\n        const reader = response.body.getReader()\n        while (true) {\n         ...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:660"}, {"type": "concept", "id": "addmessagestext"}, {"type": "concept", "id": "responsestatus"}, {"type": "document", "content": "// in production, you might not want to keep this format all the way to the frontend\n    interface M...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:661"}, {"type": "concept", "id": "string"}, {"type": "document", "content": "for (const message of messages) {\n        // we use the timestamp as a crude element id\n        cons...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:662"}, {"type": "concept", "id": "msgdiv"}, {"type": "document", "content": "document.getElementById('error').classList.remove('d-none')\n      document.getElementById('spinner')...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:663"}, {"type": "concept", "id": "documentgetelementbyiderrorclasslistremovednone"}, {"type": "concept", "id": "documentgetelementbyidspinnerclasslistremoveactive"}, {"type": "document", "content": "// load messages on page load\n    fetch('/chat/').then(onFetchResponse).catch(onError)...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:664"}, {"type": "concept", "id": "fetchchatthenonfetchresponsecatchonerror"}, {"type": "document", "content": "\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\chat-app.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\chat-app.txt:665"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nCommand Line Inter...", "source": "text_data\\cli.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\cli.txt:665"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\cli.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\cli.txt:666"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\cli.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\cli.txt:667"}, {"type": "concept", "id": "command"}, {"type": "concept", "id": "interface"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\cli.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\cli.txt:668"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\cli.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\cli.txt:669"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\cli.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\cli.txt:670"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\cli.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\cli.txt:671"}, {"type": "document", "content": "Table of contents\n\n  * Installation \n  * Usage \n    * Choose a model \n    * Usage with uvx \n\n# Comma...", "source": "text_data\\cli.txt", "last_updated": "2025-04-03T16:58:09.429424", "id": "text_data\\cli.txt:672"}, {"type": "concept", "id": "installation"}, {"type": "document", "content": "## Installation\n\nTo use the CLI, you need to either install [`pydantic-ai`](../install/), or\ninstall...", "source": "text_data\\cli.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\cli.txt:673"}, {"type": "concept", "id": "install"}, {"type": "concept", "id": "pydanticaicli"}, {"type": "concept", "id": "registerpythonargcomplete"}, {"type": "concept", "id": "variable"}, {"type": "document", "content": "Then simply run:\n\n    \n    \n    pai\n    \n\nThis will start an interactive session where you can chat ...", "source": "text_data\\cli.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\cli.txt:674"}, {"type": "concept", "id": "interactive"}, {"type": "concept", "id": "session"}, {"type": "concept", "id": "markdown"}, {"type": "concept", "id": "multiline"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nClient\n\nType...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:674"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:675"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../)...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:676"}, {"type": "document", "content": "MCP\n\n      * Client  [ Client  ](./) Table of contents \n        * Install \n        * Usage \n        ...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:677"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:678"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../api/result/)\n    * [ pydantic_ai.messages  ](../../api/messages/)\n  ...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:679"}, {"type": "document", "content": "* [ pydantic_ai.models.gemini  ](../../api/models/gemini/)\n    * [ pydantic_ai.models.groq  ](../../...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:680"}, {"type": "document", "content": "* [ pydantic_graph.persistence  ](../../api/pydantic_graph/persistence/)\n    * [ pydantic_graph.merm...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:681"}, {"type": "document", "content": "Table of contents\n\n  * Install \n  * Usage \n    * SSE Client \n    * MCP \"stdio\" Server \n\n# Client\n\nPy...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:682"}, {"type": "concept", "id": "servers"}, {"type": "document", "content": "## Usage\n\nPydanticAI comes with two ways to connect to MCP servers:\n\n  * [`MCPServerHTTP`](../../api...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:683"}, {"type": "concept", "id": "connects"}, {"type": "concept", "id": "transport"}, {"type": "document", "content": "### SSE Client\n\n[`MCPServerHTTP`](../../api/mcp/#pydantic_ai.mcp.MCPServerHTTP) connects over\nHTTP u...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:684"}, {"type": "concept", "id": "mcpserverhttpapimcppydanticaimcpmcpserverhttp"}, {"type": "document", "content": "Before creating the SSE client, we need to run the server (docs [here](../run-\npython/)):\n\nterminal ...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:685"}, {"type": "document", "content": "1.   2.   3. \n\n_(This example is complete, it can be run \"as is\" with Python 3.10+ \u2014 you'll\nneed to ...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:686"}, {"type": "concept", "id": "answer"}, {"type": "document", "content": "You can visualise this clearly, and even see the code that's run by adding\nthree lines of code to in...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:687"}, {"type": "concept", "id": "visualise"}, {"type": "concept", "id": "clearly"}, {"type": "concept", "id": "thats"}, {"type": "concept", "id": "adding"}, {"type": "document", "content": "### MCP \"stdio\" Server\n\nThe other transport offered by MCP is the [stdio\ntransport](https://spec.mod...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:688"}, {"type": "concept", "id": "stdio"}, {"type": "concept", "id": "mcpserverstdioapimcppydanticaimcpmcpserverstdio"}, {"type": "concept", "id": "other"}, {"type": "document", "content": "mcp_stdio_client.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.mcp import MCP...", "source": "text_data\\client.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\client.txt:689"}, {"type": "concept", "id": "mcpstdioclientpy"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\cohere.txt:689"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\cohere.txt:690"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\cohere.txt:691"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\cohere.txt:692"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\cohere.txt:693"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.430712", "id": "text_data\\cohere.txt:694"}, {"type": "document", "content": "* CohereModelSettings \n        * CohereModel \n          * __init__ \n          * model_name \n        ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:695"}, {"type": "concept", "id": "coheremodelsettings"}, {"type": "concept", "id": "coheremodel"}, {"type": "document", "content": "* [ pydantic_graph.persistence  ](../../pydantic_graph/persistence/)\n    * [ pydantic_graph.mermaid ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:696"}, {"type": "document", "content": "Table of contents\n\n  * Setup \n    * cohere \n    * LatestCohereModelNames \n    * CohereModelName \n   ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:697"}, {"type": "concept", "id": "latestcoheremodelnames"}, {"type": "document", "content": "###  LatestCohereModelNames `module-attribute`\n\n    \n    \n    LatestCohereModelNames = [Literal](htt...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:698"}, {"type": "concept", "id": "c4aiayaexpanse32b"}, {"type": "document", "content": "Latest Cohere models.\n\n###  CohereModelName `module-attribute`\n\n    \n    \n    CohereModelName = [Uni...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:699"}, {"type": "concept", "id": "cohere"}, {"type": "concept", "id": "coheremodelname"}, {"type": "document", "content": "ALL FIELDS MUST BE `cohere_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n\nSource code in `pyda...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:700"}, {"type": "concept", "id": "merge"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/cohere.py`...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:701"}, {"type": "concept", "id": "pydanticaislimpydanticaimodelscoherepy"}, {"type": "document", "content": "91\n     92\n     93\n     94\n     95\n     96\n     97\n     98\n     99\n    100\n    101\n    102\n    103\n ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:702"}, {"type": "document", "content": "179\n    180\n    181\n    182\n    183\n    184\n    185\n    186\n    187\n    188\n    189\n    190\n    191\n...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:703"}, {"type": "document", "content": "|...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:704"}, {"type": "document", "content": "@dataclass(init=False)\n    class CohereModel(Model):\n        \"\"\"A model that uses the Cohere API.\n  ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:705"}, {"type": "document", "content": "):\n            \"\"\"Initialize an Cohere model.\n    \n            Args:\n                model_name: The...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:706"}, {"type": "document", "content": "@property\n        def base_url(self) -> str:\n            client_wrapper = self.client._client_wrappe...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:707"}, {"type": "concept", "id": "baseurlself"}, {"type": "document", "content": "\"\"\"The model name.\"\"\"\n            return self._model_name\n    \n        @property\n        def system(...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:708"}, {"type": "document", "content": "tools=tools or OMIT,\n                    max_tokens=model_settings.get('max_tokens', OMIT),\n        ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:709"}, {"type": "concept", "id": "statuscode"}, {"type": "concept", "id": "maxtokensmodelsettingsgetmaxtokens"}, {"type": "concept", "id": "temperaturemodelsettingsgettemperature"}, {"type": "document", "content": "raise\n    \n        def _process_response(self, response: ChatResponse) -> ModelResponse:\n           ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:710"}, {"type": "concept", "id": "chatresponse"}, {"type": "document", "content": "parts.append(\n                        ToolCallPart(\n                            tool_name=c.function...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:711"}, {"type": "concept", "id": "isinstancemessage"}, {"type": "concept", "id": "partsappend"}, {"type": "concept", "id": "toolnamecfunctionname"}, {"type": "concept", "id": "argscfunctionarguments"}, {"type": "document", "content": "tool_calls: list[ToolCallV2] = []\n                for item in message.parts:\n                    if ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:712"}, {"type": "concept", "id": "messageparam"}, {"type": "concept", "id": "listtoolcallv2"}, {"type": "concept", "id": "messageparts"}, {"type": "document", "content": "else:\n                assert_never(message)\n    \n        def _get_tools(self, model_request_paramete...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:713"}, {"type": "document", "content": "arguments=t.args_as_json_str(),\n                ),\n            )\n    \n        @staticmethod\n        ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:714"}, {"type": "concept", "id": "toolv2"}, {"type": "concept", "id": "argumentstargsasjsonstr"}, {"type": "document", "content": "elif isinstance(part, UserPromptPart):\n                    if isinstance(part.content, str):\n       ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:715"}, {"type": "concept", "id": "userchatmessagev2roleuser"}, {"type": "concept", "id": "isinstancepartcontent"}, {"type": "document", "content": "else:\n                        yield ToolChatMessageV2(\n                            role='tool',\n    ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:716"}, {"type": "concept", "id": "toolchatmessagev2"}, {"type": "concept", "id": "roletool"}, {"type": "concept", "id": "toolcallidguardtoolcallidtpart"}, {"type": "concept", "id": "contentpartmodelresponse"}, {"type": "document", "content": "__init__(\n        model_name: CohereModelName,\n        *,\n        provider: (\n            [Literal](...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:717"}, {"type": "document", "content": "Initialize an Cohere model.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`m...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:718"}, {"type": "document", "content": "106\n    107\n    108\n    109\n    110\n    111\n    112\n    113\n    114\n    115\n    116\n    117\n    118\n...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:719"}, {"type": "document", "content": "def __init__(\n        self,\n        model_name: CohereModelName,\n        *,\n        provider: Litera...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:720"}, {"type": "document", "content": "if isinstance(provider, str):\n            provider = infer_provider(provider)\n        self.client = ...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:721"}, {"type": "document", "content": "model_name: CohereModelName\n    \n\nThe model name.\n\n####  system `property`\n\n    \n    \n    system: [s...", "source": "text_data\\cohere.txt", "last_updated": "2025-04-03T16:58:09.431851", "id": "text_data\\cohere.txt:722"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nCommon Tools\n\nType...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:722"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:723"}, {"type": "document", "content": "* [ Multi-agent Applications  ](../multi-agent-applications/)\n    * [ Graphs  ](../graph/)\n    * [ E...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:724"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:725"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:726"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:727"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:728"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:729"}, {"type": "document", "content": "Table of contents\n\n  * DuckDuckGo Search Tool \n    * Installation \n    * Usage \n  * Tavily Search To...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:730"}, {"type": "concept", "id": "duckduckgo"}, {"type": "concept", "id": "search"}, {"type": "document", "content": "pipuv\n\n    \n    \n    pip install \"pydantic-ai-slim[duckduckgo]\"\n    \n    \n    \n    uv add \"pydantic-...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:731"}, {"type": "concept", "id": "pydanticaislimduckduckgo"}, {"type": "document", "content": "from pydantic_ai import Agent\n    from pydantic_ai.common_tools.duckduckgo import duckduckgo_search_...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:732"}, {"type": "concept", "id": "animated"}, {"type": "concept", "id": "pydanticaicommontoolsduckduckgo"}, {"type": "document", "content": "highlighted a couple of record\u2010breaking shows. For example:\n    \n    \u2022 Ne Zha 2 \u2013 News outlets (Vari...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:733"}, {"type": "concept", "id": "highestgrossing"}, {"type": "concept", "id": "records"}, {"type": "concept", "id": "article"}, {"type": "document", "content": "\"Top 10 Highest-Earning Animated Films at the Box Office Revealed\") have begun listing a broader\n   ...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:734"}, {"type": "concept", "id": "films"}, {"type": "concept", "id": "begun"}, {"type": "concept", "id": "although"}, {"type": "concept", "id": "boxoffice"}, {"type": "document", "content": "1. Ne Zha 2\n    2. Inside Out 2\n    \n    The remaining top spots (3\u20135) are reported by some outlets ...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:735"}, {"type": "concept", "id": "inside"}, {"type": "concept", "id": "outlets"}, {"type": "concept", "id": "reporting"}, {"type": "document", "content": "If you're looking for a final, consensus list of the top five, it may be best to wait until\n    the ...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:736"}, {"type": "concept", "id": "updated"}, {"type": "concept", "id": "youre"}, {"type": "concept", "id": "looking"}, {"type": "document", "content": "## Tavily Search Tool\n\nInfo\n\nTavily is a paid service, but they have free credits to explore their p...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:737"}, {"type": "concept", "id": "tavily"}, {"type": "concept", "id": "pydanticaislimtavily"}, {"type": "concept", "id": "service"}, {"type": "document", "content": "import os\n    \n    from pydantic_ai.agent import Agent\n    from pydantic_ai.common_tools.tavily impo...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:738"}, {"type": "concept", "id": "genai"}, {"type": "concept", "id": "apikey"}, {"type": "document", "content": "(This article discusses how CLEAR's new GenAI-powered tool streamlines risk analysis by quickly summ...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:739"}, {"type": "concept", "id": "public"}, {"type": "concept", "id": "telus"}, {"type": "concept", "id": "digital"}, {"type": "concept", "id": "survey"}, {"type": "concept", "id": "enterprise"}, {"type": "document", "content": "(This guide provides insights into how GenAI is revolutionizing enterprise strategies and productivi...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:740"}, {"type": "concept", "id": "guide"}, {"type": "concept", "id": "insights"}, {"type": "concept", "id": "revolutionizing"}, {"type": "document", "content": "\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\common-tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common-tools.txt:741"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\npydantic_ai....", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common_tools.txt:741"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common_tools.txt:742"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.432982", "id": "text_data\\common_tools.txt:743"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\common_tools.txt:744"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\common_tools.txt:745"}, {"type": "concept", "id": "pydanticaicommontools"}, {"type": "document", "content": "* duckduckgo \n      * duckduckgo_search_tool \n      * tavily \n      * tavily_search_tool \n    * [ py...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\common_tools.txt:746"}, {"type": "concept", "id": "duckduckgosearchtool"}, {"type": "concept", "id": "tavilysearchtool"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../models...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\common_tools.txt:747"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ](.....", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\common_tools.txt:748"}, {"type": "document", "content": "Table of contents\n\n  * duckduckgo \n  * duckduckgo_search_tool \n  * tavily \n  * tavily_search_tool \n\n...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\common_tools.txt:749"}, {"type": "document", "content": "Creates a DuckDuckGo search tool.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|--...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\common_tools.txt:750"}, {"type": "concept", "id": "creates"}, {"type": "document", "content": "|\n\n    \n    \n    def duckduckgo_search_tool(duckduckgo_client: DDGS | None = None, max_results: int ...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\common_tools.txt:751"}, {"type": "concept", "id": "maxresults"}, {"type": "document", "content": "Creates a Tavily search tool.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\common_tools.txt:752"}, {"type": "document", "content": "|\n\n    \n    \n    def tavily_search_tool(api_key: str):\n        \"\"\"Creates a Tavily search tool.\n    ...", "source": "text_data\\common_tools.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\common_tools.txt:753"}, {"type": "concept", "id": "tavilysearchtoolapikey"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nContributing\n\nType...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:753"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * Contr...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:754"}, {"type": "document", "content": "* [ Multi-agent Applications  ](../multi-agent-applications/)\n    * [ Graphs  ](../graph/)\n    * [ E...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:755"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:756"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:757"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:758"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:759"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:760"}, {"type": "document", "content": "Table of contents\n\n  * Installation and Setup \n  * Running Tests etc. \n  * Documentation Changes \n  ...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:761"}, {"type": "concept", "id": "precommit"}, {"type": "document", "content": "pipx install uv pre-commit\n    \n\nInstall `pydantic-ai`, all dependencies and pre-commit hooks\n\n    \n...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:762"}, {"type": "concept", "id": "tests"}, {"type": "concept", "id": "commands"}, {"type": "document", "content": "## Rules for adding new models to PydanticAI\n\nTo avoid an excessive workload for the maintainers of ...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:763"}, {"type": "concept", "id": "rules"}, {"type": "concept", "id": "accept"}, {"type": "document", "content": "* To add a new model with an extra dependency, that dependency needs > 500k monthly downloads from P...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:764"}, {"type": "concept", "id": "extra"}, {"type": "concept", "id": "needs"}, {"type": "document", "content": "If you're unsure about adding a model, please [create an\nissue](https://github.com/pydantic/pydantic...", "source": "text_data\\contributing.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\contributing.txt:765"}, {"type": "concept", "id": "unsure"}, {"type": "concept", "id": "about"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\dataset.txt:765"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\dataset.txt:766"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\dataset.txt:767"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\dataset.txt:768"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.434121", "id": "text_data\\dataset.txt:769"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:770"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../../...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:771"}, {"type": "concept", "id": "modelsgroq"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ](.....", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:772"}, {"type": "concept", "id": "evaluators"}, {"type": "concept", "id": "dataset"}, {"type": "document", "content": "* [ pydantic_evals.evaluators  ](../evaluators/)\n    * [ pydantic_evals.reporting  ](../reporting/)\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:773"}, {"type": "document", "content": "Table of contents\n\n  * dataset \n  * Case \n    * __init__ \n    * name \n    * inputs \n    * metadata \n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:774"}, {"type": "concept", "id": "inputs"}, {"type": "concept", "id": "metadata"}, {"type": "concept", "id": "cases"}, {"type": "document", "content": "Datasets can be loaded from and saved to YAML or JSON files, and can be\nevaluated against a task fun...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:775"}, {"type": "concept", "id": "against"}, {"type": "concept", "id": "single"}, {"type": "concept", "id": "datasets"}, {"type": "concept", "id": "loaded"}, {"type": "document", "content": "Example:\n\n    \n    \n    from pydantic_evals import Case\n    \n    case = Case(\n        name='Simple a...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:776"}, {"type": "concept", "id": "addition"}, {"type": "concept", "id": "pydanticevals"}, {"type": "concept", "id": "namesimple"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/dataset.py`\n\n    \n    \n    102\n    103\n    104\n    105...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:777"}, {"type": "concept", "id": "pydanticevalspydanticevalsdatasetpy"}, {"type": "document", "content": "@dataclass(init=False)\n    class Case(Generic[InputsT, OutputT, MetadataT]):\n        \"\"\"A single row...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:778"}, {"type": "concept", "id": "dataclassinitfalse"}, {"type": "document", "content": ")\n        ```\n        \"\"\"\n    \n        name: str | None\n        \"\"\"Name of the case. This is used to...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:779"}, {"type": "concept", "id": "metadatat"}, {"type": "document", "content": "\"\"\"Evaluators to be used just on this case.\"\"\"\n    \n        def __init__(\n            self,\n        ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:780"}, {"type": "concept", "id": "outputt"}, {"type": "document", "content": "expected_output: Optional expected output of the task, used for comparison in evaluators.\n          ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:781"}, {"type": "concept", "id": "expectedoutput"}, {"type": "concept", "id": "tuple"}, {"type": "concept", "id": "sequence"}, {"type": "document", "content": "__init__(\n        *,\n        name: [str](https://docs.python.org/3/library/stdtypes.html#str) | None...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:782"}, {"type": "concept", "id": "inputst"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`name` |  `[str](https://docs.python.org/3/l...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:783"}, {"type": "document", "content": "`evaluators` |  `[tuple](https://docs.python.org/3/library/stdtypes.html#tuple)[[Evaluator](../evalu...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:784"}, {"type": "concept", "id": "tuplehttpsdocspythonorg3librarystdtypeshtmltupleevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "concept", "id": "pydanticevalsevaluatorsevaluatorinputst"}, {"type": "document", "content": "138\n    139\n    140\n    141\n    142\n    143\n    144\n    145\n    146\n    147\n    148\n    149\n    150\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:785"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        name: str | None = None,\n        inputs: InputsT,\n   ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:786"}, {"type": "document", "content": "evaluators: Tuple of evaluators specific to this case. These are in addition to any\n                ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:787"}, {"type": "concept", "id": "specific"}, {"type": "document", "content": "name: [str](https://docs.python.org/3/library/stdtypes.html#str) | None = name\n    \n\nName of the cas...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:788"}, {"type": "concept", "id": "classattribute"}, {"type": "document", "content": "expected_output: OutputT | None = expected_output\n    \n\nExpected output of the task. This is the exp...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:789"}, {"type": "concept", "id": "expected"}, {"type": "concept", "id": "output"}, {"type": "document", "content": "Evaluators to be used just on this case.\n\n###  Dataset\n\nBases:\n`[BaseModel](https://docs.pydantic.de...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:790"}, {"type": "concept", "id": "basemodelhttpsdocspydanticdevlatestapibasemodelpydanticbasemodel"}, {"type": "document", "content": "# Create a dataset with two test cases\n    from dataclasses import dataclass\n    \n    from pydantic_...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:791"}, {"type": "concept", "id": "evaluatorcontext"}, {"type": "document", "content": "return inputs['text'].upper()\n    \n    async def main():\n        report = await dataset.evaluate(upp...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:792"}, {"type": "concept", "id": "inputstextupper"}, {"type": "concept", "id": "report"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/dataset.py`...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:793"}, {"type": "document", "content": "172\n    173\n    174\n    175\n    176\n    177\n    178\n    179\n    180\n    181\n    182\n    183\n    184\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.435259", "id": "text_data\\dataset.txt:794"}, {"type": "document", "content": "260\n    261\n    262\n    263\n    264\n    265\n    266\n    267\n    268\n    269\n    270\n    271\n    272\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:795"}, {"type": "document", "content": "350\n    351\n    352\n    353\n    354\n    355\n    356\n    357\n    358\n    359\n    360\n    361\n    362\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:796"}, {"type": "document", "content": "440\n    441\n    442\n    443\n    444\n    445\n    446\n    447\n    448\n    449\n    450\n    451\n    452\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:797"}, {"type": "document", "content": "530\n    531\n    532\n    533\n    534\n    535\n    536\n    537\n    538\n    539\n    540\n    541\n    542\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:798"}, {"type": "document", "content": "620\n    621\n    622\n    623\n    624\n    625\n    626\n    627\n    628\n    629\n    630\n    631\n    632\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:799"}, {"type": "document", "content": "|...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:800"}, {"type": "document", "content": "class Dataset(BaseModel, Generic[InputsT, OutputT, MetadataT], extra='forbid', arbitrary_types_allow...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:801"}, {"type": "document", "content": "@dataclass\n        class ExactMatch(Evaluator):\n            def evaluate(self, ctx: EvaluatorContext...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:802"}, {"type": "concept", "id": "inputstext"}, {"type": "document", "content": "report.print()\n        '''\n           Evaluation Summary: uppercase\n        \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:803"}, {"type": "document", "content": "def __init__(\n            self,\n            *,\n            cases: Sequence[Case[InputsT, OutputT, Me...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:804"}, {"type": "document", "content": "raise ValueError(f'Duplicate case name: {case.name!r}')\n                case_names.add(case.name)\n  ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:805"}, {"type": "concept", "id": "maxconcurrency"}, {"type": "concept", "id": "valueerrorfduplicate"}, {"type": "document", "content": "Args:\n                task: The task to evaluate. This should be a callable that takes the inputs of...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:806"}, {"type": "concept", "id": "evaluate"}, {"type": "document", "content": "name = name or get_unwrapped_function_name(task)\n    \n            limiter = anyio.Semaphore(max_conc...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:807"}, {"type": "concept", "id": "limiter"}, {"type": "concept", "id": "namename"}, {"type": "concept", "id": "handlecasecase"}, {"type": "concept", "id": "reportcasename"}, {"type": "document", "content": "for i, case in enumerate(self.cases, 1)\n                        ]\n                    ),\n           ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:808"}, {"type": "concept", "id": "tododavidm"}, {"type": "concept", "id": "remove"}, {"type": "concept", "id": "details"}, {"type": "concept", "id": "panel"}, {"type": "document", "content": ") -> EvaluationReport:  # pragma: no cover\n            \"\"\"Evaluates the test cases in the dataset us...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:809"}, {"type": "concept", "id": "evaluationreport"}, {"type": "concept", "id": "cover"}, {"type": "document", "content": "If None, all cases will be evaluated concurrently.\n    \n            Returns:\n                A repor...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:810"}, {"type": "document", "content": "Args:\n                name: Optional name for the case. If not provided, a generic name will be assi...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:811"}, {"type": "document", "content": "inputs=inputs,\n                metadata=metadata,\n                expected_output=expected_output,\n ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:812"}, {"type": "concept", "id": "evaluator"}, {"type": "concept", "id": "specificcase"}, {"type": "concept", "id": "added"}, {"type": "concept", "id": "inputsinputs"}, {"type": "document", "content": "Raises:\n                ValueError: If `specific_case` is provided but no case with that name exists...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:813"}, {"type": "concept", "id": "valueerror"}, {"type": "document", "content": "@classmethod\n        @functools.cache\n        def _params(cls) -> tuple[type[InputsT], type[OutputT]...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:814"}, {"type": "concept", "id": "getattrc"}, {"type": "concept", "id": "functoolscache"}, {"type": "concept", "id": "paramscls"}, {"type": "document", "content": "f'You should explicitly set the generic parameters via `Dataset[MyInputs, MyOutput, MyMetadata]`'\n  ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:815"}, {"type": "concept", "id": "explicitly"}, {"type": "document", "content": "Must be either 'yaml' or 'json'.\n                custom_evaluator_types: Custom evaluator classes to...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:816"}, {"type": "concept", "id": "cannot"}, {"type": "concept", "id": "either"}, {"type": "concept", "id": "customevaluatortypes"}, {"type": "document", "content": "except ValidationError as e:  # pragma: no cover\n                raise ValueError(f'{path} contains ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:817"}, {"type": "document", "content": "These are additional evaluators beyond the default ones.\n    \n            Returns:\n                A...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:818"}, {"type": "concept", "id": "parsed"}, {"type": "document", "content": "def from_dict(\n            cls,\n            data: dict[str, Any],\n            custom_evaluator_types...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:819"}, {"type": "concept", "id": "dictionary"}, {"type": "concept", "id": "fromdict"}, {"type": "document", "content": "\"\"\"\n            dataset_model_type = cls._serialization_type()\n            dataset_model = dataset_m...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:820"}, {"type": "concept", "id": "datasetmodel"}, {"type": "concept", "id": "datasetmodeltype"}, {"type": "document", "content": "Returns:\n                A new Dataset instance created from the _DatasetModel.\n            \"\"\"\n    ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:821"}, {"type": "concept", "id": "listevaluator"}, {"type": "concept", "id": "created"}, {"type": "document", "content": "evaluators: list[Evaluator] = []\n                for spec in row.evaluators:\n                    try...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:822"}, {"type": "concept", "id": "rowevaluators"}, {"type": "concept", "id": "loadevaluatorfromregistryregistry"}, {"type": "document", "content": "cases.append(row)\n            if errors:\n                raise ExceptionGroup(f'{len(errors)} error(...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:823"}, {"type": "concept", "id": "casesappendrow"}, {"type": "document", "content": "Args:\n                path: Path to save the dataset to.\n                fmt: Format to use. If None...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:824"}, {"type": "concept", "id": "schemapath"}, {"type": "document", "content": "if isinstance(schema_path, str):\n                    schema_path = Path(schema_path.format(stem=path...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:825"}, {"type": "concept", "id": "schemaref"}, {"type": "concept", "id": "strschemapath"}, {"type": "document", "content": "if fmt == 'yaml':\n                dumped_data = self.model_dump(mode='json', by_alias=True, exclude_...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:826"}, {"type": "concept", "id": "byaliastrue"}, {"type": "concept", "id": "excludedefaultstrue"}, {"type": "concept", "id": "contextcontext"}, {"type": "document", "content": "def model_json_schema_with_evaluators(\n            cls,\n            custom_evaluator_types: Sequence...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:827"}, {"type": "concept", "id": "modeljsonschemawithevaluators"}, {"type": "document", "content": "registry = _get_registry(custom_evaluator_types)\n    \n            evaluator_schema_types: list[Any] ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:828"}, {"type": "concept", "id": "typehintspname"}, {"type": "concept", "id": "registry"}, {"type": "concept", "id": "getregistrycustomevaluatortypes"}, {"type": "concept", "id": "evaluatorschematypes"}, {"type": "concept", "id": "listany"}, {"type": "document", "content": "required_type_hints[p.name] = type_hints[p.name]\n    \n                def _make_typed_dict(cls_name_...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:829"}, {"type": "concept", "id": "config"}, {"type": "concept", "id": "requiredtypehintspname"}, {"type": "document", "content": "evaluator_schema_types.append(Literal[name])\n    \n                # Short form: can be called with o...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:830"}, {"type": "concept", "id": "typehinttype"}, {"type": "concept", "id": "lentypehints"}, {"type": "concept", "id": "evaluatorschematypesappendmaketypeddictshortevaluator"}, {"type": "concept", "id": "evaluatorschematypesappendliteralname"}, {"type": "concept", "id": "short"}, {"type": "document", "content": "evaluator_schema_types.append(_make_typed_dict('evaluator', {name: params_td}))\n    \n            in_...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:831"}, {"type": "concept", "id": "intype"}, {"type": "concept", "id": "outtype"}, {"type": "concept", "id": "metatype"}, {"type": "document", "content": "if evaluator_schema_types:\n                    evaluators: list[Union[tuple(evaluator_schema_types)]...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:832"}, {"type": "concept", "id": "listuniontupleevaluatorschematypes"}, {"type": "document", "content": "@classmethod\n        def _save_schema(\n            cls, path: Path | str, custom_evaluator_types: Se...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:833"}, {"type": "concept", "id": "schemacontent"}, {"type": "concept", "id": "saveschema"}, {"type": "document", "content": "@classmethod\n        @functools.cache\n        def _serialization_type(cls) -> type[_DatasetModel[Inp...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:834"}, {"type": "concept", "id": "outputtype"}, {"type": "concept", "id": "metadatatype"}, {"type": "document", "content": "Args:\n                path: The path to infer the format for.\n                fmt: The explicitly pr...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:835"}, {"type": "concept", "id": "suffix"}, {"type": "concept", "id": "infer"}, {"type": "document", "content": ")\n    \n        @model_serializer(mode='wrap')\n        def _add_json_schema(self, nxt: SerializerFunc...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:836"}, {"type": "concept", "id": "nxtself"}, {"type": "concept", "id": "modelserializermodewrap"}, {"type": "document", "content": "cases: [list](https://docs.python.org/3/library/stdtypes.html#list)[Case[InputsT, OutputT, MetadataT...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:837"}, {"type": "document", "content": "List of evaluators to be used on all cases in the dataset.\n\n####  __init__\n\n    \n    \n    __init__(\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:838"}, {"type": "document", "content": "Initialize a new dataset with test cases and optional evaluators.\n\nParameters:\n\nName | Type | Descri...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:839"}, {"type": "document", "content": "228\n    229\n    230\n    231\n    232\n    233\n    234\n    235\n    236\n    237\n    238\n    239\n    240\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:840"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        cases: Sequence[Case[InputsT, OutputT, MetadataT]],\n ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:841"}, {"type": "document", "content": "super().__init__(\n            cases=cases,\n            evaluators=list(evaluators),\n        )\n      ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:842"}, {"type": "concept", "id": "superinit"}, {"type": "concept", "id": "casescases"}, {"type": "concept", "id": "evaluatorslistevaluators"}, {"type": "document", "content": "evaluate(\n        task: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"ty...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:843"}, {"type": "concept", "id": "typingcallableinputst"}, {"type": "concept", "id": "collectionsabcawaitableoutputt"}, {"type": "document", "content": "Evaluates the test cases in the dataset using the given task.\n\nThis method runs the task on each cas...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:844"}, {"type": "concept", "id": "evaluates"}, {"type": "concept", "id": "given"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`task` |  `[Callable](https://docs.python.or...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:845"}, {"type": "document", "content": "`max_concurrency` |  `[int](https://docs.python.org/3/library/functions.html#int) | None` |  The max...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:846"}, {"type": "concept", "id": "maximum"}, {"type": "concept", "id": "concurrent"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[EvaluationReport](../reporting/#pydantic_evals.reporting.Evaluation...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:847"}, {"type": "concept", "id": "evaluationreportreportingpydanticevalsreportingevaluationreport"}, {"type": "concept", "id": "pydanticevalsreportingevaluationreport"}, {"type": "document", "content": "async def evaluate(\n        self, task: Callable[[InputsT], Awaitable[OutputT]], name: str | None = ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:848"}, {"type": "document", "content": "If omitted, the name of the task function will be used.\n            max_concurrency: The maximum num...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:849"}, {"type": "concept", "id": "omitted"}, {"type": "document", "content": "async with limiter:\n                    return await _run_task_and_evaluators(task, case, report_cas...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:850"}, {"type": "document", "content": "eval_span.set_attribute('averages', report.averages())\n    \n        return report\n      \n  \n---|--- ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:851"}, {"type": "concept", "id": "evalspansetattributeaverages"}, {"type": "concept", "id": "reportaverages"}, {"type": "concept", "id": "evaluatesync"}, {"type": "document", "content": "evaluate_sync(\n        task: [Callable](https://docs.python.org/3/library/typing.html#typing.Callabl...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:852"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`task` |  `[Callable](https://docs.python.or...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:853"}, {"type": "document", "content": "`max_concurrency` |  `[int](https://docs.python.org/3/library/functions.html#int) | None` |  The max...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:854"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[EvaluationReport](../reporting/#pydantic_evals.reporting.Evaluation...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:855"}, {"type": "document", "content": "def evaluate_sync(\n        self, task: Callable[[InputsT], Awaitable[OutputT]], name: str | None = N...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:856"}, {"type": "concept", "id": "callableinputst"}, {"type": "concept", "id": "awaitableoutputt"}, {"type": "document", "content": "If omitted, the name of the task function will be used.\n            max_concurrency: The maximum num...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:857"}, {"type": "document", "content": "add_case(\n        *,\n        name: [str](https://docs.python.org/3/library/stdtypes.html#str) | None...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:858"}, {"type": "concept", "id": "addcase"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`name` |  `[str](https://docs.python.org/3/l...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:859"}, {"type": "document", "content": "`evaluators` |  `[tuple](https://docs.python.org/3/library/stdtypes.html#tuple)[[Evaluator](../evalu...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:860"}, {"type": "document", "content": "317\n    318\n    319\n    320\n    321\n    322\n    323\n    324\n    325\n    326\n    327\n    328\n    329\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:861"}, {"type": "document", "content": "def add_case(\n        self,\n        *,\n        name: str | None = None,\n        inputs: InputsT,\n   ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:862"}, {"type": "document", "content": "expected_output: The expected output of the task, used for comparison in evaluators.\n            eva...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:863"}, {"type": "concept", "id": "comparison"}, {"type": "document", "content": "add_evaluator(\n        evaluator: [Evaluator](../evaluators/#pydantic_evals.evaluators.Evaluator \"py...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:864"}, {"type": "concept", "id": "addevaluator"}, {"type": "concept", "id": "evaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "document", "content": "Adds an evaluator to the dataset or a specific case.\n\nParameters:\n\nName | Type | Description | Defau...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:865"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[ValueError](https://docs.python.org/3/library/exceptions.html#Value...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:866"}, {"type": "concept", "id": "valueerrorhttpsdocspythonorg3libraryexceptionshtmlvalueerror"}, {"type": "concept", "id": "exists"}, {"type": "document", "content": "def add_evaluator(\n        self,\n        evaluator: Evaluator[InputsT, OutputT, MetadataT],\n        ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:867"}, {"type": "document", "content": "# If this is too slow, we could try to add a case lookup dict.\n            # Note that if we do that...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:868"}, {"type": "concept", "id": "could"}, {"type": "concept", "id": "lookup"}, {"type": "concept", "id": "private"}, {"type": "document", "content": "from_file(\n        path: [Path](https://docs.python.org/3/library/pathlib.html#pathlib.Path \"pathlib...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:869"}, {"type": "concept", "id": "fromfile"}, {"type": "concept", "id": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "concept", "id": "pathlibpath"}, {"type": "document", "content": "] = (),\n    ) -> [Self](https://typing-extensions.readthedocs.io/en/latest/index.html#typing_extensi...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:870"}, {"type": "concept", "id": "selfhttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionsself"}, {"type": "concept", "id": "typingextensionsself"}, {"type": "document", "content": "Load a dataset from a file.\n\nParameters:...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:871"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`path` |  `[Path](https://docs.python.org/3/...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:872"}, {"type": "document", "content": "`custom_evaluator_types` |  `[Sequence](https://docs.python.org/3/library/collections.abc.html#colle...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:873"}, {"type": "concept", "id": "collectionsabcsequencetypehttpsdocspythonorg3libraryfunctionshtmltypeevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[Self](https://typing-extensions.readthedocs.io/en/latest/index.html...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:874"}, {"type": "document", "content": "@classmethod\n    def from_file(\n        cls,\n        path: Path | str,\n        fmt: Literal['yaml', ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:875"}, {"type": "document", "content": "A new Dataset instance loaded from the file.\n    \n        Raises:\n            ValidationError: If th...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:876"}, {"type": "concept", "id": "validationerror"}, {"type": "document", "content": "from_text(\n        contents: [str](https://docs.python.org/3/library/stdtypes.html#str),\n        fmt...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:877"}, {"type": "concept", "id": "fromtext"}, {"type": "concept", "id": "typingliteralyaml"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`contents` |  `[str](https://docs.python.org...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:878"}, {"type": "document", "content": "`custom_evaluator_types` |  `[Sequence](https://docs.python.org/3/library/collections.abc.html#colle...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:879"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[Self](https://typing-extensions.readthedocs.io/en/latest/index.html...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:880"}, {"type": "document", "content": "@classmethod\n    def from_text(\n        cls,\n        contents: str,\n        fmt: Literal['yaml', 'js...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:881"}, {"type": "document", "content": "\"\"\"\n        if fmt == 'yaml':\n            loaded = yaml.safe_load(contents)\n            return cls.f...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:882"}, {"type": "concept", "id": "yamlsafeloadcontents"}, {"type": "concept", "id": "clsfromdictloaded"}, {"type": "document", "content": "from_dict(\n        data: [dict](https://docs.python.org/3/library/stdtypes.html#dict)[[str](https://...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:883"}, {"type": "concept", "id": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`data` |  `[dict](https://docs.python.org/3/...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:884"}, {"type": "document", "content": "`custom_evaluator_types` |  `[Sequence](https://docs.python.org/3/library/collections.abc.html#colle...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:885"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[Self](https://typing-extensions.readthedocs.io/en/latest/index.html...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:886"}, {"type": "document", "content": "@classmethod\n    def from_dict(\n        cls,\n        data: dict[str, Any],\n        custom_evaluator_...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:887"}, {"type": "document", "content": "\"\"\"\n        dataset_model_type = cls._serialization_type()\n        dataset_model = dataset_model_typ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:888"}, {"type": "concept", "id": "clsserializationtype"}, {"type": "concept", "id": "datasetmodeltypemodelvalidatedata"}, {"type": "document", "content": "to_file(\n        path: [Path](https://docs.python.org/3/library/pathlib.html#pathlib.Path \"pathlib.P...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:889"}, {"type": "concept", "id": "tofile"}, {"type": "document", "content": "[type](https://docs.python.org/3/library/functions.html#type)[[Evaluator](../evaluators/#pydantic_ev...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:890"}, {"type": "concept", "id": "typehttpsdocspythonorg3libraryfunctionshtmltypeevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "document", "content": "Save the dataset to a file.\n\nParameters:...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:891"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`path` |  `[Path](https://docs.python.org/3/...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:892"}, {"type": "document", "content": "`schema_path` |  `[Path](https://docs.python.org/3/library/pathlib.html#pathlib.Path \"pathlib.Path\")...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:893"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/dataset.py`...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:894"}, {"type": "document", "content": "533\n    534\n    535\n    536\n    537\n    538\n    539\n    540\n    541\n    542\n    543\n    544\n    545\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:895"}, {"type": "document", "content": "def to_file(\n        self,\n        path: Path | str,\n        fmt: Literal['yaml', 'json'] | None = N...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:896"}, {"type": "document", "content": "custom_evaluator_types: Custom evaluator classes to include in the schema.\n        \"\"\"\n        path ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:897"}, {"type": "document", "content": "schema_ref = str(schema_path)\n            self._save_schema(schema_path, custom_evaluator_types)\n   ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:898"}, {"type": "document", "content": "path.write_text(json_data + '\\n')\n      \n  \n---|---  \n  \n####  model_json_schema_with_evaluators `cl...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:899"}, {"type": "concept", "id": "pathwritetextjsondata"}, {"type": "document", "content": "model_json_schema_with_evaluators(\n        custom_evaluator_types: [Sequence](https://docs.python.or...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:900"}, {"type": "concept", "id": "collectionsabcsequence"}, {"type": "document", "content": "Generate a JSON schema for this dataset type, including evaluator details.\n\nThis is useful for gener...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:901"}, {"type": "concept", "id": "generate"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[dict](https://docs.python.org/3/library/stdtypes.html#dict)[[str](h...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:902"}, {"type": "document", "content": "580\n    581\n    582\n    583\n    584\n    585\n    586\n    587\n    588\n    589\n    590\n    591\n    592\n...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:903"}, {"type": "document", "content": "@classmethod\n    def model_json_schema_with_evaluators(\n        cls,\n        custom_evaluator_types:...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:904"}, {"type": "document", "content": "evaluator_schema_types: list[Any] = []\n        for name, evaluator_class in registry.items():\n      ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:905"}, {"type": "concept", "id": "evaluatorclass"}, {"type": "document", "content": "td = TypedDict(f'{cls_name_prefix}_{name}', fields)  # pyright: ignore[reportArgumentType]\n         ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:906"}, {"type": "concept", "id": "typeddictfclsnameprefixname"}, {"type": "document", "content": "[type_hint_type] = type_hints.values()\n                evaluator_schema_types.append(_make_typed_dic...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:907"}, {"type": "concept", "id": "paramstd"}, {"type": "concept", "id": "typehintsvalues"}, {"type": "concept", "id": "lenrequiredtypehints"}, {"type": "document", "content": "in_type, out_type, meta_type = cls._params()\n    \n        # Note: we shadow the `Case` and `Dataset`...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:908"}, {"type": "document", "content": "class Dataset(BaseModel, extra='forbid'):\n            cases: list[Case]\n            if evaluator_sch...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:909"}, {"type": "concept", "id": "jsonschema"}, {"type": "concept", "id": "datasetbasemodel"}, {"type": "concept", "id": "extraforbid"}, {"type": "document", "content": "set_eval_attribute(name: [str](https://docs.python.org/3/library/stdtypes.html#str), value: [Any](ht...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:910"}, {"type": "document", "content": "|\n\n    \n    \n    def set_eval_attribute(name: str, value: Any) -> None:\n        \"\"\"Set an attribute ...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:911"}, {"type": "concept", "id": "currentcase"}, {"type": "concept", "id": "incrementevalmetric"}, {"type": "document", "content": "Increment a metric on the current task run.\n\nParameters:\n\nName | Type | Description | Default  \n---|...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:912"}, {"type": "concept", "id": "increment"}, {"type": "concept", "id": "metric"}, {"type": "concept", "id": "amount"}, {"type": "document", "content": "|\n\n    \n    \n    def increment_eval_metric(name: str, amount: int | float) -> None:\n        \"\"\"Incre...", "source": "text_data\\dataset.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dataset.txt:913"}, {"type": "concept", "id": "incrementevalmetricname"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nDependencies\n\nType...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:913"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:914"}, {"type": "document", "content": "* [ Debugging and Monitoring  ](../logfire/)\n    * [ Multi-agent Applications  ](../multi-agent-appl...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:915"}, {"type": "concept", "id": "debugging"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:916"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:917"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:918"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:919"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:920"}, {"type": "document", "content": "Table of contents\n\n  * Defining Dependencies \n  * Accessing Dependencies \n    * Asynchronous vs. Syn...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:921"}, {"type": "concept", "id": "defining"}, {"type": "concept", "id": "easier"}, {"type": "document", "content": "## Defining Dependencies\n\nDependencies can be any python type. While in simple cases you might be ab...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:922"}, {"type": "document", "content": "unused_dependencies.py\n\n    \n    \n    from dataclasses import dataclass\n    \n    import httpx\n    \n ...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:923"}, {"type": "concept", "id": "httpxasyncclient"}, {"type": "document", "content": "1.   2.   3. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyncio.run(ma...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:924"}, {"type": "concept", "id": "youll"}, {"type": "concept", "id": "addasynciorunmain"}, {"type": "document", "content": "from dataclasses import dataclass\n    \n    import httpx\n    \n    from pydantic_ai import Agent, RunC...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:925"}, {"type": "document", "content": "deps = MyDeps('foobar', client)\n            result = await agent.run('Tell me a joke.', deps=deps)\n ...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:926"}, {"type": "concept", "id": "mydepsfoobar"}, {"type": "concept", "id": "agentruntell"}, {"type": "document", "content": "1.   2.   3.   4. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyncio.r...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:927"}, {"type": "concept", "id": "synchronous"}, {"type": "concept", "id": "asynchronous"}, {"type": "document", "content": "`run` vs. `run_sync` and Asynchronous vs. Synchronous dependencies\n\nWhether you use synchronous or a...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:928"}, {"type": "concept", "id": "whether"}, {"type": "document", "content": "from dataclasses import dataclass\n    \n    import httpx\n    \n    from pydantic_ai import Agent, RunC...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:929"}, {"type": "concept", "id": "httpxclient"}, {"type": "concept", "id": "dataclasses"}, {"type": "document", "content": "'Tell me a joke.',\n            deps=deps,\n        )\n        print(result.data)\n        #> Did you he...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:930"}, {"type": "concept", "id": "toothpaste"}, {"type": "concept", "id": "scandal"}, {"type": "document", "content": "1.   2. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyncio.run(main())...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:931"}, {"type": "document", "content": "from dataclasses import dataclass\n    \n    import httpx\n    \n    from pydantic_ai import Agent, Mode...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:932"}, {"type": "concept", "id": "runcontextmydeps"}, {"type": "document", "content": "'https://example.com#jokes',\n            params={'subject': subject},\n            headers={'Authoriz...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:933"}, {"type": "concept", "id": "finalresponse"}, {"type": "concept", "id": "headersauthorization"}, {"type": "concept", "id": "fbearer"}, {"type": "concept", "id": "ctxdepsapikey"}, {"type": "concept", "id": "responseraiseforstatus"}, {"type": "document", "content": "return final_response\n    \n    \n    async def main():\n        async with httpx.AsyncClient() as clie...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:934"}, {"type": "document", "content": "1.   2. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyncio.run(main())...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:935"}, {"type": "concept", "id": "calling"}, {"type": "document", "content": "from dataclasses import dataclass\n    \n    import httpx\n    \n    from pydantic_ai import Agent, RunC...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:936"}, {"type": "document", "content": "async def application_code(prompt: str) -> str:  \n        ...\n        ...\n        # now deep within ...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:937"}, {"type": "concept", "id": "applicationcodeprompt"}, {"type": "concept", "id": "within"}, {"type": "concept", "id": "application"}, {"type": "document", "content": "1.   2.   3.   4. \n\n_(This example is complete, it can be run \"as is\")_\n\ntest_joke_app.py\n\n    \n    ...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:938"}, {"type": "concept", "id": "testjokeapppy"}, {"type": "document", "content": "The following examples demonstrate how to use dependencies in PydanticAI:\n\n  * [Weather Agent](../ex...", "source": "text_data\\dependencies.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\dependencies.txt:939"}, {"type": "concept", "id": "demonstrate"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nEvals\n\nType to sta...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:939"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:940"}, {"type": "document", "content": "* Installation \n      * Datasets and Cases \n      * Evaluators \n      * Evaluation Process \n      * ...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:941"}, {"type": "concept", "id": "evaluation"}, {"type": "concept", "id": "integration"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:942"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:943"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:944"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:945"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:946"}, {"type": "document", "content": "Table of contents\n\n  * Installation \n  * Datasets and Cases \n  * Evaluators \n  * Evaluation Process ...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:947"}, {"type": "concept", "id": "performance"}, {"type": "document", "content": "We've designed Pydantic Evals to be useful while not being too opinionated\nsince we (along with ever...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:948"}, {"type": "concept", "id": "package"}, {"type": "document", "content": "`pydantic-evals` does not depend on `pydantic-ai`, but has an optional\ndependency on `logfire` if yo...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:949"}, {"type": "concept", "id": "pydanticevalslogfire"}, {"type": "document", "content": "In Pydantic Evals, everything begins with `Dataset`s and `Case`s:\n\n  * [`Case`](../api/pydantic_eval...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:950"}, {"type": "concept", "id": "everything"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\")_\n\n## Evaluators\n\nEvaluators are the components th...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:951"}, {"type": "concept", "id": "components"}, {"type": "concept", "id": "analyze"}, {"type": "document", "content": "from dataclasses import dataclass\n    \n    from simple_eval_dataset import dataset\n    \n    from pyd...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:952"}, {"type": "concept", "id": "simpleevaldataset"}, {"type": "document", "content": "1.   2. \n\n_(This example is complete, it can be run \"as is\")_\n\n## Evaluation Process\n\nThe evaluation...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:953"}, {"type": "concept", "id": "process"}, {"type": "concept", "id": "involves"}, {"type": "document", "content": "from pydantic_evals import Case, Dataset\n    from pydantic_evals.evaluators import Evaluator, Evalua...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:954"}, {"type": "document", "content": "dataset = Dataset(\n        cases=[case1],\n        evaluators=[IsInstance(type_name='str'), MyEvaluat...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:955"}, {"type": "concept", "id": "casescase1"}, {"type": "concept", "id": "evaluatorsisinstancetypenamestr"}, {"type": "concept", "id": "myevaluator"}, {"type": "document", "content": "\u2502 simple_case \u2502 What is the capital of France? \u2502 Paris   \u2502 MyEvaluator: 1.00 \u2502 \u2714          \u2502\n    \u251c\u2500\u2500\u2500...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:956"}, {"type": "concept", "id": "simplecase"}, {"type": "concept", "id": "paris"}, {"type": "document", "content": "1.   2. Also create a custom evaluator function as above\n  3.   4.   5.   6. \n\n_(This example is com...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:957"}, {"type": "document", "content": "from __future__ import annotations\n    \n    from typing import Any\n    \n    from pydantic import Bas...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:958"}, {"type": "document", "content": "),\n    )\n    \n    \n    async def transform_recipe(customer_order: CustomerOrder) -> Recipe:  \n      ...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:959"}, {"type": "concept", "id": "recipe"}, {"type": "concept", "id": "transformrecipecustomerorder"}, {"type": "concept", "id": "customerorder"}, {"type": "document", "content": "),\n                ),\n            ),\n            Case(\n                name='gluten_free_recipe',\n  ...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:960"}, {"type": "concept", "id": "llmjudge"}, {"type": "concept", "id": "rubricrecipe"}, {"type": "concept", "id": "nameglutenfreerecipe"}, {"type": "document", "content": "include_input=True,\n                model='anthropic:claude-3-7-sonnet-latest',  \n            ),\n   ...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:961"}, {"type": "concept", "id": "includeinputtrue"}, {"type": "concept", "id": "modelanthropicclaude37sonnetlatest"}, {"type": "concept", "id": "recipedatasetevaluatesynctransformrecipe"}, {"type": "concept", "id": "printreport"}, {"type": "document", "content": "1.   2.   3.   4.   5.   6.   7. \n\n_(This example is complete, it can be run \"as is\")_\n\n## Saving an...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:962"}, {"type": "concept", "id": "saving"}, {"type": "concept", "id": "loading"}, {"type": "document", "content": "from pathlib import Path\n    \n    from judge_recipes import CustomerOrder, Recipe, recipe_dataset\n  ...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:963"}, {"type": "concept", "id": "dishname"}, {"type": "concept", "id": "dietaryrestriction"}, {"type": "document", "content": "dish_name: Chocolate Cake\n        dietary_restriction: gluten-free\n      metadata:\n        focus: gl...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:964"}, {"type": "concept", "id": "glutenfree"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\")_\n\n## Parallel Evaluation\n\nYou can control concurr...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:965"}, {"type": "concept", "id": "parallel"}, {"type": "concept", "id": "control"}, {"type": "document", "content": "import asyncio\n    import time\n    \n    from pydantic_evals import Case, Dataset\n    \n    # Create a...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:966"}, {"type": "concept", "id": "asyncio"}, {"type": "document", "content": "t0 = time.time()\n    report_default = dataset.evaluate_sync(double_number)\n    print(f'Evaluation to...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:967"}, {"type": "concept", "id": "timetime"}, {"type": "concept", "id": "reportdefault"}, {"type": "concept", "id": "datasetevaluatesyncdoublenumber"}, {"type": "concept", "id": "printfevaluation"}, {"type": "document", "content": "\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 case_4   \u2502 4      \u2502 8       \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:968"}, {"type": "concept", "id": "case4"}, {"type": "concept", "id": "averages"}, {"type": "concept", "id": "limited"}, {"type": "document", "content": "\u2502 case_0   \u2502 0      \u2502 0       \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 case_1   \u2502 1      \u2502 2     ...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:969"}, {"type": "concept", "id": "case0"}, {"type": "concept", "id": "case1"}, {"type": "concept", "id": "case2"}, {"type": "concept", "id": "case3"}, {"type": "document", "content": "1.   2. \n\n_(This example is complete, it can be run \"as is\")_\n\n## OpenTelemetry Integration\n\nPydanti...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:970"}, {"type": "concept", "id": "during"}, {"type": "concept", "id": "spantree"}, {"type": "concept", "id": "spans"}, {"type": "document", "content": "There are two main ways this is useful.\n\nopentelemetry_example.py...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:971"}, {"type": "concept", "id": "there"}, {"type": "concept", "id": "opentelemetryexamplepy"}, {"type": "document", "content": "import asyncio\n    from typing import Any\n    \n    import logfire\n    \n    from pydantic_evals impor...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:972"}, {"type": "document", "content": "span_tree = ctx.span_tree\n            if span_tree is None:\n                return {'has_spans': Fal...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:973"}, {"type": "concept", "id": "processing"}, {"type": "concept", "id": "performancescore"}, {"type": "concept", "id": "processingspans"}, {"type": "document", "content": "return {\n                'has_spans': True,\n                'has_errors': has_errors,\n              ...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:974"}, {"type": "concept", "id": "haserrors"}, {"type": "concept", "id": "simulate"}, {"type": "concept", "id": "processed"}, {"type": "document", "content": "with logfire.span('error_handling'):\n                        logfire.error(f'Error detected in text:...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:975"}, {"type": "document", "content": "),\n        ],\n        evaluators=[SpanTracingEvaluator()],\n    )\n    \n    # Run evaluation - spans a...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:976"}, {"type": "concept", "id": "evaluatorsspantracingevaluator"}, {"type": "document", "content": "\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:977"}, {"type": "concept", "id": "contains"}, {"type": "concept", "id": "marker"}, {"type": "concept", "id": "normaltext"}, {"type": "document", "content": "\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:978"}, {"type": "document", "content": "1. \n\n_(This example is complete, it can be run \"as is\")_\n\n## Generating Test Datasets\n\nPydantic Eval...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:979"}, {"type": "concept", "id": "generated"}, {"type": "document", "content": "from __future__ import annotations\n    \n    from pathlib import Path\n    \n    from pydantic import B...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:980"}, {"type": "concept", "id": "question"}, {"type": "concept", "id": "useattributedocstringstrue"}, {"type": "document", "content": "\"\"\"Confidence level (0-1)\"\"\"\n    \n    \n    class MetadataType(BaseModel, use_attribute_docstrings=Tr...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:981"}, {"type": "concept", "id": "difficulty"}, {"type": "concept", "id": "confidence"}, {"type": "document", "content": "dataset.to_file(output_file)  \n        print(output_file.read_text())\n        \"\"\"\n        # yaml-lan...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:982"}, {"type": "document", "content": "expected_output:\n            answer: Eiffel Tower\n            confidence: 0.9\n          evaluators:\n...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:983"}, {"type": "concept", "id": "eiffel"}, {"type": "concept", "id": "tower"}, {"type": "document", "content": "1.   2.   3.   4.   5. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyn...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:984"}, {"type": "concept", "id": "addasynciorunmainanswer"}, {"type": "concept", "id": "write"}, {"type": "document", "content": "from pathlib import Path\n    \n    from generate_dataset_example import AnswerOutput, MetadataType, Q...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:985"}, {"type": "concept", "id": "answeroutput"}, {"type": "concept", "id": "generatedataset"}, {"type": "document", "content": "print(output_file.read_text())\n        \"\"\"\n        {\n          \"$schema\": \"questions_cases_schema.js...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:986"}, {"type": "concept", "id": "printoutputfilereadtext"}, {"type": "document", "content": "\"inputs\": {\n                \"question\": \"Which world-famous landmark is located on the banks of the ...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:987"}, {"type": "concept", "id": "worldfamous"}, {"type": "concept", "id": "landmark"}, {"type": "document", "content": "1.   2. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyncio.run(main(an...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:988"}, {"type": "concept", "id": "traces"}, {"type": "document", "content": "logfire_integration.py\n\n    \n    \n    import logfire\n    from judge_recipes import recipe_dataset, t...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:989"}, {"type": "concept", "id": "logfireintegrationpy"}, {"type": "document", "content": "and a detailed view of the inputs and outputs for the execution of each case:\n\n[![Logfire Evals Case...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:990"}, {"type": "concept", "id": "execution"}, {"type": "document", "content": "This allows you to write evaluations that depend on information about which\ncode paths were executed...", "source": "text_data\\evals.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evals.txt:991"}, {"type": "concept", "id": "evaluations"}, {"type": "concept", "id": "being"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:991"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:992"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:993"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:994"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:995"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:996"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../../...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:997"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ](.....", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:998"}, {"type": "document", "content": "* downcast \n      * Evaluator \n        * name \n        * evaluate \n        * evaluate_sync \n        ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:999"}, {"type": "concept", "id": "downcast"}, {"type": "concept", "id": "evaluateasync"}, {"type": "document", "content": "Table of contents\n\n  * evaluators \n  * Contains \n  * Equals \n  * EqualsExpected \n  * HasMatchingSpan...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1000"}, {"type": "concept", "id": "objecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "document", "content": "Check if the output contains the expected output.\n\nFor strings, checks if expected_output is a subst...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1001"}, {"type": "concept", "id": "strings"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/evaluators/common.py`\n\n    \n    \n     56\n     57\n     ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1002"}, {"type": "concept", "id": "pydanticevalspydanticevalsevaluatorscommonpy"}, {"type": "document", "content": "@dataclass\n    class Contains(Evaluator[object, object, object]):\n        \"\"\"Check if the output con...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1003"}, {"type": "document", "content": "failure_reason: str | None = None\n            as_strings = self.as_strings or (isinstance(self.value...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1004"}, {"type": "concept", "id": "outputstr"}, {"type": "concept", "id": "expectedstr"}, {"type": "concept", "id": "failurereason"}, {"type": "concept", "id": "asstrings"}, {"type": "concept", "id": "maxlength100"}, {"type": "document", "content": "failure_reason = f'Output string {output_trunc} does not contain expected string {expected_trunc}'\n ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1005"}, {"type": "concept", "id": "outputdict"}, {"type": "concept", "id": "castdictany"}, {"type": "concept", "id": "ignorereportunknownmembertype"}, {"type": "document", "content": "if k not in output_dict:\n                                k_trunc = _truncated_repr(k, max_length=30)...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1006"}, {"type": "concept", "id": "ktrunc"}, {"type": "concept", "id": "truncatedreprk"}, {"type": "concept", "id": "maxlength30"}, {"type": "concept", "id": "foutput"}, {"type": "document", "content": "break\n                    else:\n                        if self.value not in ctx.output:  # pyright:...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1007"}, {"type": "concept", "id": "outputtrunc"}, {"type": "concept", "id": "selfvalue"}, {"type": "concept", "id": "ctxoutput"}, {"type": "document", "content": "except (TypeError, ValueError) as e:\n                failure_reason = f'Containment check failed: {e...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1008"}, {"type": "concept", "id": "typeerror"}, {"type": "concept", "id": "fcontainment"}, {"type": "document", "content": "Bases:\n`Evaluator[[object](https://docs.python.org/3/library/functions.html#object),\n[object](https:...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1009"}, {"type": "document", "content": "Bases:\n`Evaluator[[object](https://docs.python.org/3/library/functions.html#object),\n[object](https:...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1010"}, {"type": "concept", "id": "evaluatorobjecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "document", "content": "35\n    36\n    37\n    38\n    39\n    40\n    41\n    42\n\n|\n\n    \n    \n    @dataclass\n    class EqualsExp...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1011"}, {"type": "concept", "id": "ctxexpectedoutput"}, {"type": "document", "content": "Check if the span tree contains a span that matches the specified query.\n\nSource code in `pydantic_e...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1012"}, {"type": "concept", "id": "matches"}, {"type": "document", "content": "Bases:\n`Evaluator[[object](https://docs.python.org/3/library/functions.html#object),\n[object](https:...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1013"}, {"type": "document", "content": "@dataclass\n    class IsInstance(Evaluator[object, object, object]):\n        \"\"\"Check if the output i...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1014"}, {"type": "concept", "id": "selftypename"}, {"type": "concept", "id": "reason"}, {"type": "document", "content": "return EvaluationReason(value=False, reason=reason)\n      \n  \n---|---  \n  \n###  LLMJudge `dataclass`...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1015"}, {"type": "concept", "id": "evaluationreasonvaluefalse"}, {"type": "concept", "id": "reasonreason"}, {"type": "document", "content": "Bases:\n`Evaluator[[object](https://docs.python.org/3/library/functions.html#object),\n[object](https:...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1016"}, {"type": "concept", "id": "judge"}, {"type": "document", "content": "@dataclass\n    class LLMJudge(Evaluator[object, object, object]):\n        \"\"\"Judge whether the outpu...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1017"}, {"type": "concept", "id": "rubric"}, {"type": "concept", "id": "llmasajudge"}, {"type": "document", "content": "else:\n                from .llm_as_a_judge import judge_output\n    \n                grading_output =...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1018"}, {"type": "concept", "id": "judgeoutput"}, {"type": "concept", "id": "gradingoutput"}, {"type": "document", "content": "Bases:\n`Evaluator[[object](https://docs.python.org/3/library/functions.html#object),\n[object](https:...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1019"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class MaxDuration(Evaluator[object, object, object]):\n        \"\"\"Che...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1020"}, {"type": "concept", "id": "seconds"}, {"type": "concept", "id": "timedelta"}, {"type": "concept", "id": "duration"}, {"type": "document", "content": "The output of this evaluator is the result of evaluating the provided Python\nexpression.\n\n**_WARNING...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1021"}, {"type": "concept", "id": "evaluating"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class Python(Evaluator[object, object, object]):\n        \"\"\"The outp...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1022"}, {"type": "concept", "id": "expression"}, {"type": "document", "content": "Context for evaluating a task execution.\n\nAn instance of this class is the sole input to all Evaluat...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1023"}, {"type": "concept", "id": "outputs"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/evaluators/context.py`\n\n    \n    \n     30\n     31\n    ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1024"}, {"type": "concept", "id": "pydanticevalspydanticevalsevaluatorscontextpy"}, {"type": "document", "content": "@dataclass\n    class EvaluatorContext(Generic[InputsT, OutputT, MetadataT]):\n        \"\"\"Context for ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1025"}, {"type": "document", "content": "@dataclass\n        class ExactMatch(Evaluator):\n            def evaluate(self, ctx: EvaluatorContext...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1026"}, {"type": "document", "content": "output: OutputT\n        \"\"\"The actual output produced by the task for this case.\"\"\"\n        duration...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1027"}, {"type": "document", "content": "\"\"\"Metrics associated with the task run for this case.\n    \n        These can be set by calling `pyd...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1028"}, {"type": "concept", "id": "metrics"}, {"type": "document", "content": "the necessary dependencies installed.\n            \"\"\"\n            if isinstance(self._span_tree, Spa...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1029"}, {"type": "concept", "id": "selfspantree"}, {"type": "concept", "id": "installed"}, {"type": "document", "content": "name: [str](https://docs.python.org/3/library/stdtypes.html#str) | None\n    \n\nThe name of the case.\n...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1030"}, {"type": "document", "content": "####  duration `instance-attribute`\n\n    \n    \n    duration: [float](https://docs.python.org/3/libra...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1031"}, {"type": "concept", "id": "floathttpsdocspythonorg3libraryfunctionshtmlfloat"}, {"type": "document", "content": "####  metrics `instance-attribute`\n\n    \n    \n    metrics: [dict](https://docs.python.org/3/library/...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1032"}, {"type": "document", "content": "Get the `SpanTree` for this task execution.\n\nThe span tree is a graph where each node corresponds to...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1033"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`value` |  `EvaluationScalar` |...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1034"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class EvaluationReason:\n        \"\"\"The result of running an evaluato...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1035"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`name` |  `[str](https://docs.p...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1036"}, {"type": "document", "content": "62\n    63\n    64\n    65\n    66\n    67\n    68\n    69\n    70\n    71\n    72\n    73\n    74\n    75\n    76...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1037"}, {"type": "document", "content": "@dataclass\n    class EvaluationResult(Generic[EvaluationScalarT]):\n        \"\"\"The details of an indi...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1038"}, {"type": "document", "content": "Args:\n                *value_types: The types to check the value against.\n    \n            Returns:\n...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1039"}, {"type": "concept", "id": "valuetype"}, {"type": "concept", "id": "valuetypes"}, {"type": "document", "content": "downcast(\n        *value_types: [type](https://docs.python.org/3/library/functions.html#type)[T],\n  ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1040"}, {"type": "concept", "id": "evaluationresultt"}, {"type": "concept", "id": "typehttpsdocspythonorg3libraryfunctionshtmltypet"}, {"type": "document", "content": "80\n    81\n    82\n    83\n    84\n    85\n    86\n    87\n    88\n    89\n    90\n    91\n    92\n    93\n    94...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1041"}, {"type": "document", "content": "def downcast(self, *value_types: type[T]) -> EvaluationResult[T] | None:\n        \"\"\"Attempt to downc...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1042"}, {"type": "document", "content": "return cast(EvaluationResult[T], self)\n        return None\n      \n  \n---|---  \n  \n###  Evaluator `da...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1043"}, {"type": "concept", "id": "castevaluationresultt"}, {"type": "document", "content": "Bases: `[Generic](https://docs.python.org/3/library/typing.html#typing.Generic\n\"typing.Generic\")[Inp...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1044"}, {"type": "document", "content": "124\n    125\n    126\n    127\n    128\n    129\n    130\n    131\n    132\n    133\n    134\n    135\n    136\n...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1045"}, {"type": "document", "content": "212\n    213\n    214\n    215\n    216\n    217\n    218\n    219\n    220\n    221\n    222\n    223\n    224\n...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1046"}, {"type": "document", "content": "|...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1047"}, {"type": "document", "content": "@dataclass\n    class Evaluator(Generic[InputsT, OutputT, MetadataT], metaclass=_StrictABCMeta):\n    ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1048"}, {"type": "document", "content": "```\n        \"\"\"\n    \n        __pydantic_config__ = ConfigDict(arbitrary_types_allowed=True)\n    \n   ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1049"}, {"type": "concept", "id": "pydanticconfig"}, {"type": "concept", "id": "configdictarbitrarytypesallowedtrue"}, {"type": "document", "content": ") -> EvaluatorOutput | Awaitable[EvaluatorOutput]:  # pragma: no cover\n            \"\"\"Evaluate the t...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1050"}, {"type": "concept", "id": "evaluatoroutput"}, {"type": "concept", "id": "awaitableevaluatoroutput"}, {"type": "document", "content": "awaitable for asynchronous evaluation.\n            \"\"\"\n            raise NotImplementedError('You mu...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1051"}, {"type": "concept", "id": "awaitable"}, {"type": "document", "content": "of evaluation names to either of those.\n            \"\"\"\n            output = self.evaluate(ctx)\n    ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1052"}, {"type": "concept", "id": "implementations"}, {"type": "document", "content": "Args:\n                ctx: The context containing the inputs, outputs, and metadata for evaluation.\n...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1053"}, {"type": "document", "content": "@model_serializer(mode='plain')\n        def serialize(self, info: SerializationInfo) -> Any:\n       ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1054"}, {"type": "concept", "id": "jsonserializable"}, {"type": "concept", "id": "fielddefault"}, {"type": "concept", "id": "missing"}, {"type": "document", "content": "continue\n                raw_arguments[field.name] = value\n    \n            arguments: None | tuple[...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1055"}, {"type": "concept", "id": "arguments"}, {"type": "concept", "id": "lenrawarguments"}, {"type": "concept", "id": "rawargumentsfieldname"}, {"type": "document", "content": "name() -> [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nReturn the 'name' of this...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1056"}, {"type": "concept", "id": "serialization"}, {"type": "document", "content": "|\n\n    \n    \n    @classmethod\n    def name(cls) -> str:\n        \"\"\"Return the 'name' of this Evaluat...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1057"}, {"type": "concept", "id": "namecls"}, {"type": "document", "content": "Evaluate the task output in the given context.\n\nThis is the main evaluation method that subclasses m...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1058"}, {"type": "document", "content": "Type | Description  \n---|---  \n`EvaluatorOutput | [Awaitable](https://docs.python.org/3/library/coll...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1059"}, {"type": "concept", "id": "collectionsabcawaitableevaluatoroutput"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1060"}, {"type": "concept", "id": "pydanticevalspydanticevalsevaluatorsevaluatorpy"}, {"type": "document", "content": "160\n    161\n    162\n    163\n    164\n    165\n    166\n    167\n    168\n    169\n    170\n    171\n    172\n...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1061"}, {"type": "document", "content": "@abstractmethod\n    def evaluate(\n        self, ctx: EvaluatorContext[InputsT, OutputT, MetadataT]\n ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1062"}, {"type": "document", "content": "awaitable for asynchronous evaluation.\n        \"\"\"\n        raise NotImplementedError('You must imple...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1063"}, {"type": "concept", "id": "notimplementederroryou"}, {"type": "document", "content": "evaluate_sync(\n        ctx: EvaluatorContext[InputsT, OutputT, MetadataT],\n    ) -> EvaluatorOutput\n...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1064"}, {"type": "concept", "id": "evaluatorcontextinputst"}, {"type": "document", "content": "Type | Description  \n---|---  \n`EvaluatorOutput` |  The evaluation result, which can be a scalar val...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1065"}, {"type": "document", "content": "def evaluate_sync(self, ctx: EvaluatorContext[InputsT, OutputT, MetadataT]) -> EvaluatorOutput:\n    ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1066"}, {"type": "concept", "id": "evaluatesyncself"}, {"type": "document", "content": "if inspect.iscoroutine(output):  # pragma: no cover\n            return get_event_loop().run_until_co...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1067"}, {"type": "concept", "id": "inspectiscoroutineoutput"}, {"type": "concept", "id": "geteventlooprununtilcompleteoutput"}, {"type": "document", "content": "evaluate_async(\n        ctx: EvaluatorContext[InputsT, OutputT, MetadataT],\n    ) -> EvaluatorOutput...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1068"}, {"type": "document", "content": "Type | Description  \n---|---  \n`EvaluatorOutput` |  The evaluation result, which can be a scalar val...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1069"}, {"type": "document", "content": "async def evaluate_async(self, ctx: EvaluatorContext[InputsT, OutputT, MetadataT]) -> EvaluatorOutpu...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1070"}, {"type": "document", "content": "of evaluation names to either of those.\n        \"\"\"\n        # Note: If self.evaluate is synchronous,...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1071"}, {"type": "document", "content": "serialize(info: [SerializationInfo](https://docs.pydantic.dev/latest/api/pydantic_core_schema/#pydan...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1072"}, {"type": "concept", "id": "serializeinfo"}, {"type": "document", "content": "219\n    220\n    221\n    222\n    223\n    224\n    225\n    226\n    227\n    228\n    229\n    230\n    231\n...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1073"}, {"type": "document", "content": "@model_serializer(mode='plain')\n    def serialize(self, info: SerializationInfo) -> Any:\n        \"\"\"...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1074"}, {"type": "document", "content": "continue\n            raw_arguments[field.name] = value\n    \n        arguments: None | tuple[Any,] | ...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1075"}, {"type": "document", "content": "EvaluatorOutput = [Union](https://docs.python.org/3/library/typing.html#typing.Union \"typing.Union\")...", "source": "text_data\\evaluators.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\evaluators.txt:1076"}, {"type": "concept", "id": "evaluationreason"}, {"type": "concept", "id": "unionhttpsdocspythonorg3librarytypinghtmltypingunion"}, {"type": "concept", "id": "typingunion"}, {"type": "concept", "id": "evaluationscalar"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nExamples\n\nType to ...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1076"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1077"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1078"}, {"type": "document", "content": "* [ Pydantic Model  ](pydantic-model/)\n    * [ Weather agent  ](weather-agent/)\n    * [ Bank support...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1079"}, {"type": "concept", "id": "pydanticmodel"}, {"type": "document", "content": "* [ pydantic_ai.settings  ](../api/settings/)\n    * [ pydantic_ai.usage  ](../api/usage/)\n    * [ py...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1080"}, {"type": "concept", "id": "apiusage"}, {"type": "concept", "id": "pydanticaimcp"}, {"type": "document", "content": "* [ pydantic_ai.models.test  ](../api/models/test/)\n    * [ pydantic_ai.models.function  ](../api/mo...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1081"}, {"type": "concept", "id": "apimodelsfunction"}, {"type": "concept", "id": "pydanticaimodelsfallback"}, {"type": "document", "content": "* [ pydantic_evals.evaluators  ](../api/pydantic_evals/evaluators/)\n    * [ pydantic_evals.reporting...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1082"}, {"type": "document", "content": "Table of contents\n\n  * Usage \n    * Installing required dependencies \n    * Setting model environmen...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1083"}, {"type": "concept", "id": "installing"}, {"type": "document", "content": "pipuv\n\n    \n    \n    pip install \"pydantic-ai[examples]\"\n    \n    \n    \n    uv add \"pydantic-ai[exam...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1084"}, {"type": "concept", "id": "pydanticaiexamples"}, {"type": "document", "content": "pipuv\n\n    \n    \n    python -m pydantic_ai_examples.<example_module_name>\n    \n    \n    \n    uv run ...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1085"}, {"type": "concept", "id": "pydanticaiexamplespydanticmodel"}, {"type": "concept", "id": "pydanticaiexamplesexamplemodulename"}, {"type": "document", "content": "pipuv\n\n    \n    \n    python -m pydantic_ai_examples --copy-to examples/\n    \n    \n    \n    uv run -m...", "source": "text_data\\examples.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\examples.txt:1086"}, {"type": "concept", "id": "copyto"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1086"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1087"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1088"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1089"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1090"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1091"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../../...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1092"}, {"type": "concept", "id": "modelsinstrumented"}, {"type": "document", "content": "* exceptions \n      * GraphSetupError \n        * message \n      * GraphRuntimeError \n        * messa...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1093"}, {"type": "document", "content": "Table of contents\n\n  * exceptions \n  * GraphSetupError \n    * message \n  * GraphRuntimeError \n    * ...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1094"}, {"type": "concept", "id": "graphsetuperror"}, {"type": "concept", "id": "exceptions"}, {"type": "document", "content": "7\n     8\n     9\n    10\n    11\n    12\n    13\n    14\n    15\n\n|\n\n    \n    \n    class GraphSetupError(Ty...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1095"}, {"type": "concept", "id": "caused"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/exceptions.py`\n\n    \n    \n    18\n    19\n    20\n    21\n...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1096"}, {"type": "concept", "id": "pydanticgraphpydanticgraphexceptionspy"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/exceptions.py`\n\n    \n    \n    29\n    30\n    31\n    32\n...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1097"}, {"type": "document", "content": "|\n\n    \n    \n    class GraphNodeStatusError(GraphRuntimeError):\n        \"\"\"Error caused by trying to...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.436416", "id": "text_data\\exceptions.txt:1098"}, {"type": "concept", "id": "status"}, {"type": "concept", "id": "actualstatus"}, {"type": "concept", "id": "snapshotstatus"}, {"type": "document", "content": "check(status: [SnapshotStatus](../persistence/#pydantic_graph.persistence.SnapshotStatus \"pydantic_g...", "source": "text_data\\exceptions.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\exceptions.txt:1099"}, {"type": "concept", "id": "checkstatus"}, {"type": "concept", "id": "snapshotstatuspersistencepydanticgraphpersistencesnapshotstatus"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1099"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1100"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1101"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1102"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1103"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1104"}, {"type": "document", "content": "* [ pydantic_ai.models.mistral  ](../mistral/)\n    * [ pydantic_ai.models.test  ](../test/)\n    * [ ...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1105"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../../pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ]...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1106"}, {"type": "document", "content": "Table of contents\n\n  * fallback \n  * FallbackModel \n    * __init__ \n    * request \n    * request_str...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1107"}, {"type": "concept", "id": "fallback"}, {"type": "concept", "id": "fallbackmodel"}, {"type": "document", "content": "21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n ...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1108"}, {"type": "document", "content": "109\n    110\n    111\n    112\n    113\n    114\n    115\n    116\n    117\n    118\n    119\n    120\n    121\n...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1109"}, {"type": "document", "content": "|...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1110"}, {"type": "document", "content": "@dataclass(init=False)\n    class FallbackModel(Model):\n        \"\"\"A model that uses one or more fall...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1111"}, {"type": "concept", "id": "fallbackon"}, {"type": "document", "content": "\"\"\"Initialize a fallback model instance.\n    \n            Args:\n                default_model: The n...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1112"}, {"type": "concept", "id": "fallbackmodels"}, {"type": "document", "content": "self,\n            messages: list[ModelMessage],\n            model_settings: ModelSettings | None,\n  ...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1113"}, {"type": "document", "content": "continue\n                    raise exc\n    \n                self._set_span_attributes(model)\n       ...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1114"}, {"type": "document", "content": "async with AsyncExitStack() as stack:\n                    try:\n                        response = aw...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1115"}, {"type": "concept", "id": "asyncexitstack"}, {"type": "document", "content": "def _set_span_attributes(self, model: Model):\n            with suppress(Exception):\n                ...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1116"}, {"type": "concept", "id": "selfmodels"}, {"type": "document", "content": "@property\n        def base_url(self) -> str | None:\n            return self.models[0].base_url\n     ...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1117"}, {"type": "concept", "id": "selfmodels0baseurl"}, {"type": "document", "content": "__init__(\n        default_model: [Model](../base/#pydantic_ai.models.Model \"pydantic_ai.models.Model...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1118"}, {"type": "concept", "id": "modelbasepydanticaimodelsmodel"}, {"type": "concept", "id": "knownmodelnamebasepydanticaimodelsknownmodelname"}, {"type": "concept", "id": "defaultmodel"}, {"type": "document", "content": "| [tuple](https://docs.python.org/3/library/stdtypes.html#tuple)[[type](https://docs.python.org/3/li...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1119"}, {"type": "concept", "id": "tuplehttpsdocspythonorg3librarystdtypeshtmltupletypehttpsdocspythonorg3libraryfunctionshtmltypeexceptionhttpsdocspythonorg3libraryexceptionshtmlexception"}, {"type": "concept", "id": "modelhttperrorexceptionspydanticaiexceptionsmodelhttperror"}, {"type": "concept", "id": "pydanticaiexceptionsmodelhttperror"}, {"type": "document", "content": "Initialize a fallback model instance.\n\nParameters:...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1120"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`default_model` |  `[Model](../base/#pydanti...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1121"}, {"type": "document", "content": "`fallback_on` |  `[Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"typing.C...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1122"}, {"type": "concept", "id": "typingcallableexceptionhttpsdocspythonorg3libraryexceptionshtmlexception"}, {"type": "document", "content": "33\n    34\n    35\n    36\n    37\n    38\n    39\n    40\n    41\n    42\n    43\n    44\n    45\n    46\n    47...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1123"}, {"type": "document", "content": "def __init__(\n        self,\n        default_model: Model | KnownModelName,\n        *fallback_models:...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1124"}, {"type": "document", "content": "if isinstance(fallback_on, tuple):\n            self._fallback_on = _default_fallback_condition_facto...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1125"}, {"type": "concept", "id": "selffallbackon"}, {"type": "concept", "id": "isinstancefallbackon"}, {"type": "concept", "id": "defaultfallbackconditionfactoryfallbackon"}, {"type": "document", "content": "request(\n        messages: [list](https://docs.python.org/3/library/stdtypes.html#list)[[ModelMessag...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1126"}, {"type": "document", "content": "Try each model in sequence until one succeeds.\n\nIn case of failure, raise a FallbackExceptionGroup w...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1127"}, {"type": "concept", "id": "until"}, {"type": "concept", "id": "succeeds"}, {"type": "concept", "id": "failure"}, {"type": "document", "content": "async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: Model...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1128"}, {"type": "document", "content": "continue\n                raise exc\n    \n            self._set_span_attributes(model)\n            ret...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1129"}, {"type": "concept", "id": "selfsetspanattributesmodel"}, {"type": "document", "content": "request_stream(\n        messages: [list](https://docs.python.org/3/library/stdtypes.html#list)[[Mode...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1130"}, {"type": "document", "content": "Try each model in sequence until one succeeds.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1131"}, {"type": "document", "content": "@asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1132"}, {"type": "document", "content": "exceptions.append(exc)\n                        continue\n                    raise exc\n    \n         ...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1133"}, {"type": "concept", "id": "exceptionsappendexc"}, {"type": "document", "content": "model_name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe model name.\n\n\u00a9 Pyda...", "source": "text_data\\fallback.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\fallback.txt:1134"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nFlight booki...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1134"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1135"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1136"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1137"}, {"type": "document", "content": "* [ Pydantic Model  ](../pydantic-model/)\n    * [ Weather agent  ](../weather-agent/)\n    * [ Bank s...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1138"}, {"type": "concept", "id": "flight"}, {"type": "concept", "id": "booking"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../../api/messages/)\n    * [ pydantic_ai.exceptions  ](../../api/excepti...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1139"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../api/models/groq/)\n    * [ pydantic_ai.models.instrumented  ](.....", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1140"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../api/pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1141"}, {"type": "document", "content": "Table of contents\n\n  * Running the Example \n  * Example Code \n\n# Flight booking\n\nExample of a multi-...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1142"}, {"type": "document", "content": "pipuv\n\n    \n    \n    python -m pydantic_ai_examples.flight_booking\n    \n    \n    \n    uv run -m pyda...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1143"}, {"type": "concept", "id": "pydanticaiexamplesflightbooking"}, {"type": "concept", "id": "flightbookingpy"}, {"type": "document", "content": "import datetime\n    from dataclasses import dataclass\n    from typing import Literal\n    \n    import...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1144"}, {"type": "document", "content": "origin: str = Field(description='Three-letter airport code')\n        destination: str = Field(descri...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1145"}, {"type": "concept", "id": "fielddescriptionthreeletter"}, {"type": "concept", "id": "airport"}, {"type": "concept", "id": "datetimedate"}, {"type": "document", "content": "),\n        instrument=True,\n    )\n    \n    \n    # This agent is responsible for extracting flight de...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1146"}, {"type": "concept", "id": "flights"}, {"type": "concept", "id": "instrumenttrue"}, {"type": "document", "content": "return result.data\n    \n    \n    @search_agent.result_validator\n    async def validate_result(\n     ...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1147"}, {"type": "concept", "id": "noflightfound"}, {"type": "concept", "id": "flightdetails"}, {"type": "concept", "id": "resultorigin"}, {"type": "document", "content": ")\n        if result.date != ctx.deps.req_date:\n            errors.append(f'Flight should be on {ctx....", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1148"}, {"type": "concept", "id": "resultdate"}, {"type": "concept", "id": "ctxdepsreqdate"}, {"type": "concept", "id": "extract"}, {"type": "concept", "id": "selection"}, {"type": "document", "content": "system_prompt=(\n            \"Extract the user's seat preference. \"\n            'Seats A and F are wi...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1149"}, {"type": "concept", "id": "international"}, {"type": "concept", "id": "seats"}, {"type": "document", "content": "- Destination: Fairbanks International Airport (FAI)\n    - Date: January 10, 2025\n    \n    3. Flight...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1150"}, {"type": "concept", "id": "destination"}, {"type": "concept", "id": "january"}, {"type": "document", "content": "- Price: $120\n    - Origin: Boston Logan International Airport (BOS)\n    - Destination: Ted Stevens ...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.450238", "id": "text_data\\flight-booking.txt:1151"}, {"type": "concept", "id": "price"}, {"type": "concept", "id": "origin"}, {"type": "document", "content": "deps = Deps(\n            web_page_text=flights_web_page,\n            req_origin='SFO',\n            r...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\flight-booking.txt:1152"}, {"type": "concept", "id": "found"}, {"type": "concept", "id": "webpagetextflightswebpage"}, {"type": "concept", "id": "reqoriginsfo"}, {"type": "document", "content": "print('No flight found')\n                break\n            else:\n                flight = result.dat...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\flight-booking.txt:1153"}, {"type": "document", "content": ")\n    \n    \n    async def find_seat(usage: Usage) -> SeatPreference:\n        message_history: list[M...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\flight-booking.txt:1154"}, {"type": "concept", "id": "seatpreference"}, {"type": "concept", "id": "findseatusage"}, {"type": "document", "content": "async def buy_tickets(flight_details: FlightDetails, seat: SeatPreference):\n        print(f'Purchasi...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\flight-booking.txt:1155"}, {"type": "concept", "id": "buyticketsflightdetails"}, {"type": "concept", "id": "printfpurchasing"}, {"type": "document", "content": "\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\flight-booking.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\flight-booking.txt:1156"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\npydantic_ai....", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1156"}, {"type": "concept", "id": "repository"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1157"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1158"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1159"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1160"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../result/)\n    * [ pydantic_ai.messages  ](../messages/)\n    * [ pydantic...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1161"}, {"type": "concept", "id": "pydanticaiformatasxml"}, {"type": "concept", "id": "formatasxml"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../models...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1162"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ](.....", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1163"}, {"type": "document", "content": "Table of contents\n\n  * format_as_xml \n  * format_as_xml \n\n# `pydantic_ai.format_as_xml`\n\n###  format...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1164"}, {"type": "document", "content": "Format a Python object as XML.\n\nThis is useful since LLMs often find it easier to read semi-structur...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1165"}, {"type": "concept", "id": "since"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`obj` |  `[Any](https://docs.python.org/3/li...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1166"}, {"type": "concept", "id": "outer"}, {"type": "document", "content": "`include_root_tag` |  `[bool](https://docs.python.org/3/library/functions.html#bool)` |  Whether to ...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1167"}, {"type": "concept", "id": "includeroottag"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[str](https://docs.python.org/3/library/stdtypes.html#str)` |  XML r...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1168"}, {"type": "concept", "id": "representation"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/format_as_xml.py`\n\n    \n    \n    14\n    15\n    16\n    1...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1169"}, {"type": "concept", "id": "pydanticaislimpydanticaiformatasxmlpy"}, {"type": "document", "content": "def format_as_xml(\n        obj: Any,\n        root_tag: str = 'examples',\n        item_tag: str = 'ex...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1170"}, {"type": "concept", "id": "roottag"}, {"type": "document", "content": "item_tag: Tag to use for each item in an iterable (e.g. list), this is overridden by the class name\n...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1171"}, {"type": "concept", "id": "itemtag"}, {"type": "concept", "id": "iterable"}, {"type": "document", "content": "'''\n        <user>\n          <name>John</name>\n          <height>6</height>\n          <weight>200</w...", "source": "text_data\\format_as_xml.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\format_as_xml.txt:1172"}, {"type": "concept", "id": "indent"}, {"type": "concept", "id": "namejohnname"}, {"type": "concept", "id": "height6height"}, {"type": "concept", "id": "weight200weight"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1172"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1173"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1174"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1175"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1176"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1177"}, {"type": "document", "content": "* [ pydantic_ai.models.mistral  ](../mistral/)\n    * [ pydantic_ai.models.test  ](../test/)\n    * py...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1178"}, {"type": "concept", "id": "mistral"}, {"type": "document", "content": "* [ pydantic_ai.providers  ](../../providers/)\n    * [ pydantic_graph  ](../../pydantic_graph/graph/...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1179"}, {"type": "document", "content": "Table of contents\n\n  * function \n  * FunctionModel \n    * __init__ \n    * model_name \n    * system \n...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1180"}, {"type": "concept", "id": "functionmodel"}, {"type": "document", "content": "from pydantic_ai import Agent\n    from pydantic_ai.messages import ModelMessage, ModelResponse, Text...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1181"}, {"type": "concept", "id": "agentinfo"}, {"type": "document", "content": ")\n        ]\n        \"\"\"\n        print(info)\n        \"\"\"\n        AgentInfo(\n            function_tool...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1182"}, {"type": "concept", "id": "printinfo"}, {"type": "concept", "id": "functiontools"}, {"type": "concept", "id": "allowtextresulttrue"}, {"type": "document", "content": "See [Unit testing with `FunctionModel`](../../../testing/#unit-testing-with-\nfunctionmodel) for deta...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1183"}, {"type": "concept", "id": "functionmodeltestingunittestingwith"}, {"type": "document", "content": "37\n     38\n     39\n     40\n     41\n     42\n     43\n     44\n     45\n     46\n     47\n     48\n     49\n ...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1184"}, {"type": "document", "content": "125\n    126\n    127\n    128\n    129\n    130\n    131\n    132\n    133\n    134\n    135\n    136\n    137\n...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1185"}, {"type": "document", "content": "|...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1186"}, {"type": "document", "content": "@dataclass(init=False)\n    class FunctionModel(Model):\n        \"\"\"A model controlled by a local func...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1187"}, {"type": "concept", "id": "functiondef"}, {"type": "document", "content": "@overload\n        def __init__(\n            self, function: FunctionDef, *, stream_function: StreamF...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.452371", "id": "text_data\\function.txt:1188"}, {"type": "concept", "id": "streamfunction"}, {"type": "concept", "id": "streamfunctiondef"}, {"type": "document", "content": "stream_function: The function to call for streamed requests.\n                model_name: The name of...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1189"}, {"type": "concept", "id": "selffunction"}, {"type": "document", "content": "async def request(\n            self,\n            messages: list[ModelMessage],\n            model_set...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1190"}, {"type": "document", "content": "else:\n                response_ = await _utils.run_in_executor(self.function, messages, agent_info)\n...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1191"}, {"type": "document", "content": "agent_info = AgentInfo(\n                model_request_parameters.function_tools,\n                mod...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1192"}, {"type": "concept", "id": "modelrequestparametersfunctiontools"}, {"type": "document", "content": "yield FunctionStreamedResponse(_model_name=self._model_name, _iter=response_stream)\n    \n        @pr...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1193"}, {"type": "concept", "id": "functionstreamedresponsemodelnameselfmodelname"}, {"type": "document", "content": "__init__(\n        function: FunctionDef, *, model_name: [str](https://docs.python.org/3/library/stdt...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1194"}, {"type": "document", "content": "*,\n        stream_function: StreamFunctionDef | None = None,\n        model_name: [str](https://docs....", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1195"}, {"type": "document", "content": "Initialize a `FunctionModel`.\n\nEither `function` or `stream_function` must be provided, providing bo...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1196"}, {"type": "document", "content": "61\n    62\n    63\n    64\n    65\n    66\n    67\n    68\n    69\n    70\n    71\n    72\n    73\n    74\n    75...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1197"}, {"type": "document", "content": "def __init__(\n        self,\n        function: FunctionDef | None = None,\n        *,\n        stream_f...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1198"}, {"type": "document", "content": "self.function = function\n        self.stream_function = stream_function\n    \n        function_name =...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1199"}, {"type": "concept", "id": "selfstreamfunction"}, {"type": "document", "content": "model_name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe model name.\n\n####  ...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1200"}, {"type": "document", "content": "@dataclass(frozen=True)\n    class AgentInfo:\n        \"\"\"Information about an agent.\n    \n        Thi...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1201"}, {"type": "concept", "id": "listtooldefinition"}, {"type": "document", "content": "model_settings: ModelSettings | None\n        \"\"\"The model settings passed to the run call.\"\"\"\n      ...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1202"}, {"type": "document", "content": "function_tools: [list](https://docs.python.org/3/library/stdtypes.html#list)[[ToolDefinition](../../...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1203"}, {"type": "concept", "id": "allowtextresult"}, {"type": "concept", "id": "listhttpsdocspythonorg3librarystdtypeshtmllisttooldefinitiontoolspydanticaitoolstooldefinition"}, {"type": "document", "content": "####  result_tools `instance-attribute`\n\n    \n    \n    result_tools: [list](https://docs.python.org/...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1204"}, {"type": "concept", "id": "resulttools"}, {"type": "concept", "id": "pydanticaitoolstooldefinition"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n\n    \n    \n    169\n    170\n    171\n...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1205"}, {"type": "concept", "id": "incremental"}, {"type": "concept", "id": "change"}, {"type": "concept", "id": "pydanticaislimpydanticaimodelsfunctionpy"}, {"type": "document", "content": "name: [str](https://docs.python.org/3/library/stdtypes.html#str) | None = None\n    \n\nIncremental cha...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1206"}, {"type": "concept", "id": "jsonargs"}, {"type": "document", "content": "###  DeltaToolCalls `module-attribute`\n\n    \n    \n    DeltaToolCalls: [TypeAlias](https://typing-ext...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1207"}, {"type": "concept", "id": "deltatoolcalls"}, {"type": "concept", "id": "typealiashttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionstypealias"}, {"type": "concept", "id": "typingextensionstypealias"}, {"type": "concept", "id": "dicthttpsdocspythonorg3librarystdtypeshtmldictinthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "document", "content": "FunctionDef: [TypeAlias](https://typing-extensions.readthedocs.io/en/latest/index.html#typing_extens...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1208"}, {"type": "document", "content": "[Union](https://docs.python.org/3/library/typing.html#typing.Union \"typing.Union\")[[ModelResponse](....", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1209"}, {"type": "concept", "id": "pydanticaimessagesmodelresponse"}, {"type": "concept", "id": "typingunionmodelresponsemessagespydanticaimessagesmodelresponse"}, {"type": "concept", "id": "collectionsabcawaitablemodelresponsemessagespydanticaimessagesmodelresponse"}, {"type": "document", "content": "A function used to generate a non-streamed response.\n\n###  StreamFunctionDef `module-attribute`...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1210"}, {"type": "concept", "id": "nonstreamed"}, {"type": "document", "content": "StreamFunctionDef: [TypeAlias](https://typing-extensions.readthedocs.io/en/latest/index.html#typing_...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1211"}, {"type": "document", "content": "A function used to generate a streamed response.\n\nWhile this is defined as having return type of `As...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1212"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n\n    \n    \n    202\n    203\n    204\n...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1213"}, {"type": "document", "content": "@dataclass\n    class FunctionStreamedResponse(StreamedResponse):\n        \"\"\"Implementation of `Strea...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1214"}, {"type": "concept", "id": "selfusage"}, {"type": "concept", "id": "functionstreamedresponsestreamedresponse"}, {"type": "document", "content": "yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=item)\n                ...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1215"}, {"type": "concept", "id": "contentitem"}, {"type": "concept", "id": "dtcindex"}, {"type": "document", "content": "args=delta_tool_call.json_args,\n                            tool_call_id=delta_tool_call.tool_call_i...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1216"}, {"type": "concept", "id": "argsdeltatoolcalljsonargs"}, {"type": "document", "content": "model_name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nGet the model name of t...", "source": "text_data\\function.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\function.txt:1217"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1217"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1218"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1219"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1220"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1221"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1222"}, {"type": "document", "content": "* GeminiModelName \n        * GeminiModelSettings \n        * GeminiModel \n          * __init__ \n     ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1223"}, {"type": "concept", "id": "geminimodelname"}, {"type": "concept", "id": "geminimodelsettings"}, {"type": "concept", "id": "geminimodel"}, {"type": "document", "content": "* [ pydantic_ai.providers  ](../../providers/)\n    * [ pydantic_graph  ](../../pydantic_graph/graph/...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1224"}, {"type": "document", "content": "Table of contents\n\n  * Setup \n    * gemini \n    * LatestGeminiModelNames \n    * GeminiModelName \n   ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1225"}, {"type": "concept", "id": "gemini"}, {"type": "document", "content": "The Google SDK for interacting with the `generativelanguage.googleapis.com`\nAPI [`google-generativea...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1226"}, {"type": "concept", "id": "doesnt"}, {"type": "concept", "id": "implement"}, {"type": "concept", "id": "google"}, {"type": "document", "content": "###  LatestGeminiModelNames `module-attribute`\n\n    \n    \n    LatestGeminiModelNames = [Literal](htt...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1227"}, {"type": "concept", "id": "latestgeminimodelnames"}, {"type": "concept", "id": "gemini15flash"}, {"type": "document", "content": "Latest Gemini models.\n\n###  GeminiModelName `module-attribute`\n\n    \n    \n    GeminiModelName = [Uni...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1228"}, {"type": "document", "content": "Settings used for a Gemini model request.\n\nALL FIELDS MUST BE `gemini_` PREFIXED SO YOU CAN MERGE TH...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1229"}, {"type": "document", "content": "A model that uses Gemini via `generativelanguage.googleapis.com` API.\n\nThis is implemented from scra...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1230"}, {"type": "concept", "id": "generativelanguagegoogleapiscom"}, {"type": "concept", "id": "implemented"}, {"type": "concept", "id": "scratch"}, {"type": "document", "content": "82\n     83\n     84\n     85\n     86\n     87\n     88\n     89\n     90\n     91\n     92\n     93\n     94\n ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1231"}, {"type": "document", "content": "170\n    171\n    172\n    173\n    174\n    175\n    176\n    177\n    178\n    179\n    180\n    181\n    182\n...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1232"}, {"type": "document", "content": "260\n    261\n    262\n    263\n    264\n    265\n    266\n    267\n    268\n    269\n    270\n    271\n    272\n...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1233"}, {"type": "document", "content": "|...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1234"}, {"type": "document", "content": "@dataclass(init=False)\n    class GeminiModel(Model):\n        \"\"\"A model that uses Gemini via `genera...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.454387", "id": "text_data\\gemini.txt:1235"}, {"type": "concept", "id": "geminimodelmodel"}, {"type": "document", "content": "_url: str | None = field(repr=False)\n        _system: str = field(default='gemini', repr=False)\n    ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1236"}, {"type": "concept", "id": "googlevertex"}, {"type": "concept", "id": "providerhttpxasyncclient"}, {"type": "concept", "id": "googlegla"}, {"type": "document", "content": "\"\"\"\n            self._model_name = model_name\n            self._provider = provider\n    \n           ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1237"}, {"type": "concept", "id": "selfurl"}, {"type": "document", "content": "check_allow_model_requests()\n            async with self._make_request(\n                messages, Fa...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1238"}, {"type": "concept", "id": "selfmakerequest"}, {"type": "document", "content": "async with self._make_request(\n                messages, True, cast(GeminiModelSettings, model_setti...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1239"}, {"type": "document", "content": "if model_request_parameters.result_tools:\n                tools += [_function_from_abstract_tool(t) ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1240"}, {"type": "concept", "id": "functionfromabstracttoolt"}, {"type": "document", "content": "self,\n            messages: list[ModelMessage],\n            streamed: bool,\n            model_settin...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1241"}, {"type": "concept", "id": "syspromptparts"}, {"type": "concept", "id": "listmodelmessage"}, {"type": "document", "content": "if tools is not None:\n                request_data['tools'] = tools\n            if tool_config is no...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1242"}, {"type": "concept", "id": "toolconfig"}, {"type": "concept", "id": "requestdatatools"}, {"type": "document", "content": "generation_config['presence_penalty'] = presence_penalty\n                if (frequency_penalty := mo...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1243"}, {"type": "concept", "id": "frequencypenalty"}, {"type": "concept", "id": "geminisafetysettings"}, {"type": "concept", "id": "generationconfig"}, {"type": "concept", "id": "generationconfigpresencepenalty"}, {"type": "concept", "id": "presencepenalty"}, {"type": "document", "content": "request_json = _gemini_request_ta.dump_json(request_data, by_alias=True)\n            async with self...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1244"}, {"type": "concept", "id": "requestjson"}, {"type": "concept", "id": "geminirequesttadumpjsonrequestdata"}, {"type": "document", "content": "yield r\n    \n        def _process_response(self, response: _GeminiResponse) -> ModelResponse:\n      ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1245"}, {"type": "concept", "id": "strresponse"}, {"type": "document", "content": "parts = response['candidates'][0]['content']['parts']\n            return _process_response_from_part...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1246"}, {"type": "concept", "id": "httpresponse"}, {"type": "concept", "id": "aiterbytes"}, {"type": "document", "content": "experimental_allow_partial='trailing-strings',\n                )\n                if responses:\n     ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1247"}, {"type": "concept", "id": "startresponse"}, {"type": "concept", "id": "experimentalallowpartialtrailingstrings"}, {"type": "concept", "id": "responses1"}, {"type": "concept", "id": "lastcandidates"}, {"type": "document", "content": ") -> tuple[list[_GeminiTextPart], list[_GeminiContent]]:\n            sys_prompt_parts: list[_GeminiT...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1248"}, {"type": "concept", "id": "listgeminicontent"}, {"type": "concept", "id": "tuplelistgeminitextpart"}, {"type": "concept", "id": "listgeminitextpart"}, {"type": "document", "content": "elif isinstance(part, ToolReturnPart):\n                            message_parts.append(_response_pa...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1249"}, {"type": "concept", "id": "messagepartsappendresponsepartfromresponseparttoolname"}, {"type": "concept", "id": "partmodelresponseobject"}, {"type": "document", "content": "if message_parts:\n                        contents.append(_GeminiContent(role='user', parts=message_...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1250"}, {"type": "concept", "id": "listgeminipartunion"}, {"type": "concept", "id": "contentsappendgeminicontentroleuser"}, {"type": "document", "content": "content.append({'text': item})\n                    elif isinstance(item, BinaryContent):\n           ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1251"}, {"type": "concept", "id": "base64encoded"}, {"type": "concept", "id": "mimetype"}, {"type": "concept", "id": "binarycontent"}, {"type": "document", "content": "inline_data = _GeminiInlineDataPart(\n                            inline_data={'data': base64.b64enco...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1252"}, {"type": "concept", "id": "inlinedata"}, {"type": "concept", "id": "geminiinlinedatapart"}, {"type": "concept", "id": "inlinedatadata"}, {"type": "concept", "id": "base64b64encoderesponsecontentdecodeutf8"}, {"type": "document", "content": "__init__(\n        model_name: GeminiModelName,\n        *,\n        provider: (\n            [Literal](...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1253"}, {"type": "concept", "id": "typingliteralgooglegla"}, {"type": "document", "content": "Initialize a Gemini model.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`mo...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1254"}, {"type": "document", "content": "100\n    101\n    102\n    103\n    104\n    105\n    106\n    107\n    108\n    109\n    110\n    111\n    112\n...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1255"}, {"type": "document", "content": "def __init__(\n        self,\n        model_name: GeminiModelName,\n        *,\n        provider: Litera...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1256"}, {"type": "document", "content": "provider = infer_provider(provider)\n        self._system = provider.name\n        self.client = provi...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1257"}, {"type": "concept", "id": "selfsystem"}, {"type": "concept", "id": "providername"}, {"type": "document", "content": "model_name: GeminiModelName\n    \n\nThe model name.\n\n####  system `property`\n\n    \n    \n    system: [s...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1258"}, {"type": "concept", "id": "authentication"}, {"type": "concept", "id": "definition"}, {"type": "document", "content": "Authentication using an API key for the `X-Goog-Api-Key` header.\n\nSource code in `pydantic_ai_slim/p...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1259"}, {"type": "concept", "id": "xgoogapikey"}, {"type": "concept", "id": "header"}, {"type": "document", "content": "Implementation of `StreamedResponse` for the Gemini model.\n\nSource code in `pydantic_ai_slim/pydanti...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1260"}, {"type": "document", "content": "@dataclass\n    class GeminiStreamedResponse(StreamedResponse):\n        \"\"\"Implementation of `Streame...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1261"}, {"type": "concept", "id": "candidate"}, {"type": "document", "content": "gemini_part: _GeminiPartUnion\n                for gemini_part in candidate['content']['parts']:\n    ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1262"}, {"type": "concept", "id": "geminipart"}, {"type": "concept", "id": "deltas"}, {"type": "concept", "id": "functioncall"}, {"type": "concept", "id": "geminipartunion"}, {"type": "document", "content": "# We need to confirm whether this is actually true, but if it isn't, we can still handle it properly...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1263"}, {"type": "concept", "id": "confirm"}, {"type": "concept", "id": "actually"}, {"type": "concept", "id": "still"}, {"type": "document", "content": "yield maybe_event\n                    else:\n                        assert 'function_response' in ge...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1264"}, {"type": "concept", "id": "would"}, {"type": "concept", "id": "complicated"}, {"type": "document", "content": "# But changing that would make things a lot more complicated.\n            async for chunk in self._s...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1265"}, {"type": "concept", "id": "changing"}, {"type": "document", "content": "responses_to_yield = gemini_responses[:-1]\n                for r in responses_to_yield[current_gemin...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1266"}, {"type": "concept", "id": "geminiresponses1"}, {"type": "concept", "id": "metadataasusager"}, {"type": "document", "content": "\"\"\"Get the timestamp of the response.\"\"\"\n            return self._timestamp\n      \n  \n---|---  \n  \n#...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1267"}, {"type": "concept", "id": "selftimestamp"}, {"type": "document", "content": "model_name: GeminiModelName\n    \n\nGet the model name of the response.\n\n####  timestamp `property`\n\n ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1268"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n\n    \n    \n    454\n    455\n    456\n  ...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1269"}, {"type": "concept", "id": "pydanticaislimpydanticaimodelsgeminipy"}, {"type": "document", "content": "class GeminiSafetySettings(TypedDict):\n        \"\"\"Safety settings options for Gemini model request.\n...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1270"}, {"type": "document", "content": "Safety settings category.\n        \"\"\"\n    \n        threshold: Literal[\n            'HARM_BLOCK_THRES...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1271"}, {"type": "concept", "id": "literal"}, {"type": "document", "content": "category: [Literal](https://docs.python.org/3/library/typing.html#typing.Literal \"typing.Literal\")[\n...", "source": "text_data\\gemini.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\gemini.txt:1272"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\generation.txt:1272"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\generation.txt:1273"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\generation.txt:1274"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\generation.txt:1275"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\generation.txt:1276"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\generation.txt:1277"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../../...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\generation.txt:1278"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ](.....", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.456395", "id": "text_data\\generation.txt:1279"}, {"type": "concept", "id": "pydanticevalsgeneration"}, {"type": "document", "content": "Table of contents\n\n  * generation \n  * generate_dataset \n\n# `pydantic_evals.generation`\n\nUtilities f...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1280"}, {"type": "concept", "id": "generating"}, {"type": "document", "content": "generate_dataset(\n        *,\n        dataset_type: [type](https://docs.python.org/3/library/function...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1281"}, {"type": "concept", "id": "datasettype"}, {"type": "concept", "id": "typehttpsdocspythonorg3libraryfunctionshtmltype"}, {"type": "concept", "id": "datasetdatasetpydanticevalsdatasetdataset"}, {"type": "concept", "id": "pydanticevalsdatasetinputst"}, {"type": "document", "content": "[type](https://docs.python.org/3/library/functions.html#type)[[Evaluator](../evaluators/#pydantic_ev...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1282"}, {"type": "concept", "id": "pydanticevalsevaluatorsevaluatorevaluatorinputst"}, {"type": "document", "content": "Use an LLM to generate a dataset of test cases, each consisting of input,\nexpected output, and metad...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1283"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`path` |  `[Path](https://docs.python.org/3/...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1284"}, {"type": "document", "content": "`custom_evaluator_types` |  `[Sequence](https://docs.python.org/3/library/collections.abc.html#colle...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1285"}, {"type": "document", "content": "`n_examples` |  `[int](https://docs.python.org/3/library/functions.html#int)` |  Number of examples ...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1286"}, {"type": "concept", "id": "nexamples"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[Dataset](../dataset/#pydantic_evals.dataset.Dataset \"pydantic_evals...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1287"}, {"type": "document", "content": "async def generate_dataset(\n        *,\n        dataset_type: type[Dataset[InputsT, OutputT, Metadata...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1288"}, {"type": "document", "content": "It uses an LLM to attempt to generate realistic test cases that conform to the types' schemas.\n    \n...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1289"}, {"type": "document", "content": "Returns:\n            A properly structured Dataset object with generated test cases.\n    \n        Ra...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1290"}, {"type": "document", "content": "),\n            result_type=str,\n            retries=1,\n        )\n    \n        result = await agent.r...", "source": "text_data\\generation.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\generation.txt:1291"}, {"type": "concept", "id": "customevaluatortypescustomevaluatortypes"}, {"type": "concept", "id": "resulttypestr"}, {"type": "concept", "id": "retries1"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1291"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1292"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1293"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1294"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1295"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1296"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../../...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1297"}, {"type": "document", "content": "* mermaid_code \n        * mermaid_image \n        * mermaid_save \n        * get_nodes \n      * GraphR...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1298"}, {"type": "document", "content": "Table of contents\n\n  * graph \n  * Graph \n    * __init__ \n    * run \n    * run_sync \n    * iter \n    ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1299"}, {"type": "concept", "id": "iterfrompersistence"}, {"type": "document", "content": "Definition of a graph.\n\nIn `pydantic-graph`, a graph is a collection of nodes that can be run in\nseq...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1300"}, {"type": "document", "content": "never_42.py\n\n    \n    \n    from __future__ import annotations\n    \n    from dataclasses import datac...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1301"}, {"type": "concept", "id": "graphruncontext"}, {"type": "concept", "id": "check42"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\")_\n\nSee `run` For an example of running graph, and ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1302"}, {"type": "concept", "id": "mermaidcode"}, {"type": "document", "content": "38\n     39\n     40\n     41\n     42\n     43\n     44\n     45\n     46\n     47\n     48\n     49\n     50\n ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1303"}, {"type": "document", "content": "126\n    127\n    128\n    129\n    130\n    131\n    132\n    133\n    134\n    135\n    136\n    137\n    138\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1304"}, {"type": "document", "content": "216\n    217\n    218\n    219\n    220\n    221\n    222\n    223\n    224\n    225\n    226\n    227\n    228\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1305"}, {"type": "document", "content": "306\n    307\n    308\n    309\n    310\n    311\n    312\n    313\n    314\n    315\n    316\n    317\n    318\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1306"}, {"type": "document", "content": "396\n    397\n    398\n    399\n    400\n    401\n    402\n    403\n    404\n    405\n    406\n    407\n    408\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1307"}, {"type": "document", "content": "486\n    487\n    488\n    489\n    490\n    491\n    492\n    493\n    494\n    495\n    496\n    497\n    498\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1308"}, {"type": "document", "content": "576\n    577\n    578\n    579\n    580\n    581\n    582\n    583\n    584\n    585\n    586...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1309"}, {"type": "document", "content": "|...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1310"}, {"type": "document", "content": "@dataclass(init=False)\n    class Graph(Generic[StateT, DepsT, RunEndT]):\n        \"\"\"Definition of a ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1311"}, {"type": "document", "content": "@dataclass\n        class MyState:\n            number: int\n    \n        @dataclass\n        class Incr...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1312"}, {"type": "document", "content": "```\n        _(This example is complete, it can be run \"as is\")_\n    \n        See [`run`][pydantic_gr...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1313"}, {"type": "concept", "id": "depst"}, {"type": "concept", "id": "runendt"}, {"type": "document", "content": "name: str | None = None,\n            state_type: type[StateT] | _utils.Unset = _utils.UNSET,\n       ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1314"}, {"type": "concept", "id": "statetype"}, {"type": "document", "content": "run_end_type: The type of the result of running the graph, this can generally be inferred from `node...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1315"}, {"type": "concept", "id": "runendtype"}, {"type": "concept", "id": "autoinstrument"}, {"type": "concept", "id": "parentnamespace"}, {"type": "document", "content": "start_node: BaseNode[StateT, DepsT, RunEndT],\n            *,\n            state: StateT = None,\n     ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1316"}, {"type": "concept", "id": "persistence"}, {"type": "document", "content": "persistence: State persistence interface, defaults to\n                    [`SimpleStatePersistence`]...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1317"}, {"type": "document", "content": "from never_42 import Increment, MyState, never_42_graph\n    \n            async def main():\n         ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1318"}, {"type": "concept", "id": "statestate"}, {"type": "concept", "id": "never42graphrunincrement"}, {"type": "document", "content": ") as graph_run:\n                async for _node in graph_run:\n                    pass\n    \n        ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1319"}, {"type": "document", "content": "You therefore can't use this method inside async code or if there's an active event loop.\n    \n     ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1320"}, {"type": "concept", "id": "therefore"}, {"type": "document", "content": "\"\"\"\n            if infer_name and self.name is None:\n                self._infer_name(inspect.curren...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1321"}, {"type": "document", "content": ") -> AsyncIterator[GraphRun[StateT, DepsT, RunEndT]]:\n            \"\"\"A contextmanager which can be u...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1322"}, {"type": "document", "content": "it has completed.\n    \n            For more details, see the API documentation of [`GraphRun`][pydan...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1323"}, {"type": "document", "content": "infer_name: Whether to infer the graph name from the calling frame.\n    \n            Returns: A Grap...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.458402", "id": "text_data\\graph.txt:1324"}, {"type": "document", "content": "with ExitStack() as stack:\n                if span is not None:\n                    stack.enter_cont...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1325"}, {"type": "concept", "id": "exitstack"}, {"type": "concept", "id": "stack"}, {"type": "document", "content": "This method has similar functionality to [`iter`][pydantic_graph.graph.Graph.iter],\n            but ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1326"}, {"type": "document", "content": "# f_back because `asynccontextmanager` adds one frame\n                if frame := inspect.currentfra...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1327"}, {"type": "concept", "id": "snapshot"}, {"type": "concept", "id": "fback"}, {"type": "concept", "id": "because"}, {"type": "document", "content": "stack.enter_context(span)\n                yield GraphRun[StateT, DepsT, RunEndT](\n                  ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1328"}, {"type": "concept", "id": "stackentercontextspan"}, {"type": "document", "content": "This is useful if you want to set up a graph run to be run later, e.g. via\n            [`iter_from_p...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1329"}, {"type": "document", "content": "async def next(\n            self,\n            node: BaseNode[StateT, DepsT, RunEndT],\n            pe...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1330"}, {"type": "concept", "id": "basenodestatet"}, {"type": "document", "content": "deps: The dependencies of the graph.\n                infer_name: Whether to infer the graph name fro...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1331"}, {"type": "document", "content": "def mermaid_code(\n            self,\n            *,\n            start_node: Sequence[mermaid.NodeIden...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1332"}, {"type": "concept", "id": "sequencemermaidnodeident"}, {"type": "concept", "id": "mermaidnodeident"}, {"type": "concept", "id": "diagram"}, {"type": "document", "content": "Args:\n                start_node: The node or nodes which can start the graph.\n                title...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1333"}, {"type": "concept", "id": "title"}, {"type": "concept", "id": "include"}, {"type": "document", "content": "Here's an example of generating a diagram for the graph from [above][pydantic_graph.graph.Graph]:\n  ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1334"}, {"type": "concept", "id": "never42graph"}, {"type": "document", "content": "---\n            stateDiagram-v2\n              [*] --> Increment\n              Increment --> Check42\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1335"}, {"type": "concept", "id": "statediagramv2"}, {"type": "document", "content": ")\n    \n        def mermaid_image(\n            self, infer_name: bool = True, **kwargs: typing_extens...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1336"}, {"type": "document", "content": "**kwargs: Additional arguments to pass to `mermaid.request_image`.\n    \n            Returns:\n       ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1337"}, {"type": "document", "content": "The format and diagram can be customized using `kwargs`,\n            see [`pydantic_graph.mermaid.Me...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1338"}, {"type": "document", "content": "self._infer_name(inspect.currentframe())\n            if 'title' not in kwargs and self.name:\n       ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1339"}, {"type": "concept", "id": "selfstatetype"}, {"type": "document", "content": "state_type = self._state_type\n            run_end_type = self._run_end_type\n    \n            for nod...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1340"}, {"type": "concept", "id": "selfrunendtype"}, {"type": "concept", "id": "nodedef"}, {"type": "document", "content": "run_end_type = t\n                        if _utils.is_set(state_type) and _utils.is_set(run_end_type...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1341"}, {"type": "concept", "id": "utilsissetstatetype"}, {"type": "concept", "id": "utilsissetrunendtype"}, {"type": "document", "content": "def _register_node(\n            self,\n            node: type[BaseNode[StateT, DepsT, RunEndT]],\n    ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1342"}, {"type": "concept", "id": "nodeid"}, {"type": "concept", "id": "registernode"}, {"type": "concept", "id": "typebasenodestatet"}, {"type": "document", "content": "for node_id, node_def in self.node_defs.items():\n                for edge in node_def.next_node_edge...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1343"}, {"type": "concept", "id": "badedgeslist"}, {"type": "concept", "id": "referenced"}, {"type": "concept", "id": "included"}, {"type": "document", "content": ")\n    \n        def _infer_name(self, function_frame: types.FrameType | None) -> None:\n            \"\"...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1344"}, {"type": "concept", "id": "infernameself"}, {"type": "concept", "id": "typesframetype"}, {"type": "document", "content": "if parent_frame.f_locals != parent_frame.f_globals:\n                    # if we couldn't find the ag...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1345"}, {"type": "concept", "id": "parentframeflocals"}, {"type": "concept", "id": "parentframefglobals"}, {"type": "concept", "id": "couldnt"}, {"type": "document", "content": "__init__(\n        *,\n        nodes: [Sequence](https://docs.python.org/3/library/collections.abc.htm...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1346"}, {"type": "concept", "id": "collectionsabcsequencetypehttpsdocspythonorg3libraryfunctionshtmltypebasenodenodespydanticgraphnodesbasenode"}, {"type": "concept", "id": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "concept", "id": "pydanticgraphnodesstatet"}, {"type": "document", "content": "state_type: [type](https://docs.python.org/3/library/functions.html#type)[[StateT](../nodes/#pydanti...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1347"}, {"type": "concept", "id": "typehttpsdocspythonorg3libraryfunctionshtmltypestatetnodespydanticgraphnodesstatet"}, {"type": "document", "content": "Create a graph from a sequence of nodes.\n\nParameters:...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1348"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`nodes` |  `[Sequence](https://docs.python.o...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1349"}, {"type": "document", "content": "`name` |  `[str](https://docs.python.org/3/library/stdtypes.html#str) | None` |  Optional name for t...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1350"}, {"type": "concept", "id": "generally"}, {"type": "document", "content": "`auto_instrument` |  `[bool](https://docs.python.org/3/library/functions.html#bool)` |  Whether to c...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1351"}, {"type": "document", "content": "88\n     89\n     90\n     91\n     92\n     93\n     94\n     95\n     96\n     97\n     98\n     99\n    100\n ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1352"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        nodes: Sequence[type[BaseNode[StateT, DepsT, RunEndT]...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1353"}, {"type": "concept", "id": "sequencetypebasenodestatet"}, {"type": "document", "content": "on the first call to a graph method.\n            state_type: The type of the state for the graph, th...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1354"}, {"type": "document", "content": "self._validate_edges()\n      \n  \n---|---  \n  \n####  run `async`...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1355"}, {"type": "concept", "id": "selfvalidateedges"}, {"type": "document", "content": "run(\n        start_node: [BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.nodes.Ba...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1356"}, {"type": "concept", "id": "depstnodespydanticgraphnodesdepst"}, {"type": "concept", "id": "pydanticgraphnodesdepst"}, {"type": "concept", "id": "basenodenodespydanticgraphnodesbasenode"}, {"type": "document", "content": "persistence: (\n            [BaseStatePersistence](../persistence/#pydantic_graph.persistence.BaseSta...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1357"}, {"type": "concept", "id": "runendtnodespydanticgraphnodesrunendt"}, {"type": "concept", "id": "pydanticgraphnodesrunendt"}, {"type": "concept", "id": "basestatepersistencepersistencepydanticgraphpersistencebasestatepersistence"}, {"type": "document", "content": "Run the graph from a starting node until it ends.\n\nParameters:...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1358"}, {"type": "concept", "id": "starting"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`start_node` |  `[BaseNode](../nodes/#pydant...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1359"}, {"type": "document", "content": "`deps` |  `[DepsT](../nodes/#pydantic_graph.nodes.DepsT \"pydantic_graph.nodes.DepsT\")` |  The depend...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1360"}, {"type": "document", "content": "`span` |  `LogfireSpan | None` |  The span to use for the graph run. If not provided, a span will be...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1361"}, {"type": "concept", "id": "logfirespan"}, {"type": "concept", "id": "depending"}, {"type": "document", "content": "Type | Description  \n---|---  \n`GraphRunResult[[StateT](../nodes/#pydantic_graph.nodes.StateT \"pydan...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1362"}, {"type": "concept", "id": "printstate"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/graph.py`\n\n    \n    \n    120\n    121\n    122\n    123\n ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1363"}, {"type": "concept", "id": "pydanticgraphpydanticgraphgraphpy"}, {"type": "document", "content": "async def run(\n        self,\n        start_node: BaseNode[StateT, DepsT, RunEndT],\n        *,\n      ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1364"}, {"type": "document", "content": "persistence: State persistence interface, defaults to\n                [`SimpleStatePersistence`][pyd...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1365"}, {"type": "document", "content": "async def main():\n            state = MyState(1)\n            await never_42_graph.run(Increment(), s...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1366"}, {"type": "document", "content": "pass\n    \n        final_result = graph_run.result\n        assert final_result is not None, 'GraphRun...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1367"}, {"type": "document", "content": "run_sync(\n        start_node: [BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.nod...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1368"}, {"type": "document", "content": "persistence: (\n            [BaseStatePersistence](../persistence/#pydantic_graph.persistence.BaseSta...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1369"}, {"type": "document", "content": "Synchronously run the graph.\n\nThis is a convenience method that wraps `self.run` with\n`loop.run_unti...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1370"}, {"type": "concept", "id": "wraps"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`start_node` |  `[BaseNode](../nodes/#pydant...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1371"}, {"type": "document", "content": "`deps` |  `[DepsT](../nodes/#pydantic_graph.nodes.DepsT \"pydantic_graph.nodes.DepsT\")` |  The depend...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1372"}, {"type": "document", "content": "Type | Description  \n---|---  \n`GraphRunResult[[StateT](../nodes/#pydantic_graph.nodes.StateT \"pydan...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.460408", "id": "text_data\\graph.txt:1373"}, {"type": "concept", "id": "graphrunresultstatetnodespydanticgraphnodesstatet"}, {"type": "document", "content": "def run_sync(\n        self,\n        start_node: BaseNode[StateT, DepsT, RunEndT],\n        *,\n       ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1374"}, {"type": "document", "content": "you need to provide the starting node.\n            state: The initial state of the graph.\n          ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1375"}, {"type": "document", "content": ")\n      \n  \n---|---  \n  \n####  iter `async`...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1376"}, {"type": "document", "content": "iter(\n        start_node: [BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.nodes.B...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1377"}, {"type": "document", "content": "persistence: (\n            [BaseStatePersistence](../persistence/#pydantic_graph.persistence.BaseSta...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1378"}, {"type": "concept", "id": "pydanticgraphpersistencebasestatepersistencestatetnodespydanticgraphnodesstatet"}, {"type": "document", "content": ") -> [AsyncIterator](https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncIte...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1379"}, {"type": "concept", "id": "collectionsabcasynciteratorgraphrunstatetnodespydanticgraphnodesstatet"}, {"type": "document", "content": "A contextmanager which can be used to iterate over the graph's nodes as they\nare executed.\n\nThis met...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1380"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`start_node` |  `[BaseNode](../nodes/#pydant...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1381"}, {"type": "document", "content": "`deps` |  `[DepsT](../nodes/#pydantic_graph.nodes.DepsT \"pydantic_graph.nodes.DepsT\")` |  The depend...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1382"}, {"type": "document", "content": "`span` |  `[AbstractContextManager](https://docs.python.org/3/library/contextlib.html#contextlib.Abs...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1383"}, {"type": "concept", "id": "abstractcontextmanagerhttpsdocspythonorg3librarycontextlibhtmlcontextlibabstractcontextmanager"}, {"type": "concept", "id": "contextlibabstractcontextmanageranyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/graph.py`\n\n    \n    \n    209\n    210\n    211\n    212\n ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1384"}, {"type": "document", "content": "@asynccontextmanager\n    async def iter(\n        self,\n        start_node: BaseNode[StateT, DepsT, R...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1385"}, {"type": "document", "content": "execution unfolds.\n    \n        The `GraphRun` can also be used to manually drive the graph executio...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1386"}, {"type": "document", "content": "persistence: State persistence interface, defaults to\n                [`SimpleStatePersistence`][pyd...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1387"}, {"type": "document", "content": "persistence = SimpleStatePersistence()\n        persistence.set_graph_types(self)\n    \n        if sel...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1388"}, {"type": "concept", "id": "graphself"}, {"type": "concept", "id": "simplestatepersistence"}, {"type": "concept", "id": "persistencesetgraphtypesself"}, {"type": "concept", "id": "selfautoinstrument"}, {"type": "document", "content": "iter_from_persistence(\n        persistence: [BaseStatePersistence](../persistence/#pydantic_graph.pe...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1389"}, {"type": "document", "content": "infer_name: [bool](https://docs.python.org/3/library/functions.html#bool) = True\n    ) -> [AsyncIter...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1390"}, {"type": "document", "content": "A contextmanager to iterate over the graph's nodes as they are executed,\ncreated from a persistence ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1391"}, {"type": "concept", "id": "contextmanager"}, {"type": "concept", "id": "iterate"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`persistence` |  `[BaseStatePersistence](../...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1392"}, {"type": "document", "content": "`span` |  `[AbstractContextManager](https://docs.python.org/3/library/contextlib.html#contextlib.Abs...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1393"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/graph.py`\n\n    \n    \n    265\n    266\n    267\n    268\n ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1394"}, {"type": "document", "content": "@asynccontextmanager\n    async def iter_from_persistence(\n        self,\n        persistence: BaseSta...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1395"}, {"type": "document", "content": "deps: The dependencies of the graph.\n            span: The span to use for the graph run. If not pro...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1396"}, {"type": "document", "content": "snapshot.node.set_snapshot_id(snapshot.id)\n    \n        if self.auto_instrument and span is None:\n  ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1397"}, {"type": "concept", "id": "snapshotnodesetsnapshotidsnapshotid"}, {"type": "concept", "id": "logfireapispanrun"}, {"type": "document", "content": "initialize(\n        node: [BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.nodes.B...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1398"}, {"type": "document", "content": "infer_name: [bool](https://docs.python.org/3/library/functions.html#bool) = True\n    ) -> None...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1399"}, {"type": "document", "content": "Initialize a new graph run in persistence without running it.\n\nThis is useful if you want to set up ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1400"}, {"type": "concept", "id": "without"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`node` |  `[BaseNode](../nodes/#pydantic_gra...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1401"}, {"type": "document", "content": "`state` |  `[StateT](../nodes/#pydantic_graph.nodes.StateT \"pydantic_graph.nodes.StateT\")` |  The st...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1402"}, {"type": "concept", "id": "statetnodespydanticgraphnodesstatet"}, {"type": "document", "content": "315\n    316\n    317\n    318\n    319\n    320\n    321\n    322\n    323\n    324\n    325\n    326\n    327\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1403"}, {"type": "document", "content": "async def initialize(\n        self,\n        node: BaseNode[StateT, DepsT, RunEndT],\n        persiste...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1404"}, {"type": "document", "content": "\"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe()...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1405"}, {"type": "document", "content": "next(\n        node: [BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.nodes.BaseNod...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1406"}, {"type": "document", "content": "deps: [DepsT](../nodes/#pydantic_graph.nodes.DepsT \"pydantic_graph.nodes.DepsT\") = None,\n        inf...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1407"}, {"type": "document", "content": "Run a node in the graph and return the next node to run.\n\nParameters:...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1408"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`node` |  `[BaseNode](../nodes/#pydantic_gra...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1409"}, {"type": "document", "content": "`persistence` |  `[BaseStatePersistence](../persistence/#pydantic_graph.persistence.BaseStatePersist...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1410"}, {"type": "document", "content": "`infer_name` |  `[bool](https://docs.python.org/3/library/functions.html#bool)` |  Whether to infer ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1411"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1412"}, {"type": "concept", "id": "endnodespydanticgraphnodesend"}, {"type": "document", "content": "340\n    341\n    342\n    343\n    344\n    345\n    346\n    347\n    348\n    349\n    350\n    351\n    352\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1413"}, {"type": "document", "content": "@deprecated('`next` is deprecated, use `async with graph.iter(...) as run:  run.next()` instead')\n  ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1414"}, {"type": "document", "content": "deps: The dependencies of the graph.\n            infer_name: Whether to infer the graph name from th...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1415"}, {"type": "document", "content": "mermaid_code(\n        *,\n        start_node: (\n            [Sequence](https://docs.python.org/3/libr...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1416"}, {"type": "concept", "id": "pydanticgraphmermaidnodeident"}, {"type": "concept", "id": "collectionsabcsequencenodeidentmermaidpydanticgraphmermaidnodeident"}, {"type": "document", "content": "notes: [bool](https://docs.python.org/3/library/functions.html#bool) = True,\n        highlighted_nod...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1417"}, {"type": "concept", "id": "notes"}, {"type": "concept", "id": "highlightednodes"}, {"type": "document", "content": "direction: [StateDiagramDirection](../mermaid/#pydantic_graph.mermaid.StateDiagramDirection \"pydanti...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1418"}, {"type": "concept", "id": "direction"}, {"type": "concept", "id": "statediagramdirectionmermaidpydanticgraphmermaidstatediagramdirection"}, {"type": "concept", "id": "pydanticgraphmermaidstatediagramdirection"}, {"type": "document", "content": "Generate a diagram representing the graph as\n[mermaid](https://mermaid.js.org/) diagram.\n\nThis metho...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1419"}, {"type": "concept", "id": "mermaidhttpsmermaidjsorg"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`start_node` |  `[Sequence](https://docs.pyt...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1420"}, {"type": "document", "content": "`edge_labels` |  `[bool](https://docs.python.org/3/library/functions.html#bool)` |  Whether to inclu...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1421"}, {"type": "document", "content": "`highlight_css` |  `[str](https://docs.python.org/3/library/stdtypes.html#str)` |  The CSS to use fo...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1422"}, {"type": "concept", "id": "highlightcss"}, {"type": "concept", "id": "highlighting"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[str](https://docs.python.org/3/library/stdtypes.html#str)` |  The m...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1423"}, {"type": "concept", "id": "rendered"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/graph.py`\n\n    \n    \n    376\n    377\n    378\n    379\n ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1424"}, {"type": "document", "content": "def mermaid_code(\n        self,\n        *,\n        start_node: Sequence[mermaid.NodeIdent] | mermaid...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1425"}, {"type": "document", "content": "Args:\n            start_node: The node or nodes which can start the graph.\n            title: The ti...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.462413", "id": "text_data\\graph.txt:1426"}, {"type": "document", "content": "```py {title=\"mermaid_never_42.py\" py=\"3.10\"}\n        from never_42 import Increment, never_42_graph...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1427"}, {"type": "document", "content": "```\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.cu...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1428"}, {"type": "document", "content": "mermaid_image(\n        infer_name: [bool](https://docs.python.org/3/library/functions.html#bool) = T...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1429"}, {"type": "concept", "id": "mermaidimage"}, {"type": "document", "content": "Uses external service\n\nThis method makes a request to [mermaid.ink](https://mermaid.ink) to render\nt...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1430"}, {"type": "concept", "id": "external"}, {"type": "concept", "id": "makes"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[bytes](https://docs.python.org/3/library/stdtypes.html#bytes)` |  T...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1431"}, {"type": "document", "content": "def mermaid_image(\n        self, infer_name: bool = True, **kwargs: typing_extensions.Unpack[mermaid...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1432"}, {"type": "document", "content": "Returns:\n            The image bytes.\n        \"\"\"\n        if infer_name and self.name is None:\n     ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1433"}, {"type": "document", "content": "mermaid_save(\n        path: [Path](https://docs.python.org/3/library/pathlib.html#pathlib.Path \"path...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1434"}, {"type": "concept", "id": "mermaidsave"}, {"type": "document", "content": "Uses external service\n\nThis method makes a request to [mermaid.ink](https://mermaid.ink) to render\nt...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1435"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`path` |  `[Path](https://docs....", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1436"}, {"type": "document", "content": "476\n    477\n    478\n    479\n    480\n    481\n    482\n    483\n    484\n    485\n    486\n    487\n    488\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1437"}, {"type": "document", "content": "def mermaid_save(\n        self, path: Path | str, /, *, infer_name: bool = True, **kwargs: typing_ex...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1438"}, {"type": "document", "content": "infer_name: Whether to infer the graph name from the calling frame.\n            **kwargs: Additional...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1439"}, {"type": "document", "content": "get_nodes() -> (\n        [Sequence](https://docs.python.org/3/library/collections.abc.html#collectio...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1440"}, {"type": "concept", "id": "getnodes"}, {"type": "document", "content": "499\n    500\n    501\n\n|\n\n    \n    \n    def get_nodes(self) -> Sequence[type[BaseNode[StateT, DepsT, R...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1441"}, {"type": "concept", "id": "getnodesself"}, {"type": "document", "content": "A stateful, async-iterable run of a `Graph`.\n\nYou typically get a `GraphRun` instance from calling `...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1442"}, {"type": "concept", "id": "stateful"}, {"type": "document", "content": "from copy import deepcopy\n    from never_42 import Increment, MyState, never_42_graph\n    \n    async...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1443"}, {"type": "document", "content": "async with never_42_graph.iter(Increment(), state=state) as graph_run:\n            node_states = [(g...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1444"}, {"type": "concept", "id": "deepcopygraphrunstate"}, {"type": "document", "content": "See the `GraphRun.next` documentation for an example of how to manually drive\nthe graph run.\n\nSource...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1445"}, {"type": "concept", "id": "graphrunnext"}, {"type": "document", "content": "589\n    590\n    591\n    592\n    593\n    594\n    595\n    596\n    597\n    598\n    599\n    600\n    601\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1446"}, {"type": "document", "content": "677\n    678\n    679\n    680\n    681\n    682\n    683\n    684\n    685\n    686\n    687\n    688\n    689\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1447"}, {"type": "document", "content": "767\n    768\n    769\n    770\n    771\n    772\n    773\n    774\n    775\n    776\n    777\n    778\n    779\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1448"}, {"type": "document", "content": "|...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1449"}, {"type": "document", "content": "class GraphRun(Generic[StateT, DepsT, RunEndT]):\n        \"\"\"A stateful, async-iterable run of a [`Gr...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1450"}, {"type": "document", "content": "async def main():\n            state = MyState(1)\n            async with never_42_graph.iter(Incremen...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1451"}, {"type": "concept", "id": "never42graphiterincrement"}, {"type": "document", "content": "node_states = [(graph_run.next_node, deepcopy(graph_run.state))]\n                async for node in g...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1452"}, {"type": "concept", "id": "mystatenumber42"}, {"type": "concept", "id": "mystatenumber43"}, {"type": "document", "content": "drive the graph run.\n        \"\"\"\n    \n        def __init__(\n            self,\n            *,\n       ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1453"}, {"type": "document", "content": "start_node: The node where execution will begin.\n                persistence: State persistence inte...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1454"}, {"type": "concept", "id": "snapshotid"}, {"type": "document", "content": "self.state = state\n            self.deps = deps\n    \n            self._next_node: BaseNode[StateT, D...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1455"}, {"type": "concept", "id": "selfnextnode"}, {"type": "concept", "id": "endrunendt"}, {"type": "document", "content": "if not isinstance(self._next_node, End):\n                return None  # The GraphRun has not finishe...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1456"}, {"type": "document", "content": "Here's an example of using `next` to drive the graph from [above][pydantic_graph.graph.Graph]:\n     ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1457"}, {"type": "document", "content": "if graph_run.state.number == 50:\n                            graph_run.state.number = 42\n           ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1458"}, {"type": "concept", "id": "graphrunstatenumber"}, {"type": "concept", "id": "mystatenumber49"}, {"type": "concept", "id": "graphrunnextnextnode"}, {"type": "document", "content": "the `start_node` of the run and updated each time a new node is returned.\n    \n            Returns:\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1459"}, {"type": "document", "content": "node_snapshot_id = node.get_snapshot_id()\n            else:\n                node_snapshot_id = node....", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1460"}, {"type": "concept", "id": "nodesnapshotid"}, {"type": "concept", "id": "nodegetsnapshotid"}, {"type": "concept", "id": "selfsnapshotid"}, {"type": "concept", "id": "basenode"}, {"type": "document", "content": "node_id = node.get_node_id()\n            if node_id not in self.graph.node_defs:\n                rai...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1461"}, {"type": "concept", "id": "nodegetnodeid"}, {"type": "concept", "id": "selfgraphnodedefs"}, {"type": "document", "content": "elif isinstance(self._next_node, BaseNode):\n                self._snapshot_id = self._next_node.get_...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1462"}, {"type": "concept", "id": "isinstanceselfnextnode"}, {"type": "document", "content": "if isinstance(self._next_node, End):\n                raise StopAsyncIteration\n            return awa...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1463"}, {"type": "concept", "id": "stopasynciteration"}, {"type": "document", "content": "__init__(\n        *,\n        graph: Graph[[StateT](../nodes/#pydantic_graph.nodes.StateT \"pydantic_g...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1464"}, {"type": "document", "content": "persistence: [BaseStatePersistence](../persistence/#pydantic_graph.persistence.BaseStatePersistence ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1465"}, {"type": "document", "content": "Create a new run for a given graph, starting at the specified node.\n\nTypically, you'll use `Graph.it...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1466"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`graph` |  `Graph[[StateT](../nodes/#pydanti...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1467"}, {"type": "document", "content": "`persistence` |  `[BaseStatePersistence](../persistence/#pydantic_graph.persistence.BaseStatePersist...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1468"}, {"type": "document", "content": "`deps` |  `[DepsT](../nodes/#pydantic_graph.nodes.DepsT \"pydantic_graph.nodes.DepsT\")` |  Optional d...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1469"}, {"type": "concept", "id": "access"}, {"type": "document", "content": "637\n    638\n    639\n    640\n    641\n    642\n    643\n    644\n    645\n    646\n    647\n    648\n    649\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1470"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        graph: Graph[StateT, DepsT, RunEndT],\n        start_n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1471"}, {"type": "document", "content": "persistence: State persistence interface.\n            state: A shared state object or primitive (lik...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1472"}, {"type": "concept", "id": "shared"}, {"type": "document", "content": "next_node: [BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.nodes.BaseNode\")[[Stat...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1473"}, {"type": "document", "content": "####  result `property`\n\n    \n    \n    result: GraphRunResult[[StateT](../nodes/#pydantic_graph.node...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1474"}, {"type": "document", "content": "next(\n        node: [BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.nodes.BaseNod...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1475"}, {"type": "document", "content": ") -> [BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.nodes.BaseNode\")[[StateT](.....", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1476"}, {"type": "document", "content": "Manually drive the graph run by passing in the node you want to run next.\n\nThis lets you inspect or ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1477"}, {"type": "document", "content": "from copy import deepcopy\n    from pydantic_graph import End\n    from never_42 import Increment, MyS...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.464419", "id": "text_data\\graph.txt:1478"}, {"type": "document", "content": "print(node_states)\n            '''\n            [\n                (Increment(), MyState(number=48)),\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1479"}, {"type": "concept", "id": "printnodestates"}, {"type": "concept", "id": "mystatenumber48"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`node` |  `[BaseNode](../nodes/...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1480"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1481"}, {"type": "document", "content": "`[BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.nodes.BaseNode\")[[StateT](../nod...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1482"}, {"type": "document", "content": "688\n    689\n    690\n    691\n    692\n    693\n    694\n    695\n    696\n    697\n    698\n    699\n    700\n...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1483"}, {"type": "document", "content": "async def next(\n        self, node: BaseNode[StateT, DepsT, RunEndT] | None = None\n    ) -> BaseNode...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1484"}, {"type": "document", "content": "from never_42 import Increment, MyState, never_42_graph\n    \n        async def main():\n            s...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1485"}, {"type": "document", "content": "[\n                    (Increment(), MyState(number=48)),\n                    (Check42(), MyState(num...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1486"}, {"type": "document", "content": "# the case, but if it is, the only way to get there would be to have tried calling next manually aft...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1487"}, {"type": "document", "content": "# make, and we should eagerly provide a more helpful error message than you'd get otherwise.\n       ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1488"}, {"type": "concept", "id": "eagerly"}, {"type": "document", "content": "self._next_node = await node.run(ctx)\n    \n        if isinstance(self._next_node, End):\n            ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1489"}, {"type": "concept", "id": "selfnextnodegetsnapshotid"}, {"type": "document", "content": "__anext__() -> (\n        [BaseNode](../nodes/#pydantic_graph.nodes.BaseNode \"pydantic_graph.nodes.Ba...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1490"}, {"type": "document", "content": "778\n    779\n    780\n    781\n    782\n\n|\n\n    \n    \n    async def __anext__(self) -> BaseNode[StateT, ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1491"}, {"type": "concept", "id": "anextself"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/graph.py`\n\n    \n    \n    788\n    789\n    790\n    791\n ...", "source": "text_data\\graph.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\graph.txt:1492"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1492"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1493"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1494"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1495"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1496"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1497"}, {"type": "document", "content": "* Setup \n        * groq \n        * ProductionGroqModelNames \n        * PreviewGroqModelNames \n      ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1498"}, {"type": "concept", "id": "productiongroqmodelnames"}, {"type": "concept", "id": "previewgroqmodelnames"}, {"type": "concept", "id": "groqmodelname"}, {"type": "document", "content": "* [ pydantic_graph  ](../../pydantic_graph/graph/)\n    * [ pydantic_graph.nodes  ](../../pydantic_gr...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1499"}, {"type": "document", "content": "Table of contents\n\n  * Setup \n    * groq \n    * ProductionGroqModelNames \n    * PreviewGroqModelName...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1500"}, {"type": "document", "content": "###  ProductionGroqModelNames `module-attribute`\n\n    \n    \n    ProductionGroqModelNames = [Literal]...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1501"}, {"type": "document", "content": "###  PreviewGroqModelNames `module-attribute`\n\n    \n    \n    PreviewGroqModelNames = [Literal](https...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1502"}, {"type": "document", "content": "###  GroqModelName `module-attribute`\n\n    \n    \n    GroqModelName = [Union](https://docs.python.org...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1503"}, {"type": "document", "content": "Settings used for a Groq model request.\n\nALL FIELDS MUST BE `groq_` PREFIXED SO YOU CAN MERGE THEM W...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1504"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/groq.py`...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1505"}, {"type": "concept", "id": "pydanticaislimpydanticaimodelsgroqpy"}, {"type": "document", "content": "95\n     96\n     97\n     98\n     99\n    100\n    101\n    102\n    103\n    104\n    105\n    106\n    107\n ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1506"}, {"type": "document", "content": "183\n    184\n    185\n    186\n    187\n    188\n    189\n    190\n    191\n    192\n    193\n    194\n    195\n...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1507"}, {"type": "document", "content": "273\n    274\n    275\n    276\n    277\n    278\n    279\n    280\n    281\n    282\n    283\n    284\n    285\n...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1508"}, {"type": "document", "content": "|...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1509"}, {"type": "document", "content": "@dataclass(init=False)\n    class GroqModel(Model):\n        \"\"\"A model that uses the Groq API.\n    \n ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1510"}, {"type": "document", "content": "[here](https://console.groq.com/docs/models).\n                provider: The provider to use for auth...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1511"}, {"type": "concept", "id": "herehttpsconsolegroqcomdocsmodels"}, {"type": "document", "content": "model_settings: ModelSettings | None,\n            model_request_parameters: ModelRequestParameters,\n...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1512"}, {"type": "concept", "id": "tuplemodelresponse"}, {"type": "document", "content": "check_allow_model_requests()\n            response = await self._completions_create(\n                ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1513"}, {"type": "document", "content": "model_settings: GroqModelSettings,\n            model_request_parameters: ModelRequestParameters,\n   ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1514"}, {"type": "concept", "id": "groqmodelsettings"}, {"type": "concept", "id": "completionscreate"}, {"type": "document", "content": "model_request_parameters: ModelRequestParameters,\n        ) -> chat.ChatCompletion | AsyncStream[cha...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1515"}, {"type": "concept", "id": "chatchatcompletion"}, {"type": "document", "content": "messages=groq_messages,\n                    n=1,\n                    parallel_tool_calls=model_setti...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1516"}, {"type": "concept", "id": "messagesgroqmessages"}, {"type": "concept", "id": "paralleltoolcallsmodelsettingsgetparalleltoolcalls"}, {"type": "document", "content": "frequency_penalty=model_settings.get('frequency_penalty', NOT_GIVEN),\n                    logit_bias...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1517"}, {"type": "concept", "id": "frequencypenaltymodelsettingsgetfrequencypenalty"}, {"type": "concept", "id": "logitbiasmodelsettingsgetlogitbias"}, {"type": "document", "content": "items: list[ModelResponsePart] = []\n            if choice.message.content is not None:\n             ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.466425", "id": "text_data\\groq.txt:1518"}, {"type": "concept", "id": "choicemessagetoolcalls"}, {"type": "concept", "id": "items"}, {"type": "concept", "id": "listmodelresponsepart"}, {"type": "document", "content": "peekable_response = _utils.PeekableAsyncStream(response)\n            first_chunk = await peekable_re...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1519"}, {"type": "concept", "id": "peekableresponse"}, {"type": "concept", "id": "utilspeekableasyncstreamresponse"}, {"type": "concept", "id": "firstchunk"}, {"type": "document", "content": "if model_request_parameters.result_tools:\n                tools += [self._map_tool_definition(r) for...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1520"}, {"type": "document", "content": "if isinstance(item, TextPart):\n                        texts.append(item.content)\n                  ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1521"}, {"type": "concept", "id": "texts"}, {"type": "document", "content": "message_param['tool_calls'] = tool_calls\n                yield message_param\n            else:\n     ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1522"}, {"type": "concept", "id": "chatchatcompletionmessagetoolcallparam"}, {"type": "concept", "id": "messageparamtoolcalls"}, {"type": "document", "content": "'description': f.description,\n                    'parameters': f.parameters_json_schema,\n          ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1523"}, {"type": "concept", "id": "fdescription"}, {"type": "document", "content": "tool_call_id=_guard_tool_call_id(t=part),\n                        content=part.model_response_str(),...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1524"}, {"type": "concept", "id": "contentpartmodelresponsestr"}, {"type": "document", "content": "content: str | list[chat.ChatCompletionContentPartParam]\n            if isinstance(part.content, str...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1525"}, {"type": "concept", "id": "listchatchatcompletioncontentpartparam"}, {"type": "document", "content": "if item.is_image:\n                            image_url = ImageURL(url=f'data:{item.media_type};base...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1526"}, {"type": "concept", "id": "supported"}, {"type": "document", "content": "---|---  \n  \n####  __init__...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1527"}, {"type": "document", "content": "__init__(\n        model_name: GroqModelName,\n        *,\n        provider: [Literal](https://docs.pyt...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1528"}, {"type": "concept", "id": "typingliteralgroq"}, {"type": "document", "content": "Initialize a Groq model.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`mode...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1529"}, {"type": "document", "content": "109\n    110\n    111\n    112\n    113\n    114\n    115\n    116\n    117\n    118\n    119\n    120\n    121\n...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1530"}, {"type": "document", "content": "def __init__(self, model_name: GroqModelName, *, provider: Literal['groq'] | Provider[AsyncGroq] = '...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1531"}, {"type": "concept", "id": "providerasyncgroq"}, {"type": "concept", "id": "initself"}, {"type": "document", "content": "self.client = provider.client\n      \n  \n---|---  \n  \n####  model_name `property`...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1532"}, {"type": "document", "content": "model_name: GroqModelName\n    \n\nThe model name.\n\n####  system `property`\n\n    \n    \n    system: [str...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1533"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/groq.py`\n\n    \n    \n    352\n    353\n    354\n    ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1534"}, {"type": "document", "content": "@dataclass\n    class GroqStreamedResponse(StreamedResponse):\n        \"\"\"Implementation of `StreamedR...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1535"}, {"type": "document", "content": "if content is not None:\n                    yield self._parts_manager.handle_text_delta(vendor_part_...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1536"}, {"type": "concept", "id": "contentcontent"}, {"type": "document", "content": "\"\"\"Get the model name of the response.\"\"\"\n            return self._model_name\n    \n        @property...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1537"}, {"type": "document", "content": "model_name: GroqModelName\n    \n\nGet the model name of the response.\n\n####  timestamp `property`\n\n   ...", "source": "text_data\\groq.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\groq.txt:1538"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nGetting Help\n\nType...", "source": "text_data\\help.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\help.txt:1538"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * Getting Help  [ Getting Help  ](./) T...", "source": "text_data\\help.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\help.txt:1539"}, {"type": "concept", "id": "getting"}, {"type": "document", "content": "* [ Graphs  ](../graph/)\n    * [ Evals  ](../evals/)\n    * [ Image, Audio & Document Input  ](../inp...", "source": "text_data\\help.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\help.txt:1540"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\help.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\help.txt:1541"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\help.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\help.txt:1542"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\help.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\help.txt:1543"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\help.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\help.txt:1544"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\help.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\help.txt:1545"}, {"type": "document", "content": "Table of contents\n\n  * Slack \n  * GitHub Issues \n\n# Getting Help\n\nIf you need help getting started w...", "source": "text_data\\help.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\help.txt:1546"}, {"type": "concept", "id": "slack"}, {"type": "concept", "id": "github"}, {"type": "concept", "id": "issues"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nImage, Audio & Doc...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1546"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1547"}, {"type": "document", "content": "* Image Input \n      * Audio Input \n      * Document Input \n    * [ MCP  ](../mcp/)...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1548"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1549"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1550"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1551"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1552"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1553"}, {"type": "document", "content": "Table of contents\n\n  * Image Input \n  * Audio Input \n  * Document Input \n\n# Image, Audio & Document ...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1554"}, {"type": "document", "content": "main.py\n\n    \n    \n    from pydantic_ai import Agent, ImageUrl\n    \n    agent = Agent(model='openai:...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1555"}, {"type": "concept", "id": "mainpy"}, {"type": "document", "content": "main.py\n\n    \n    \n    import httpx\n    \n    from pydantic_ai import Agent, BinaryContent\n    \n    i...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1556"}, {"type": "document", "content": "You can provide audio input using either\n[`AudioUrl`](../api/messages/#pydantic_ai.messages.AudioUrl...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1557"}, {"type": "document", "content": "If you are unsatisfied with this behavior, please let us know by opening an\nissue on [GitHub](https:...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1558"}, {"type": "concept", "id": "documenturlapimessagespydanticaimessagesdocumenturl"}, {"type": "concept", "id": "unsatisfied"}, {"type": "concept", "id": "behavior"}, {"type": "concept", "id": "please"}, {"type": "document", "content": "main.py\n\n    \n    \n    from pydantic_ai import Agent, DocumentUrl\n    \n    agent = Agent(model='anth...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1559"}, {"type": "document", "content": "main.py\n\n    \n    \n    from pathlib import Path\n    from pydantic_ai import Agent, BinaryContent\n   ...", "source": "text_data\\input.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\input.txt:1560"}, {"type": "concept", "id": "pathlib"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nInstallation\n\nType...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1560"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * Installation  [ Installation  ](./) Table of contents \n    * Use with Py...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1561"}, {"type": "document", "content": "* [ Graphs  ](../graph/)\n    * [ Evals  ](../evals/)\n    * [ Image, Audio & Document Input  ](../inp...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1562"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1563"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1564"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1565"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1566"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1567"}, {"type": "document", "content": "Table of contents\n\n  * Use with Pydantic Logfire \n  * Running Examples \n  * Slim Install \n\n# Install...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1568"}, {"type": "document", "content": "To use Logfire with PydanticAI, install `pydantic-ai` or `pydantic-ai-slim`\nwith the `logfire` optio...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1569"}, {"type": "document", "content": "To install examples, use the `examples` optional group:\n\npipuv\n\n    \n    \n    pip install \"pydantic-...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1570"}, {"type": "document", "content": "* `logfire` \u2014 installs [`logfire`](../logfire/) [PyPI \u2197](https://pypi.org/project/logfire)\n  * `eval...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1571"}, {"type": "concept", "id": "installs"}, {"type": "document", "content": "* `cohere` \\- installs `cohere` [PyPI \u2197](https://pypi.org/project/cohere)\n  * `duckduckgo` \\- instal...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1572"}, {"type": "concept", "id": "httpspypiorgprojectcohere"}, {"type": "concept", "id": "duckduckgosearch"}, {"type": "document", "content": "See the [models](../models/) documentation for information on which optional\ndependencies are requir...", "source": "text_data\\install.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\install.txt:1573"}, {"type": "concept", "id": "pydanticaislimopenaivertexailogfire"}, {"type": "concept", "id": "modelsmodels"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1573"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1574"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1575"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1576"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1577"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1578"}, {"type": "document", "content": "* instrumented \n      * InstrumentationSettings \n        * __init__ \n      * InstrumentedModel \n    ...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1579"}, {"type": "concept", "id": "instrumented"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../../pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ]...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1580"}, {"type": "document", "content": "Table of contents\n\n  * instrumented \n  * InstrumentationSettings \n    * __init__ \n  * InstrumentedMo...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1581"}, {"type": "concept", "id": "instrumentedmodel"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/instrumented.py`\n\n    \n    \n    52\n    53\n    54...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1582"}, {"type": "document", "content": "@dataclass(init=False)\n    class InstrumentationSettings:\n        \"\"\"Options for instrumenting model...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1583"}, {"type": "document", "content": "event_mode: Literal['attributes', 'logs'] = 'attributes',\n            tracer_provider: TracerProvide...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1584"}, {"type": "document", "content": "event_logger_provider: The OpenTelemetry event logger provider to use.\n                    If not pr...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1585"}, {"type": "document", "content": "self.event_mode = event_mode\n      \n  \n---|---  \n  \n####  __init__...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1586"}, {"type": "document", "content": "__init__(\n        *,\n        event_mode: [Literal](https://docs.python.org/3/library/typing.html#typ...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1587"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`event_mode` |  `[Literal](https://docs.pyth...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1588"}, {"type": "document", "content": "`event_logger_provider` |  `EventLoggerProvider | None` |  The OpenTelemetry event logger provider t...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1589"}, {"type": "document", "content": "69\n    70\n    71\n    72\n    73\n    74\n    75\n    76\n    77\n    78\n    79\n    80\n    81\n    82\n    83...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1590"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        event_mode: Literal['attributes', 'logs'] = 'attribut...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1591"}, {"type": "document", "content": "event_logger_provider: The OpenTelemetry event logger provider to use.\n                If not provid...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1592"}, {"type": "document", "content": "self.event_mode = event_mode\n      \n  \n---|---  \n  \n###  InstrumentedModel `dataclass`...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1593"}, {"type": "document", "content": "Bases: `[WrapperModel](../wrapper/#pydantic_ai.models.wrapper.WrapperModel\n\"pydantic_ai.models.wrapp...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1594"}, {"type": "concept", "id": "wrappermodelwrapperpydanticaimodelswrapperwrappermodel"}, {"type": "concept", "id": "pydanticaimodelswrapperwrappermodel"}, {"type": "document", "content": "102\n    103\n    104\n    105\n    106\n    107\n    108\n    109\n    110\n    111\n    112\n    113\n    114\n...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1595"}, {"type": "document", "content": "190\n    191\n    192\n    193\n    194\n    195\n    196\n    197\n    198\n    199\n    200\n    201\n    202\n...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1596"}, {"type": "document", "content": "280\n    281\n    282\n    283\n    284\n    285\n    286\n    287\n    288\n    289\n    290...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1597"}, {"type": "document", "content": "|...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1598"}, {"type": "document", "content": "@dataclass\n    class InstrumentedModel(WrapperModel):\n        \"\"\"Model which wraps another model so ...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1599"}, {"type": "document", "content": "model_settings: ModelSettings | None,\n            model_request_parameters: ModelRequestParameters,\n...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1600"}, {"type": "document", "content": ") -> AsyncIterator[StreamedResponse]:\n            with self._instrument(messages, model_settings, mo...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1601"}, {"type": "concept", "id": "responsestream"}, {"type": "concept", "id": "asynciteratorstreamedresponse"}, {"type": "document", "content": "model_settings: ModelSettings | None,\n            model_request_parameters: ModelRequestParameters,\n...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1602"}, {"type": "concept", "id": "operation"}, {"type": "concept", "id": "iteratorcallablemodelresponse"}, {"type": "document", "content": "'logfire.json_schema': json.dumps(\n                    {\n                        'type': 'object',\n ...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1603"}, {"type": "concept", "id": "logfirejsonschema"}, {"type": "concept", "id": "jsondumps"}, {"type": "concept", "id": "properties"}, {"type": "document", "content": "return\n    \n                    events = self.messages_to_otel_events(messages)\n                    ...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1604"}, {"type": "concept", "id": "selfmessagestooteleventsmessages"}, {"type": "concept", "id": "selfmessagestooteleventsresponse"}, {"type": "document", "content": "attributes.update(getattr(span, 'attributes', {}))\n                    request_model = attributes[GE...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1605"}, {"type": "concept", "id": "requestmodel"}, {"type": "concept", "id": "eventattributes"}, {"type": "concept", "id": "attributesupdategetattrspan"}, {"type": "document", "content": "def _emit_events(self, span: Span, events: list[Event]) -> None:\n            if self.settings.event_...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1606"}, {"type": "concept", "id": "attrname"}, {"type": "concept", "id": "emiteventsself"}, {"type": "document", "content": "},\n                            }\n                        ),\n                    }\n                )\n...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1607"}, {"type": "concept", "id": "parsedhostname"}, {"type": "concept", "id": "modelattributesmodel"}, {"type": "document", "content": "if parsed.port:\n                        attributes['server.port'] = parsed.port\n    \n            ret...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1608"}, {"type": "concept", "id": "eventbody"}, {"type": "concept", "id": "listevent"}, {"type": "concept", "id": "parsedport"}, {"type": "document", "content": "message_events: list[Event] = []\n                if isinstance(message, ModelRequest):\n             ...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1609"}, {"type": "concept", "id": "messageevents"}, {"type": "document", "content": "return result\n    \n        @staticmethod\n        def serialize_any(value: Any) -> str:\n            t...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1610"}, {"type": "concept", "id": "exception"}, {"type": "document", "content": "settings: InstrumentationSettings = (\n        options or InstrumentationSettings()\n    )\n    \n\nConfi...", "source": "text_data\\instrumented.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\instrumented.txt:1611"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nDebugging and Moni...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1611"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1612"}, {"type": "document", "content": "* Using OpenTelemetry \n      * Data format \n      * Setting OpenTelemetry SDK providers \n      * Ins...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1613"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1614"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1615"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1616"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1617"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1618"}, {"type": "document", "content": "Table of contents\n\n  * Pydantic Logfire \n  * Using Logfire \n    * Debugging \n    * Monitoring Perfor...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1619"}, {"type": "document", "content": "Warning\n\nFrom a software engineers point of view, you can think of LLMs as the worst\ndatabase you've...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1620"}, {"type": "concept", "id": "understand"}, {"type": "document", "content": "## Pydantic Logfire\n\n[Pydantic Logfire](https://pydantic.dev/logfire) is an observability platform\nd...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1621"}, {"type": "concept", "id": "platform"}, {"type": "concept", "id": "logfirehttpspydanticdevlogfire"}, {"type": "document", "content": "PydanticAI has built-in (but optional) support for Logfire. That means if the\n`logfire` package is i...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1622"}, {"type": "document", "content": "Then authenticate your local environment with logfire:\n\npipuv\n\n    \n    \n     logfire auth\n    \n    ...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1623"}, {"type": "concept", "id": "projects"}, {"type": "concept", "id": "project"}, {"type": "document", "content": "The [logfire documentation](https://logfire.pydantic.dev/docs/) has more\ndetails on how to use logfi...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1624"}, {"type": "concept", "id": "documentationhttpslogfirepydanticdevdocs"}, {"type": "document", "content": "* **Debugging** \u2014 Using the live view to see what's happening in your application in real-time.\n  * ...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1625"}, {"type": "document", "content": "[![Logfire monitoring PydanticAI](../img/logfire-monitoring-\npydanticai.png)](../img/logfire-monitor...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1626"}, {"type": "concept", "id": "httpx"}, {"type": "concept", "id": "pydanticaiimglogfiremonitoring"}, {"type": "document", "content": "instrument_httpx_example.py\n\n    \n    \n    import logfire\n    from pydantic_ai import Agent\n    \n   ...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1627"}, {"type": "document", "content": "Tip\n\n`httpx` instrumentation might be of particular utility if you're using a\ncustom `httpx` client ...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1628"}, {"type": "document", "content": "## Data format\n\nPydanticAI follows the [OpenTelemetry Semantic Conventions for Generative AI\nsystems...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1629"}, {"type": "concept", "id": "semantic"}, {"type": "concept", "id": "conventions"}, {"type": "document", "content": "instrumentation_settings_event_mode.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydanti...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1630"}, {"type": "concept", "id": "instrumentationsettingseventmodepy"}, {"type": "document", "content": "## Setting OpenTelemetry SDK providers\n\nBy default, the global `TracerProvider` and `EventLoggerProv...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1631"}, {"type": "concept", "id": "providers"}, {"type": "document", "content": "instrumentation_settings_providers.py\n\n    \n    \n    from opentelemetry.sdk._events import EventLogg...", "source": "text_data\\logfire.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\logfire.txt:1632"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nModel Context Prot...", "source": "text_data\\mcp.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mcp.txt:1632"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\mcp.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mcp.txt:1633"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](client/)\n      * [ Server  ](server/)\n      * [ MCP Run Python  ](run-pytho...", "source": "text_data\\mcp.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mcp.txt:1634"}, {"type": "concept", "id": "runpython"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\mcp.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mcp.txt:1635"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\mcp.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mcp.txt:1636"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\mcp.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mcp.txt:1637"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\mcp.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mcp.txt:1638"}, {"type": "document", "content": "Table of contents\n\n  * What is MCP? \n  * MCP Servers \n\n# Model Context Protocol (MCP)\n\nPydanticAI su...", "source": "text_data\\mcp.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mcp.txt:1639"}, {"type": "concept", "id": "protocol"}, {"type": "document", "content": "As with other protocols, the dream of MCP is that a wide range of applications\ncan speak to each oth...", "source": "text_data\\mcp.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mcp.txt:1640"}, {"type": "document", "content": "## MCP Servers\n\nTo add functionality to PydanticAI while making it as widely usable as\npossible, we'...", "source": "text_data\\mcp.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mcp.txt:1641"}, {"type": "concept", "id": "functionality"}, {"type": "concept", "id": "making"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1641"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1642"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1643"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1644"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1645"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1646"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../../...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1647"}, {"type": "document", "content": "* StateDiagramDirection \n      * generate_code \n      * request_image \n      * save_image \n      * M...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1648"}, {"type": "concept", "id": "statediagramdirection"}, {"type": "concept", "id": "generatecode"}, {"type": "document", "content": "* [ pydantic_evals.reporting  ](../../pydantic_evals/reporting/)\n    * [ pydantic_evals.otel  ](../....", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1649"}, {"type": "document", "content": "Table of contents\n\n  * mermaid \n  * DEFAULT_HIGHLIGHT_CSS \n  * StateDiagramDirection \n  * generate_c...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1650"}, {"type": "concept", "id": "defaulthighlightcss"}, {"type": "document", "content": "###  StateDiagramDirection `module-attribute`\n\n    \n    \n    StateDiagramDirection = [Literal](https...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1651"}, {"type": "concept", "id": "mermaid"}, {"type": "concept", "id": "bottom"}, {"type": "concept", "id": "right"}, {"type": "document", "content": "generate_code(\n        graph: [Graph](../graph/#pydantic_graph.graph.Graph \"pydantic_graph.graph.Gra...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1652"}, {"type": "concept", "id": "collectionsabcsequencenodeident"}, {"type": "concept", "id": "nodeident"}, {"type": "document", "content": ") = None,\n        highlight_css: [str](https://docs.python.org/3/library/stdtypes.html#str) = DEFAUL...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1653"}, {"type": "document", "content": "Generate [Mermaid state\ndiagram](https://mermaid.js.org/syntax/stateDiagram.html) code for a graph.\n...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1654"}, {"type": "concept", "id": "diagramhttpsmermaidjsorgsyntaxstatediagramhtml"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`graph` |  `[Graph](../graph/#pydantic_graph...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1655"}, {"type": "document", "content": "`highlighted_nodes` |  `[Sequence](https://docs.python.org/3/library/collections.abc.html#collection...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1656"}, {"type": "document", "content": "`direction` |  `StateDiagramDirection | None` |  The direction of flow. |  _required_  \n  \nReturns:...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1657"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[str](https://docs.python.org/3/library/stdtypes.html#str)` |  The M...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1658"}, {"type": "document", "content": "def generate_code(  # noqa: C901\n        graph: Graph[Any, Any, Any],\n        /,\n        *,\n        ...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1659"}, {"type": "concept", "id": "sequencenodeident"}, {"type": "document", "content": "highlighted_nodes: Identifiers of nodes to highlight.\n            highlight_css: CSS to use for high...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1660"}, {"type": "document", "content": "if title:\n            lines = ['---', f'title: {title}', '---']\n        lines.append('stateDiagram-v...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1661"}, {"type": "concept", "id": "nextnodeid"}, {"type": "concept", "id": "linesappendf"}, {"type": "document", "content": "line = f'  {node_id} --> {next_node_id}'\n                    if edge_labels and edge.label:\n        ...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1662"}, {"type": "concept", "id": "edgelabels"}, {"type": "concept", "id": "edgelabel"}, {"type": "concept", "id": "linesappendline"}, {"type": "concept", "id": "endedgelabel"}, {"type": "document", "content": "lines.append('  end note')\n    \n        if highlighted_nodes:\n            lines.append('')\n         ...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1663"}, {"type": "concept", "id": "linesappend"}, {"type": "concept", "id": "highlighted"}, {"type": "concept", "id": "linesappendfclassdef"}, {"type": "document", "content": "request_image(\n        graph: [Graph](../graph/#pydantic_graph.graph.Graph \"pydantic_graph.graph.Gra...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1664"}, {"type": "concept", "id": "requestimage"}, {"type": "concept", "id": "graphgraphpydanticgraphgraphgraph"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`graph` |  `[Graph](../graph/#p...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1665"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[bytes](https://docs.python.org/3/library/stdtypes.html#bytes)` |  T...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1666"}, {"type": "concept", "id": "pydanticgraphpydanticgraphmermaidpy"}, {"type": "document", "content": "def request_image(\n        graph: Graph[Any, Any, Any],\n        /,\n        **kwargs: Unpack[MermaidC...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1667"}, {"type": "document", "content": "edge_labels=kwargs.get('edge_labels', True),\n            notes=kwargs.get('notes', True),\n          ...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1668"}, {"type": "concept", "id": "kwargsgetimagetype"}, {"type": "concept", "id": "pdfpaper"}, {"type": "concept", "id": "edgelabelskwargsgetedgelabels"}, {"type": "concept", "id": "noteskwargsgetnotes"}, {"type": "concept", "id": "directionkwargsgetdirection"}, {"type": "document", "content": "url = f'https://mermaid.ink/svg/{code_base64}'\n        else:\n            url = f'https://mermaid.ink...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1669"}, {"type": "concept", "id": "imagetype"}, {"type": "concept", "id": "backgroundcolor"}, {"type": "concept", "id": "theme"}, {"type": "document", "content": "response = httpx_client.get(url, params=params)\n        if not response.is_success:\n            rais...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1670"}, {"type": "concept", "id": "httpxclientgeturl"}, {"type": "concept", "id": "paramsparams"}, {"type": "concept", "id": "responseissuccess"}, {"type": "document", "content": "save_image(\n        path: [Path](https://docs.python.org/3/library/pathlib.html#pathlib.Path \"pathli...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1671"}, {"type": "concept", "id": "saveimage"}, {"type": "document", "content": "Generate an image of a Mermaid diagram using\n[mermaid.ink](https://mermaid.ink) and save it to a loc...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1672"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`path` |  `[Path](https://docs.python.org/3/...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1673"}, {"type": "document", "content": "`**kwargs` |  `[Unpack](https://typing-extensions.readthedocs.io/en/latest/index.html#typing_extensi...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1674"}, {"type": "concept", "id": "unpackhttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionsunpack"}, {"type": "concept", "id": "typingextensionsunpackmermaidconfig"}, {"type": "document", "content": "198\n    199\n    200\n    201\n    202\n    203\n    204\n    205\n    206\n    207\n    208\n    209\n    210\n...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1675"}, {"type": "document", "content": "def save_image(\n        path: Path | str,\n        graph: Graph[Any, Any, Any],\n        /,\n        **...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1676"}, {"type": "document", "content": "if ext in ('png', 'webp', 'svg', 'pdf'):\n                kwargs['image_type'] = ext\n    \n        ima...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1677"}, {"type": "concept", "id": "kwargsimagetype"}, {"type": "concept", "id": "imagedata"}, {"type": "concept", "id": "requestimagegraph"}, {"type": "concept", "id": "pathwritebytesimagedata"}, {"type": "document", "content": "Bases: `[TypedDict](https://typing-\nextensions.readthedocs.io/en/latest/index.html#typing_extensions...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1678"}, {"type": "concept", "id": "typeddicthttpstyping"}, {"type": "concept", "id": "extensionsreadthedocsioenlatestindexhtmltypingextensionstypeddict"}, {"type": "concept", "id": "typingextensionstypeddict"}, {"type": "document", "content": "class MermaidConfig(TypedDict, total=False):\n        \"\"\"Parameters to configure mermaid chart genera...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1679"}, {"type": "concept", "id": "identifiers"}, {"type": "document", "content": "image_type: Literal['jpeg', 'png', 'webp', 'svg', 'pdf']\n        \"\"\"The image type to generate. If u...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1680"}, {"type": "concept", "id": "imagetypepdf"}, {"type": "concept", "id": "pdffit"}, {"type": "document", "content": "\"\"\"The background color of the diagram.\n    \n        If None, the default transparent background is ...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1681"}, {"type": "concept", "id": "color"}, {"type": "concept", "id": "background"}, {"type": "document", "content": "\"\"\"The scale of the diagram.\n    \n        The scale must be a number between 1 and 3, and you can on...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1682"}, {"type": "concept", "id": "scale"}, {"type": "document", "content": "start_node: [Sequence](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequen...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1683"}, {"type": "document", "content": "The title of the diagram.\n\n####  edge_labels `instance-attribute`\n\n    \n    \n    edge_labels: [bool]...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1684"}, {"type": "document", "content": "####  pdf_fit `instance-attribute`\n\n    \n    \n    pdf_fit: [bool](https://docs.python.org/3/library/...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1685"}, {"type": "document", "content": "When using image_type='pdf', the paper size of the PDF.\n\n####  background_color `instance-attribute`...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1686"}, {"type": "document", "content": "The theme of the diagram. Defaults to 'default'.\n\n####  width `instance-attribute`\n\n    \n    \n    wi...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1687"}, {"type": "document", "content": "####  httpx_client `instance-attribute`\n\n    \n    \n    httpx_client: Client\n    \n\nAn HTTPX client to...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1688"}, {"type": "document", "content": "A type alias for a node identifier.\n\nThis can be:\n\n  * A node instance (instance of a subclass of [`...", "source": "text_data\\mermaid.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mermaid.txt:1689"}, {"type": "concept", "id": "subclass"}, {"type": "concept", "id": "alias"}, {"type": "concept", "id": "identifier"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nMessages and chat ...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1689"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1690"}, {"type": "document", "content": "* Examples \n    * [ Unit testing  ](../testing/)\n    * [ Debugging and Monitoring  ](../logfire/)\n  ...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1691"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1692"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1693"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1694"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1695"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1696"}, {"type": "document", "content": "Table of contents\n\n  * Accessing Messages from Results \n  * Using Messages as Input for Further Agen...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1697"}, {"type": "concept", "id": "accessing"}, {"type": "document", "content": "Both [`RunResult`](../api/agent/#pydantic_ai.agent.AgentRunResult) (returned\nby [`Agent.run`](../api...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1698"}, {"type": "concept", "id": "agentrunapiagentpydanticaiagentagentrun"}, {"type": "concept", "id": "agentrunsyncapiagentpydanticaiagentagentrunsync"}, {"type": "concept", "id": "streamedrunresultapiresultpydanticairesultstreamedrunresult"}, {"type": "document", "content": "* [`all_messages()`](../api/agent/#pydantic_ai.agent.AgentRunResult.all_messages): returns all messa...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1699"}, {"type": "concept", "id": "theres"}, {"type": "concept", "id": "variant"}, {"type": "document", "content": "E.g. you've awaited one of the following coroutines:\n\n  * [`StreamedRunResult.stream()`](../api/resu...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1700"}, {"type": "concept", "id": "awaited"}, {"type": "concept", "id": "coroutines"}, {"type": "document", "content": "Example of accessing methods on a\n[`RunResult`](../api/agent/#pydantic_ai.agent.AgentRunResult) :\n\nr...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1701"}, {"type": "concept", "id": "methods"}, {"type": "concept", "id": "runresultmessagespy"}, {"type": "document", "content": "from pydantic_ai import Agent\n    \n    agent = Agent('openai:gpt-4o', system_prompt='Be a helpful as...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1702"}, {"type": "concept", "id": "helpful"}, {"type": "concept", "id": "assistant"}, {"type": "document", "content": "timestamp=datetime.datetime(...),\n                    part_kind='user-prompt',\n                ),\n  ...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1703"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\")_\n\nExample of accessing methods on a\n[`StreamedRun...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1704"}, {"type": "document", "content": "from pydantic_ai import Agent\n    \n    agent = Agent('openai:gpt-4o', system_prompt='Be a helpful as...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1705"}, {"type": "document", "content": "),\n                        UserPromptPart(\n                            content='Tell me a joke.',\n  ...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1706"}, {"type": "document", "content": "# complete messages once the stream finishes\n            print(result.all_messages())\n            \"\"...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1707"}, {"type": "concept", "id": "finishes"}, {"type": "document", "content": "],\n                    kind='request',\n                ),\n                ModelResponse(\n           ...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1708"}, {"type": "concept", "id": "contentdid"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyncio.run(main())` to run `...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1709"}, {"type": "concept", "id": "existing"}, {"type": "document", "content": "from pydantic_ai import Agent\n    \n    agent = Agent('openai:gpt-4o', system_prompt='Be a helpful as...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1710"}, {"type": "document", "content": "part_kind='system-prompt',\n                ),\n                UserPromptPart(\n                    co...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1711"}, {"type": "concept", "id": "partkindsystemprompt"}, {"type": "concept", "id": "contenttell"}, {"type": "document", "content": "UserPromptPart(\n                    content='Explain?',\n                    timestamp=datetime.datet...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1712"}, {"type": "concept", "id": "contentexplain"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\")_\n\n## Storing and loading messages (to JSON)\n\nWhil...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1713"}, {"type": "concept", "id": "storing"}, {"type": "document", "content": "Here's an example showing how:\n\nserialize messages to json\n\n    \n    \n    from pydantic_core import ...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1714"}, {"type": "document", "content": "## Other ways of using messages\n\nSince messages are defined by simple dataclasses, you can manually ...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1715"}, {"type": "concept", "id": "different"}, {"type": "document", "content": "from pydantic_ai import Agent\n    \n    agent = Agent('openai:gpt-4o', system_prompt='Be a helpful as...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1716"}, {"type": "document", "content": "timestamp=datetime.datetime(...),\n                    dynamic_ref=None,\n                    part_kin...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1717"}, {"type": "concept", "id": "dynamicrefnone"}, {"type": "document", "content": "kind='response',\n        ),\n        ModelRequest(\n            parts=[\n                UserPromptPart...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1718"}, {"type": "document", "content": "## Examples\n\nFor a more complete example of using messages in conversations, see the [chat\napp](../e...", "source": "text_data\\message-history.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\message-history.txt:1719"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\npydantic_ai....", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1719"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1720"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1721"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1722"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1723"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../result/)\n    * pydantic_ai.messages  [ pydantic_ai.messages  ](./) Tabl...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1724"}, {"type": "concept", "id": "mediatype"}, {"type": "document", "content": "* part_kind \n      * ToolReturnPart \n        * tool_name \n        * content \n        * tool_call_id ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1725"}, {"type": "concept", "id": "partkind"}, {"type": "concept", "id": "toolcallid"}, {"type": "document", "content": "* ModelResponsePart \n      * ModelResponse \n        * parts \n        * model_name \n        * timesta...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1726"}, {"type": "concept", "id": "eventkind"}, {"type": "concept", "id": "partdeltakind"}, {"type": "concept", "id": "apply"}, {"type": "document", "content": "* tool_call_id \n        * event_kind \n      * ModelResponseStreamEvent \n      * AgentStreamEvent \n  ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1727"}, {"type": "concept", "id": "modelresponsestreamevent"}, {"type": "concept", "id": "agentstreamevent"}, {"type": "concept", "id": "functiontoolcallevent"}, {"type": "document", "content": "* [ pydantic_ai.models.cohere  ](../models/cohere/)\n    * [ pydantic_ai.models.gemini  ](../models/g...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1728"}, {"type": "concept", "id": "modelscohere"}, {"type": "document", "content": "* [ pydantic_graph.persistence  ](../pydantic_graph/persistence/)\n    * [ pydantic_graph.mermaid  ](...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1729"}, {"type": "document", "content": "Table of contents...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1730"}, {"type": "document", "content": "* messages \n  * SystemPromptPart \n    * content \n    * timestamp \n    * dynamic_ref \n    * part_kind...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1731"}, {"type": "document", "content": "* tool_call_id \n    * timestamp \n    * part_kind \n    * model_response \n  * ModelRequestPart \n  * Mo...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1732"}, {"type": "document", "content": "* apply \n  * ModelResponsePartDelta \n  * PartStartEvent \n    * index \n    * part \n    * event_kind \n...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1733"}, {"type": "concept", "id": "modelresponsepartdelta"}, {"type": "document", "content": "# `pydantic_ai.messages`\n\nThe structure of `ModelMessage` can be shown as a graph:\n\n###  SystemPromp...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1734"}, {"type": "concept", "id": "modelmessage"}, {"type": "concept", "id": "shown"}, {"type": "document", "content": "@dataclass\n    class SystemPromptPart:\n        \"\"\"A system prompt, generally written by the applicat...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1735"}, {"type": "document", "content": "\"\"\"\n    \n        part_kind: Literal['system-prompt'] = 'system-prompt'\n        \"\"\"Part type identifi...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1736"}, {"type": "concept", "id": "literalsystemprompt"}, {"type": "concept", "id": "available"}, {"type": "document", "content": "content: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe content of the prompt....", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1737"}, {"type": "document", "content": "The ref of the dynamic system prompt function that generated this part.\n\nOnly set if system prompt i...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1738"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class AudioUrl:\n        \"\"\"A URL to an audio file.\"\"\"\n    \n        u...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1739"}, {"type": "concept", "id": "audiourl"}, {"type": "document", "content": "url: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe URL of the audio file.\n\n##...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1740"}, {"type": "document", "content": "A URL to an image.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n    \n    \n    66\n    ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1741"}, {"type": "concept", "id": "pydanticaislimpydanticaimessagespy"}, {"type": "document", "content": "@dataclass\n    class ImageUrl:\n        \"\"\"A URL to an image.\"\"\"\n    \n        url: str\n        \"\"\"The...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1742"}, {"type": "document", "content": "return 'image/webp'\n            else:\n                raise ValueError(f'Unknown image file extensio...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1743"}, {"type": "concept", "id": "imagewebp"}, {"type": "document", "content": "url: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe URL of the image.\n\n####  k...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1744"}, {"type": "document", "content": "###  DocumentUrl `dataclass`\n\nThe URL of the document.\n\nSource code in `pydantic_ai_slim/pydantic_ai...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1745"}, {"type": "concept", "id": "documenturl"}, {"type": "document", "content": "@dataclass\n    class DocumentUrl:\n        \"\"\"The URL of the document.\"\"\"\n    \n        url: str\n     ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1746"}, {"type": "document", "content": "\"\"\"The file format of the document.\n    \n            The choice of supported formats were based on t...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1747"}, {"type": "concept", "id": "choice"}, {"type": "concept", "id": "formats"}, {"type": "document", "content": "url: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe URL of the document.\n\n####...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1748"}, {"type": "document", "content": "###  BinaryContent `dataclass`\n\nBinary content, e.g. an audio or image file.\n\nSource code in `pydant...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1749"}, {"type": "concept", "id": "binary"}, {"type": "document", "content": "@dataclass\n    class BinaryContent:\n        \"\"\"Binary content, e.g. an audio or image file.\"\"\"\n    \n...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1750"}, {"type": "concept", "id": "media"}, {"type": "document", "content": "return self.media_type.startswith('image/')\n    \n        @property\n        def is_document(self) -> ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1751"}, {"type": "concept", "id": "selfmediatypestartswithimage"}, {"type": "concept", "id": "isdocumentself"}, {"type": "document", "content": "if self.is_audio:\n                if self.media_type == 'audio/mpeg':\n                    return 'mp...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1752"}, {"type": "concept", "id": "selfmediatype"}, {"type": "concept", "id": "selfisaudio"}, {"type": "concept", "id": "audiompeg"}, {"type": "concept", "id": "audiowav"}, {"type": "document", "content": "data: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes)\n    \n\nThe binary data.\n\n####  m...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1753"}, {"type": "concept", "id": "isaudio"}, {"type": "document", "content": "Return `True` if the media type is an audio type.\n\n####  is_image `property`\n\n    \n    \n    is_image...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1754"}, {"type": "concept", "id": "isimage"}, {"type": "document", "content": "A user prompt, generally written by the end user.\n\nContent comes from the `user_prompt` parameter of...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1755"}, {"type": "concept", "id": "written"}, {"type": "concept", "id": "comes"}, {"type": "document", "content": "@dataclass\n    class UserPromptPart:\n        \"\"\"A user prompt, generally written by the end user.\n  ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1756"}, {"type": "document", "content": "if isinstance(self.content, str):\n                content = self.content\n            else:\n         ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1757"}, {"type": "concept", "id": "selfcontent"}, {"type": "concept", "id": "isinstanceselfcontent"}, {"type": "concept", "id": "figure"}, {"type": "concept", "id": "record"}, {"type": "document", "content": "content: [str](https://docs.python.org/3/library/stdtypes.html#str) | [Sequence](https://docs.python...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1758"}, {"type": "document", "content": "Part type identifier, this is available on all parts as a discriminator.\n\n###  ToolReturnPart `datac...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1759"}, {"type": "concept", "id": "discriminator"}, {"type": "document", "content": "@dataclass\n    class ToolReturnPart:\n        \"\"\"A tool return message, this encodes the result of ru...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1760"}, {"type": "document", "content": "\"\"\"Return a string representation of the content for the model.\"\"\"\n            if isinstance(self.co...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1761"}, {"type": "document", "content": "else:\n                return {'return_value': tool_return_ta.dump_python(self.content, mode='json')}...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1762"}, {"type": "concept", "id": "returnvalue"}, {"type": "concept", "id": "toolreturntadumppythonselfcontent"}, {"type": "concept", "id": "modejson"}, {"type": "document", "content": "tool_name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe name of the \"tool\" w...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1763"}, {"type": "document", "content": "####  timestamp `class-attribute` `instance-attribute`\n\n    \n    \n    timestamp: [datetime](https://...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1764"}, {"type": "concept", "id": "modelresponsestr"}, {"type": "document", "content": "Return a string representation of the content for the model.\n\nSource code in `pydantic_ai_slim/pydan...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1765"}, {"type": "document", "content": "Return a dictionary representation of the content, wrapping non-dict types\nappropriately.\n\nSource co...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1766"}, {"type": "concept", "id": "wrapping"}, {"type": "document", "content": "287\n    288\n    289\n    290\n    291\n    292\n    293\n\n|\n\n    \n    \n    def model_response_object(self...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1767"}, {"type": "concept", "id": "modelresponseobjectself"}, {"type": "document", "content": "This can be sent for a number of reasons:\n\n  * Pydantic validation of tool arguments failed, here co...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1768"}, {"type": "concept", "id": "failed"}, {"type": "concept", "id": "derived"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n    \n    \n    305\n    306\n    307\n    308...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1769"}, {"type": "document", "content": "@dataclass\n    class RetryPromptPart:\n        \"\"\"A message back to a model asking it to try again.\n ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1770"}, {"type": "document", "content": "[`ValidationError`][pydantic_core.ValidationError]\n        * a result validator raised a [`ModelRetr...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1771"}, {"type": "concept", "id": "validationerrorpydanticcorevalidationerror"}, {"type": "document", "content": "In case the tool call id is not provided by the model, PydanticAI will generate a random one.\n      ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1772"}, {"type": "document", "content": "description = f'{len(self.content)} validation errors: {json_errors.decode()}'\n            return f'...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1773"}, {"type": "concept", "id": "selftoolname"}, {"type": "concept", "id": "selfmodelresponse"}, {"type": "document", "content": "content: [list](https://docs.python.org/3/library/stdtypes.html#list)[[ErrorDetails](https://docs.py...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1774"}, {"type": "document", "content": "####  tool_call_id `class-attribute` `instance-attribute`\n\n    \n    \n    tool_call_id: [str](https:/...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1775"}, {"type": "concept", "id": "fieldhttpsdocspythonorg3librarydataclasseshtmldataclassesfield"}, {"type": "document", "content": "The timestamp, when the retry was triggered.\n\n####  part_kind `class-attribute` `instance-attribute`...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1776"}, {"type": "concept", "id": "triggered"}, {"type": "document", "content": "343\n    344\n    345\n    346\n    347\n    348\n    349\n    350\n\n|\n\n    \n    \n    def model_response(sel...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1777"}, {"type": "concept", "id": "modelresponseself"}, {"type": "document", "content": "ModelRequestPart = [Annotated](https://docs.python.org/3/library/typing.html#typing.Annotated \"typin...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1778"}, {"type": "concept", "id": "modelrequestpart"}, {"type": "concept", "id": "annotatedhttpsdocspythonorg3librarytypinghtmltypingannotated"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n    \n    \n    373\n    374\n    375\n    376...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1779"}, {"type": "document", "content": "####  kind `class-attribute` `instance-attribute`\n\n    \n    \n    kind: [Literal](https://docs.python...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1780"}, {"type": "concept", "id": "typingliteralrequest"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class TextPart:\n        \"\"\"A plain text response from a model.\"\"\"\n  ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1781"}, {"type": "document", "content": "####  part_kind `class-attribute` `instance-attribute`\n\n    \n    \n    part_kind: [Literal](https://d...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1782"}, {"type": "concept", "id": "hascontent"}, {"type": "concept", "id": "nonempty"}, {"type": "document", "content": "A tool call from a model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n    \n    \n    ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1783"}, {"type": "document", "content": "@dataclass\n    class ToolCallPart:\n        \"\"\"A tool call from a model.\"\"\"\n    \n        tool_name: s...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1784"}, {"type": "document", "content": "def args_as_dict(self) -> dict[str, Any]:\n            \"\"\"Return the arguments as a Python dictionary...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1785"}, {"type": "concept", "id": "require"}, {"type": "document", "content": "if isinstance(self.args, str):\n                return self.args\n            return pydantic_core.to_...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1786"}, {"type": "concept", "id": "isinstanceselfargs"}, {"type": "concept", "id": "empty"}, {"type": "concept", "id": "selfargs"}, {"type": "concept", "id": "pydanticcoretojsonselfargsdecode"}, {"type": "document", "content": "tool_name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe name of the tool to ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1787"}, {"type": "document", "content": "####  tool_call_id `class-attribute` `instance-attribute`\n\n    \n    \n    tool_call_id: [str](https:/...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1788"}, {"type": "document", "content": "####  args_as_dict\n\n    \n    \n    args_as_dict() -> [dict](https://docs.python.org/3/library/stdtype...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1789"}, {"type": "concept", "id": "argsasdict"}, {"type": "document", "content": "|\n\n    \n    \n    def args_as_dict(self) -> dict[str, Any]:\n        \"\"\"Return the arguments as a Pyth...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1790"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n    \n    \n    432\n    433\n    434\n    435...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1791"}, {"type": "document", "content": "441\n    442\n    443\n    444\n    445\n    446\n    447\n    448\n\n|\n\n    \n    \n    def has_content(self) ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1792"}, {"type": "concept", "id": "hascontentself"}, {"type": "concept", "id": "contain"}, {"type": "document", "content": "ModelResponsePart = [Annotated](https://docs.python.org/3/library/typing.html#typing.Annotated \"typi...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1793"}, {"type": "concept", "id": "modelresponsepart"}, {"type": "concept", "id": "typingannotated"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n    \n    \n    455\n    456\n    457\n    458...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1794"}, {"type": "document", "content": "@dataclass\n    class ModelResponse:\n        \"\"\"A response from a model, e.g. a message from the mode...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1795"}, {"type": "document", "content": "def otel_events(self) -> list[Event]:\n            \"\"\"Return OpenTelemetry events for the response.\"\"...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1796"}, {"type": "concept", "id": "neweventbody"}, {"type": "concept", "id": "newbody"}, {"type": "concept", "id": "oteleventsself"}, {"type": "document", "content": "'function': {\n                                'name': part.tool_name,\n                              ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1797"}, {"type": "concept", "id": "partargs"}, {"type": "document", "content": "parts: [list](https://docs.python.org/3/library/stdtypes.html#list)[ModelResponsePart]\n    \n\nThe par...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1798"}, {"type": "document", "content": "####  kind `class-attribute` `instance-attribute`\n\n    \n    \n    kind: [Literal](https://docs.python...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1799"}, {"type": "concept", "id": "otelevents"}, {"type": "document", "content": "def otel_events(self) -> list[Event]:\n        \"\"\"Return OpenTelemetry events for the response.\"\"\"\n  ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1800"}, {"type": "document", "content": "'function': {\n                            'name': part.tool_name,\n                            'argum...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1801"}, {"type": "document", "content": "ModelMessage = [Annotated](https://docs.python.org/3/library/typing.html#typing.Annotated \"typing.An...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1802"}, {"type": "concept", "id": "typingunionmodelrequest"}, {"type": "document", "content": "###  ModelMessagesTypeAdapter `module-attribute`\n\n    \n    \n    ModelMessagesTypeAdapter = [TypeAdap...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1803"}, {"type": "concept", "id": "modelmessagestypeadapter"}, {"type": "concept", "id": "typeadapterhttpsdocspydanticdevlatestapitypeadapterpydantictypeadaptertypeadapter"}, {"type": "concept", "id": "pydantictypeadapter"}, {"type": "concept", "id": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessage"}, {"type": "document", "content": "A partial update (delta) for a `TextPart` to append new text content.\n\nSource code in `pydantic_ai_s...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1804"}, {"type": "concept", "id": "update"}, {"type": "concept", "id": "append"}, {"type": "document", "content": "@dataclass\n    class TextPartDelta:\n        \"\"\"A partial update (delta) for a `TextPart` to append n...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1805"}, {"type": "document", "content": "ValueError: If `part` is not a `TextPart`.\n            \"\"\"\n            if not isinstance(part, TextP...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1806"}, {"type": "document", "content": "content_delta: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe incremental text...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1807"}, {"type": "document", "content": "Type | Description  \n---|---  \n`TextPart` |  A new `TextPart` with updated text content.  \n  \nRaises...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1808"}, {"type": "document", "content": "|\n\n    \n    \n    def apply(self, part: ModelResponsePart) -> TextPart:\n        \"\"\"Apply this text de...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1809"}, {"type": "concept", "id": "applyself"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/messages.py`...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1810"}, {"type": "document", "content": "541\n    542\n    543\n    544\n    545\n    546\n    547\n    548\n    549\n    550\n    551\n    552\n    553\n...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1811"}, {"type": "document", "content": "629\n    630\n    631\n    632\n    633\n    634\n    635\n    636\n    637\n    638\n    639\n    640\n    641\n...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1812"}, {"type": "document", "content": "|...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1813"}, {"type": "document", "content": "@dataclass\n    class ToolCallPartDelta:\n        \"\"\"A partial update (delta) for a `ToolCallPart` to ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1814"}, {"type": "document", "content": "non-matching value is provided an error will be raised.\"\"\"\n    \n        part_delta_kind: Literal['to...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1815"}, {"type": "concept", "id": "selfargsdelta"}, {"type": "document", "content": "@overload\n        def apply(self, part: ModelResponsePart) -> ToolCallPart: ...\n    \n        @overlo...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1816"}, {"type": "concept", "id": "toolcallpartdelta"}, {"type": "document", "content": "UnexpectedModelBehavior: If applying JSON deltas to dict arguments or vice versa.\n            \"\"\"\n  ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1817"}, {"type": "document", "content": "# Append incremental text to the existing tool_name_delta\n                updated_tool_name_delta = ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1818"}, {"type": "concept", "id": "replacedelta"}, {"type": "concept", "id": "isinstanceselfargsdelta"}, {"type": "concept", "id": "isinstancedeltaargsdelta"}, {"type": "document", "content": "if isinstance(delta.args_delta, str):\n                    raise UnexpectedModelBehavior(\n           ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1819"}, {"type": "concept", "id": "deltaargsdelta"}, {"type": "document", "content": "return delta\n    \n        def _apply_to_part(self, part: ToolCallPart) -> ToolCallPart:\n            ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1820"}, {"type": "concept", "id": "selftoolnamedelta"}, {"type": "document", "content": "part = replace(part, args=updated_json)\n            elif isinstance(self.args_delta, dict):\n        ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1821"}, {"type": "concept", "id": "replacepart"}, {"type": "concept", "id": "argsupdatedjson"}, {"type": "concept", "id": "isinstancepartargs"}, {"type": "document", "content": "tool_name_delta: [str](https://docs.python.org/3/library/stdtypes.html#str) | None = None\n    \n\nIncr...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1822"}, {"type": "concept", "id": "argsdelta"}, {"type": "document", "content": "####  tool_call_id `class-attribute` `instance-attribute`\n\n    \n    \n    tool_call_id: [str](https:/...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1823"}, {"type": "document", "content": "####  as_part\n\n    \n    \n    as_part() -> ToolCallPart | None\n    \n\nConvert this delta to a fully fo...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1824"}, {"type": "concept", "id": "aspart"}, {"type": "concept", "id": "convert"}, {"type": "document", "content": "|\n\n    \n    \n    def as_part(self) -> ToolCallPart | None:\n        \"\"\"Convert this delta to a fully ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1825"}, {"type": "concept", "id": "aspartself"}, {"type": "document", "content": "apply(part: ModelResponsePart) -> ToolCallPart\n    \n    \n    \n    apply(\n        part: ModelResponse...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1826"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[ValueError](https://docs.python.org/3/library/exceptions.html#Value...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1827"}, {"type": "concept", "id": "neither"}, {"type": "document", "content": "def apply(self, part: ModelResponsePart | ToolCallPartDelta) -> ToolCallPart | ToolCallPartDelta:\n  ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1828"}, {"type": "document", "content": "if isinstance(part, ToolCallPartDelta):\n            return self._apply_to_delta(part)\n    \n        r...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1829"}, {"type": "concept", "id": "toolcallpartdeltas"}, {"type": "concept", "id": "selfapplytodeltapart"}, {"type": "document", "content": "ModelResponsePartDelta = [Annotated](https://docs.python.org/3/library/typing.html#typing.Annotated ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1830"}, {"type": "concept", "id": "typinguniontextpartdelta"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n    \n    \n    660\n    661\n    662\n    663...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1831"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class PartStartEvent:\n        \"\"\"An event indicating that a new part...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1832"}, {"type": "concept", "id": "started"}, {"type": "concept", "id": "overall"}, {"type": "document", "content": "The index of the part within the overall response parts list.\n\n####  part `instance-attribute`\n\n    ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1833"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class PartDeltaEvent:\n        \"\"\"An event indicating a delta update ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1834"}, {"type": "document", "content": "The delta to apply to the specified part.\n\n####  event_kind `class-attribute` `instance-attribute`\n\n...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1835"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class FinalResultEvent:\n        \"\"\"An event indicating the response ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1836"}, {"type": "document", "content": "The name of the result tool that was called. `None` if the result is from text\ncontent and not from ...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1837"}, {"type": "document", "content": "###  ModelResponseStreamEvent `module-attribute`\n\n    \n    \n    ModelResponseStreamEvent = [Annotate...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1838"}, {"type": "document", "content": "###  AgentStreamEvent `module-attribute`\n\n    \n    \n    AgentStreamEvent = [Annotated](https://docs....", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1839"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class FunctionToolCallEvent:\n        \"\"\"An event indicating the star...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1840"}, {"type": "document", "content": "part: ToolCallPart\n    \n\nThe (function) tool call to make.\n\n####  call_id `class-attribute` `instanc...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1841"}, {"type": "concept", "id": "callid"}, {"type": "document", "content": "###  FunctionToolResultEvent `dataclass`\n\nAn event indicating the result of a function tool call.\n\nS...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1842"}, {"type": "document", "content": "result: ToolReturnPart | RetryPromptPart\n    \n\nThe result of the call to the function tool.\n\n####  t...", "source": "text_data\\messages.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\messages.txt:1843"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1843"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1844"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1845"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1846"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1847"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1848"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../instrumented/)\n    * pydantic_ai.models.mistral  [ pydanti...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1849"}, {"type": "document", "content": "* [ pydantic_ai.providers  ](../../providers/)\n    * [ pydantic_graph  ](../../pydantic_graph/graph/...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1850"}, {"type": "document", "content": "Table of contents\n\n  * Setup \n    * mistral \n    * LatestMistralModelNames \n    * MistralModelName \n...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1851"}, {"type": "concept", "id": "latestmistralmodelnames"}, {"type": "document", "content": "###  LatestMistralModelNames `module-attribute`\n\n    \n    \n    LatestMistralModelNames = [Literal](h...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1852"}, {"type": "concept", "id": "mistralmodelname"}, {"type": "document", "content": "Possible Mistral model names.\n\nSince Mistral supports a variety of date-stamped models, we explicitl...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1853"}, {"type": "document", "content": "93\n    94\n    95\n    96\n    97\n\n|\n\n    \n    \n    class MistralModelSettings(ModelSettings):\n        ...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1854"}, {"type": "concept", "id": "mistralmodelsettingsmodelsettings"}, {"type": "document", "content": "102\n    103\n    104\n    105\n    106\n    107\n    108\n    109\n    110\n    111\n    112\n    113\n    114\n...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1855"}, {"type": "document", "content": "190\n    191\n    192\n    193\n    194\n    195\n    196\n    197\n    198\n    199\n    200\n    201\n    202\n...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1856"}, {"type": "document", "content": "280\n    281\n    282\n    283\n    284\n    285\n    286\n    287\n    288\n    289\n    290\n    291\n    292\n...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1857"}, {"type": "document", "content": "370\n    371\n    372\n    373\n    374\n    375\n    376\n    377\n    378\n    379\n    380\n    381\n    382\n...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1858"}, {"type": "document", "content": "460\n    461\n    462\n    463\n    464\n    465\n    466\n    467\n    468\n    469\n    470\n    471\n    472\n...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1859"}, {"type": "document", "content": "|...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1860"}, {"type": "document", "content": "@dataclass(init=False)\n    class MistralModel(Model):\n        \"\"\"A model that uses Mistral.\n    \n   ...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1861"}, {"type": "document", "content": "provider: Literal['mistral'] | Provider[Mistral] = 'mistral',\n            json_mode_schema_prompt: s...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1862"}, {"type": "concept", "id": "providermistral"}, {"type": "concept", "id": "jsonmodeschemaprompt"}, {"type": "document", "content": "\"\"\"\n            self._model_name = model_name\n            self.json_mode_schema_prompt = json_mode_s...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1863"}, {"type": "document", "content": "check_allow_model_requests()\n            response = await self._completions_create(\n                ...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1864"}, {"type": "document", "content": "response = await self._stream_completions_create(\n                messages, cast(MistralModelSetting...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1865"}, {"type": "document", "content": "model_settings: MistralModelSettings,\n            model_request_parameters: ModelRequestParameters,\n...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1866"}, {"type": "concept", "id": "mistralmodelsettings"}, {"type": "concept", "id": "mistralchatcompletionresponse"}, {"type": "document", "content": "max_tokens=model_settings.get('max_tokens', UNSET),\n                    temperature=model_settings.g...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1867"}, {"type": "document", "content": "async def _stream_completions_create(\n            self,\n            messages: list[ModelMessage],\n  ...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1868"}, {"type": "concept", "id": "mistraleventstreamasyncmistralcompletionevent"}, {"type": "document", "content": "):\n                # Function Calling\n                response = await self.client.chat.stream_async...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1869"}, {"type": "document", "content": "presence_penalty=model_settings.get('presence_penalty'),\n                    frequency_penalty=model...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1870"}, {"type": "concept", "id": "presencepenaltymodelsettingsgetpresencepenalty"}, {"type": "concept", "id": "parametersjsonschemas"}, {"type": "concept", "id": "toolparametersjsonschema"}, {"type": "document", "content": "response_format={'type': 'json_object'},\n                    stream=True,\n                )\n    \n   ...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1871"}, {"type": "concept", "id": "streamtrue"}, {"type": "concept", "id": "responseformattype"}, {"type": "document", "content": "- \"any\": Select any tool.\n            - \"none\": Prevents tool use.\n            - \"required\": Forces ...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1872"}, {"type": "concept", "id": "select"}, {"type": "concept", "id": "prevents"}, {"type": "document", "content": "\"\"\"\n            all_tools: list[ToolDefinition] = (\n                model_request_parameters.functio...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1873"}, {"type": "concept", "id": "alltools"}, {"type": "document", "content": "if response.created:\n                timestamp = datetime.fromtimestamp(response.created, tz=timezon...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1874"}, {"type": "concept", "id": "responsecreated"}, {"type": "concept", "id": "datetimefromtimestampresponsecreated"}, {"type": "concept", "id": "tztimezoneutc"}, {"type": "document", "content": "async def _process_streamed_response(\n            self,\n            result_tools: list[ToolDefinitio...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1875"}, {"type": "concept", "id": "processstreamedresponse"}, {"type": "document", "content": "else:\n                timestamp = datetime.now(tz=timezone.utc)\n    \n            return MistralStrea...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1876"}, {"type": "concept", "id": "mistraltoolcall"}, {"type": "document", "content": "def _map_tool_call(t: ToolCallPart) -> MistralToolCall:\n            \"\"\"Maps a pydantic-ai ToolCall t...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1877"}, {"type": "concept", "id": "schemas"}, {"type": "concept", "id": "listdictstr"}, {"type": "document", "content": "for key, value in schema.get('properties', {}).items():\n                    typed_dict_definition[ke...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1878"}, {"type": "concept", "id": "anyof"}, {"type": "concept", "id": "schemagetproperties"}, {"type": "document", "content": "# 1) Handle anyOf first, because it's a different schema structure\n            if any_of := value.ge...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1879"}, {"type": "document", "content": "return SIMPLE_JSON_TYPE_MAPPING[value_type]\n    \n            # 4) Array: Recursively get the item ty...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1880"}, {"type": "concept", "id": "array"}, {"type": "concept", "id": "additionalpropertiestype"}, {"type": "document", "content": "and additional_properties_type != 'array'\n                    and additional_properties_type != 'obj...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1881"}, {"type": "document", "content": "return 'dict[str, dict[str, Any]]'\n                else:\n                    # If no additionalPrope...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1882"}, {"type": "concept", "id": "timeout"}, {"type": "concept", "id": "additionalproperties"}, {"type": "document", "content": "for part in message.parts:\n                if isinstance(part, SystemPromptPart):\n                  ...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1883"}, {"type": "concept", "id": "mistraltoolmessage"}, {"type": "concept", "id": "systempromptpart"}, {"type": "document", "content": "else:\n                        yield MistralToolMessage(\n                            tool_call_id=par...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.468168", "id": "text_data\\mistral.txt:1884"}, {"type": "concept", "id": "toolcallidparttoolcallid"}, {"type": "document", "content": "for part in message.parts:\n                    if isinstance(part, TextPart):\n                      ...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1885"}, {"type": "concept", "id": "contentchunksappendmistraltextchunktextpartcontent"}, {"type": "document", "content": "content = part.content\n            else:\n                content = []\n                for item in pa...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1886"}, {"type": "concept", "id": "contentappendmistraltextchunktextitem"}, {"type": "document", "content": "else:\n                            raise RuntimeError('Only image binary content is supported for Mis...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1887"}, {"type": "concept", "id": "runtimeerroronly"}, {"type": "document", "content": "__init__(\n        model_name: MistralModelName,\n        *,\n        provider: (\n            [Literal]...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1888"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`model_name` |  `MistralModelName` |  The na...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1889"}, {"type": "document", "content": "`json_mode_schema_prompt` |  `[str](https://docs.python.org/3/library/stdtypes.html#str)` |  The pro...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1890"}, {"type": "document", "content": "117\n    118\n    119\n    120\n    121\n    122\n    123\n    124\n    125\n    126\n    127\n    128\n    129\n...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1891"}, {"type": "document", "content": "def __init__(\n        self,\n        model_name: MistralModelName,\n        *,\n        provider: Liter...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1892"}, {"type": "document", "content": "\"\"\"\n        self._model_name = model_name\n        self.json_mode_schema_prompt = json_mode_schema_pr...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1893"}, {"type": "concept", "id": "selfjsonmodeschemaprompt"}, {"type": "document", "content": "request(\n        messages: [list](https://docs.python.org/3/library/stdtypes.html#list)[[ModelMessag...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1894"}, {"type": "document", "content": "Make a non-streaming request to the model from Pydantic AI call.\n\nSource code in `pydantic_ai_slim/p...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1895"}, {"type": "concept", "id": "nonstreaming"}, {"type": "document", "content": "|\n\n    \n    \n    async def request(\n        self,\n        messages: list[ModelMessage],\n        mode...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1896"}, {"type": "document", "content": "request_stream(\n        messages: [list](https://docs.python.org/3/library/stdtypes.html#list)[[Mode...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1897"}, {"type": "document", "content": "Make a streaming request to the model from Pydantic AI call.\n\nSource code in `pydantic_ai_slim/pydan...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1898"}, {"type": "document", "content": "|\n\n    \n    \n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: ...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1899"}, {"type": "document", "content": "model_name: MistralModelName\n    \n\nThe model name.\n\n####  system `property`\n\n    \n    \n    system: [...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1900"}, {"type": "document", "content": "507\n    508\n    509\n    510\n    511\n    512\n    513\n    514\n    515\n    516\n    517\n    518\n    519\n...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1901"}, {"type": "document", "content": "595\n    596\n    597\n    598\n    599\n    600\n    601\n    602\n    603\n    604\n    605\n    606\n    607...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1902"}, {"type": "document", "content": "|...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1903"}, {"type": "document", "content": "@dataclass\n    class MistralStreamedResponse(StreamedResponse):\n        \"\"\"Implementation of `Stream...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1904"}, {"type": "concept", "id": "mistralstreamedresponsestreamedresponse"}, {"type": "document", "content": "except IndexError:\n                    continue\n    \n                # Handle the text part of the r...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1905"}, {"type": "concept", "id": "selfresulttools"}, {"type": "concept", "id": "maybetoolcallpart"}, {"type": "concept", "id": "indexerror"}, {"type": "document", "content": "tool_name=maybe_tool_call_part.tool_name,\n                                args=maybe_tool_call_part....", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1906"}, {"type": "concept", "id": "toolnamemaybetoolcallparttoolname"}, {"type": "concept", "id": "argsmaybetoolcallpartargsasdict"}, {"type": "concept", "id": "toolcallidmaybetoolcallparttoolcallid"}, {"type": "document", "content": "yield self._parts_manager.handle_tool_call_part(\n                        vendor_part_id=index, tool_...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1907"}, {"type": "document", "content": "if output_json:\n                for result_tool in result_tools.values():\n                    # NOTE...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1908"}, {"type": "concept", "id": "outputjson"}, {"type": "concept", "id": "resulttool"}, {"type": "concept", "id": "resulttoolsvalues"}, {"type": "document", "content": "@staticmethod\n        def _validate_required_json_schema(json_dict: dict[str, Any], json_schema: dic...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1909"}, {"type": "concept", "id": "requiredparams"}, {"type": "concept", "id": "param"}, {"type": "concept", "id": "paramtype"}, {"type": "concept", "id": "paramitemstype"}, {"type": "document", "content": "if param_type == 'array' and param_items_type:\n                    if not isinstance(json_dict[param...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1910"}, {"type": "concept", "id": "isinstancejsondictparam"}, {"type": "concept", "id": "paramschema"}, {"type": "document", "content": "return False\n    \n            return True\n      \n  \n---|---  \n  \n####  model_name `property`...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1911"}, {"type": "document", "content": "model_name: MistralModelName\n    \n\nGet the model name of the response.\n\n####  timestamp `property`\n\n...", "source": "text_data\\mistral.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\mistral.txt:1912"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nModels\n\nType to st...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1912"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1913"}, {"type": "document", "content": "* Environment variable \n        * provider argument \n      * Gemini via VertexAI \n        * Install ...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1914"}, {"type": "document", "content": "* OpenAI-compatible Models \n        * Ollama \n          * Example local usage \n          * Example u...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1915"}, {"type": "document", "content": "* [ Evals  ](../evals/)\n    * [ Image, Audio & Document Input  ](../input/)\n    * [ MCP  ](../mcp/)...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1916"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1917"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1918"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1919"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1920"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1921"}, {"type": "document", "content": "Table of contents...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1922"}, {"type": "document", "content": "* Models, Interfaces, and Providers \n  * OpenAI \n    * Install \n    * Configuration \n    * Environme...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1923"}, {"type": "document", "content": "* Environment variable \n    * provider argument \n  * Cohere \n    * Install \n    * Configuration \n   ...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1924"}, {"type": "document", "content": "# Models\n\nPydanticAI is Model-agnostic and has built in support for the following model\nproviders:\n\n...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1925"}, {"type": "document", "content": "## Models, Interfaces, and Providers\n\nPydanticAI uses a few key terms to describe how it interacts w...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1926"}, {"type": "concept", "id": "interfaces"}, {"type": "document", "content": "* **Model** : This refers to the specific LLM model you want to handle your requests (e.g., `gpt-4o`...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1927"}, {"type": "concept", "id": "refers"}, {"type": "document", "content": "* **Interface** : This refers to a PydanticAI class used to make requests following a specific LLM A...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1928"}, {"type": "concept", "id": "classes"}, {"type": "document", "content": "* **Provider** : This refers to _Interface_ -specific classes which handle the authentication and co...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1929"}, {"type": "concept", "id": "vendor"}, {"type": "document", "content": "In short, you select a _model_ , PydanticAI uses the appropriate _interface_\nclass, and the _provide...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1930"}, {"type": "concept", "id": "pydanticaislimopenai"}, {"type": "document", "content": "### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n   ...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1931"}, {"type": "document", "content": "By default, the `OpenAIModel` uses the\n[`OpenAIProvider`](../api/providers/#pydantic_ai.providers.op...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1932"}, {"type": "concept", "id": "openaimodel"}, {"type": "document", "content": "### Custom OpenAI Client\n\n`OpenAIProvider` also accepts a custom `AsyncOpenAI` client via the\n[`open...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1933"}, {"type": "concept", "id": "openaiprovider"}, {"type": "concept", "id": "accepts"}, {"type": "document", "content": "openai_azure.py\n\n    \n    \n    from openai import AsyncAzureOpenAI\n    \n    from pydantic_ai import ...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1934"}, {"type": "concept", "id": "asyncazureopenai"}, {"type": "document", "content": "openai_responses_model.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.o...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1935"}, {"type": "document", "content": "You can use the\n[`OpenAIResponsesModelSettings`](../api/models/openai/#pydantic_ai.models.openai.Ope...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1936"}, {"type": "concept", "id": "openairesponsesmodelsettingsapimodelsopenaipydanticaimodelsopenaiopenairesponsesmodelsettings"}, {"type": "concept", "id": "those"}, {"type": "concept", "id": "builtin"}, {"type": "document", "content": "from openai.types.responses import WebSearchToolParam  \n    \n    The file search tool and computer u...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1937"}, {"type": "concept", "id": "openaitypesresponses"}, {"type": "concept", "id": "openairesponsesmodelsettings"}, {"type": "document", "content": "1. \n\nYou can learn more about the differences between the Responses API and Chat\nCompletions API in ...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1938"}, {"type": "concept", "id": "pydanticaislimanthropic"}, {"type": "document", "content": "[`AnthropicModelName`](../api/models/anthropic/#pydantic_ai.models.anthropic.AnthropicModelName)\ncon...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1939"}, {"type": "concept", "id": "anthropicmodelnameapimodelsanthropicpydanticaimodelsanthropicanthropicmodelname"}, {"type": "document", "content": "anthropic_model_init.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.ant...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1940"}, {"type": "concept", "id": "anthropicmodelinitpy"}, {"type": "document", "content": "anthropic_model_provider.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1941"}, {"type": "concept", "id": "anthropicprovider"}, {"type": "document", "content": "anthropic_model_custom_provider.py\n\n    \n    \n    from httpx import AsyncClient\n    \n    from pydant...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1942"}, {"type": "concept", "id": "anthropicmodelcustomproviderpy"}, {"type": "document", "content": "### Configuration\n\n[`GeminiModel`](../api/models/gemini/#pydantic_ai.models.gemini.GeminiModel)\nlet'...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1943"}, {"type": "concept", "id": "geminimodelapimodelsgeminipydanticaimodelsgeminigeminimodel"}, {"type": "concept", "id": "through"}, {"type": "document", "content": "gemini_model_by_name.py\n\n    \n    \n    from pydantic_ai import Agent\n    \n    agent = Agent('google-...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1944"}, {"type": "document", "content": "### `provider` argument\n\nYou can provide a custom\n[`Provider`](../api/providers/#pydantic_ai.provide...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1945"}, {"type": "document", "content": "gemini_model_custom_provider.py\n\n    \n    \n    from httpx import AsyncClient\n    \n    from pydantic_...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1946"}, {"type": "concept", "id": "geminimodelcustomproviderpy"}, {"type": "document", "content": "[`GeminiModelName`](../api/models/gemini/#pydantic_ai.models.gemini.GeminiModelName)\ncontains a list...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1947"}, {"type": "concept", "id": "pydanticaislimvertexai"}, {"type": "concept", "id": "geminimodelnameapimodelsgeminipydanticaimodelsgeminigeminimodelname"}, {"type": "document", "content": "1. The VertexAI API comes with more enterprise readiness guarantees.\n  2. You can [purchase provisio...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1948"}, {"type": "concept", "id": "vertexai"}, {"type": "concept", "id": "account"}, {"type": "document", "content": "### Application default credentials\n\nLuckily if you're running PydanticAI inside GCP, or you have th...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1949"}, {"type": "concept", "id": "credentials"}, {"type": "concept", "id": "gcloud"}, {"type": "document", "content": "Internally this uses [`google.auth.default()`](https://google-\nauth.readthedocs.io/en/master/referen...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1950"}, {"type": "concept", "id": "projectid"}, {"type": "document", "content": "### Service account\n\nIf instead of application default credentials, you want to authenticate with a\n...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1951"}, {"type": "document", "content": "Once you have the JSON file, you can use it thus:\n\nvertexai_service_account.py\n\n    \n    \n    from p...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1952"}, {"type": "concept", "id": "vertexaiserviceaccountpy"}, {"type": "document", "content": "vertexai_service_account.py\n\n    \n    \n    import json\n    \n    from pydantic_ai import Agent\n    fr...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1953"}, {"type": "concept", "id": "region"}, {"type": "document", "content": "Using a region close to your application can improve latency and might be\nimportant from a regulator...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1954"}, {"type": "concept", "id": "googlevertexprovider"}, {"type": "document", "content": "vertexai_custom_provider.py\n\n    \n    \n    from httpx import AsyncClient\n    \n    from pydantic_ai i...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1955"}, {"type": "concept", "id": "vertexaicustomproviderpy"}, {"type": "document", "content": "pipuv\n\n    \n    \n    pip install \"pydantic-ai-slim[groq]\"\n    \n    \n    \n    uv add \"pydantic-ai-sli...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1956"}, {"type": "concept", "id": "pydanticaislimgroq"}, {"type": "document", "content": "groq_model_by_name.py\n\n    \n    \n    from pydantic_ai import Agent\n    \n    agent = Agent('groq:llam...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1957"}, {"type": "document", "content": "groq_model_provider.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.groq...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1958"}, {"type": "concept", "id": "groqmodel"}, {"type": "concept", "id": "groqmodelproviderpy"}, {"type": "document", "content": "groq_model_custom_provider.py\n\n    \n    \n    from httpx import AsyncClient\n    \n    from pydantic_ai...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1959"}, {"type": "document", "content": "pipuv\n\n    \n    \n    pip install \"pydantic-ai-slim[mistral]\"\n    \n    \n    \n    uv add \"pydantic-ai-...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1960"}, {"type": "concept", "id": "pydanticaislimmistral"}, {"type": "document", "content": "mistral_model_by_name.py\n\n    \n    \n    from pydantic_ai import Agent\n    \n    agent = Agent('mistra...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1961"}, {"type": "document", "content": "groq_model_provider.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.mist...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1962"}, {"type": "concept", "id": "mistralmodel"}, {"type": "document", "content": "groq_model_custom_provider.py\n\n    \n    \n    from httpx import AsyncClient\n    \n    from pydantic_ai...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1963"}, {"type": "document", "content": "pipuv\n\n    \n    \n    pip install \"pydantic-ai-slim[cohere]\"\n    \n    \n    \n    uv add \"pydantic-ai-s...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1964"}, {"type": "concept", "id": "pydanticaislimcohere"}, {"type": "document", "content": "cohere_model_by_name.py\n\n    \n    \n    from pydantic_ai import Agent\n    \n    agent = Agent('cohere:...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1965"}, {"type": "document", "content": "cohere_model_provider.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.co...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1966"}, {"type": "concept", "id": "cohereprovider"}, {"type": "concept", "id": "coheremodelproviderpy"}, {"type": "document", "content": "cohere_model_custom_provider.py\n\n    \n    \n    from httpx import AsyncClient\n    \n    from pydantic_...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1967"}, {"type": "document", "content": "pipuv\n\n    \n    \n    pip install \"pydantic-ai-slim[bedrock]\"\n    \n    \n    \n    uv add \"pydantic-ai-...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1968"}, {"type": "concept", "id": "pydanticaislimbedrock"}, {"type": "document", "content": "export AWS_ACCESS_KEY_ID='your-access-key'\n    export AWS_SECRET_ACCESS_KEY='your-secret-key'\n    ex...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1969"}, {"type": "concept", "id": "export"}, {"type": "document", "content": "### `provider` argument\n\nYou can provide a custom\n[`BedrockProvider`](../api/providers/#pydantic_ai....", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1970"}, {"type": "concept", "id": "bedrockproviderapiproviderspydanticaiprovidersbedrockbedrockprovider"}, {"type": "document", "content": "bedrock_model_provider.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.b...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1971"}, {"type": "concept", "id": "bedrockconversemodel"}, {"type": "concept", "id": "bedrockmodelproviderpy"}, {"type": "document", "content": "You can also pass a pre-configured boto3 client:\n\nbedrock_model_boto3.py\n\n    \n    \n    import boto3...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1972"}, {"type": "concept", "id": "boto3"}, {"type": "concept", "id": "preconfigured"}, {"type": "document", "content": "## OpenAI-compatible Models\n\nMany of the models are compatible with OpenAI API, and thus can be used...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1973"}, {"type": "concept", "id": "openaicompatible"}, {"type": "concept", "id": "compatible"}, {"type": "concept", "id": "openaimodelapimodelsopenaipydanticaimodelsopenaiopenaimodel"}, {"type": "document", "content": "deepseek_model_init.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.open...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1974"}, {"type": "concept", "id": "deepseekmodelinitpy"}, {"type": "document", "content": "deepseek_model_init_provider_class.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1975"}, {"type": "concept", "id": "deepseekmodelinitproviderclasspy"}, {"type": "document", "content": "deepseek_model_init_provider_custom.py\n\n    \n    \n    from httpx import AsyncClient\n    \n    from py...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1976"}, {"type": "concept", "id": "ollama"}, {"type": "document", "content": "You must also ensure the Ollama server is running when trying to make requests\nto it. For more infor...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1977"}, {"type": "concept", "id": "llama32"}, {"type": "document", "content": "ollama_example.py\n\n    \n    \n    from pydantic import BaseModel\n    \n    from pydantic_ai import Age...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1978"}, {"type": "concept", "id": "ollamaexamplepy"}, {"type": "document", "content": "#### Example using a remote server\n\nollama_example_with_remote_server.py...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1979"}, {"type": "concept", "id": "remote"}, {"type": "concept", "id": "ollamaexamplewithremoteserverpy"}, {"type": "document", "content": "from pydantic import BaseModel\n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.op...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1980"}, {"type": "document", "content": "print(result.data)\n    #> city='London' country='United Kingdom'\n    print(result.usage())\n    \"\"\"\n ...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1981"}, {"type": "concept", "id": "citylondon"}, {"type": "concept", "id": "countryunited"}, {"type": "concept", "id": "kingdom"}, {"type": "concept", "id": "printresultusage"}, {"type": "document", "content": "1.   2. \n\n### Azure AI Foundry\n\nIf you want to use [Azure AI Foundry](https://ai.azure.com/) as your...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1982"}, {"type": "concept", "id": "azure"}, {"type": "concept", "id": "foundry"}, {"type": "document", "content": "### OpenRouter\n\nTo use [OpenRouter](https://openrouter.ai), first create an API key at\n[openrouter.a...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1983"}, {"type": "concept", "id": "openrouter"}, {"type": "concept", "id": "openrouterhttpsopenrouterai"}, {"type": "document", "content": "### Grok (xAI)\n\nGo to [xAI API Console](https://console.x.ai/) and create an API key. Once you\nhave ...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1984"}, {"type": "concept", "id": "perplexity"}, {"type": "document", "content": "perplexity_model_init.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.op...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1985"}, {"type": "concept", "id": "perplexitymodelinitpy"}, {"type": "document", "content": "fireworks_model_init.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.ope...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1986"}, {"type": "concept", "id": "fireworksmodelinitpy"}, {"type": "document", "content": "together_model_init.py\n\n    \n    \n    from pydantic_ai import Agent\n    from pydantic_ai.models.open...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1987"}, {"type": "document", "content": "* [`StreamedResponse`](../api/models/base/#pydantic_ai.models.StreamedResponse)\n\nThe best place to s...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1988"}, {"type": "concept", "id": "streamedresponseapimodelsbasepydanticaimodelsstreamedresponse"}, {"type": "document", "content": "In the following example, the agent first makes a request to the OpenAI model\n(which fails due to an...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1989"}, {"type": "document", "content": "from pydantic_ai import Agent\n    from pydantic_ai.models.anthropic import AnthropicModel\n    from p...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1990"}, {"type": "document", "content": "timestamp=datetime.datetime(...),\n                    part_kind='user-prompt',\n                )\n   ...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1991"}, {"type": "document", "content": "The `ModelResponse` message above indicates in the `model_name` field that the\nresult was returned b...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1992"}, {"type": "document", "content": "Python >=3.11Python <3.11\n\nfallback_model_failure.py\n\n    \n    \n    from pydantic_ai import Agent\n  ...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1993"}, {"type": "concept", "id": "modelhttperror"}, {"type": "document", "content": "Since\n[`except*`](https://docs.python.org/3/reference/compound_stmts.html#except-\nstar) is only supp...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1994"}, {"type": "concept", "id": "excepthttpsdocspythonorg3referencecompoundstmtshtmlexcept"}, {"type": "concept", "id": "exceptiongrouphttpsgithubcomagronholmexceptiongroup"}, {"type": "document", "content": "from exceptiongroup import catch\n    \n    from pydantic_ai import Agent\n    from pydantic_ai.excepti...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1995"}, {"type": "document", "content": "with catch({ModelHTTPError: model_status_error_handler}):\n        response = agent.run_sync('What is...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1996"}, {"type": "concept", "id": "catchmodelhttperror"}, {"type": "concept", "id": "modelstatuserrorhandler"}, {"type": "concept", "id": "agentrunsyncwhat"}, {"type": "document", "content": "By default, the `FallbackModel` only moves on to the next model if the current\nmodel raises a\n[`Mode...", "source": "text_data\\models.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\models.txt:1997"}, {"type": "concept", "id": "moves"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nMulti-agent Applic...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:1997"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:1998"}, {"type": "document", "content": "* Programmatic agent hand-off \n      * Pydantic Graphs \n      * Examples \n    * [ Graphs  ](../graph...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:1999"}, {"type": "concept", "id": "programmatic"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2000"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2001"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2002"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2003"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2004"}, {"type": "document", "content": "Table of contents\n\n  * Agent delegation \n    * Agent delegation and dependencies \n  * Programmatic a...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2005"}, {"type": "concept", "id": "delegation"}, {"type": "concept", "id": "handoff"}, {"type": "document", "content": "## Agent delegation\n\n\"Agent delegation\" refers to the scenario where an agent delegates work to\nanot...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2006"}, {"type": "concept", "id": "delegate"}, {"type": "document", "content": "Multiple models\n\nAgent delegation doesn't need to use the same model for each agent. If you\nchoose t...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2007"}, {"type": "document", "content": "from pydantic_ai import Agent, RunContext\n    from pydantic_ai.usage import UsageLimits\n    \n    jok...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2008"}, {"type": "concept", "id": "jokes"}, {"type": "document", "content": "return r.data  \n    \n    \n    result = joke_selection_agent.run_sync(\n        'Tell me a joke.',\n   ...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2009"}, {"type": "concept", "id": "rdata"}, {"type": "concept", "id": "jokeselectionagentrunsync"}, {"type": "concept", "id": "usagelimitsusagelimitsrequestlimit5"}, {"type": "document", "content": "1.   2.   3.   4.   5. \n\n_(This example is complete, it can be run \"as is\")_\n\nThe control flow for t...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2010"}, {"type": "document", "content": "from dataclasses import dataclass\n    \n    import httpx\n    \n    from pydantic_ai import Agent, RunC...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2011"}, {"type": "concept", "id": "depstypeclientandkey"}, {"type": "document", "content": "'Use the \"get_jokes\" tool to get some jokes on the given subject, '\n            'then extract each j...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2012"}, {"type": "concept", "id": "runcontextclientandkey"}, {"type": "document", "content": "headers={'Authorization': f'Bearer {ctx.deps.api_key}'},\n        )\n        response.raise_for_status...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2013"}, {"type": "document", "content": "1.   2.   3.   4.   5.   6. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2014"}, {"type": "document", "content": "from typing import Literal, Union\n    \n    from pydantic import BaseModel, Field\n    from rich.promp...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2015"}, {"type": "document", "content": "),\n    )\n    \n    \n    @flight_search_agent.tool  \n    async def flight_search(\n        ctx: RunCont...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2016"}, {"type": "concept", "id": "unionflightdetails"}, {"type": "document", "content": "result = await flight_search_agent.run(\n                prompt,\n                message_history=mess...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2017"}, {"type": "concept", "id": "flightsearchagentrun"}, {"type": "concept", "id": "messagehistorymessagehistory"}, {"type": "document", "content": "'openai:gpt-4o',\n        result_type=Union[SeatPreference, Failed],  # type: ignore\n        system_p...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2018"}, {"type": "concept", "id": "resulttypeunionseatpreference"}, {"type": "document", "content": "usage_limits=usage_limits,\n            )\n            if isinstance(result.data, SeatPreference):\n   ...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2019"}, {"type": "concept", "id": "preference"}, {"type": "concept", "id": "optflightdetails"}, {"type": "document", "content": "1.   2.   3.   4.   5.   6.   7. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need t...", "source": "text_data\\multi-agent-applications.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\multi-agent-applications.txt:2020"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2020"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2021"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2022"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2023"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2024"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2025"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../../...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2026"}, {"type": "document", "content": "* run \n        * get_node_id \n        * get_note \n        * get_node_def \n        * deep_copy \n     ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2027"}, {"type": "document", "content": "Table of contents\n\n  * nodes \n  * StateT \n  * GraphRunContext \n    * state \n    * deps \n  * BaseNode...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2028"}, {"type": "concept", "id": "statet"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class GraphRunContext(Generic[StateT, DepsT]):\n        \"\"\"Context fo...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2029"}, {"type": "document", "content": "Base class for a node.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2030"}, {"type": "concept", "id": "pydanticgraphpydanticgraphnodespy"}, {"type": "document", "content": "39\n     40\n     41\n     42\n     43\n     44\n     45\n     46\n     47\n     48\n     49\n     50\n     51\n ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2031"}, {"type": "document", "content": "127\n    128\n    129\n    130\n    131\n    132\n    133\n    134\n    135\n    136\n    137\n    138\n    139\n...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2032"}, {"type": "document", "content": "|...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2033"}, {"type": "document", "content": "class BaseNode(ABC, Generic[StateT, DepsT, NodeRunEndT]):\n        \"\"\"Base class for a node.\"\"\"\n    \n...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2034"}, {"type": "document", "content": "!!! note \"Return types used at runtime\"\n                The return type of this method are read by `...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2035"}, {"type": "concept", "id": "runtime"}, {"type": "document", "content": "return snapshot_id\n            else:\n                self.__dict__['__snapshot_id'] = snapshot_id = ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2036"}, {"type": "concept", "id": "selfdictsnapshotid"}, {"type": "concept", "id": "generatesnapshotidselfgetnodeid"}, {"type": "document", "content": "is `True`. You can override this method to customise the node notes.\n            \"\"\"\n            if ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2037"}, {"type": "concept", "id": "customise"}, {"type": "document", "content": "\"\"\"Get the node definition.\"\"\"\n            type_hints = get_type_hints(cls.run, localns=local_ns, in...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2038"}, {"type": "concept", "id": "returntype"}, {"type": "concept", "id": "typehints"}, {"type": "concept", "id": "gettypehintsclsrun"}, {"type": "document", "content": "return_type_origin = get_origin(return_type) or return_type\n                if return_type_origin is...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2039"}, {"type": "concept", "id": "returntypeorigin"}, {"type": "concept", "id": "endedge"}, {"type": "concept", "id": "returnsbasenode"}, {"type": "document", "content": "end_edge,\n                returns_base_node,\n            )\n    \n        def deep_copy(self) -> Self:...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2040"}, {"type": "concept", "id": "deepcopyself"}, {"type": "document", "content": "docstring_notes: [bool](https://docs.python.org/3/library/functions.html#bool) = False\n    \n\nSet to ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2041"}, {"type": "concept", "id": "docstringnotes"}, {"type": "document", "content": "Return types used at runtime\n\nThe return type of this method are read by `pydantic_graph` at runtime...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2042"}, {"type": "document", "content": "50\n    51\n    52\n    53\n    54\n    55\n    56\n    57\n    58\n    59\n    60\n    61\n    62\n    63\n    64...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2043"}, {"type": "document", "content": "@abstractmethod\n    async def run(self, ctx: GraphRunContext[StateT, DepsT]) -> BaseNode[StateT, Dep...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2044"}, {"type": "document", "content": "\"\"\"\n        ...\n      \n  \n---|---  \n  \n####  get_node_id `cached` `classmethod`...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2045"}, {"type": "concept", "id": "getnodeid"}, {"type": "concept", "id": "cached"}, {"type": "document", "content": "get_node_id() -> [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nGet the ID of the ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2046"}, {"type": "concept", "id": "getnote"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/nodes.py`\n\n    \n    \n     85\n     86\n     87\n     88\n ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2047"}, {"type": "document", "content": "@classmethod\n    def get_note(cls) -> str | None:\n        \"\"\"Get a note about the node to render on ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2048"}, {"type": "concept", "id": "getnotecls"}, {"type": "document", "content": "# remove indentation from docstring\n            import inspect\n    \n            docstring = inspect....", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2049"}, {"type": "concept", "id": "indentation"}, {"type": "document", "content": "get_node_def(\n        local_ns: [dict](https://docs.python.org/3/library/stdtypes.html#dict)[[str](h...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2050"}, {"type": "concept", "id": "getnodedef"}, {"type": "concept", "id": "localns"}, {"type": "document", "content": "@classmethod\n    def get_node_def(cls, local_ns: dict[str, Any] | None) -> NodeDef[StateT, DepsT, No...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2051"}, {"type": "concept", "id": "getnodedefcls"}, {"type": "document", "content": "return_type, annotations = _utils.unpack_annotated(return_type)\n            edge = next((a for a in ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2052"}, {"type": "document", "content": "cls,\n            cls.get_node_id(),\n            cls.get_note(),\n            next_node_edges,\n       ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2053"}, {"type": "concept", "id": "clsgetnodeid"}, {"type": "concept", "id": "clsgetnote"}, {"type": "concept", "id": "nextnodeedges"}, {"type": "document", "content": "deep_copy() -> [Self](https://typing-extensions.readthedocs.io/en/latest/index.html#typing_extension...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2054"}, {"type": "concept", "id": "deepcopy"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/nodes.py`\n\n    \n    \n    145\n    146\n    147\n    148\n ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2055"}, {"type": "document", "content": "@dataclass\n    class End(Generic[RunEndT]):\n        \"\"\"Type to return from a node to signal the end ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2056"}, {"type": "document", "content": "return snapshot_id\n    \n        def set_snapshot_id(self, set_id: str) -> None:\n            self.__d...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2057"}, {"type": "concept", "id": "setid"}, {"type": "concept", "id": "setsnapshotidself"}, {"type": "document", "content": "data: RunEndT\n    \n\nData to return from the graph.\n\n####  deep_copy_data\n\n    \n    \n    deep_copy_da...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2058"}, {"type": "concept", "id": "deepcopydata"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/nodes.py`\n\n    \n    \n    177\n    178\n    179\n    180\n ...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2059"}, {"type": "concept", "id": "label"}, {"type": "concept", "id": "defaultnone"}, {"type": "document", "content": "RunEndT = TypeVar('RunEndT', covariant=True, default=None)\n    \n\nCovariant type variable for the ret...", "source": "text_data\\nodes.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\nodes.txt:2060"}, {"type": "concept", "id": "noderunendt"}, {"type": "concept", "id": "covarianttrue"}, {"type": "concept", "id": "covariant"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2060"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2061"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2062"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2063"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2064"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2065"}, {"type": "document", "content": "* openai_truncation \n        * OpenAIModel \n          * __init__ \n          * model_name \n          ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2066"}, {"type": "concept", "id": "openaitruncation"}, {"type": "concept", "id": "openairesponsesmodel"}, {"type": "document", "content": "* [ pydantic_ai.models.wrapper  ](../wrapper/)\n    * [ pydantic_ai.providers  ](../../providers/)\n  ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2067"}, {"type": "document", "content": "Table of contents\n\n  * Setup \n    * openai \n    * OpenAIModelName \n    * OpenAIModelSettings \n      ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2068"}, {"type": "concept", "id": "openaimodelname"}, {"type": "document", "content": "###  OpenAIModelName `module-attribute`\n\n    \n    \n    OpenAIModelName = [Union](https://docs.python...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2069"}, {"type": "concept", "id": "chatmodel"}, {"type": "document", "content": "Settings used for an OpenAI model request.\n\nALL FIELDS MUST BE `openai_` PREFIXED SO YOU CAN MERGE T...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2070"}, {"type": "document", "content": "class OpenAIModelSettings(ModelSettings, total=False):\n        \"\"\"Settings used for an OpenAI model ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2071"}, {"type": "concept", "id": "reasoning"}, {"type": "concept", "id": "effort"}, {"type": "concept", "id": "openaimodelsettingsmodelsettings"}, {"type": "document", "content": "See [OpenAI's safety best practices](https://platform.openai.com/docs/guides/safety-best-practices#e...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2072"}, {"type": "concept", "id": "openais"}, {"type": "concept", "id": "practiceshttpsplatformopenaicomdocsguidessafetybestpracticesenduserids"}, {"type": "concept", "id": "openaireasoningeffort"}, {"type": "document", "content": "openai_reasoning_effort: ReasoningEffort\n    \n\nConstrains effort on reasoning for [reasoning\nmodels]...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2073"}, {"type": "concept", "id": "openaiuser"}, {"type": "concept", "id": "reasoningeffort"}, {"type": "document", "content": "###  OpenAIResponsesModelSettings\n\nBases: `OpenAIModelSettings`\n\nSettings used for an OpenAI Respons...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2074"}, {"type": "concept", "id": "openaimodelsettings"}, {"type": "document", "content": "class OpenAIResponsesModelSettings(OpenAIModelSettings, total=False):\n        \"\"\"Settings used for a...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2075"}, {"type": "document", "content": "One of `concise` or `detailed`.\n    \n        Check the [OpenAI Computer use documentation](https://p...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2076"}, {"type": "concept", "id": "window"}, {"type": "concept", "id": "concise"}, {"type": "document", "content": "middle of the conversation.\n        \"\"\"\n      \n  \n---|---  \n  \n####  openai_builtin_tools `instance-...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2077"}, {"type": "concept", "id": "middle"}, {"type": "concept", "id": "openaibuiltintools"}, {"type": "document", "content": "openai_builtin_tools: [Sequence](https://docs.python.org/3/library/collections.abc.html#collections....", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2078"}, {"type": "concept", "id": "openaireasoninggeneratesummary"}, {"type": "document", "content": "A summary of the reasoning performed by the model.\n\nThis can be useful for debugging and understandi...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2079"}, {"type": "concept", "id": "summary"}, {"type": "concept", "id": "performed"}, {"type": "document", "content": "The truncation strategy to use for the model response.\n\nIt can be either: \\- `disabled` (default): I...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2080"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/models/openai.py`...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2081"}, {"type": "concept", "id": "pydanticaislimpydanticaimodelsopenaipy"}, {"type": "document", "content": "143\n    144\n    145\n    146\n    147\n    148\n    149\n    150\n    151\n    152\n    153\n    154\n    155\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2082"}, {"type": "document", "content": "231\n    232\n    233\n    234\n    235\n    236\n    237\n    238\n    239\n    240\n    241\n    242\n    243\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2083"}, {"type": "document", "content": "321\n    322\n    323\n    324\n    325\n    326\n    327\n    328\n    329\n    330\n    331\n    332\n    333\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2084"}, {"type": "document", "content": "411\n    412\n    413\n    414\n    415\n    416\n    417\n    418\n    419\n    420\n    421\n    422\n    423\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2085"}, {"type": "document", "content": "|...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2086"}, {"type": "document", "content": "@dataclass(init=False)\n    class OpenAIModel(Model):\n        \"\"\"A model that uses the OpenAI API.\n  ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2087"}, {"type": "document", "content": "system_prompt_role: OpenAISystemPromptRole | None = None,\n        ):\n            \"\"\"Initialize an Op...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2088"}, {"type": "concept", "id": "systempromptrole"}, {"type": "document", "content": "\"\"\"\n            self._model_name = model_name\n            if isinstance(provider, str):\n            ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2089"}, {"type": "document", "content": "response = await self._completions_create(\n                messages, False, cast(OpenAIModelSettings...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2090"}, {"type": "document", "content": ")\n            async with response:\n                yield await self._process_streamed_response(respo...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2091"}, {"type": "document", "content": "@overload\n        async def _completions_create(\n            self,\n            messages: list[ModelM...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2092"}, {"type": "document", "content": "if not tools:\n                tool_choice: Literal['none', 'required', 'auto'] | None = None\n       ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2093"}, {"type": "concept", "id": "literalnone"}, {"type": "document", "content": "tools=tools or NOT_GIVEN,\n                    tool_choice=tool_choice or NOT_GIVEN,\n                ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2094"}, {"type": "concept", "id": "streamstream"}, {"type": "concept", "id": "streamoptionsincludeusage"}, {"type": "document", "content": "logit_bias=model_settings.get('logit_bias', NOT_GIVEN),\n                    reasoning_effort=model_s...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2095"}, {"type": "concept", "id": "reasoningeffortmodelsettingsgetopenaireasoningeffort"}, {"type": "document", "content": "choice = response.choices[0]\n            items: list[ModelResponsePart] = []\n            if choice.m...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2096"}, {"type": "concept", "id": "responsechoices0"}, {"type": "document", "content": "peekable_response = _utils.PeekableAsyncStream(response)\n            first_chunk = await peekable_re...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2097"}, {"type": "document", "content": "if model_request_parameters.result_tools:\n                tools += [self._map_tool_definition(r) for...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2098"}, {"type": "document", "content": "for item in message.parts:\n                    if isinstance(item, TextPart):\n                      ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2099"}, {"type": "document", "content": "if tool_calls:\n                    message_param['tool_calls'] = tool_calls\n                yield me...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2100"}, {"type": "document", "content": "'function': {\n                    'name': f.name,\n                    'description': f.description,\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2101"}, {"type": "concept", "id": "selfsystempromptrole"}, {"type": "concept", "id": "contentpartcontent"}, {"type": "concept", "id": "fname"}, {"type": "document", "content": "else:\n                        yield chat.ChatCompletionSystemMessageParam(role='system', content=par...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2102"}, {"type": "concept", "id": "chatchatcompletionsystemmessageparamrolesystem"}, {"type": "document", "content": "else:\n                        yield chat.ChatCompletionToolMessageParam(\n                           ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2103"}, {"type": "concept", "id": "chatchatcompletiontoolmessageparam"}, {"type": "document", "content": "if isinstance(item, str):\n                        content.append(ChatCompletionContentPartTextParam(...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2104"}, {"type": "concept", "id": "contentappendchatcompletioncontentpartimageparamimageurlimageurl"}, {"type": "concept", "id": "typeimageurl"}, {"type": "concept", "id": "contentappendchatcompletioncontentparttextparamtextitem"}, {"type": "document", "content": "elif item.is_audio:\n                            assert item.format in ('wav', 'mp3')\n               ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2105"}, {"type": "concept", "id": "itemisaudio"}, {"type": "concept", "id": "itemformat"}, {"type": "document", "content": "response.raise_for_status()\n                        base64_encoded = base64.b64encode(response.conte...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2106"}, {"type": "document", "content": "# {\n                        #   'message': \"Unknown parameter: 'messages[1].content[1].file.data'.\",...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2107"}, {"type": "concept", "id": "messages1content1filedata"}, {"type": "concept", "id": "unknown"}, {"type": "concept", "id": "parameter"}, {"type": "concept", "id": "invalidrequesterror"}, {"type": "document", "content": "# file_data = f'data:{media_type};base64,{base64_encoded}'\n                        # file = File(fil...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2108"}, {"type": "concept", "id": "filedata"}, {"type": "concept", "id": "fdatamediatypebase64base64encoded"}, {"type": "concept", "id": "filefilefiledata"}, {"type": "concept", "id": "filename"}, {"type": "document", "content": "__init__(\n        model_name: OpenAIModelName,\n        *,\n        provider: (\n            [Literal](...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2109"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`model_name` |  `OpenAIModelName` |  The nam...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2110"}, {"type": "document", "content": "`system_prompt_role` |  `OpenAISystemPromptRole | None` |  The role to use for the system prompt mes...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2111"}, {"type": "concept", "id": "openaisystempromptrole"}, {"type": "document", "content": "158\n    159\n    160\n    161\n    162\n    163\n    164\n    165\n    166\n    167\n    168\n    169\n    170\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2112"}, {"type": "document", "content": "def __init__(\n        self,\n        model_name: OpenAIModelName,\n        *,\n        provider: Litera...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2113"}, {"type": "document", "content": "provider: The provider to use. Defaults to `'openai'`.\n            system_prompt_role: The role to u...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2114"}, {"type": "document", "content": "model_name: OpenAIModelName\n    \n\nThe model name.\n\n####  system `property`\n\n    \n    \n    system: [s...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2115"}, {"type": "document", "content": "* [Web search](https://platform.openai.com/docs/guides/tools-web-search)\n  * [File search](https://p...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2116"}, {"type": "concept", "id": "searchhttpsplatformopenaicomdocsguidestoolswebsearch"}, {"type": "concept", "id": "searchhttpsplatformopenaicomdocsguidestoolsfilesearch"}, {"type": "concept", "id": "computer"}, {"type": "concept", "id": "usehttpsplatformopenaicomdocsguidestoolscomputeruse"}, {"type": "document", "content": "447\n    448\n    449\n    450\n    451\n    452\n    453\n    454\n    455\n    456\n    457\n    458\n    459\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2117"}, {"type": "document", "content": "535\n    536\n    537\n    538\n    539\n    540\n    541\n    542\n    543\n    544\n    545\n    546\n    547\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2118"}, {"type": "document", "content": "625\n    626\n    627\n    628\n    629\n    630\n    631\n    632\n    633\n    634\n    635\n    636\n    637\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2119"}, {"type": "document", "content": "715\n    716\n    717\n    718\n    719\n    720\n    721\n    722\n    723\n    724\n    725\n    726\n    727\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2120"}, {"type": "document", "content": "|...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2121"}, {"type": "document", "content": "@dataclass(init=False)\n    class OpenAIResponsesModel(Model):\n        \"\"\"A model that uses the OpenA...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2122"}, {"type": "document", "content": "If you are interested in the differences between the Responses API and the Chat Completions API,\n   ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2123"}, {"type": "document", "content": "\"\"\"Initialize an OpenAI Responses model.\n    \n            Args:\n                model_name: The name...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2124"}, {"type": "document", "content": "self,\n            messages: list[ModelRequest | ModelResponse],\n            model_settings: ModelSet...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2125"}, {"type": "concept", "id": "listmodelrequest"}, {"type": "document", "content": "model_request_parameters: ModelRequestParameters,\n        ) -> AsyncIterator[StreamedResponse]:\n    ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2126"}, {"type": "document", "content": "items.append(TextPart(response.output_text))\n            for item in response.output:\n              ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2127"}, {"type": "concept", "id": "itemsappendtextpartresponseoutputtext"}, {"type": "concept", "id": "responseoutput"}, {"type": "concept", "id": "itemtype"}, {"type": "document", "content": "if isinstance(first_chunk, _utils.Unset):  # pragma: no cover\n                raise UnexpectedModelB...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2128"}, {"type": "concept", "id": "isinstancefirstchunk"}, {"type": "document", "content": "model_settings: OpenAIResponsesModelSettings,\n            model_request_parameters: ModelRequestPara...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2129"}, {"type": "concept", "id": "responsescreate"}, {"type": "document", "content": "model_request_parameters: ModelRequestParameters,\n        ) -> responses.Response | AsyncStream[resp...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2130"}, {"type": "concept", "id": "responsesresponse"}, {"type": "document", "content": "try:\n                return await self.client.responses.create(\n                    input=openai_mes...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2131"}, {"type": "concept", "id": "selfclientresponsescreate"}, {"type": "concept", "id": "inputopenaimessages"}, {"type": "document", "content": "timeout=model_settings.get('timeout', NOT_GIVEN),\n                    reasoning=reasoning,\n         ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2132"}, {"type": "concept", "id": "timeoutmodelsettingsgettimeout"}, {"type": "concept", "id": "reasoningreasoning"}, {"type": "concept", "id": "usermodelsettingsgetuser"}, {"type": "document", "content": "if reasoning_effort is None and reasoning_generate_summary is None:\n                return NOT_GIVEN...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2133"}, {"type": "document", "content": "return {\n                'name': f.name,\n                'parameters': f.parameters_json_schema,\n   ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2134"}, {"type": "concept", "id": "listresponsesresponseinputitemparam"}, {"type": "document", "content": "if isinstance(part, SystemPromptPart):\n                            system_prompt += part.content\n   ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2135"}, {"type": "document", "content": "elif isinstance(part, RetryPromptPart):\n                            # TODO(Marcelo): How do we test ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2136"}, {"type": "concept", "id": "openaimessagesappend"}, {"type": "concept", "id": "conditional"}, {"type": "document", "content": "output=part.model_response(),\n                                    )\n                                ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2137"}, {"type": "concept", "id": "outputpartmodelresponse"}, {"type": "concept", "id": "assertneverpart"}, {"type": "document", "content": "else:\n                    assert_never(message)\n            return system_prompt, openai_messages\n  ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2138"}, {"type": "concept", "id": "responsesresponsefunctiontoolcallparam"}, {"type": "concept", "id": "assertnevermessage"}, {"type": "document", "content": "else:\n                content = []\n                for item in part.content:\n                    if ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2139"}, {"type": "concept", "id": "contentappendresponsesresponseinputtextparamtextitem"}, {"type": "concept", "id": "typeinputtext"}, {"type": "document", "content": ")\n                            )\n                        elif item.is_document:\n                     ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2140"}, {"type": "concept", "id": "itemisdocument"}, {"type": "concept", "id": "contentappend"}, {"type": "concept", "id": "responsesresponseinputfileparam"}, {"type": "concept", "id": "typeinputfile"}, {"type": "concept", "id": "filedatafdataitemmediatypebase64base64encoded"}, {"type": "document", "content": "filename=f'filename.{item.format}',\n                                )\n                            )\n...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2141"}, {"type": "document", "content": "elif isinstance(item, AudioUrl):  # pragma: no cover\n                        client = cached_async_h...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2142"}, {"type": "concept", "id": "cachedasynchttpclient"}, {"type": "document", "content": "client = cached_async_http_client()\n                        response = await client.get(item.url)\n  ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2143"}, {"type": "concept", "id": "clientgetitemurl"}, {"type": "document", "content": "---|---  \n  \n####  __init__...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2144"}, {"type": "document", "content": "__init__(\n        model_name: OpenAIModelName,\n        *,\n        provider: (\n            [Literal](...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2145"}, {"type": "document", "content": "Initialize an OpenAI Responses model.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|--...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2146"}, {"type": "document", "content": "|\n\n    \n    \n    def __init__(\n        self,\n        model_name: OpenAIModelName,\n        *,\n       ...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2147"}, {"type": "document", "content": "The system / model provider.\n\n\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\openai.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\openai.txt:2148"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2148"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2149"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2150"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2151"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2152"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2153"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../../...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2154"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ](.....", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2155"}, {"type": "document", "content": "* repr_xml \n      * SpanQuery \n        * stop_recursing_when \n      * SpanTree \n        * add_spans ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2156"}, {"type": "concept", "id": "reprxml"}, {"type": "concept", "id": "spanquery"}, {"type": "concept", "id": "stoprecursingwhen"}, {"type": "concept", "id": "addspans"}, {"type": "document", "content": "Table of contents\n\n  * otel \n  * SpanNode \n    * duration \n    * descendants \n    * ancestors \n    *...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2157"}, {"type": "concept", "id": "spannode"}, {"type": "document", "content": "90\n     91\n     92\n     93\n     94\n     95\n     96\n     97\n     98\n     99\n    100\n    101\n    102\n ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2158"}, {"type": "document", "content": "178\n    179\n    180\n    181\n    182\n    183\n    184\n    185\n    186\n    187\n    188\n    189\n    190\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2159"}, {"type": "document", "content": "268\n    269\n    270\n    271\n    272\n    273\n    274\n    275\n    276\n    277\n    278\n    279\n    280\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2160"}, {"type": "document", "content": "358\n    359\n    360\n    361\n    362\n    363\n    364\n    365\n    366\n    367\n    368\n    369\n    370\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2161"}, {"type": "document", "content": "|...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2162"}, {"type": "document", "content": "@dataclass(repr=False)\n    class SpanNode:\n        \"\"\"A node in the span tree; provides references t...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2163"}, {"type": "concept", "id": "listspannode"}, {"type": "document", "content": "@property\n        def descendants(self) -> list[SpanNode]:\n            \"\"\"Return all descendants of ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2164"}, {"type": "concept", "id": "descendantsself"}, {"type": "concept", "id": "descendants"}, {"type": "document", "content": "# Construction\n        # -------------------------------------------------------------------------\n ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2165"}, {"type": "concept", "id": "construction"}, {"type": "concept", "id": "postinitself"}, {"type": "concept", "id": "selfparent"}, {"type": "document", "content": "parent_span_id=span.parent.span_id if span.parent else None,\n                start_timestamp=datetim...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2166"}, {"type": "concept", "id": "child"}, {"type": "concept", "id": "parentspanidspanparentspanid"}, {"type": "concept", "id": "spanparent"}, {"type": "document", "content": ")\n            self.children_by_id[child.node_key] = child\n            child.parent = self\n    \n     ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2167"}, {"type": "concept", "id": "predicate"}, {"type": "concept", "id": "spanpredicate"}, {"type": "document", "content": "return next(self._filter_children(predicate), None)\n    \n        def any_child(self, predicate: Span...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2168"}, {"type": "document", "content": "def find_descendants(\n            self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: S...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2169"}, {"type": "document", "content": "def any_descendant(\n            self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: Spa...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2170"}, {"type": "document", "content": "continue\n                stack.extend(node.children)\n    \n        # --------------------------------...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2171"}, {"type": "document", "content": ") -> SpanNode | None:\n            \"\"\"Return the closest ancestor that satisfies the given predicate,...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2172"}, {"type": "document", "content": "node = self.parent\n            while node:\n                if node.matches(predicate):\n             ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2173"}, {"type": "concept", "id": "nodematchespredicate"}, {"type": "document", "content": "return self._matches_query(query)\n    \n        def _matches_query(self, query: SpanQuery) -> bool:  ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2174"}, {"type": "concept", "id": "conditions"}, {"type": "concept", "id": "selfmatchesqueryquery"}, {"type": "document", "content": "if not all(results):\n                    return False\n            # At this point, all existing ANDs...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2175"}, {"type": "document", "content": "if (has_attributes := query.get('has_attributes')) and not all(\n                self.attributes.get(...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2176"}, {"type": "concept", "id": "minduration"}, {"type": "concept", "id": "hasattributeskeys"}, {"type": "document", "content": "if (max_duration := query.get('max_duration')) is not None:\n                if not isinstance(max_du...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2177"}, {"type": "concept", "id": "maxduration"}, {"type": "concept", "id": "minchildcount"}, {"type": "concept", "id": "lenselfchildren"}, {"type": "document", "content": "):\n                return False\n            if (all_children_have := query.get('all_children_have'))...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2178"}, {"type": "concept", "id": "cache"}, {"type": "concept", "id": "selfchildren"}, {"type": "document", "content": "@cache\n            def pruned_descendants():\n                stop_recursing_when = query.get('stop_r...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2179"}, {"type": "concept", "id": "pruneddescendants"}, {"type": "concept", "id": "mindescendantcount"}, {"type": "concept", "id": "lendescendants"}, {"type": "document", "content": "):\n                return False\n            if (all_descendants_have := query.get('all_descendants_h...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2180"}, {"type": "concept", "id": "descendant"}, {"type": "document", "content": "return self.ancestors\n    \n            @cache\n            def pruned_ancestors():\n                st...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2181"}, {"type": "concept", "id": "prunedancestors"}, {"type": "concept", "id": "mindepth"}, {"type": "document", "content": "):\n                return False\n            if (all_ancestors_have := query.get('all_ancestors_have'...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2182"}, {"type": "concept", "id": "ancestor"}, {"type": "concept", "id": "allancestorshave"}, {"type": "document", "content": "self,\n            include_children: bool = True,\n            include_trace_id: bool = False,\n       ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2183"}, {"type": "concept", "id": "includetraceid"}, {"type": "concept", "id": "includespanid"}, {"type": "concept", "id": "includestarttimestamp"}, {"type": "concept", "id": "includechildren"}, {"type": "document", "content": "if include_start_timestamp:\n                first_line_parts.append(f'start_timestamp={self.start_ti...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2184"}, {"type": "concept", "id": "firstlinepartsappendfstarttimestampselfstarttimestampisoformatr"}, {"type": "concept", "id": "includeduration"}, {"type": "concept", "id": "firstlinepartsappendfdurationselfduration"}, {"type": "document", "content": "include_span_id=include_span_id,\n                                include_start_timestamp=include_sta...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2185"}, {"type": "concept", "id": "includespanidincludespanid"}, {"type": "concept", "id": "includestarttimestampincludestarttimestamp"}, {"type": "concept", "id": "includedurationincludeduration"}, {"type": "document", "content": "else:\n                return f\"<SpanNode name={self.name!r} span_id='{self.span_id:016x}' />\"\n    \n ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2186"}, {"type": "concept", "id": "fspannode"}, {"type": "concept", "id": "nameselfnamer"}, {"type": "concept", "id": "spanidselfspanid016x"}, {"type": "document", "content": "duration: [timedelta](https://docs.python.org/3/library/datetime.html#datetime.timedelta \"datetime.t...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2187"}, {"type": "concept", "id": "ancestors"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n\n    \n    \n    151\n    152\n    153\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2188"}, {"type": "concept", "id": "pydanticevalspydanticevalsotelspantreepy"}, {"type": "concept", "id": "addchildself"}, {"type": "document", "content": "find_children(\n        predicate: SpanQuery | SpanPredicate,\n    ) -> [list](https://docs.python.org...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2189"}, {"type": "concept", "id": "immediate"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n\n    \n    \n    167\n    168\n    169\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2190"}, {"type": "document", "content": "171\n    172\n    173\n\n|\n\n    \n    \n    def any_child(self, predicate: SpanQuery | SpanPredicate) -> b...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2191"}, {"type": "concept", "id": "finddescendants"}, {"type": "document", "content": "181\n    182\n    183\n    184\n    185\n\n|\n\n    \n    \n    def find_descendants(\n        self, predicate:...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2192"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n\n    \n    \n    187\n    188\n    189\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2193"}, {"type": "document", "content": "Returns `True` if there is at least one descendant that satisfies the\npredicate.\n\nSource code in `py...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2194"}, {"type": "concept", "id": "least"}, {"type": "document", "content": "find_ancestors(\n        predicate: SpanQuery | SpanPredicate,\n        stop_recursing_when: (\n       ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2195"}, {"type": "document", "content": "first_ancestor(\n        predicate: SpanQuery | SpanPredicate,\n        stop_recursing_when: (\n       ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2196"}, {"type": "concept", "id": "firstancestor"}, {"type": "document", "content": "220\n    221\n    222\n    223\n    224\n\n|\n\n    \n    \n    def first_ancestor(\n        self, predicate: S...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2197"}, {"type": "document", "content": "Returns True if any ancestor satisfies the predicate.\n\nSource code in `pydantic_evals/pydantic_evals...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2198"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n\n    \n    \n    246\n    247\n    248\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2199"}, {"type": "concept", "id": "matchesself"}, {"type": "document", "content": "repr_xml(\n        include_children: [bool](https://docs.python.org/3/library/functions.html#bool) = ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2200"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n\n    \n    \n    380\n    381\n    382\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2201"}, {"type": "document", "content": "def repr_xml(\n        self,\n        include_children: bool = True,\n        include_trace_id: bool = ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2202"}, {"type": "document", "content": "if include_start_timestamp:\n            first_line_parts.append(f'start_timestamp={self.start_timest...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2203"}, {"type": "document", "content": "include_start_timestamp=include_start_timestamp,\n                            include_duration=includ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2204"}, {"type": "concept", "id": "extralinesappendspannode"}, {"type": "concept", "id": "firstlinepartsappendchildren"}, {"type": "document", "content": "Bases: `[TypedDict](https://typing-\nextensions.readthedocs.io/en/latest/index.html#typing_extensions...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2205"}, {"type": "concept", "id": "serializable"}, {"type": "document", "content": "class SpanQuery(TypedDict, total=False):\n        \"\"\"A serializable query for filtering SpanNodes bas...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2206"}, {"type": "concept", "id": "individual"}, {"type": "document", "content": "## Name conditions\n        name_equals: str\n        name_contains: str\n        name_matches_regex: s...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2207"}, {"type": "concept", "id": "listspanquery"}, {"type": "document", "content": "# Recursive conditions\n        stop_recursing_when: SpanQuery\n        \"\"\"If present, stop recursing ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2208"}, {"type": "concept", "id": "depth"}, {"type": "document", "content": "stop_recursing_when: SpanQuery\n    \n\nIf present, stop recursing through ancestors or descendants at ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2209"}, {"type": "concept", "id": "recursing"}, {"type": "document", "content": "438\n    439\n    440\n    441\n    442\n    443\n    444\n    445\n    446\n    447\n    448\n    449\n    450\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2210"}, {"type": "document", "content": "526\n    527\n    528\n    529\n    530\n    531\n    532\n    533\n    534\n    535\n    536\n    537\n    538\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2211"}, {"type": "document", "content": "|...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2212"}, {"type": "document", "content": "@dataclass(repr=False)\n    class SpanTree:\n        \"\"\"A container that builds a hierarchy of SpanNod...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2213"}, {"type": "concept", "id": "dataclassreprfalse"}, {"type": "document", "content": "def add_spans(self, spans: list[SpanNode]) -> None:\n            \"\"\"Add a list of spans to the tree, ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2214"}, {"type": "concept", "id": "readablespans"}, {"type": "concept", "id": "addspansself"}, {"type": "document", "content": "self.nodes_by_id = {node.node_key: node for node in nodes}\n    \n            # Build the parent/child...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2215"}, {"type": "concept", "id": "parentnodekey"}, {"type": "concept", "id": "selfnodesbyidvalues"}, {"type": "concept", "id": "nodeparentnodekey"}, {"type": "concept", "id": "parentnode"}, {"type": "concept", "id": "selfnodesbyid"}, {"type": "document", "content": "parent_node_key = node.parent_node_key\n                if parent_node_key is None or parent_node_key...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2216"}, {"type": "document", "content": "\"\"\"Find the first node that matches a predicate, scanning from each root in DFS order. Returns `None...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2217"}, {"type": "document", "content": "return iter(self.nodes_by_id.values())\n    \n        # ----------------------------------------------...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2218"}, {"type": "concept", "id": "iterselfnodesbyidvalues"}, {"type": "document", "content": "return '<SpanTree />'\n            repr_parts = [\n                '<SpanTree>',\n                *[\n  ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2219"}, {"type": "concept", "id": "reprparts"}, {"type": "concept", "id": "rootreprxml"}, {"type": "document", "content": "return '\\n'.join(repr_parts)\n    \n        def __str__(self):\n            return f'<SpanTree num_root...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2220"}, {"type": "concept", "id": "njoinreprparts"}, {"type": "concept", "id": "strself"}, {"type": "concept", "id": "fspantree"}, {"type": "concept", "id": "numrootslenselfroots"}, {"type": "document", "content": "add_spans(spans: [list](https://docs.python.org/3/library/stdtypes.html#list)[SpanNode]) -> None\n   ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2221"}, {"type": "concept", "id": "listhttpsdocspythonorg3librarystdtypeshtmllistspannode"}, {"type": "concept", "id": "rebuilding"}, {"type": "concept", "id": "addspansspans"}, {"type": "document", "content": "Find all nodes in the entire tree that match the predicate, scanning from each\nroot in DFS order.\n\nS...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2222"}, {"type": "concept", "id": "scanning"}, {"type": "concept", "id": "order"}, {"type": "document", "content": "492\n    493\n    494\n\n|\n\n    \n    \n    def first(self, predicate: SpanQuery | SpanPredicate) -> SpanN...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2223"}, {"type": "document", "content": "496\n    497\n    498\n\n|\n\n    \n    \n    def any(self, predicate: SpanQuery | SpanPredicate) -> bool:\n ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2224"}, {"type": "concept", "id": "anyself"}, {"type": "document", "content": "repr_xml(\n        include_children: [bool](https://docs.python.org/3/library/functions.html#bool) = ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2225"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n\n    \n    \n    512\n    513\n    514\n...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2226"}, {"type": "document", "content": "def repr_xml(\n        self,\n        include_children: bool = True,\n        include_trace_id: bool = ...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2227"}, {"type": "document", "content": "include_span_id=include_span_id,\n                        include_start_timestamp=include_start_times...", "source": "text_data\\otel.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\otel.txt:2228"}, {"type": "concept", "id": "selfroots"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2228"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2229"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2230"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2231"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2232"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2233"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../../...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2234"}, {"type": "document", "content": "* state \n        * node \n        * start_ts \n        * duration \n        * status \n        * kind \n ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2235"}, {"type": "concept", "id": "startts"}, {"type": "concept", "id": "endsnapshot"}, {"type": "document", "content": "* file \n      * FileStatePersistence \n        * json_file \n        * should_set_types \n    * [ pydan...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2236"}, {"type": "document", "content": "Table of contents\n\n  * persistence \n  * SnapshotStatus \n  * NodeSnapshot \n    * state \n    * node \n ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2237"}, {"type": "concept", "id": "shouldsettypes"}, {"type": "document", "content": "# `pydantic_graph.persistence`\n\n###  SnapshotStatus `module-attribute`\n\n    \n    \n    SnapshotStatus...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2238"}, {"type": "document", "content": "History step describing the execution of a node in a graph.\n\nSource code in `pydantic_graph/pydantic...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2239"}, {"type": "concept", "id": "describing"}, {"type": "document", "content": "@dataclass\n    class NodeSnapshot(Generic[StateT, RunEndT]):\n        \"\"\"History step describing the ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2240"}, {"type": "document", "content": "kind: Literal['node'] = 'node'\n        \"\"\"The kind of history step, can be used as a discriminator w...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2241"}, {"type": "concept", "id": "unsetsnapshotid"}, {"type": "concept", "id": "selfid"}, {"type": "concept", "id": "literalnode"}, {"type": "document", "content": "state: StateT\n    \n\nThe state of the graph before the node is run.\n\n####  node `instance-attribute`\n...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2242"}, {"type": "document", "content": "####  duration `class-attribute` `instance-attribute`\n\n    \n    \n    duration: [float](https://docs....", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2243"}, {"type": "document", "content": "Unique ID of the snapshot.\n\n###  EndSnapshot `dataclass`\n\nBases: `[Generic](https://docs.python.org/...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2244"}, {"type": "concept", "id": "unique"}, {"type": "document", "content": "@dataclass\n    class EndSnapshot(Generic[StateT, RunEndT]):\n        \"\"\"History step describing the e...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2245"}, {"type": "document", "content": "self.id = self.node.get_snapshot_id()\n    \n        @property\n        def node(self) -> End[RunEndT]:...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2246"}, {"type": "concept", "id": "selfnodegetsnapshotid"}, {"type": "concept", "id": "nodeself"}, {"type": "document", "content": "state: StateT\n    \n\nThe state of the graph at the end of the run.\n\n####  result `instance-attribute`...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2247"}, {"type": "document", "content": "The kind of history step, can be used as a discriminator when deserializing\nhistory.\n\n####  id `clas...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2248"}, {"type": "concept", "id": "deserializing"}, {"type": "document", "content": "A step in the history of a graph run.\n\n[`Graph.run`](../graph/#pydantic_graph.graph.Graph.run) retur...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2249"}, {"type": "concept", "id": "basestatepersistence"}, {"type": "concept", "id": "graphrungraphpydanticgraphgraphgraphrun"}, {"type": "document", "content": "106\n    107\n    108\n    109\n    110\n    111\n    112\n    113\n    114\n    115\n    116\n    117\n    118\n...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2250"}, {"type": "document", "content": "194\n    195\n    196\n    197\n    198\n    199\n    200\n    201\n    202\n    203\n    204\n    205\n    206\n...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2251"}, {"type": "document", "content": "|...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2252"}, {"type": "document", "content": "class BaseStatePersistence(ABC, Generic[StateT, RunEndT]):\n        \"\"\"Abstract base class for storin...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2253"}, {"type": "document", "content": "raise NotImplementedError\n    \n        @abstractmethod\n        async def snapshot_node_if_new(\n     ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2254"}, {"type": "concept", "id": "notimplementederror"}, {"type": "document", "content": "raise NotImplementedError\n    \n        @abstractmethod\n        async def snapshot_end(self, state: S...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2255"}, {"type": "document", "content": "snapshot_id: The ID of the snapshot to record.\n    \n            Raises:\n                GraphNodeRun...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2256"}, {"type": "concept", "id": "nodesnapshotstatuspydanticgraphpersistencenodesnapshotstatus"}, {"type": "document", "content": "[`NodeSnapshot.duration`][pydantic_graph.persistence.NodeSnapshot.duration] when the run finishes.\n ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2257"}, {"type": "document", "content": "async def load_all(self) -> list[Snapshot[StateT, RunEndT]]:\n            \"\"\"Load the entire history ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.484142", "id": "text_data\\persistence.txt:2258"}, {"type": "concept", "id": "snapshots"}, {"type": "document", "content": "[`should_set_types`][pydantic_graph.persistence.BaseStatePersistence.should_set_types].\n            ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2259"}, {"type": "concept", "id": "shouldsettypespydanticgraphpersistencebasestatepersistenceshouldsettypes"}, {"type": "concept", "id": "selfshouldsettypes"}, {"type": "concept", "id": "utilssetnodestypecontextgraphgetnodes"}, {"type": "document", "content": "\"\"\"Set the types of the state and run end.\n    \n            This can be used to create [type adapter...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2260"}, {"type": "concept", "id": "adapterspydantictypeadapter"}, {"type": "concept", "id": "serializing"}, {"type": "document", "content": "snapshot_node(\n        state: StateT, next_node: [BaseNode](../nodes/#pydantic_graph.nodes.BaseNode ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2261"}, {"type": "concept", "id": "snapshotnode"}, {"type": "document", "content": "This method should add a `NodeSnapshot` to persistence.\n\nParameters:\n\nName | Type | Description | De...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2262"}, {"type": "concept", "id": "nodesnapshot"}, {"type": "document", "content": "|\n\n    \n    \n    @abstractmethod\n    async def snapshot_node(self, state: StateT, next_node: BaseNod...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2263"}, {"type": "document", "content": "snapshot_node_if_new(\n        snapshot_id: [str](https://docs.python.org/3/library/stdtypes.html#str...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2264"}, {"type": "concept", "id": "snapshotnodeifnew"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`snapshot_id` |  `[str](https:/...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2265"}, {"type": "document", "content": "|\n\n    \n    \n    @abstractmethod\n    async def snapshot_node_if_new(\n        self, snapshot_id: str,...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2266"}, {"type": "document", "content": "snapshot_end(state: StateT, end: [End](../nodes/#pydantic_graph.nodes.End \"pydantic_graph.nodes.End\"...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2267"}, {"type": "concept", "id": "pydanticgraphnodesendrunendt"}, {"type": "document", "content": "|\n\n    \n    \n    @abstractmethod\n    async def snapshot_end(self, state: StateT, end: End[RunEndT]) ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2268"}, {"type": "concept", "id": "recordrun"}, {"type": "document", "content": "Record the run of the node, or error if the node is already running.\n\nParameters:\n\nName | Type | Des...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2269"}, {"type": "concept", "id": "already"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[AbstractAsyncContextManager](https://docs.python.org/3/library/cont...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2270"}, {"type": "concept", "id": "nodesnapshotstatus"}, {"type": "concept", "id": "abstractasynccontextmanagerhttpsdocspythonorg3librarycontextlibhtmlcontextlibabstractasynccontextmanager"}, {"type": "concept", "id": "contextlibabstractasynccontextmanagernone"}, {"type": "document", "content": "@abstractmethod\n    def record_run(self, snapshot_id: str) -> AbstractAsyncContextManager[None]:\n   ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2271"}, {"type": "document", "content": "[`NodeSnapshot.start_ts`][pydantic_graph.persistence.NodeSnapshot.start_ts] when the run starts.\n   ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2272"}, {"type": "concept", "id": "nodesnapshotstarttspydanticgraphpersistencenodesnapshotstartts"}, {"type": "concept", "id": "starts"}, {"type": "concept", "id": "success"}, {"type": "document", "content": "load_next() -> NodeSnapshot[StateT, RunEndT] | None\n    \n\nRetrieve a node snapshot with status `'cre...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2273"}, {"type": "concept", "id": "loadnext"}, {"type": "concept", "id": "nodesnapshotstatet"}, {"type": "document", "content": "|\n\n    \n    \n    @abstractmethod\n    async def load_next(self) -> NodeSnapshot[StateT, RunEndT] | No...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2274"}, {"type": "document", "content": "Load the entire history of snapshots.\n\n`load_all` is not used by pydantic-graph itself, instead it's...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2275"}, {"type": "concept", "id": "entire"}, {"type": "concept", "id": "loadall"}, {"type": "document", "content": "|\n\n    \n    \n    @abstractmethod\n    async def load_all(self) -> list[Snapshot[StateT, RunEndT]]:\n  ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2276"}, {"type": "concept", "id": "loadallself"}, {"type": "document", "content": "Set the types of the state and run end from a graph.\n\nYou generally won't need to customise this met...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2277"}, {"type": "document", "content": "|\n\n    \n    \n    def set_graph_types(self, graph: Graph[StateT, Any, RunEndT]) -> None:\n        \"\"\"S...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2278"}, {"type": "concept", "id": "setgraphtypesself"}, {"type": "concept", "id": "graphstatet"}, {"type": "document", "content": "Whether types need to be set.\n\nImplementations should override this method to return `True` when typ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2279"}, {"type": "document", "content": "Set the types of the state and run end.\n\nThis can be used to create [type\nadapters](https://docs.pyd...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2280"}, {"type": "concept", "id": "adaptershttpsdocspydanticdevlatestapitypeadapterpydantictypeadaptertypeadapter"}, {"type": "document", "content": "|\n\n    \n    \n    def set_types(self, state_type: type[StateT], run_end_type: type[RunEndT]) -> None:...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2281"}, {"type": "concept", "id": "settypesself"}, {"type": "concept", "id": "typestatet"}, {"type": "document", "content": "build_snapshot_list_type_adapter(\n        state_t: [type](https://docs.python.org/3/library/function...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2282"}, {"type": "concept", "id": "buildsnapshotlisttypeadapter"}, {"type": "concept", "id": "typehttpsdocspythonorg3libraryfunctionshtmltypestatet"}, {"type": "concept", "id": "typehttpsdocspythonorg3libraryfunctionshtmltyperunendt"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n\n    \n    \n    228\n    229\n  ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2283"}, {"type": "concept", "id": "pydanticgraphpydanticgraphpersistenceinitpy"}, {"type": "document", "content": "|\n\n    \n    \n    def build_snapshot_list_type_adapter(\n        state_t: type[StateT], run_end_t: typ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2284"}, {"type": "concept", "id": "memory"}, {"type": "document", "content": "This module provides simple in memory state persistence for graphs.\n\n###  SimpleStatePersistence `da...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2285"}, {"type": "concept", "id": "module"}, {"type": "document", "content": "@dataclass\n    class SimpleStatePersistence(BaseStatePersistence[StateT, RunEndT]):\n        \"\"\"Simpl...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2286"}, {"type": "document", "content": ") -> None:\n            if self.last_snapshot and self.last_snapshot.id == snapshot_id:\n             ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2287"}, {"type": "concept", "id": "selflastsnapshot"}, {"type": "concept", "id": "selflastsnapshotid"}, {"type": "document", "content": "exceptions.GraphNodeStatusError.check(self.last_snapshot.status)\n            self.last_snapshot.stat...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2288"}, {"type": "concept", "id": "selflastsnapshotstatus"}, {"type": "concept", "id": "perfcounter"}, {"type": "concept", "id": "selflastsnapshotduration"}, {"type": "concept", "id": "exceptionsgraphnodestatuserrorcheckselflastsnapshotstatus"}, {"type": "document", "content": "self.last_snapshot.status = 'pending'\n                return self.last_snapshot\n    \n        async d...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2289"}, {"type": "concept", "id": "pending"}, {"type": "document", "content": "last_snapshot: Snapshot[StateT, RunEndT] | None = None\n    \n\nThe last snapshot.\n\n###  FullStatePersi...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2290"}, {"type": "concept", "id": "lastsnapshot"}, {"type": "concept", "id": "snapshotstatet"}, {"type": "concept", "id": "fullstatepersistence"}, {"type": "document", "content": "Source code in `pydantic_graph/pydantic_graph/persistence/in_mem.py`\n\n    \n    \n     85\n     86\n    ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2291"}, {"type": "concept", "id": "pydanticgraphpydanticgraphpersistenceinmempy"}, {"type": "document", "content": "@dataclass\n    class FullStatePersistence(BaseStatePersistence[StateT, RunEndT]):\n        \"\"\"In memo...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2292"}, {"type": "document", "content": "default=None, init=False, repr=False\n        )\n    \n        async def snapshot_node(self, state: Sta...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2293"}, {"type": "document", "content": "snapshot = EndSnapshot(\n                state=self._prep_state(state),\n                result=end.de...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2294"}, {"type": "concept", "id": "stateselfprepstatestate"}, {"type": "document", "content": "snapshot.start_ts = _utils.now_utc()\n            start = perf_counter()\n            try:\n           ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2295"}, {"type": "concept", "id": "snapshotduration"}, {"type": "document", "content": "return self.history\n    \n        def should_set_types(self) -> bool:\n            return self._snapsh...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2296"}, {"type": "concept", "id": "selfsnapshotstypeadapter"}, {"type": "document", "content": "\"\"\"Load the history from JSON.\"\"\"\n            assert self._snapshots_type_adapter is not None, 'type...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2297"}, {"type": "document", "content": "deep_copy: [bool](https://docs.python.org/3/library/functions.html#bool) = True\n    \n\nWhether to dee...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2298"}, {"type": "concept", "id": "taken"}, {"type": "document", "content": "List of snapshots taken during the graph run.\n\n####  dump_json\n\n    \n    \n    dump_json(*, indent: [...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2299"}, {"type": "concept", "id": "dumpjson"}, {"type": "document", "content": "load_json(json_data: [str](https://docs.python.org/3/library/stdtypes.html#str) | [bytes](https://do...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2300"}, {"type": "concept", "id": "loadjsonjsondata"}, {"type": "concept", "id": "bytearrayhttpsdocspythonorg3librarystdtypeshtmlbytearray"}, {"type": "document", "content": "Bases: `BaseStatePersistence[StateT, RunEndT]`\n\nFile based state persistence that hold graph run sta...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2301"}, {"type": "concept", "id": "basestatepersistencestatet"}, {"type": "document", "content": "29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     39\n     40\n     41\n ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2302"}, {"type": "document", "content": "117\n    118\n    119\n    120\n    121\n    122\n    123\n    124\n    125\n    126\n    127\n    128\n    129\n...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2303"}, {"type": "document", "content": "|...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2304"}, {"type": "document", "content": "@dataclass\n    class FileStatePersistence(BaseStatePersistence[StateT, RunEndT]):\n        \"\"\"File ba...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2305"}, {"type": "concept", "id": "run123abc"}, {"type": "document", "content": "```\n        \"\"\"\n        _snapshots_type_adapter: pydantic.TypeAdapter[list[Snapshot[StateT, RunEndT]...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2306"}, {"type": "document", "content": "async def snapshot_end(self, state: StateT, end: End[RunEndT]) -> None:\n            await self._appe...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2307"}, {"type": "document", "content": "exceptions.GraphNodeStatusError.check(snapshot.status)\n                snapshot.status = 'running'\n ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2308"}, {"type": "document", "content": "async def load_next(self) -> NodeSnapshot[StateT, RunEndT] | None:\n            async with self._lock...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2309"}, {"type": "document", "content": "async def load_all(self) -> list[Snapshot[StateT, RunEndT]]:\n            return await _graph_utils.r...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2310"}, {"type": "concept", "id": "listsnapshotstatet"}, {"type": "document", "content": "snapshot = next(s for s in snapshots if s.id == snapshot_id)\n            assert isinstance(snapshot,...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2311"}, {"type": "document", "content": "async def _append_save(self, snapshot: Snapshot[StateT, RunEndT], *, lock: bool = True) -> None:\n   ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2312"}, {"type": "concept", "id": "appendsaveself"}, {"type": "document", "content": "Args:\n                timeout: how long to wait for the lock\n    \n            Returns: an async cont...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2313"}, {"type": "concept", "id": "lockid"}, {"type": "document", "content": "json_file: [Path](https://docs.python.org/3/library/pathlib.html#pathlib.Path \"pathlib.Path\")\n    \n\n...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2314"}, {"type": "concept", "id": "jsonfile"}, {"type": "document", "content": "Whether types need to be set.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/file.py`\n\n ...", "source": "text_data\\persistence.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\persistence.txt:2315"}, {"type": "concept", "id": "pydanticgraphpydanticgraphpersistencefilepy"}, {"type": "concept", "id": "shouldsettypesself"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\npydantic_ai....", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2315"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2316"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2317"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2318"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2319"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../result/)\n    * [ pydantic_ai.messages  ](../messages/)\n    * [ pydantic...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2320"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../models/instrumented/)\n    * [ pydantic_ai.models.mistral  ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2321"}, {"type": "concept", "id": "pydanticaiproviders"}, {"type": "concept", "id": "modelsmistral"}, {"type": "document", "content": "* __init__ \n      * groq \n      * GroqProvider \n        * __init__ \n      * azure \n      * AzureProv...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2322"}, {"type": "document", "content": "* [ pydantic_evals.reporting  ](../pydantic_evals/reporting/)\n    * [ pydantic_evals.otel  ](../pyda...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2323"}, {"type": "document", "content": "Table of contents\n\n  * Provider \n  * name \n  * base_url \n  * client \n  * google_vertex \n  * GoogleVe...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2324"}, {"type": "concept", "id": "baseurl"}, {"type": "document", "content": "The provider is in charge of providing an authenticated client to the API.\n\nEach provider only suppo...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2325"}, {"type": "concept", "id": "charge"}, {"type": "concept", "id": "providing"}, {"type": "document", "content": "class Provider(ABC, Generic[InterfaceClient]):\n        \"\"\"Abstract class for a provider.\n    \n      ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2326"}, {"type": "document", "content": "\"\"\"The base URL for the provider API.\"\"\"\n            raise NotImplementedError()\n    \n        @prope...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2327"}, {"type": "document", "content": "name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe provider name.\n\n###  base...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2328"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/providers/google_vertex.py`\n\n    \n    \n     30\n     31\n...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2329"}, {"type": "concept", "id": "pydanticaislimpydanticaiprovidersgooglevertexpy"}, {"type": "document", "content": "class GoogleVertexProvider(Provider[httpx.AsyncClient]):\n        \"\"\"Provider for Vertex AI API.\"\"\"\n ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2330"}, {"type": "concept", "id": "googlevertexproviderproviderhttpxasyncclient"}, {"type": "document", "content": "*,\n            service_account_file: Path | str | None = None,\n            project_id: str | None = ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2331"}, {"type": "concept", "id": "serviceaccountfile"}, {"type": "concept", "id": "vertexairegion"}, {"type": "concept", "id": "uscentral1"}, {"type": "document", "content": "*,\n            service_account_file: Path | str | None = None,\n            service_account_info: Map...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2332"}, {"type": "concept", "id": "serviceaccountinfo"}, {"type": "concept", "id": "mappingstr"}, {"type": "document", "content": "service_account_info: The loaded service_account_file contents.\n                    If not provided,...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2333"}, {"type": "concept", "id": "publishers"}, {"type": "document", "content": "http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n            \"\"\"\n      ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2334"}, {"type": "concept", "id": "httpclient"}, {"type": "document", "content": "self._client.base_url = self.base_url\n      \n  \n---|---  \n  \n####  __init__...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2335"}, {"type": "concept", "id": "selfclientbaseurl"}, {"type": "concept", "id": "selfbaseurl"}, {"type": "document", "content": "__init__(\n        *,\n        service_account_file: [Path](https://docs.python.org/3/library/pathlib....", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2336"}, {"type": "document", "content": ") -> None\n    \n    \n    \n    __init__(\n        *,\n        service_account_info: [Mapping](https://do...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2337"}, {"type": "concept", "id": "mappinghttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcmapping"}, {"type": "concept", "id": "collectionsabcmappingstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "document", "content": ") -> None\n    \n    \n    \n    __init__(\n        *,\n        service_account_file: [Path](https://docs....", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2338"}, {"type": "document", "content": "http_client: AsyncClient | None = None\n    ) -> None...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2339"}, {"type": "concept", "id": "asyncclient"}, {"type": "document", "content": "Create a new Vertex AI provider.\n\nParameters:...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2340"}, {"type": "concept", "id": "vertex"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`service_account_file` |  `[Path](https://do...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2341"}, {"type": "document", "content": "`project_id` |  `[str](https://docs.python.org/3/library/stdtypes.html#str) | None` |  The project I...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2342"}, {"type": "document", "content": "`http_client` |  `AsyncClient | None` |  An existing `httpx.AsyncClient` to use for making HTTP requ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2343"}, {"type": "document", "content": "72\n     73\n     74\n     75\n     76\n     77\n     78\n     79\n     80\n     81\n     82\n     83\n     84\n ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2344"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        service_account_file: Path | str | None = None,\n     ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2345"}, {"type": "document", "content": "project_id: The project ID to use, if not provided it will be taken from the credentials.\n          ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2346"}, {"type": "document", "content": "\"\"\"\n        if service_account_file and service_account_info:\n            raise ValueError('Only one...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2347"}, {"type": "document", "content": "Bases: `Provider[AsyncOpenAI]`\n\nProvider for OpenAI API.\n\nSource code in `pydantic_ai_slim/pydantic_...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2348"}, {"type": "concept", "id": "providerasyncopenai"}, {"type": "document", "content": "class OpenAIProvider(Provider[AsyncOpenAI]):\n        \"\"\"Provider for OpenAI API.\"\"\"\n    \n        @pr...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2349"}, {"type": "concept", "id": "asyncopenai"}, {"type": "document", "content": "\"\"\"Create a new OpenAI provider.\n    \n            Args:\n                base_url: The base url for t...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2350"}, {"type": "document", "content": "http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n            \"\"\"\n      ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2351"}, {"type": "concept", "id": "openaiclient"}, {"type": "document", "content": "assert api_key is None, 'Cannot provide both `openai_client` and `api_key`'\n                self._cl...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2352"}, {"type": "concept", "id": "asyncopenaibaseurlbaseurl"}, {"type": "document", "content": "__init__(\n        base_url: [str](https://docs.python.org/3/library/stdtypes.html#str) | None = None...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2353"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`base_url` |  `[str](https://docs.python.org...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2354"}, {"type": "document", "content": "`http_client` |  `AsyncClient | None` |  An existing `httpx.AsyncClient` to use for making HTTP requ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2355"}, {"type": "document", "content": "34\n    35\n    36\n    37\n    38\n    39\n    40\n    41\n    42\n    43\n    44\n    45\n    46\n    47\n    48...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2356"}, {"type": "document", "content": "def __init__(\n        self,\n        base_url: str | None = None,\n        api_key: str | None = None,...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2357"}, {"type": "document", "content": "openai_client: An existing\n                [`AsyncOpenAI`](https://github.com/openai/openai-python?t...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2358"}, {"type": "document", "content": "if openai_client is not None:\n            assert base_url is None, 'Cannot provide both `openai_clie...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2359"}, {"type": "document", "content": "Bases: `Provider[AsyncOpenAI]`\n\nProvider for DeepSeek API.\n\nSource code in `pydantic_ai_slim/pydanti...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2360"}, {"type": "concept", "id": "deepseek"}, {"type": "document", "content": "class DeepSeekProvider(Provider[AsyncOpenAI]):\n        \"\"\"Provider for DeepSeek API.\"\"\"\n    \n       ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2361"}, {"type": "document", "content": "def __init__(\n            self,\n            *,\n            api_key: str | None = None,\n            o...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2362"}, {"type": "concept", "id": "asynchttpclient"}, {"type": "document", "content": "elif http_client is not None:\n                self._client = AsyncOpenAI(base_url=self.base_url, api...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2363"}, {"type": "concept", "id": "asyncopenaibaseurlselfbaseurl"}, {"type": "concept", "id": "apikeyapikey"}, {"type": "concept", "id": "httpclienthttpclient"}, {"type": "document", "content": "Bases: `Provider[BaseClient]`\n\nProvider for AWS Bedrock.\n\nSource code in `pydantic_ai_slim/pydantic_...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2364"}, {"type": "document", "content": "class BedrockProvider(Provider[BaseClient]):\n        \"\"\"Provider for AWS Bedrock.\"\"\"\n    \n        @p...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2365"}, {"type": "concept", "id": "baseclient"}, {"type": "document", "content": "aws_session_token: str | None = None,\n            aws_read_timeout: float | None = None,\n           ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2366"}, {"type": "concept", "id": "awssessiontoken"}, {"type": "concept", "id": "awsreadtimeout"}, {"type": "concept", "id": "awsconnecttimeout"}, {"type": "concept", "id": "bedrockclient"}, {"type": "document", "content": "region_name: The AWS region name.\n                aws_access_key_id: The AWS access key ID.\n        ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2367"}, {"type": "document", "content": "self._client = boto3.client(  # type: ignore[reportUnknownMemberType]\n                        'bedro...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2368"}, {"type": "concept", "id": "boto3client"}, {"type": "concept", "id": "bedrockruntime"}, {"type": "concept", "id": "awsaccesskeyidawsaccesskeyid"}, {"type": "document", "content": "__init__(*, bedrock_client: BaseClient) -> None\n    \n    \n    \n    __init__(\n        *,\n        regi...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2369"}, {"type": "concept", "id": "regionname"}, {"type": "document", "content": ") -> None\n    \n    \n    \n    __init__(\n        *,\n        bedrock_client: BaseClient | None = None,\n...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2370"}, {"type": "document", "content": "Initialize the Bedrock provider.\n\nParameters:...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2371"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`bedrock_client` |  `BaseClient | None` |  A...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2372"}, {"type": "document", "content": "`aws_read_timeout` |  `[float](https://docs.python.org/3/library/functions.html#float) | None` |  Th...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2373"}, {"type": "document", "content": "51\n    52\n    53\n    54\n    55\n    56\n    57\n    58\n    59\n    60\n    61\n    62\n    63\n    64\n    65...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2374"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        bedrock_client: BaseClient | None = None,\n        reg...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2375"}, {"type": "concept", "id": "awsaccesskeyid"}, {"type": "concept", "id": "awssecretaccesskey"}, {"type": "document", "content": "aws_session_token: The AWS session token.\n            aws_read_timeout: The read timeout for Bedrock...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2376"}, {"type": "document", "content": "aws_secret_access_key=aws_secret_access_key,\n                    aws_session_token=aws_session_token...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2377"}, {"type": "concept", "id": "awssecretaccesskeyawssecretaccesskey"}, {"type": "concept", "id": "awssessiontokenawssessiontoken"}, {"type": "concept", "id": "regionnameregionname"}, {"type": "concept", "id": "configconfigreadtimeoutreadtimeout"}, {"type": "concept", "id": "connecttimeoutconnecttimeout"}, {"type": "document", "content": "Bases: `Provider[AsyncGroq]`\n\nProvider for Groq API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/p...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2378"}, {"type": "concept", "id": "pydanticaislimpydanticaiprovidersgroqpy"}, {"type": "document", "content": "class GroqProvider(Provider[AsyncGroq]):\n        \"\"\"Provider for Groq API.\"\"\"\n    \n        @property...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2379"}, {"type": "concept", "id": "asyncgroq"}, {"type": "document", "content": "groq_client: AsyncGroq | None = None,\n            http_client: AsyncHTTPClient | None = None,\n      ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2380"}, {"type": "concept", "id": "groqclient"}, {"type": "document", "content": "\"\"\"\n            if groq_client is not None:\n                assert http_client is None, 'Cannot prov...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2381"}, {"type": "document", "content": "else:\n                    http_client = cached_async_http_client(provider='groq')\n                  ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2382"}, {"type": "concept", "id": "cachedasynchttpclientprovidergroq"}, {"type": "concept", "id": "asyncgroqbaseurlselfbaseurl"}, {"type": "document", "content": "__init__(*, groq_client: AsyncGroq | None = None) -> None\n    \n    \n    \n    __init__(\n        *,\n  ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2383"}, {"type": "document", "content": "Create a new Groq provider.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`a...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2384"}, {"type": "document", "content": "42\n    43\n    44\n    45\n    46\n    47\n    48\n    49\n    50\n    51\n    52\n    53\n    54\n    55\n    56...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2385"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        api_key: str | None = None,\n        groq_client: Asyn...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2386"}, {"type": "document", "content": "\"\"\"\n        if groq_client is not None:\n            assert http_client is None, 'Cannot provide both...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2387"}, {"type": "document", "content": "else:\n                http_client = cached_async_http_client(provider='groq')\n                self._...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2388"}, {"type": "document", "content": "Bases: `Provider[AsyncOpenAI]`\n\nProvider for Azure OpenAI API.\n\nSee <https://azure.microsoft.com/en-...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2389"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/providers/azure.py`\n\n    \n    \n     22\n     23\n     24\n...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2390"}, {"type": "concept", "id": "pydanticaislimpydanticaiprovidersazurepy"}, {"type": "document", "content": "class AzureProvider(Provider[AsyncOpenAI]):\n        \"\"\"Provider for Azure OpenAI API.\n    \n        S...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2391"}, {"type": "document", "content": "api_version: str | None = None,\n            api_key: str | None = None,\n            http_client: htt...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2392"}, {"type": "concept", "id": "apiversion"}, {"type": "concept", "id": "azureendpoint"}, {"type": "document", "content": "environment variable will be used if available.\n                api_version: The API version to use ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2393"}, {"type": "document", "content": "\"\"\"\n            if openai_client is not None:\n                assert azure_endpoint is None, 'Cannot...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2394"}, {"type": "document", "content": ")\n    \n                if not api_key and 'OPENAI_API_KEY' not in os.environ:  # pragma: no cover\n  ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2395"}, {"type": "concept", "id": "openaiapikey"}, {"type": "concept", "id": "osenviron"}, {"type": "document", "content": "azure_endpoint=azure_endpoint,\n                    api_key=api_key,\n                    api_version=...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2396"}, {"type": "concept", "id": "azureendpointazureendpoint"}, {"type": "concept", "id": "apiversionapiversion"}, {"type": "document", "content": "__init__(*, openai_client: AsyncAzureOpenAI) -> None\n    \n    \n    \n    __init__(\n        *,\n       ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2397"}, {"type": "document", "content": "openai_client: AsyncAzureOpenAI | None = None,\n        http_client: AsyncClient | None = None\n    ) ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2398"}, {"type": "document", "content": "Create a new Azure provider.\n\nParameters:...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2399"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`azure_endpoint` |  `[str](https://docs.pyth...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2400"}, {"type": "document", "content": "`openai_client` |  `AsyncAzureOpenAI | None` |  An existing [`AsyncAzureOpenAI`](https://github.com/...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2401"}, {"type": "concept", "id": "asyncazureopenaihttpsgithubcomopenaiopenaipythonmicrosoftazureopenai"}, {"type": "document", "content": "54\n     55\n     56\n     57\n     58\n     59\n     60\n     61\n     62\n     63\n     64\n     65\n     66\n ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2402"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        azure_endpoint: str | None = None,\n        api_versio...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2403"}, {"type": "document", "content": "environment variable will be used if available.\n            api_key: The API key to use for authenti...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2404"}, {"type": "document", "content": "assert http_client is None, 'Cannot provide both `openai_client` and `http_client`'\n            asse...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2405"}, {"type": "document", "content": "raise UserError(\n                    'Must provide one of the `api_key` argument or the `OPENAI_API_...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2406"}, {"type": "concept", "id": "usererror"}, {"type": "document", "content": ")\n            self._base_url = str(self._client.base_url)\n      \n  \n---|---  \n  \n###  CohereProvider...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2407"}, {"type": "concept", "id": "strselfclientbaseurl"}, {"type": "document", "content": "Bases: `Provider[AsyncClientV2]`\n\nProvider for Cohere API.\n\nSource code in `pydantic_ai_slim/pydanti...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2408"}, {"type": "concept", "id": "providerasyncclientv2"}, {"type": "document", "content": "class CohereProvider(Provider[AsyncClientV2]):\n        \"\"\"Provider for Cohere API.\"\"\"\n    \n        @...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2409"}, {"type": "concept", "id": "asyncclientv2"}, {"type": "document", "content": "\"\"\"Create a new Cohere provider.\n    \n            Args:\n                api_key: The API key to use ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2410"}, {"type": "concept", "id": "cohereclient"}, {"type": "document", "content": "self._client = cohere_client\n            else:\n                api_key = api_key or os.environ.get('...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2411"}, {"type": "concept", "id": "osenvirongetcoapikey"}, {"type": "document", "content": "http_client = cached_async_http_client(provider='cohere')\n                    self._client = AsyncCl...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2412"}, {"type": "concept", "id": "cachedasynchttpclientprovidercohere"}, {"type": "concept", "id": "asyncclientv2apikeyapikey"}, {"type": "concept", "id": "httpxclienthttpclient"}, {"type": "document", "content": "__init__(\n        *,\n        api_key: [str](https://docs.python.org/3/library/stdtypes.html#str) | N...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2413"}, {"type": "document", "content": "Create a new Cohere provider.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2414"}, {"type": "document", "content": "36\n    37\n    38\n    39\n    40\n    41\n    42\n    43\n    44\n    45\n    46\n    47\n    48\n    49\n    50...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2415"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        api_key: str | None = None,\n        cohere_client: As...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2416"}, {"type": "document", "content": "\"\"\"\n        if cohere_client is not None:\n            assert http_client is None, 'Cannot provide bo...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2417"}, {"type": "document", "content": "else:\n                http_client = cached_async_http_client(provider='cohere')\n                self...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2418"}, {"type": "document", "content": "Bases: `Provider[Mistral]`\n\nProvider for Mistral API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2419"}, {"type": "document", "content": "class MistralProvider(Provider[Mistral]):\n        \"\"\"Provider for Mistral API.\"\"\"\n    \n        @prop...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2420"}, {"type": "document", "content": "mistral_client: Mistral | None = None,\n            http_client: AsyncHTTPClient | None = None,\n     ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2421"}, {"type": "concept", "id": "mistralclient"}, {"type": "document", "content": "assert api_key is None, 'Cannot provide both `mistral_client` and `api_key`'\n                self._c...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2422"}, {"type": "document", "content": "http_client = cached_async_http_client(provider='mistral')\n                    self._client = Mistra...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2423"}, {"type": "concept", "id": "cachedasynchttpclientprovidermistral"}, {"type": "concept", "id": "mistralapikeyapikey"}, {"type": "concept", "id": "asyncclienthttpclient"}, {"type": "document", "content": "__init__(*, mistral_client: Mistral | None = None) -> None\n    \n    \n    \n    __init__(\n        *,\n ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2424"}, {"type": "document", "content": "Create a new Mistral provider.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---  ...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2425"}, {"type": "document", "content": "42\n    43\n    44\n    45\n    46\n    47\n    48\n    49\n    50\n    51\n    52\n    53\n    54\n    55\n    56...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2426"}, {"type": "document", "content": "def __init__(\n        self,\n        *,\n        api_key: str | None = None,\n        mistral_client: M...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2427"}, {"type": "document", "content": "assert api_key is None, 'Cannot provide both `mistral_client` and `api_key`'\n            self._clien...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2428"}, {"type": "document", "content": "---|---  \n  \n\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\providers.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\providers.txt:2429"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nPydantic Mod...", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2429"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2430"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2431"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2432"}, {"type": "document", "content": "* Pydantic Model  [ Pydantic Model  ](./) Table of contents \n      * Running the Example \n      * Ex...", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2433"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../../api/messages/)\n    * [ pydantic_ai.exceptions  ](../../api/excepti...", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2434"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../api/models/groq/)\n    * [ pydantic_ai.models.instrumented  ](.....", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2435"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../api/pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ...", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2436"}, {"type": "document", "content": "Table of contents\n\n  * Running the Example \n  * Example Code \n\n# Pydantic Model\n\nSimple example of u...", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2437"}, {"type": "document", "content": "pipuv\n\n    \n    \n    PYDANTIC_AI_MODEL=gemini-1.5-pro python -m pydantic_ai_examples.pydantic_model\n...", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2438"}, {"type": "concept", "id": "pydanticaimodelgemini15pro"}, {"type": "concept", "id": "pydanticaimodelgemini15flash"}, {"type": "document", "content": "## Example Code\n\npydantic_model.py\n\n    \n    \n    import os\n    \n    import logfire\n    from pydanti...", "source": "text_data\\pydantic-model.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\pydantic-model.txt:2439"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nQuestion Gra...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2439"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2440"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2441"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2442"}, {"type": "document", "content": "* [ Pydantic Model  ](../pydantic-model/)\n    * [ Weather agent  ](../weather-agent/)\n    * [ Bank s...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2443"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../../api/messages/)\n    * [ pydantic_ai.exceptions  ](../../api/excepti...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2444"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../api/models/groq/)\n    * [ pydantic_ai.models.instrumented  ](.....", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2445"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../api/pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2446"}, {"type": "document", "content": "Table of contents\n\n  * Running the Example \n  * Example Code \n\n# Question Graph\n\nExample of a graph ...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2447"}, {"type": "concept", "id": "pydanticaiexamplesquestiongraph"}, {"type": "document", "content": "from __future__ import annotations as _annotations\n    \n    from dataclasses import dataclass, field...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2448"}, {"type": "document", "content": "@dataclass\n    class QuestionState:\n        question: str | None = None\n        ask_agent_messages: ...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2449"}, {"type": "concept", "id": "fielddefaultfactorylist"}, {"type": "document", "content": "@dataclass\n    class Answer(BaseNode[QuestionState]):\n        question: str\n    \n        async def r...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2450"}, {"type": "concept", "id": "correct"}, {"type": "document", "content": "@dataclass\n    class Evaluate(BaseNode[QuestionState, None, str]):\n        answer: str\n    \n        ...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2451"}, {"type": "concept", "id": "ctxstatequestion"}, {"type": "document", "content": "@dataclass\n    class Reprimand(BaseNode[QuestionState]):\n        comment: str\n    \n        async def...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2452"}, {"type": "concept", "id": "reprimandbasenodequestionstate"}, {"type": "concept", "id": "comment"}, {"type": "document", "content": "persistence.set_graph_types(question_graph)\n    \n        if snapshot := await persistence.load_next(...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2453"}, {"type": "concept", "id": "persistencesetgraphtypesquestiongraph"}, {"type": "document", "content": "history = await persistence.load_all()\n                    print('history:', '\\n'.join(str(e.node) f...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2454"}, {"type": "concept", "id": "subcommand"}, {"type": "document", "content": "'or:\\n'\n                '  uv run -m pydantic_ai_examples.question_graph continuous\\n'\n             ...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2455"}, {"type": "concept", "id": "continuousn"}, {"type": "concept", "id": "filesysstderr"}, {"type": "document", "content": "The mermaid diagram generated in this example looks like this:\n\n\u00a9 Pydantic Services Inc. 2024 to pre...", "source": "text_data\\question-graph.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\question-graph.txt:2456"}, {"type": "concept", "id": "looks"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nRAG\n\nType to...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2456"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2457"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2458"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2459"}, {"type": "document", "content": "* [ Pydantic Model  ](../pydantic-model/)\n    * [ Weather agent  ](../weather-agent/)\n    * [ Bank s...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2460"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../../api/messages/)\n    * [ pydantic_ai.exceptions  ](../../api/excepti...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2461"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../api/models/groq/)\n    * [ pydantic_ai.models.instrumented  ](.....", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2462"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../api/pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2463"}, {"type": "document", "content": "Table of contents\n\n  * Example Code \n\n# RAG\n\nRAG search example. This demo allows you to ask questio...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2464"}, {"type": "document", "content": "mkdir postgres-data\n    docker run --rm \\\n      -e POSTGRES_PASSWORD=postgres \\\n      -p 54320:5432 ...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2465"}, {"type": "concept", "id": "postgres"}, {"type": "concept", "id": "mkdir"}, {"type": "concept", "id": "postgresdata"}, {"type": "concept", "id": "docker"}, {"type": "document", "content": "pipuv\n\n    \n    \n    python -m pydantic_ai_examples.rag build\n    \n    \n    \n    uv run -m pydantic_...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2466"}, {"type": "concept", "id": "pydanticaiexamplesrag"}, {"type": "document", "content": "from __future__ import annotations as _annotations\n    \n    import asyncio\n    import re\n    import ...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2467"}, {"type": "document", "content": "@dataclass\n    class Deps:\n        openai: AsyncOpenAI\n        pool: asyncpg.Pool\n    \n    \n    agen...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2468"}, {"type": "concept", "id": "searchquery"}, {"type": "concept", "id": "embedding"}, {"type": "document", "content": ")\n    \n        assert len(embedding.data) == 1, (\n            f'Expected 1 embedding, got {len(embed...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2469"}, {"type": "concept", "id": "lenembeddingdata"}, {"type": "concept", "id": "embeddingjson"}, {"type": "concept", "id": "fexpected"}, {"type": "document", "content": "openai = AsyncOpenAI()\n        logfire.instrument_openai(openai)\n    \n        logfire.info('Asking \"...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2470"}, {"type": "concept", "id": "logfireinstrumentopenaiopenai"}, {"type": "concept", "id": "logfireinfoasking"}, {"type": "document", "content": "DOCS_JSON = (\n        'https://gist.githubusercontent.com/'\n        'samuelcolvin/4b5bb9bb163b1122ff...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2471"}, {"type": "concept", "id": "docsjson"}, {"type": "concept", "id": "httpsgistgithubusercontentcom"}, {"type": "concept", "id": "samuelcolvin4b5bb9bb163b1122ff17e29e48c10992raw"}, {"type": "concept", "id": "80c5925c42f1442c24963aaf5eb1a324d47afe95logfiredocsjson"}, {"type": "document", "content": "async with conn.transaction():\n                        await conn.execute(DB_SCHEMA)\n    \n          ...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2472"}, {"type": "concept", "id": "section"}, {"type": "document", "content": "return\n    \n            with logfire.span('create embedding for {url=}', url=url):\n                e...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2473"}, {"type": "document", "content": "section.title,\n                section.content,\n                embedding_json,\n            )\n    \n ...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2474"}, {"type": "concept", "id": "selfpath"}, {"type": "concept", "id": "sectiontitle"}, {"type": "concept", "id": "sectioncontent"}, {"type": "document", "content": "# pyright: reportUnknownVariableType=false\n    @asynccontextmanager\n    async def database_connect(\n...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2475"}, {"type": "concept", "id": "createdb"}, {"type": "concept", "id": "dbexists"}, {"type": "document", "content": "finally:\n                    await conn.close()\n    \n        pool = await asyncpg.create_pool(f'{ser...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2476"}, {"type": "concept", "id": "vector"}, {"type": "document", "content": "def slugify(value: str, separator: str, unicode: bool = False) -> str:\n        \"\"\"Slugify a string, ...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2477"}, {"type": "concept", "id": "separator"}, {"type": "concept", "id": "unicode"}, {"type": "concept", "id": "action"}, {"type": "concept", "id": "slugifyvalue"}, {"type": "document", "content": "if action == 'build':\n            asyncio.run(build_search_db())\n        elif action == 'search':\n  ...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2478"}, {"type": "concept", "id": "asynciorunbuildsearchdb"}, {"type": "concept", "id": "lensysargv"}, {"type": "document", "content": "\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\rag.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\rag.txt:2479"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2479"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2480"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2481"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2482"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2483"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2484"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../models/groq/)\n    * [ pydantic_ai.models.instrumented  ](../../...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2485"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ](.....", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2486"}, {"type": "document", "content": "* diff_formatter \n        * diff_atol \n        * diff_rtol \n        * diff_increase_style \n        *...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2487"}, {"type": "concept", "id": "diffformatter"}, {"type": "concept", "id": "diffatol"}, {"type": "concept", "id": "diffrtol"}, {"type": "concept", "id": "diffincreasestyle"}, {"type": "concept", "id": "diffdecreasestyle"}, {"type": "document", "content": "Table of contents\n\n  * reporting \n  * ReportCase \n    * name \n    * inputs \n    * metadata \n    * ex...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2488"}, {"type": "concept", "id": "reportcase"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n\n    \n    \n    39\n    40\n    41...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2489"}, {"type": "concept", "id": "pydanticevalspydanticevalsreportinginitpy"}, {"type": "document", "content": "class ReportCase(BaseModel):\n        \"\"\"A single case in an evaluation report.\"\"\"\n    \n        name:...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2490"}, {"type": "document", "content": "scores: dict[str, EvaluationResult[int | float]] = field(init=False)\n        labels: dict[str, Evalu...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2491"}, {"type": "concept", "id": "fieldinitfalse"}, {"type": "concept", "id": "scores"}, {"type": "concept", "id": "evaluationresultint"}, {"type": "document", "content": "name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe name of the [case](../dat...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2492"}, {"type": "document", "content": "####  expected_output `instance-attribute`\n\n    \n    \n    expected_output: [Any](https://docs.python...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2493"}, {"type": "document", "content": "Source code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n\n    \n    \n     68\n     69\n    ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2494"}, {"type": "document", "content": "class ReportCaseAggregate(BaseModel):\n        \"\"\"A synthetic case that summarizes a set of cases.\"\"\"...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2495"}, {"type": "concept", "id": "synthetic"}, {"type": "concept", "id": "labels"}, {"type": "document", "content": "labels={},\n                    metrics={},\n                    assertions=None,\n                    ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2496"}, {"type": "concept", "id": "sumsbyname"}, {"type": "concept", "id": "score"}, {"type": "concept", "id": "countsbynamename"}, {"type": "document", "content": "def _labels_averages(labels_by_name: list[dict[str, str]]) -> dict[str, dict[str, float]]:\n         ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2497"}, {"type": "document", "content": "average_total_duration = sum(case.total_duration for case in cases) / num_cases\n    \n            # a...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2498"}, {"type": "concept", "id": "vvalue"}, {"type": "concept", "id": "averageassertions"}, {"type": "document", "content": "n_assertions = sum(len(case.assertions) for case in cases)\n            if n_assertions > 0:\n        ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2499"}, {"type": "concept", "id": "nassertions"}, {"type": "concept", "id": "npassing"}, {"type": "concept", "id": "sumlencaseassertions"}, {"type": "concept", "id": "assertion"}, {"type": "document", "content": "average(cases: [list](https://docs.python.org/3/library/stdtypes.html#list)[ReportCase]) -> ReportCa...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2500"}, {"type": "concept", "id": "averagecases"}, {"type": "concept", "id": "listhttpsdocspythonorg3librarystdtypeshtmllistreportcase"}, {"type": "concept", "id": "reportcaseaggregate"}, {"type": "concept", "id": "produce"}, {"type": "document", "content": "@staticmethod\n    def average(cases: list[ReportCase]) -> ReportCaseAggregate:\n        \"\"\"Produce a ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2501"}, {"type": "concept", "id": "numcases"}, {"type": "document", "content": "for sbn in scores_by_name:\n                for name, score in sbn.items():\n                    count...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2502"}, {"type": "concept", "id": "sumsbynamename"}, {"type": "document", "content": "sums_by_name[name][label] += 1\n            return {\n                name: {value: count / counts_by_...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2503"}, {"type": "document", "content": "average_labels: dict[str, dict[str, float]] = _labels_averages(\n            [{k: v.value for k, v in...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2504"}, {"type": "document", "content": "metrics=average_metrics,\n            assertions=average_assertions,\n            task_duration=averag...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2505"}, {"type": "concept", "id": "metricsaveragemetrics"}, {"type": "concept", "id": "assertionsaverageassertions"}, {"type": "concept", "id": "taskdurationaveragetaskduration"}, {"type": "concept", "id": "totaldurationaveragetotalduration"}, {"type": "document", "content": "Bases:\n`[BaseModel](https://docs.pydantic.dev/latest/api/base_model/#pydantic.BaseModel\n\"pydantic.Ba...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2506"}, {"type": "concept", "id": "pydanticbasemodel"}, {"type": "document", "content": "145\n    146\n    147\n    148\n    149\n    150\n    151\n    152\n    153\n    154\n    155\n    156\n    157\n...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2507"}, {"type": "document", "content": "233\n    234\n    235\n    236\n    237\n    238\n    239\n    240\n    241\n    242\n    243\n    244\n    245\n...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2508"}, {"type": "document", "content": "|...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2509"}, {"type": "document", "content": "class EvaluationReport(BaseModel):\n        \"\"\"A report of the results of evaluating a model on a set...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2510"}, {"type": "concept", "id": "evaluationreportbasemodel"}, {"type": "document", "content": "include_total_duration: bool = False,\n            include_removed_cases: bool = False,\n            i...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2511"}, {"type": "concept", "id": "rendervalueconfig"}, {"type": "concept", "id": "rendernumberconfig"}, {"type": "document", "content": "If you want more control over the output, use `console_table` instead and pass it to `rich.Console.p...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2512"}, {"type": "concept", "id": "consoletable"}, {"type": "concept", "id": "richconsoleprint"}, {"type": "document", "content": "output_config=output_config,\n                score_configs=score_configs,\n                label_conf...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2513"}, {"type": "concept", "id": "outputconfigoutputconfig"}, {"type": "concept", "id": "scoreconfigsscoreconfigs"}, {"type": "concept", "id": "labelconfigslabelconfigs"}, {"type": "concept", "id": "metricconfigsmetricconfigs"}, {"type": "document", "content": "include_averages: bool = True,\n            input_config: RenderValueConfig | None = None,\n          ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2514"}, {"type": "document", "content": "\"\"\"\n            renderer = EvaluationRenderer(\n                include_input=include_input,\n        ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2515"}, {"type": "concept", "id": "renderer"}, {"type": "concept", "id": "evaluationrenderer"}, {"type": "concept", "id": "includeinputincludeinput"}, {"type": "concept", "id": "includemetadataincludemetadata"}, {"type": "concept", "id": "includeexpectedoutputincludeexpectedoutput"}, {"type": "document", "content": "score_configs=score_configs or {},\n                label_configs=label_configs or {},\n              ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2516"}, {"type": "concept", "id": "baseline"}, {"type": "document", "content": "name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nThe name of the report.\n\n####...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2517"}, {"type": "document", "content": "print(\n        width: [int](https://docs.python.org/3/library/functions.html#int) | None = None,\n   ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2518"}, {"type": "concept", "id": "print"}, {"type": "document", "content": "include_removed_cases: [bool](https://docs.python.org/3/library/functions.html#bool) = False,\n      ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2519"}, {"type": "concept", "id": "includeremovedcases"}, {"type": "document", "content": ") = None,\n        metric_configs: (\n            [dict](https://docs.python.org/3/library/stdtypes.ht...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2520"}, {"type": "concept", "id": "metricconfigs"}, {"type": "concept", "id": "durationconfig"}, {"type": "document", "content": "Print this report to the console, optionally comparing it to a baseline\nreport.\n\nIf you want more co...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2521"}, {"type": "concept", "id": "console"}, {"type": "concept", "id": "optionally"}, {"type": "concept", "id": "comparing"}, {"type": "document", "content": "def print(\n        self,\n        width: int | None = None,\n        baseline: EvaluationReport | None...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2522"}, {"type": "document", "content": "label_configs: dict[str, RenderValueConfig] | None = None,\n        metric_configs: dict[str, RenderN...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2523"}, {"type": "concept", "id": "labelconfigs"}, {"type": "document", "content": "include_durations=include_durations,\n            include_total_duration=include_total_duration,\n    ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2524"}, {"type": "concept", "id": "includedurationsincludedurations"}, {"type": "concept", "id": "includetotaldurationincludetotalduration"}, {"type": "concept", "id": "includeremovedcasesincluderemovedcases"}, {"type": "concept", "id": "includeaveragesincludeaverages"}, {"type": "concept", "id": "inputconfiginputconfig"}, {"type": "document", "content": "console_table(\n        baseline: EvaluationReport | None = None,\n        include_input: [bool](https...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2525"}, {"type": "document", "content": "include_averages: [bool](https://docs.python.org/3/library/functions.html#bool) = True,\n        inpu...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2526"}, {"type": "concept", "id": "includeaverages"}, {"type": "concept", "id": "inputconfig"}, {"type": "document", "content": ") = None,\n        metric_configs: (\n            [dict](https://docs.python.org/3/library/stdtypes.ht...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2527"}, {"type": "concept", "id": "tablehttpsrichreadthedocsioenstablereferencetablehtmlrichtabletable"}, {"type": "document", "content": "Return a table containing the data from this report, or the diff between this\nreport and a baseline ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2528"}, {"type": "document", "content": "def console_table(\n        self,\n        baseline: EvaluationReport | None = None,\n        include_i...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2529"}, {"type": "document", "content": "label_configs: dict[str, RenderValueConfig] | None = None,\n        metric_configs: dict[str, RenderN...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2530"}, {"type": "document", "content": "include_removed_cases=include_removed_cases,\n            include_averages=include_averages,\n        ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2531"}, {"type": "concept", "id": "inputconfigdefaultvalueconfig"}, {"type": "document", "content": "__str__() -> [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nReturn a string repres...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2532"}, {"type": "document", "content": "A configuration for rendering a values in an Evaluation report.\n\nSource code in `pydantic_evals/pyda...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2533"}, {"type": "concept", "id": "callableany"}, {"type": "concept", "id": "values"}, {"type": "document", "content": "A configuration for rendering a particular score or metric in an Evaluation\nreport.\n\nSee the impleme...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2534"}, {"type": "document", "content": "class RenderNumberConfig(TypedDict, total=False):\n        \"\"\"A configuration for rendering a particu...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2535"}, {"type": "concept", "id": "callablefloat"}, {"type": "document", "content": "\"\"\"The logic to use for formatting details about the diff.\n    \n        The strings produced by the ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2536"}, {"type": "concept", "id": "difference"}, {"type": "document", "content": "If this function returns None, no extra diff text will be added.\n        * You can also use None to ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2537"}, {"type": "concept", "id": "significant"}, {"type": "document", "content": "If not provided, use 1e-6.\n        \"\"\"\n        diff_rtol: float\n        \"\"\"The relative tolerance fo...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2538"}, {"type": "document", "content": "\"\"\"\n        diff_decrease_style: str\n        \"\"\"The style to apply to diffed values that have signif...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2539"}, {"type": "concept", "id": "style"}, {"type": "concept", "id": "diffed"}, {"type": "document", "content": "value_formatter: [str](https://docs.python.org/3/library/stdtypes.html#str) | [Callable](https://doc...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2540"}, {"type": "document", "content": "####  diff_formatter `instance-attribute`\n\n    \n    \n    diff_formatter: (\n        [str](https://doc...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2541"}, {"type": "document", "content": "The logic to use for formatting details about the diff.\n\nThe strings produced by the value_formatter...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2542"}, {"type": "document", "content": "####  diff_atol `instance-attribute`\n\n    \n    \n    diff_atol: [float](https://docs.python.org/3/lib...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2543"}, {"type": "document", "content": "The relative tolerance for considering a difference \"significant\".\n\nSee the description of `diff_ato...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2544"}, {"type": "document", "content": "####  diff_decrease_style `instance-attribute`\n\n    \n    \n    diff_decrease_style: [str](https://doc...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2545"}, {"type": "document", "content": "824\n     825\n     826\n     827\n     828\n     829\n     830\n     831\n     832\n     833\n     834\n     8...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2546"}, {"type": "document", "content": "903\n     904\n     905\n     906\n     907\n     908\n     909\n     910\n     911\n     912\n     913\n     9...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2547"}, {"type": "document", "content": "983\n     984\n     985\n     986\n     987\n     988\n     989\n     990\n     991\n     992\n     993\n     9...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2548"}, {"type": "document", "content": "|...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2549"}, {"type": "document", "content": "@dataclass\n    class EvaluationRenderer:\n        \"\"\"A class for rendering an EvalReport or the diff ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2550"}, {"type": "document", "content": "metric_configs: dict[str, RenderNumberConfig]\n        duration_config: RenderNumberConfig\n    \n     ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2551"}, {"type": "concept", "id": "selfallcasesreport"}, {"type": "document", "content": "return any(case.assertions for case in self._all_cases(report, baseline))\n    \n        def _all_case...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2552"}, {"type": "concept", "id": "reportcases"}, {"type": "document", "content": "def _get_case_renderer(\n            self, report: EvaluationReport, baseline: EvaluationReport | Non...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2553"}, {"type": "concept", "id": "getcaserenderer"}, {"type": "concept", "id": "reportcaserenderer"}, {"type": "document", "content": ")\n    \n            return ReportCaseRenderer(\n                include_input=self.include_input,\n    ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2554"}, {"type": "concept", "id": "includeinputselfincludeinput"}, {"type": "concept", "id": "includemetadataselfincludemetadata"}, {"type": "document", "content": "input_renderer=input_renderer,\n                metadata_renderer=metadata_renderer,\n                ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2555"}, {"type": "concept", "id": "inputrendererinputrenderer"}, {"type": "concept", "id": "metadatarenderermetadatarenderer"}, {"type": "concept", "id": "outputrendereroutputrenderer"}, {"type": "concept", "id": "scorerenderersscorerenderers"}, {"type": "document", "content": "average = report.averages()\n                table.add_row(*case_renderer.build_aggregate_row(average...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2556"}, {"type": "concept", "id": "baselinecases"}, {"type": "document", "content": "added_cases: list[ReportCase] = []\n    \n            for case_id in sorted(set(baseline_cases_by_id.k...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2557"}, {"type": "concept", "id": "maybereportcase"}, {"type": "concept", "id": "maybebaselinecase"}, {"type": "concept", "id": "addedcases"}, {"type": "concept", "id": "listreportcase"}, {"type": "concept", "id": "caseid"}, {"type": "document", "content": "assert False, 'This should be unreachable'\n    \n            case_renderer = self._get_case_renderer(...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2558"}, {"type": "concept", "id": "diffname"}, {"type": "concept", "id": "baselinename"}, {"type": "concept", "id": "reportname"}, {"type": "concept", "id": "baselinecase"}, {"type": "concept", "id": "caserendererbuildrowcase"}, {"type": "document", "content": "row = case_renderer.build_row(case)\n                row[0] = f'[red]- Removed Case[/]\\n{row[0]}'\n   ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2559"}, {"type": "concept", "id": "baselineaverage"}, {"type": "document", "content": "values_by_name: dict[str, list[float | int]] = {}\n            for case in all_cases:\n               ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2560"}, {"type": "concept", "id": "allrenderers"}, {"type": "document", "content": ") -> dict[str, _ValueRenderer]:\n            all_cases = self._all_cases(report, baseline)\n          ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2561"}, {"type": "concept", "id": "valuerenderer"}, {"type": "concept", "id": "allcases"}, {"type": "concept", "id": "allnames"}, {"type": "document", "content": ") -> dict[str, _NumberRenderer]:\n            all_cases = self._all_cases(report, baseline)\n    \n    ...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2562"}, {"type": "concept", "id": "numberrenderer"}, {"type": "document", "content": "return all_renderers\n    \n        def _infer_duration_renderer(\n            self, report: Evaluation...", "source": "text_data\\reporting.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\reporting.txt:2563"}, {"type": "concept", "id": "alldurations"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\npydantic_ai....", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2563"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2564"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2565"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2566"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2567"}, {"type": "document", "content": "* pydantic_ai.result  [ pydantic_ai.result  ](./) Table of contents \n      * result \n      * ResultD...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2568"}, {"type": "document", "content": "* [ pydantic_ai.models  ](../models/base/)\n    * [ pydantic_ai.models.openai  ](../models/openai/)\n ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2569"}, {"type": "concept", "id": "modelsbase"}, {"type": "concept", "id": "modelsopenai"}, {"type": "document", "content": "* [ pydantic_ai.providers  ](../providers/)\n    * [ pydantic_graph  ](../pydantic_graph/graph/)\n    ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2570"}, {"type": "document", "content": "Table of contents\n\n  * result \n  * ResultDataT \n  * StreamedRunResult \n    * is_complete \n    * all_...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2571"}, {"type": "document", "content": "###  StreamedRunResult `dataclass`\n\nBases: `[Generic](https://docs.python.org/3/library/typing.html#...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2572"}, {"type": "document", "content": "173\n    174\n    175\n    176\n    177\n    178\n    179\n    180\n    181\n    182\n    183\n    184\n    185\n...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2573"}, {"type": "document", "content": "261\n    262\n    263\n    264\n    265\n    266\n    267\n    268\n    269\n    270\n    271\n    272\n    273\n...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2574"}, {"type": "document", "content": "351\n    352\n    353\n    354\n    355\n    356\n    357\n    358\n    359\n    360\n    361\n    362\n    363\n...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2575"}, {"type": "document", "content": "441\n    442\n    443\n    444\n    445\n    446\n    447\n    448\n    449\n    450\n    451\n    452\n    453\n...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2576"}, {"type": "document", "content": "|...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2577"}, {"type": "document", "content": "@dataclass\n    class StreamedRunResult(Generic[AgentDepsT, ResultDataT]):\n        \"\"\"Result of a str...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2578"}, {"type": "concept", "id": "streamedrunresultgenericagentdepst"}, {"type": "document", "content": "is_complete: bool = field(default=False, init=False)\n        \"\"\"Whether the stream has all been rece...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2579"}, {"type": "concept", "id": "iscomplete"}, {"type": "concept", "id": "fielddefaultfalse"}, {"type": "document", "content": "\"\"\"Return the history of _messages.\n    \n            Args:\n                result_tool_return_conten...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2580"}, {"type": "document", "content": "return self._all_messages\n    \n        def all_messages_json(self, *, result_tool_return_content: st...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2581"}, {"type": "document", "content": "JSON bytes representing the messages.\n            \"\"\"\n            return _messages.ModelMessagesType...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2582"}, {"type": "document", "content": "the conversation and want to set the response to the result tool call. If `None`, the last message w...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2583"}, {"type": "document", "content": "This provides a convenient way to modify the content of the result tool call if you want to continue...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2584"}, {"type": "document", "content": "The pydantic validator for structured data will be called in\n            [partial mode](https://docs...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2585"}, {"type": "concept", "id": "structured"}, {"type": "concept", "id": "debouncing"}, {"type": "document", "content": "result = await self.validate_structured_result(structured_message, allow_partial=not is_last)\n      ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2586"}, {"type": "document", "content": "Debouncing is particularly important for long structured responses to reduce the overhead of\n       ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2587"}, {"type": "concept", "id": "selfstreamresponsetextdeltadelta"}, {"type": "concept", "id": "debouncebydebounceby"}, {"type": "document", "content": "yield combined_validated_text\n            await self._marked_completed(self._stream_response.get())\n...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2588"}, {"type": "concept", "id": "debounceby"}, {"type": "document", "content": "Returns:\n                An async iterable of the structured response message and whether that is th...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2589"}, {"type": "concept", "id": "selfstreamresponseget"}, {"type": "document", "content": "async def get_data(self) -> ResultDataT:\n            \"\"\"Stream the whole response, validate and retu...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2590"}, {"type": "concept", "id": "whole"}, {"type": "document", "content": "\"\"\"\n            return self._initial_run_ctx_usage + self._stream_response.usage()\n    \n        def ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2591"}, {"type": "concept", "id": "match"}, {"type": "concept", "id": "selfinitialrunctxusage"}, {"type": "document", "content": "raise exceptions.UnexpectedModelBehavior(\n                        f'Invalid response, unable to find...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2592"}, {"type": "concept", "id": "resultdata"}, {"type": "document", "content": "text = await validator.validate(\n                        text,\n                        None,\n       ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2593"}, {"type": "concept", "id": "validatorvalidate"}, {"type": "concept", "id": "selfrunctx"}, {"type": "document", "content": "self._all_messages.append(message)\n            await self._on_complete()\n    \n        async def _str...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2594"}, {"type": "concept", "id": "groupiter"}, {"type": "document", "content": "# and items that we receive while streaming. We define a dedicated async iterator for this so we can...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2595"}, {"type": "concept", "id": "partindex"}, {"type": "concept", "id": "receive"}, {"type": "document", "content": "yield part.content, i\n    \n                async for event in self._stream_response:\n               ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2596"}, {"type": "concept", "id": "eventpartcontent"}, {"type": "document", "content": "async def _stream_text_deltas() -> AsyncIterator[str]:\n                async with _utils.group_by_te...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2597"}, {"type": "concept", "id": "streamtextdeltas"}, {"type": "document", "content": "async for text in _stream_text_deltas():\n                    deltas.append(text)\n                   ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2598"}, {"type": "concept", "id": "deltasappendtext"}, {"type": "concept", "id": "joindeltas"}, {"type": "document", "content": "is_complete: [bool](https://docs.python.org/3/library/functions.html#bool) = [field](https://docs.py...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2599"}, {"type": "document", "content": "Return the history of _messages.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2600"}, {"type": "document", "content": "202\n    203\n    204\n    205\n    206\n    207\n    208\n    209\n    210\n    211\n    212\n    213\n    214\n...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2601"}, {"type": "document", "content": "def all_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMess...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2602"}, {"type": "document", "content": "if result_tool_return_content is not None:\n            raise NotImplementedError('Setting result too...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2603"}, {"type": "concept", "id": "notimplementederrorsetting"}, {"type": "document", "content": "all_messages_json(\n        *, result_tool_return_content: [str](https://docs.python.org/3/library/st...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2604"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[bytes](https://docs.python.org/3/library/stdtypes.html#bytes)` |  J...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2605"}, {"type": "document", "content": "def all_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n        \"\"\"R...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2606"}, {"type": "document", "content": "\"\"\"\n        return _messages.ModelMessagesTypeAdapter.dump_json(\n            self.all_messages(resul...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2607"}, {"type": "document", "content": "new_messages(\n        *, result_tool_return_content: [str](https://docs.python.org/3/library/stdtype...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2608"}, {"type": "document", "content": "Messages from older runs are excluded.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|-...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2609"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[list](https://docs.python.org/3/library/stdtypes.html#list)[[ModelM...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2610"}, {"type": "document", "content": "def new_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMess...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2611"}, {"type": "document", "content": "Returns:\n            List of new messages.\n        \"\"\"\n        return self.all_messages(result_tool_...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2612"}, {"type": "document", "content": "new_messages_json(\n        *, result_tool_return_content: [str](https://docs.python.org/3/library/st...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2613"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[bytes](https://docs.python.org/3/library/stdtypes.html#bytes)` |  J...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2614"}, {"type": "document", "content": "def new_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n        \"\"\"R...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2615"}, {"type": "document", "content": "\"\"\"\n        return _messages.ModelMessagesTypeAdapter.dump_json(\n            self.new_messages(resul...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2616"}, {"type": "document", "content": "stream(\n        *, debounce_by: [float](https://docs.python.org/3/library/functions.html#float) | No...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2617"}, {"type": "concept", "id": "collectionsabcasynciteratorresultdatat"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`debounce_by` |  `[float](https...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2618"}, {"type": "document", "content": "267\n    268\n    269\n    270\n    271\n    272\n    273\n    274\n    275\n    276\n    277\n    278\n    279\n...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2619"}, {"type": "document", "content": "async def stream(self, *, debounce_by: float | None = 0.1) -> AsyncIterator[ResultDataT]:\n        \"\"...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2620"}, {"type": "document", "content": "An async iterable of the response data.\n        \"\"\"\n        async for structured_message, is_last in...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2621"}, {"type": "concept", "id": "islast"}, {"type": "document", "content": "stream_text(\n        *, delta: [bool](https://docs.python.org/3/library/functions.html#bool) = False...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2622"}, {"type": "concept", "id": "streamtext"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`delta` |  `[bool](https://docs...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.499928", "id": "text_data\\result.txt:2623"}, {"type": "concept", "id": "received"}, {"type": "document", "content": "286\n    287\n    288\n    289\n    290\n    291\n    292\n    293\n    294\n    295\n    296\n    297\n    298\n...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2624"}, {"type": "document", "content": "async def stream_text(self, *, delta: bool = False, debounce_by: float | None = 0.1) -> AsyncIterato...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2625"}, {"type": "document", "content": "performing validation as each token is received.\n        \"\"\"\n        if self._result_schema and not ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2626"}, {"type": "concept", "id": "combinedvalidatedtext"}, {"type": "document", "content": "stream_structured(\n        *, debounce_by: [float](https://docs.python.org/3/library/functions.html#...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2627"}, {"type": "concept", "id": "streamstructured"}, {"type": "concept", "id": "collectionsabcasynciteratortuplehttpsdocspythonorg3librarystdtypeshtmltuplemodelresponsemessagespydanticaimessagesmodelresponse"}, {"type": "document", "content": "Parameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n`debounce_by` |  `[float](https...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2628"}, {"type": "document", "content": "Type | Description  \n---|---  \n`[AsyncIterator](https://docs.python.org/3/library/collections.abc.ht...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2629"}, {"type": "document", "content": "async def stream_structured(\n        self, *, debounce_by: float | None = 0.1\n    ) -> AsyncIterator...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2630"}, {"type": "document", "content": "msg = self._stream_response.get()\n        for part in msg.parts:\n            if part.has_content():\n...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2631"}, {"type": "concept", "id": "msgparts"}, {"type": "document", "content": "get_data() -> ResultDataT\n    \n\nStream the whole response, validate and return it.\n\nSource code in `...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2632"}, {"type": "document", "content": "usage() -> [Usage](../usage/#pydantic_ai.usage.Usage \"pydantic_ai.usage.Usage\")\n    \n\nReturn the usa...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2633"}, {"type": "document", "content": "Get the timestamp of the response.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n    \n  ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2634"}, {"type": "concept", "id": "pydanticaislimpydanticairesultpy"}, {"type": "concept", "id": "validatestructuredresult"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n    \n    \n    363\n    364\n    365\n    366\n ...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2635"}, {"type": "document", "content": "async def validate_structured_result(\n        self, message: _messages.ModelResponse, *, allow_parti...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2636"}, {"type": "document", "content": "for validator in self._result_validators:\n                result_data = await validator.validate(res...", "source": "text_data\\result.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\result.txt:2637"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nResults\n\nType to s...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2637"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2638"}, {"type": "document", "content": "* [ Debugging and Monitoring  ](../logfire/)\n    * [ Multi-agent Applications  ](../multi-agent-appl...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2639"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2640"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2641"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2642"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2643"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2644"}, {"type": "document", "content": "Table of contents\n\n  * Result data \n    * Result validators functions \n  * Streamed Results \n    * S...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2645"}, {"type": "document", "content": "olympics.py\n\n    \n    \n    from pydantic import BaseModel\n    \n    from pydantic_ai import Agent\n   ...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2646"}, {"type": "concept", "id": "olympicspy"}, {"type": "concept", "id": "basemodel"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\")_\n\nRuns end when either a plain text response is r...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2647"}, {"type": "concept", "id": "plain"}, {"type": "concept", "id": "union"}, {"type": "document", "content": "If the result type schema is not of type `\"object\"`, the result type is\nwrapped in a single element ...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2648"}, {"type": "document", "content": "from typing import Union\n    \n    from pydantic import BaseModel\n    \n    from pydantic_ai import Ag...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2649"}, {"type": "concept", "id": "units"}, {"type": "concept", "id": "dimensions"}, {"type": "document", "content": "result = agent.run_sync('The box is 10x20x30 cm')\n    print(result.data)\n    #> width=10 height=20 d...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2650"}, {"type": "concept", "id": "agentrunsyncthe"}, {"type": "concept", "id": "10x20x30"}, {"type": "concept", "id": "width10"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\")_\n\nHere's an example of using a union return type ...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2651"}, {"type": "concept", "id": "listint"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\")_\n\n### Result validators functions\n\nSome validatio...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2652"}, {"type": "document", "content": "from typing import Union\n    \n    from fake_database import DatabaseConn, QueryError\n    from pydant...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2653"}, {"type": "document", "content": "if isinstance(result, InvalidRequest):\n            return result\n        try:\n            await ctx....", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2654"}, {"type": "concept", "id": "users"}, {"type": "concept", "id": "isinstanceresult"}, {"type": "concept", "id": "invalidrequest"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\")_\n\n## Streamed Results\n\nThere two main challenges ...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2655"}, {"type": "document", "content": "from pydantic_ai import Agent\n    \n    agent = Agent('google-gla:gemini-1.5-flash')  \n    \n    Strea...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2656"}, {"type": "document", "content": "async for message in result.stream_text():  \n    \n    Each item yield by [StreamedRunResult.stream_t...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2657"}, {"type": "concept", "id": "textbook"}, {"type": "document", "content": "1.   2.   3. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyncio.run(ma...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2658"}, {"type": "document", "content": "streamed_delta_hello_world.py\n\n    \n    \n    from pydantic_ai import Agent\n    \n    agent = Agent('g...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2659"}, {"type": "concept", "id": "streameddeltahelloworldpy"}, {"type": "document", "content": "1. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyncio.run(main())` to ...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2660"}, {"type": "document", "content": "from datetime import date\n    \n    from typing_extensions import TypedDict\n    \n    from pydantic_ai...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2661"}, {"type": "concept", "id": "profile"}, {"type": "document", "content": "#> {'name': 'Ben'}\n                #> {'name': 'Ben'}\n                #> {'name': 'Ben', 'dob': date...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2662"}, {"type": "concept", "id": "date1990"}, {"type": "concept", "id": "likes"}, {"type": "concept", "id": "chain"}, {"type": "concept", "id": "pyramid"}, {"type": "document", "content": "_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyncio.run(main())` to run `...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2663"}, {"type": "document", "content": "from datetime import date\n    \n    from pydantic import ValidationError\n    from typing_extensions i...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2664"}, {"type": "document", "content": "[stream_structured](../api/result/#pydantic_ai.result.StreamedRunResult.stream_structured) streams t...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2665"}, {"type": "concept", "id": "streamstructuredapiresultpydanticairesultstreamedrunresultstreamstructured"}, {"type": "concept", "id": "modelresponseapimessagespydanticaimessagesmodelresponse"}, {"type": "concept", "id": "objects"}, {"type": "document", "content": "allow_partial=not last,\n                    )\n                except ValidationError:\n              ...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2666"}, {"type": "concept", "id": "allowpartialnot"}, {"type": "document", "content": "1.   2. \n\n_(This example is complete, it can be run \"as is\" \u2014 you'll need to\nadd`asyncio.run(main())...", "source": "text_data\\results.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\results.txt:2667"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nMCP Run Pyth...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2667"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2668"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../)...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2669"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../client/)\n      * [ Server  ](../server/)\n      * MCP Run Python  [ MCP R...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2670"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2671"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../api/result/)\n    * [ pydantic_ai.messages  ](../../api/messages/)\n  ...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2672"}, {"type": "document", "content": "* [ pydantic_ai.models.gemini  ](../../api/models/gemini/)\n    * [ pydantic_ai.models.groq  ](../../...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2673"}, {"type": "document", "content": "* [ pydantic_graph.persistence  ](../../api/pydantic_graph/persistence/)\n    * [ pydantic_graph.merm...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2674"}, {"type": "document", "content": "Table of contents\n\n  * Features \n  * Installation \n  * Direct Usage \n  * Dependencies \n    * Inferre...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2675"}, {"type": "concept", "id": "features"}, {"type": "document", "content": "## Features\n\n  * **Secure Execution** : Run Python code in a sandboxed WebAssembly environment\n  * *...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2676"}, {"type": "concept", "id": "standard"}, {"type": "concept", "id": "secure"}, {"type": "document", "content": "npx @pydantic/mcp-run-python [stdio|sse]\n    \n\nWhere:\n\n  * `stdio`: Runs the server with [stdin/stdo...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2677"}, {"type": "concept", "id": "pydanticmcprunpython"}, {"type": "document", "content": "mcp_run_python.py...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2678"}, {"type": "concept", "id": "mcprunpythonpy"}, {"type": "document", "content": "from mcp import ClientSession, StdioServerParameters\n    from mcp.client.stdio import stdio_client\n ...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2679"}, {"type": "concept", "id": "stdioserverparameters"}, {"type": "document", "content": "print(repr(tools.tools[0].inputSchema))\n                \"\"\"\n                {'type': 'object', 'prop...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2680"}, {"type": "concept", "id": "pythoncode"}, {"type": "concept", "id": "printreprtoolstools0inputschema"}, {"type": "document", "content": "1,\n                  2,\n                  3\n                ]\n                </return_value>\n      ...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2681"}, {"type": "document", "content": "If an exception occurs, `status` will be `install-error` or `run-error` and\n`return_value` will be r...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2682"}, {"type": "concept", "id": "imports"}, {"type": "document", "content": "This allows use of dependencies that aren't imported in the code, and is more\nexplicit.\n\ninline_scri...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2683"}, {"type": "concept", "id": "allows"}, {"type": "concept", "id": "arent"}, {"type": "concept", "id": "imported"}, {"type": "concept", "id": "explicit"}, {"type": "document", "content": "from mcp import ClientSession, StdioServerParameters\n    from mcp.client.stdio import stdio_client\n ...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2684"}, {"type": "document", "content": "print(result.content[0].text)\n                \"\"\"\n                <status>success</status>\n         ...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2685"}, {"type": "concept", "id": "printresultcontent0text"}, {"type": "concept", "id": "statussuccessstatus"}, {"type": "concept", "id": "dependenciespydanticemailvalidatordependencies"}, {"type": "concept", "id": "emailhellopydanticdev"}, {"type": "document", "content": "It also allows versions to be pinned for non-binary packages (Pyodide only\nsupports a single version...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2686"}, {"type": "concept", "id": "supports"}, {"type": "concept", "id": "logging"}, {"type": "concept", "id": "packages"}, {"type": "document", "content": "Currently, it's not possible to demonstrate this due to a bug in the Python\nMCP Client, see [modelco...", "source": "text_data\\run-python.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\run-python.txt:2687"}, {"type": "concept", "id": "currently"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nServer\n\nType...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2687"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2688"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../)...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2689"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../client/)\n      * [ Server  ](./)\n      * [ MCP Run Python  ](../run-pyth...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2690"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2691"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../api/result/)\n    * [ pydantic_ai.messages  ](../../api/messages/)\n  ...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2692"}, {"type": "document", "content": "* [ pydantic_ai.models.gemini  ](../../api/models/gemini/)\n    * [ pydantic_ai.models.groq  ](../../...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2693"}, {"type": "document", "content": "* [ pydantic_graph.persistence  ](../../api/pydantic_graph/persistence/)\n    * [ pydantic_graph.merm...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2694"}, {"type": "document", "content": "# Server\n\nPydanticAI models can also be used within MCP Servers.\n\nHere's a simple example of a [Pyth...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2695"}, {"type": "document", "content": "This server can be queried with any MCP client. Here is an example using a\ndirect Python client:\n\nmc...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2696"}, {"type": "concept", "id": "queried"}, {"type": "document", "content": "import asyncio\n    import os\n    \n    from mcp import ClientSession, StdioServerParameters\n    from ...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2697"}, {"type": "document", "content": "That nestle softly 'round our feet,\n                From cotton, wool, or blended thread,\n          ...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2698"}, {"type": "concept", "id": "nestle"}, {"type": "concept", "id": "softly"}, {"type": "concept", "id": "round"}, {"type": "concept", "id": "cotton"}, {"type": "concept", "id": "blended"}, {"type": "document", "content": "Note:\n[sampling](https://modelcontextprotocol.io/docs/concepts/sampling#sampling),\nwhereby servers m...", "source": "text_data\\server.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\server.txt:2699"}, {"type": "concept", "id": "samplinghttpsmodelcontextprotocoliodocsconceptssamplingsampling"}, {"type": "concept", "id": "whereby"}, {"type": "concept", "id": "completions"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\npydantic_ai....", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2699"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2700"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2701"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2702"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2703"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../result/)\n    * [ pydantic_ai.messages  ](../messages/)\n    * [ pydantic...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2704"}, {"type": "document", "content": "* [ pydantic_ai.models.anthropic  ](../models/anthropic/)\n    * [ pydantic_ai.models.bedrock  ](../m...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2705"}, {"type": "document", "content": "* [ pydantic_graph.nodes  ](../pydantic_graph/nodes/)\n    * [ pydantic_graph.persistence  ](../pydan...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2706"}, {"type": "document", "content": "Table of contents\n\n  * settings \n  * ModelSettings \n    * max_tokens \n    * temperature \n    * top_p...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2707"}, {"type": "document", "content": "12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n ...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2708"}, {"type": "document", "content": "100\n    101\n    102\n    103\n    104\n    105\n    106\n    107\n    108\n    109\n    110\n    111\n    112\n...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2709"}, {"type": "document", "content": "|...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2710"}, {"type": "document", "content": "class ModelSettings(TypedDict, total=False):\n        \"\"\"Settings to configure an LLM.\n    \n        H...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2711"}, {"type": "document", "content": "maximum `temperature` for creative and generative tasks.\n    \n        Note that even with `temperatu...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2712"}, {"type": "document", "content": "* Gemini\n        * Anthropic\n        * OpenAI\n        * Groq\n        * Cohere\n        * Mistral\n    ...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2713"}, {"type": "document", "content": "Supported by:\n    \n        * OpenAI\n        * Groq\n        * Cohere\n        * Mistral\n        \"\"\"\n  ...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2714"}, {"type": "document", "content": "Supported by:\n    \n        * OpenAI\n        * Groq\n        \"\"\"\n      \n  \n---|---  \n  \n####  max_toke...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2715"}, {"type": "document", "content": "max_tokens: [int](https://docs.python.org/3/library/functions.html#int)\n    \n\nThe maximum number of ...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2716"}, {"type": "document", "content": "####  top_p `instance-attribute`\n\n    \n    \n    top_p: [float](https://docs.python.org/3/library/fun...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2717"}, {"type": "concept", "id": "sampling"}, {"type": "document", "content": "Supported by:\n\n  * Gemini\n  * Anthropic\n  * OpenAI\n  * Groq\n  * Mistral\n\n####  parallel_tool_calls `...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2718"}, {"type": "document", "content": "Penalize new tokens based on whether they have appeared in the text so far.\n\nSupported by:\n\n  * Open...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2719"}, {"type": "concept", "id": "penalize"}, {"type": "document", "content": "Supported by:\n\n  * OpenAI\n  * Groq\n\n\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\settings.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\settings.txt:2720"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nSQL Generati...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2720"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2721"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2722"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2723"}, {"type": "document", "content": "* [ Pydantic Model  ](../pydantic-model/)\n    * [ Weather agent  ](../weather-agent/)\n    * [ Bank s...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2724"}, {"type": "concept", "id": "generation"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../../api/messages/)\n    * [ pydantic_ai.exceptions  ](../../api/excepti...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2725"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../api/models/groq/)\n    * [ pydantic_ai.models.instrumented  ](.....", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2726"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../api/pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2727"}, {"type": "document", "content": "Table of contents\n\n  * Running the Example \n  * Example Code \n\n# SQL Generation\n\nExample demonstrati...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2728"}, {"type": "concept", "id": "postgresql"}, {"type": "document", "content": "_(we run postgres on port`54320` to avoid conflicts with any other postgres\ninstances you may have r...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2729"}, {"type": "concept", "id": "pydanticaiexamplessqlgen"}, {"type": "document", "content": "import asyncio\n    import sys\n    from collections.abc import AsyncGenerator\n    from contextlib imp...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2730"}, {"type": "concept", "id": "collectionsabc"}, {"type": "concept", "id": "asyncgenerator"}, {"type": "document", "content": "logfire.instrument_asyncpg()\n    \n    DB_SCHEMA = \"\"\"\n    CREATE TABLE records (\n        created_at ...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2731"}, {"type": "concept", "id": "timestamptz"}, {"type": "concept", "id": "logfireinstrumentasyncpg"}, {"type": "document", "content": "},\n        {\n            'request': 'show me records where attributes include the key \"foobar\"',\n   ...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2732"}, {"type": "concept", "id": "foobar"}, {"type": "document", "content": "\"\"\"Response when SQL could be successfully generated.\"\"\"\n    \n        sql_query: Annotated[str, MinL...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2733"}, {"type": "concept", "id": "successfully"}, {"type": "document", "content": "instrument=True,\n    )\n    \n    \n    @agent.system_prompt\n    async def system_prompt() -> str:\n    ...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2734"}, {"type": "document", "content": "if not result.sql_query.upper().startswith('SELECT'):\n            raise ModelRetry('Please create a ...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2735"}, {"type": "document", "content": "result = await agent.run(prompt, deps=deps)\n        debug(result.data)\n    \n    \n    # pyright: repo...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2736"}, {"type": "document", "content": "conn = await asyncpg.connect(f'{server_dsn}/{database}')\n        try:\n            with logfire.span(...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2737"}, {"type": "concept", "id": "asyncpgconnectfserverdsndatabase"}, {"type": "concept", "id": "logfirespancreate"}, {"type": "document", "content": "\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\sql-gen.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\sql-gen.txt:2738"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nStream markd...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2738"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2739"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2740"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2741"}, {"type": "document", "content": "* [ Pydantic Model  ](../pydantic-model/)\n    * [ Weather agent  ](../weather-agent/)\n    * [ Bank s...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2742"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../../api/messages/)\n    * [ pydantic_ai.exceptions  ](../../api/excepti...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2743"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../api/models/groq/)\n    * [ pydantic_ai.models.instrumented  ](.....", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2744"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../api/pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2745"}, {"type": "document", "content": "Table of contents\n\n  * Running the Example \n  * Example Code \n\n# Stream markdown\n\nThis example shows...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2746"}, {"type": "document", "content": "import asyncio\n    import os\n    \n    import logfire\n    from rich.console import Console, ConsoleOp...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2747"}, {"type": "document", "content": "('google-gla:gemini-1.5-flash', 'GEMINI_API_KEY'),\n        ('openai:gpt-4o-mini', 'OPENAI_API_KEY'),...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2748"}, {"type": "concept", "id": "envvar"}, {"type": "document", "content": "live.update(Markdown(message))\n                console.log(result.usage())\n            else:\n       ...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2749"}, {"type": "concept", "id": "liveupdatemarkdownmessage"}, {"type": "concept", "id": "consolelogresultusage"}, {"type": "concept", "id": "consolelogfmodel"}, {"type": "document", "content": "code,\n                    self.lexer_name,\n                    theme=self.theme,\n                   ...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2750"}, {"type": "concept", "id": "selflexername"}, {"type": "concept", "id": "themeselftheme"}, {"type": "concept", "id": "backgroundcolordefault"}, {"type": "concept", "id": "wordwraptrue"}, {"type": "document", "content": "\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\stream-markdown.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-markdown.txt:2751"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nStream whale...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2751"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2752"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2753"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2754"}, {"type": "document", "content": "* [ Pydantic Model  ](../pydantic-model/)\n    * [ Weather agent  ](../weather-agent/)\n    * [ Bank s...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2755"}, {"type": "concept", "id": "whales"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../../api/messages/)\n    * [ pydantic_ai.exceptions  ](../../api/excepti...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2756"}, {"type": "document", "content": "* [ pydantic_ai.models.groq  ](../../api/models/groq/)\n    * [ pydantic_ai.models.instrumented  ](.....", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2757"}, {"type": "document", "content": "* [ pydantic_graph.mermaid  ](../../api/pydantic_graph/mermaid/)\n    * [ pydantic_graph.exceptions  ...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2758"}, {"type": "document", "content": "Table of contents\n\n  * Running the Example \n  * Example Code \n\n# Stream whales\n\nInformation about wh...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2759"}, {"type": "document", "content": "from typing import Annotated\n    \n    import logfire\n    from pydantic import Field, ValidationError...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2760"}, {"type": "concept", "id": "annotated"}, {"type": "concept", "id": "notrequired"}, {"type": "concept", "id": "length"}, {"type": "document", "content": "weight: NotRequired[\n            Annotated[\n                float,\n                Field(description...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2761"}, {"type": "concept", "id": "weight"}, {"type": "concept", "id": "whale"}, {"type": "document", "content": "console.print('Response:', style='green')\n    \n                async for message, last in result.str...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2762"}, {"type": "concept", "id": "consoleprintresponse"}, {"type": "concept", "id": "stylegreen"}, {"type": "document", "content": "title='Species of Whale',\n                        caption='Streaming Structured responses from GPT-4...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2763"}, {"type": "concept", "id": "justifyright"}, {"type": "concept", "id": "tableaddcolumnavg"}, {"type": "concept", "id": "titlespecies"}, {"type": "concept", "id": "captionstreaming"}, {"type": "document", "content": "f'{whale[\"length\"]:0.0f}',\n                            f'{w:0.0f}' if (w := whale.get('weight')) els...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2764"}, {"type": "concept", "id": "fwhalelength00f"}, {"type": "concept", "id": "fw00f"}, {"type": "concept", "id": "whalegetweight"}, {"type": "concept", "id": "whalegetocean"}, {"type": "concept", "id": "whalegetdescription"}, {"type": "document", "content": "\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\stream-whales.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\stream-whales.txt:2765"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2765"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2766"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2767"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2768"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2769"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2770"}, {"type": "document", "content": "* [ pydantic_ai.models.mistral  ](../mistral/)\n    * pydantic_ai.models.test  [ pydantic_ai.models.t...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2771"}, {"type": "document", "content": "* [ pydantic_graph.nodes  ](../../pydantic_graph/nodes/)\n    * [ pydantic_graph.persistence  ](../.....", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2772"}, {"type": "document", "content": "Table of contents\n\n  * test \n  * TestModel \n    * call_tools \n    * custom_result_text \n    * custom...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2773"}, {"type": "concept", "id": "testmodel"}, {"type": "concept", "id": "calltools"}, {"type": "document", "content": "Here's a minimal example:\n\ntest_model_usage.py\n\n    \n    \n    from pydantic_ai import Agent\n    from...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2774"}, {"type": "concept", "id": "myagent"}, {"type": "document", "content": "Bases: `[Model](../base/#pydantic_ai.models.Model \"pydantic_ai.models.Model\")`\n\nA model specifically...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2775"}, {"type": "document", "content": "50\n     51\n     52\n     53\n     54\n     55\n     56\n     57\n     58\n     59\n     60\n     61\n     62\n ...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2776"}, {"type": "document", "content": "138\n    139\n    140\n    141\n    142\n    143\n    144\n    145\n    146\n    147\n    148\n    149\n    150\n...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2777"}, {"type": "document", "content": "|...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2778"}, {"type": "document", "content": "@dataclass\n    class TestModel(Model):\n        \"\"\"A model specifically for testing purposes.\n    \n  ...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2779"}, {"type": "document", "content": "\"\"\"If set, this text is returned as the final result.\"\"\"\n        custom_result_args: Any | None = No...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2780"}, {"type": "document", "content": "\"\"\"\n        _model_name: str = field(default='test', repr=False)\n        _system: str = field(defaul...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2781"}, {"type": "concept", "id": "fielddefaulttest"}, {"type": "document", "content": "self,\n            messages: list[ModelMessage],\n            model_settings: ModelSettings | None,\n  ...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2782"}, {"type": "document", "content": "def system(self) -> str:\n            \"\"\"The system / model provider.\"\"\"\n            return self._sys...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2783"}, {"type": "concept", "id": "selfcalltools"}, {"type": "concept", "id": "rname"}, {"type": "document", "content": "return [(r.name, r) for r in tools_to_call]\n    \n        def _get_result(self, model_request_paramet...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2784"}, {"type": "concept", "id": "customresulttext"}, {"type": "concept", "id": "selfcustomresultargs"}, {"type": "document", "content": ")\n                result_tool = model_request_parameters.result_tools[0]\n    \n                if k :...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2785"}, {"type": "concept", "id": "textresultnone"}, {"type": "document", "content": "model_request_parameters: ModelRequestParameters,\n        ) -> ModelResponse:\n            tool_calls...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2786"}, {"type": "concept", "id": "selfgettoolcallsmodelrequestparameters"}, {"type": "document", "content": "if messages:\n                last_message = messages[-1]\n                assert isinstance(last_mess...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2787"}, {"type": "concept", "id": "newretrynames"}, {"type": "document", "content": "]\n                    # Check result tools\n                    if result_tools:\n                    ...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2788"}, {"type": "concept", "id": "resultvalue"}, {"type": "document", "content": "if isinstance(result, _TextResult):\n                if (response_text := result.value) is None:\n    ...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2789"}, {"type": "concept", "id": "textresult"}, {"type": "concept", "id": "responsetext"}, {"type": "document", "content": ")\n                    else:\n                        return ModelResponse(parts=[TextPart('success (n...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2790"}, {"type": "concept", "id": "modelnameselfmodelname"}, {"type": "concept", "id": "customresultargs"}, {"type": "concept", "id": "modelresponsepartstextpartsuccess"}, {"type": "document", "content": ")\n                else:\n                    response_args = self.gen_tool_args(result_tool)\n        ...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2791"}, {"type": "concept", "id": "responseargs"}, {"type": "concept", "id": "selfgentoolargsresulttool"}, {"type": "concept", "id": "modelresponsepartstoolcallpartresulttoolname"}, {"type": "document", "content": "call_tools: [list](https://docs.python.org/3/library/stdtypes.html#list)[[str](https://docs.python.o...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2792"}, {"type": "document", "content": "If set, these args will be passed to the result tool.\n\n####  seed `class-attribute` `instance-attrib...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2793"}, {"type": "concept", "id": "lastmodelrequestparameters"}, {"type": "document", "content": "The last ModelRequestParameters passed to the model in a request.\n\nThe ModelRequestParameters contai...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2794"}, {"type": "document", "content": "A structured response that streams test data.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/t...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2795"}, {"type": "concept", "id": "pydanticaislimpydanticaimodelstestpy"}, {"type": "document", "content": "@dataclass\n    class TestStreamedResponse(StreamedResponse):\n        \"\"\"A structured response that s...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2796"}, {"type": "concept", "id": "teststreamedresponsestreamedresponse"}, {"type": "document", "content": "*words, last_word = text.split(' ')\n                    words = [f'{word} ' for word in words]\n     ...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2797"}, {"type": "concept", "id": "words"}, {"type": "concept", "id": "lentext"}, {"type": "concept", "id": "textmid"}, {"type": "document", "content": "yield self._parts_manager.handle_tool_call_part(\n                        vendor_part_id=i, tool_name...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2798"}, {"type": "concept", "id": "selfpartsmanagerhandletoolcallpart"}, {"type": "document", "content": "model_name: [str](https://docs.python.org/3/library/stdtypes.html#str)\n    \n\nGet the model name of t...", "source": "text_data\\test.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\test.txt:2799"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nUnit testing\n\nType...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2799"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2800"}, {"type": "document", "content": "* [ Multi-agent Applications  ](../multi-agent-applications/)\n    * [ Graphs  ](../graph/)\n    * [ E...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2801"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2802"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2803"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2804"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2805"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2806"}, {"type": "document", "content": "Table of contents\n\n  * Unit testing with TestModel \n  * Unit testing with FunctionModel \n  * Overrid...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2807"}, {"type": "concept", "id": "writing"}, {"type": "document", "content": "* Use [`pytest`](https://docs.pytest.org/en/stable/) as your test harness\n  * If you find yourself t...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2808"}, {"type": "concept", "id": "pytesthttpsdocspytestorgenstable"}, {"type": "concept", "id": "harness"}, {"type": "concept", "id": "yourself"}, {"type": "document", "content": "* Set [`ALLOW_MODEL_REQUESTS=False`](../api/models/base/#pydantic_ai.models.ALLOW_MODEL_REQUESTS) gl...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2809"}, {"type": "concept", "id": "allowmodelrequestsfalseapimodelsbasepydanticaimodelsallowmodelrequests"}, {"type": "concept", "id": "globally"}, {"type": "document", "content": "### Unit testing with `TestModel`\n\nThe simplest and fastest way to exercise most of your application...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2810"}, {"type": "document", "content": "The resulting data won't look pretty or relevant, but it should pass\nPydantic's validation in most c...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2811"}, {"type": "concept", "id": "resulting"}, {"type": "concept", "id": "pretty"}, {"type": "document", "content": "import asyncio\n    from datetime import date\n    \n    from pydantic_ai import Agent, RunContext\n    ...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2812"}, {"type": "concept", "id": "weatherservice"}, {"type": "document", "content": ") -> str:\n        if forecast_date < date.today():  \n    \n    We need to call a different endpoint d...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2813"}, {"type": "concept", "id": "datetoday"}, {"type": "document", "content": "async def run_forecast(prompt: str, user_id: int):\n                result = await weather_agent.run(...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2814"}, {"type": "concept", "id": "runforecastprompt"}, {"type": "document", "content": "1.   2.   3.   4. \n\nHere we have a function that takes a list of `(user_prompt, user_id)` tuples,\nge...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2815"}, {"type": "concept", "id": "takes"}, {"type": "document", "content": "from datetime import timezone\n    import pytest\n    \n    from dirty_equals import IsNow, IsStr\n    \n...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2816"}, {"type": "concept", "id": "timezone"}, {"type": "concept", "id": "pytest"}, {"type": "concept", "id": "dirtyequals"}, {"type": "document", "content": "models.ALLOW_MODEL_REQUESTS = False  \n    \n    This is a safety measure to make sure we don't accide...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2817"}, {"type": "concept", "id": "modelsallowmodelrequests"}, {"type": "concept", "id": "measure"}, {"type": "document", "content": "with weather_agent.override(model=TestModel()):  \n    \n    We're using [Agent.override](../api/agent...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2818"}, {"type": "concept", "id": "replace"}, {"type": "document", "content": "But default, TestModel will return a JSON string summarising the tools calls made, and what was retu...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2819"}, {"type": "document", "content": "parts=[\n                    SystemPromptPart(\n                        content='Providing a weather f...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2820"}, {"type": "concept", "id": "timestampisnowtztimezoneutc"}, {"type": "concept", "id": "contentproviding"}, {"type": "document", "content": "parts=[\n                    ToolCallPart(\n                        tool_name='weather_forecast',\n    ...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2821"}, {"type": "concept", "id": "toolnameweatherforecast"}, {"type": "document", "content": "content='Sunny with a chance of rain',\n                        tool_call_id=IsStr(),\n               ...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2822"}, {"type": "concept", "id": "chance"}, {"type": "concept", "id": "contentsunny"}, {"type": "concept", "id": "toolcallidisstr"}, {"type": "document", "content": "1.   2.   3.   4.   5.   6.   7.   8. \n\n### Unit testing with `FunctionModel`\n\nThe above tests are a...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2823"}, {"type": "concept", "id": "weatherforecast"}, {"type": "concept", "id": "above"}, {"type": "document", "content": "import re\n    \n    import pytest\n    \n    from pydantic_ai import models\n    from pydantic_ai.messag...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2824"}, {"type": "document", "content": "def call_weather_forecast(  \n    \n    We define a function call_weather_forecast that will be called...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2825"}, {"type": "concept", "id": "callweatherforecast"}, {"type": "concept", "id": "define"}, {"type": "document", "content": "assert m is not None\n            args = {'location': 'London', 'forecast_date': m.group()}  \n    \n  ...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2826"}, {"type": "concept", "id": "forecast"}, {"type": "concept", "id": "london"}, {"type": "document", "content": "We use [FunctionModel](../api/models/function/#pydantic_ai.models.function.FunctionModel) to replace...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2827"}, {"type": "concept", "id": "functionmodelapimodelsfunctionpydanticaimodelsfunctionfunctionmodel"}, {"type": "document", "content": "1.   2.   3. \n\n### Overriding model via pytest fixtures\n\nIf you're writing lots of tests that all re...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2828"}, {"type": "concept", "id": "overriding"}, {"type": "concept", "id": "fixtures"}, {"type": "document", "content": "tests.py\n\n    \n    \n    import pytest\n    from weather_app import weather_agent\n    \n    from pydant...", "source": "text_data\\testing.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\testing.txt:2829"}, {"type": "concept", "id": "testspy"}, {"type": "concept", "id": "weatherapp"}, {"type": "concept", "id": "weatheragent"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\npydantic_ai....", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2829"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2830"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2831"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2832"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2833"}, {"type": "concept", "id": "pydanticaitools"}, {"type": "document", "content": "* RunContext \n        * deps \n        * model \n        * usage \n        * prompt \n        * messages...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2834"}, {"type": "document", "content": "* [ pydantic_ai.exceptions  ](../exceptions/)\n    * [ pydantic_ai.settings  ](../settings/)\n    * [ ...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2835"}, {"type": "document", "content": "* [ pydantic_ai.models.test  ](../models/test/)\n    * [ pydantic_ai.models.function  ](../models/fun...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2836"}, {"type": "document", "content": "* [ pydantic_evals.reporting  ](../pydantic_evals/reporting/)\n    * [ pydantic_evals.otel  ](../pyda...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2837"}, {"type": "document", "content": "Table of contents\n\n  * tools \n  * AgentDepsT \n  * RunContext \n    * deps \n    * model \n    * usage \n...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2838"}, {"type": "document", "content": "Type variable for agent dependencies.\n\n###  RunContext `dataclass`\n\nBases: `[Generic](https://docs.p...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2839"}, {"type": "document", "content": "@dataclasses.dataclass\n    class RunContext(Generic[AgentDepsT]):\n        \"\"\"Information about the c...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2840"}, {"type": "document", "content": "\"\"\"Name of the tool being called.\"\"\"\n        retry: int = 0\n        \"\"\"Number of retries so far.\"\"\"\n...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2841"}, {"type": "document", "content": "deps: AgentDepsT\n    \n\nDependencies for the agent.\n\n####  model `instance-attribute`\n\n    \n    \n    ...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2842"}, {"type": "document", "content": "####  messages `class-attribute` `instance-attribute`\n\n    \n    \n    messages: [list](https://docs.p...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2843"}, {"type": "document", "content": "####  tool_name `class-attribute` `instance-attribute`\n\n    \n    \n    tool_name: [str](https://docs....", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2844"}, {"type": "document", "content": "Retrieval function param spec.\n\n###  SystemPromptFunc `module-attribute`...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2845"}, {"type": "concept", "id": "retrieval"}, {"type": "document", "content": "SystemPromptFunc = [Union](https://docs.python.org/3/library/typing.html#typing.Union \"typing.Union\"...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2846"}, {"type": "concept", "id": "typingcallableruncontextagentdepst"}, {"type": "document", "content": "[Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"typing.Callable\")[[], [Awa...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2847"}, {"type": "document", "content": "A function that may or maybe not take `RunContext` as an argument, and may or\nmay not be async.\n\nUsa...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2848"}, {"type": "concept", "id": "toolfunccontext"}, {"type": "document", "content": "###  ToolFuncPlain `module-attribute`\n\n    \n    \n    ToolFuncPlain = [Callable](https://docs.python....", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2849"}, {"type": "concept", "id": "toolfuncplain"}, {"type": "concept", "id": "toolfunceither"}, {"type": "document", "content": "Usage `ToolFuncEither[AgentDepsT, ToolParams]`.\n\n###  ToolPrepareFunc `module-attribute`\n\n    \n    \n...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2850"}, {"type": "concept", "id": "toolpreparefunc"}, {"type": "concept", "id": "toolfunceitheragentdepst"}, {"type": "document", "content": "Example \u2014 here `only_if_42` is valid as a `ToolPrepareFunc`:\n\n    \n    \n    from typing import Union...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2851"}, {"type": "concept", "id": "onlyif42"}, {"type": "concept", "id": "runcontextint"}, {"type": "concept", "id": "tooldef"}, {"type": "document", "content": "Usage `ToolPrepareFunc[AgentDepsT]`.\n\n###  DocstringFormat `module-attribute`\n\n    \n    \n    Docstri...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2852"}, {"type": "concept", "id": "docstrings"}, {"type": "concept", "id": "numpy"}, {"type": "concept", "id": "sphinx"}, {"type": "document", "content": "###  Tool `dataclass`\n\nBases: `[Generic](https://docs.python.org/3/library/typing.html#typing.Generi...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2853"}, {"type": "concept", "id": "typinggenericagentdepst"}, {"type": "document", "content": "164\n    165\n    166\n    167\n    168\n    169\n    170\n    171\n    172\n    173\n    174\n    175\n    176\n...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2854"}, {"type": "document", "content": "252\n    253\n    254\n    255\n    256\n    257\n    258\n    259\n    260\n    261\n    262\n    263\n    264\n...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2855"}, {"type": "document", "content": "342\n    343\n    344\n    345\n    346\n    347\n    348\n    349\n    350\n    351\n    352\n    353\n    354\n...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2856"}, {"type": "document", "content": "|...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2857"}, {"type": "document", "content": "@dataclass(init=False)\n    class Tool(Generic[AgentDepsT]):\n        \"\"\"A tool function for an agent....", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2858"}, {"type": "document", "content": "_parameters_json_schema: ObjectJsonSchema = field(init=False)\n    \n        # TODO: Move this state o...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2859"}, {"type": "concept", "id": "parametersjsonschema"}, {"type": "concept", "id": "objectjsonschema"}, {"type": "document", "content": "require_parameter_descriptions: bool = False,\n            schema_generator: type[GenerateJsonSchema]...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2860"}, {"type": "concept", "id": "noqai001"}, {"type": "document", "content": "from pydantic_ai.tools import ToolDefinition\n    \n            async def my_tool(ctx: RunContext[int]...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2861"}, {"type": "document", "content": "this is inferred if unset.\n                max_retries: Maximum number of retries allowed for this t...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2862"}, {"type": "document", "content": "Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n        ...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2863"}, {"type": "document", "content": "self.name = name or function.__name__\n            self.description = description or f['description']...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2864"}, {"type": "concept", "id": "functionname"}, {"type": "concept", "id": "selfdescription"}, {"type": "document", "content": "\"\"\"Get the tool definition.\n    \n            By default, this method creates a tool definition, then...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2865"}, {"type": "concept", "id": "selfprepare"}, {"type": "document", "content": "else:\n                return tool_def\n    \n        async def run(\n            self, message: _messag...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2866"}, {"type": "concept", "id": "genaitoolcallid"}, {"type": "document", "content": "'gen_ai.tool.call.id': message.tool_call_id,\n                'tool_arguments': message.args_as_json_...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2867"}, {"type": "concept", "id": "toolarguments"}, {"type": "concept", "id": "messagetoolcallid"}, {"type": "concept", "id": "messageargsasjsonstr"}, {"type": "document", "content": "return await self._run(message, run_context)\n    \n        async def _run(\n            self, message:...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2868"}, {"type": "concept", "id": "argsdict"}, {"type": "document", "content": "response_content = await function(*args, **kwargs)\n                else:\n                    functio...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2869"}, {"type": "document", "content": "run_context: RunContext[AgentDepsT],\n        ) -> tuple[list[Any], dict[str, Any]]:\n            if s...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2870"}, {"type": "concept", "id": "selfsingleargname"}, {"type": "concept", "id": "runcontextagentdepst"}, {"type": "concept", "id": "tuplelistany"}, {"type": "document", "content": "return args, args_dict\n    \n        def _on_error(\n            self, exc: ValidationError | ModelRet...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2871"}, {"type": "concept", "id": "selfmaxretries"}, {"type": "concept", "id": "messagesretrypromptpart"}, {"type": "concept", "id": "selfcurrentretry"}, {"type": "document", "content": "content=content,\n                    tool_call_id=call_message.tool_call_id,\n                )\n     ...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2872"}, {"type": "concept", "id": "toolcallidcallmessagetoolcallid"}, {"type": "document", "content": "__init__(\n        function: ToolFuncEither[AgentDepsT],\n        *,\n        takes_ctx: [bool](https:/...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2873"}, {"type": "document", "content": "[GenerateJsonSchema](https://docs.pydantic.dev/latest/api/json_schema/#pydantic.json_schema.Generate...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2874"}, {"type": "document", "content": "Create a new tool instance.\n\nExample usage:\n\n    \n    \n    from pydantic_ai import Agent, RunContext...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2875"}, {"type": "document", "content": "or with a custom prepare method:\n\n    \n    \n    from typing import Union\n    \n    from pydantic_ai i...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2876"}, {"type": "document", "content": "Name | Type | Description | Default  \n---|---|---|---  \n`function` |  `ToolFuncEither[AgentDepsT]` |...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2877"}, {"type": "document", "content": "`description` |  `[str](https://docs.python.org/3/library/stdtypes.html#str) | None` |  Description ...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2878"}, {"type": "document", "content": "`require_parameter_descriptions` |  `[bool](https://docs.python.org/3/library/functions.html#bool)` ...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2879"}, {"type": "document", "content": "187\n    188\n    189\n    190\n    191\n    192\n    193\n    194\n    195\n    196\n    197\n    198\n    199\n...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2880"}, {"type": "document", "content": "def __init__(\n        self,\n        function: ToolFuncEither[AgentDepsT],\n        *,\n        takes_c...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2881"}, {"type": "concept", "id": "maxretries"}, {"type": "document", "content": "return f'{ctx.deps} {x} {y}'\n    \n        agent = Agent('test', tools=[Tool(my_tool)])\n        ```\n ...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2882"}, {"type": "concept", "id": "fctxdeps"}, {"type": "concept", "id": "agenttest"}, {"type": "document", "content": "agent = Agent('test', tools=[Tool(my_tool, prepare=prep_my_tool)])\n        ```\n    \n    \n        Arg...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2883"}, {"type": "document", "content": "tool from a given step. This is useful if you want to customise a tool at call time,\n               ...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2884"}, {"type": "document", "content": "takes_ctx = _pydantic.takes_ctx(function)\n    \n        f = _pydantic.function_schema(\n            fu...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2885"}, {"type": "concept", "id": "pydantictakesctxfunction"}, {"type": "document", "content": "self._positional_fields = f['positional_fields']\n        self._var_positional_field = f['var_positio...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2886"}, {"type": "concept", "id": "selfpositionalfields"}, {"type": "concept", "id": "fpositionalfields"}, {"type": "concept", "id": "selfvarpositionalfield"}, {"type": "concept", "id": "fvarpositionalfield"}, {"type": "concept", "id": "selfvalidator"}, {"type": "document", "content": "prepare_tool_def(\n        ctx: RunContext[AgentDepsT],\n    ) -> ToolDefinition | None\n    \n\nGet the ...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2887"}, {"type": "concept", "id": "preparetooldef"}, {"type": "document", "content": "|\n\n    \n    \n    async def prepare_tool_def(self, ctx: RunContext[AgentDepsT]) -> ToolDefinition | N...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2888"}, {"type": "document", "content": "run(\n        message: [ToolCallPart](../messages/#pydantic_ai.messages.ToolCallPart \"pydantic_ai.mes...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2889"}, {"type": "concept", "id": "toolcallpartmessagespydanticaimessagestoolcallpart"}, {"type": "concept", "id": "pydanticaimessagestoolcallpart"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/tools.py`\n\n    \n    \n    290\n    291\n    292\n    293\n  ...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2890"}, {"type": "concept", "id": "pydanticaislimpydanticaitoolspy"}, {"type": "document", "content": "async def run(\n        self, message: _messages.ToolCallPart, run_context: RunContext[AgentDepsT], t...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2891"}, {"type": "document", "content": "'logfire.msg': f'running tool: {self.name}',\n            # add the JSON schema so these attributes a...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2892"}, {"type": "concept", "id": "frunning"}, {"type": "document", "content": "ObjectJsonSchema: [TypeAlias](https://typing-extensions.readthedocs.io/en/latest/index.html#typing_e...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2893"}, {"type": "document", "content": "This is used for both function tools result tools.\n\nSource code in `pydantic_ai_slim/pydantic_ai/too...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2894"}, {"type": "document", "content": "|\n\n    \n    \n    @dataclass\n    class ToolDefinition:\n        \"\"\"Definition of a tool passed to a mo...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2895"}, {"type": "document", "content": "The name of the tool.\n\n####  description `instance-attribute`\n\n    \n    \n    description: [str](http...", "source": "text_data\\tools.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\tools.txt:2896"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../img/logo-white.svg) ](.. \"PydanticAI\")\n\nPydanticAI\n\nTroubleshooting\n\nT...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2896"}, {"type": "document", "content": "* [ Introduction  ](..)\n  * [ Installation  ](../install/)\n  * [ Getting Help  ](../help/)\n  * [ Con...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2897"}, {"type": "document", "content": "* [ Unit testing  ](../testing/)\n    * [ Debugging and Monitoring  ](../logfire/)\n    * [ Multi-agen...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2898"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../mcp/client/)\n      * [ Server  ](../mcp/server/)\n      * [ MCP Run Pytho...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2899"}, {"type": "document", "content": "* [ Pydantic Model  ](../examples/pydantic-model/)\n    * [ Weather agent  ](../examples/weather-agen...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2900"}, {"type": "document", "content": "* [ pydantic_ai.messages  ](../api/messages/)\n    * [ pydantic_ai.exceptions  ](../api/exceptions/)\n...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2901"}, {"type": "document", "content": "* [ pydantic_ai.models.instrumented  ](../api/models/instrumented/)\n    * [ pydantic_ai.models.mistr...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2902"}, {"type": "document", "content": "* [ pydantic_graph.exceptions  ](../api/pydantic_graph/exceptions/)\n    * [ pydantic_evals.dataset  ...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2903"}, {"type": "document", "content": "Table of contents\n\n  * Jupyter Notebook Errors \n    * RuntimeError: This event loop is already runni...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2904"}, {"type": "concept", "id": "jupyter"}, {"type": "concept", "id": "notebook"}, {"type": "concept", "id": "runtimeerror"}, {"type": "document", "content": "### `RuntimeError: This event loop is already running`\n\nThis error is caused by conflicts between th...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2905"}, {"type": "concept", "id": "conflicts"}, {"type": "document", "content": "## Monitoring HTTPX Requests\n\nYou can use custom `httpx` clients in your models in order to access s...", "source": "text_data\\troubleshooting.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\troubleshooting.txt:2906"}, {"type": "concept", "id": "clients"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\npydantic_ai....", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2906"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2907"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2908"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2909"}, {"type": "document", "content": "* [ Pydantic Model  ](../../examples/pydantic-model/)\n    * [ Weather agent  ](../../examples/weathe...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2910"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../result/)\n    * [ pydantic_ai.messages  ](../messages/)\n    * [ pydantic...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2911"}, {"type": "document", "content": "* [ pydantic_ai.format_as_xml  ](../format_as_xml/)\n    * [ pydantic_ai.models  ](../models/base/)\n ...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2912"}, {"type": "document", "content": "* [ pydantic_ai.models.wrapper  ](../models/wrapper/)\n    * [ pydantic_ai.providers  ](../providers/...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2913"}, {"type": "document", "content": "Table of contents\n\n  * usage \n  * Usage \n    * requests \n    * request_tokens \n    * response_tokens...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2914"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/usage.py`\n\n    \n    \n    11\n    12\n    13\n    14\n    15...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2915"}, {"type": "concept", "id": "pydanticaislimpydanticaiusagepy"}, {"type": "document", "content": "@dataclass\n    class Usage:\n        \"\"\"LLM usage associated with a request or run.\n    \n        Resp...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2916"}, {"type": "concept", "id": "requesttokens"}, {"type": "document", "content": "details: dict[str, int] | None = None\n        \"\"\"Any extra details returned by the model.\"\"\"\n    \n  ...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2917"}, {"type": "concept", "id": "othervalue"}, {"type": "document", "content": "if incr_usage.details:\n                self.details = self.details or {}\n                for key, va...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2918"}, {"type": "concept", "id": "selfdetails"}, {"type": "concept", "id": "newusage"}, {"type": "concept", "id": "incrusagedetails"}, {"type": "document", "content": "'gen_ai.usage.input_tokens': self.request_tokens,\n                'gen_ai.usage.output_tokens': self...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2919"}, {"type": "concept", "id": "genaiusageinputtokens"}, {"type": "concept", "id": "selfrequesttokens"}, {"type": "concept", "id": "genaiusageoutputtokens"}, {"type": "concept", "id": "selfresponsetokens"}, {"type": "document", "content": "requests: [int](https://docs.python.org/3/library/functions.html#int) = 0\n    \n\nNumber of requests m...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2920"}, {"type": "document", "content": "Total tokens used in the whole run, should generally be equal to\n`request_tokens + response_tokens`....", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2921"}, {"type": "concept", "id": "total"}, {"type": "document", "content": "Increment the usage in place.\n\nParameters:\n\nName | Type | Description | Default  \n---|---|---|---  \n...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2922"}, {"type": "concept", "id": "place"}, {"type": "document", "content": "def incr(self, incr_usage: Usage, *, requests: int = 0) -> None:\n        \"\"\"Increment the usage in p...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2923"}, {"type": "document", "content": "for key, value in incr_usage.details.items():\n                self.details[key] = self.details.get(k...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2924"}, {"type": "concept", "id": "incrusagedetailsitems"}, {"type": "concept", "id": "selfdetailskey"}, {"type": "concept", "id": "selfdetailsgetkey"}, {"type": "document", "content": "__add__(other: Usage) -> Usage\n    \n\nAdd two Usages together.\n\nThis is provided so it's trivial to s...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2925"}, {"type": "concept", "id": "usages"}, {"type": "concept", "id": "together"}, {"type": "concept", "id": "trivial"}, {"type": "document", "content": "opentelemetry_attributes() -> [dict](https://docs.python.org/3/library/stdtypes.html#dict)[[str](htt...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2926"}, {"type": "concept", "id": "opentelemetryattributes"}, {"type": "document", "content": "59\n    60\n    61\n    62\n    63\n    64\n    65\n    66\n    67\n\n|\n\n    \n    \n    def opentelemetry_attri...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2927"}, {"type": "concept", "id": "opentelemetryattributesself"}, {"type": "document", "content": "Limits on model usage.\n\nThe request count is tracked by pydantic_ai, and the request limit is checke...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2928"}, {"type": "concept", "id": "checked"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/usage.py`\n\n    \n    \n     70\n     71\n     72\n     73\n  ...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2929"}, {"type": "document", "content": "@dataclass\n    class UsageLimits:\n        \"\"\"Limits on model usage.\n    \n        The request count i...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2930"}, {"type": "document", "content": "\"\"\"The maximum number of tokens allowed in responses from the model.\"\"\"\n        total_tokens_limit: ...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2931"}, {"type": "document", "content": "\"\"\"\n            return any(\n                limit is not None\n                for limit in (self.req...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2932"}, {"type": "concept", "id": "requestlimit"}, {"type": "document", "content": "request_tokens = usage.request_tokens or 0\n            if self.request_tokens_limit is not None and ...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2933"}, {"type": "concept", "id": "selfrequesttokenslimit"}, {"type": "concept", "id": "responsetokens"}, {"type": "concept", "id": "selfresponsetokenslimit"}, {"type": "document", "content": ")\n    \n            total_tokens = usage.total_tokens or 0\n            if self.total_tokens_limit is ...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2934"}, {"type": "concept", "id": "totaltokens"}, {"type": "concept", "id": "selftotaltokenslimit"}, {"type": "concept", "id": "usagetotaltokens"}, {"type": "concept", "id": "usagelimitexceededfexceeded"}, {"type": "document", "content": "request_limit: [int](https://docs.python.org/3/library/functions.html#int) | None = 50\n    \n\nThe max...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2935"}, {"type": "document", "content": "####  total_tokens_limit `class-attribute` `instance-attribute`\n\n    \n    \n    total_tokens_limit: [...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2936"}, {"type": "concept", "id": "totaltokenslimit"}, {"type": "concept", "id": "hastokenlimits"}, {"type": "document", "content": "Source code in `pydantic_ai_slim/pydantic_ai/usage.py`\n\n    \n    \n     89\n     90\n     91\n     92\n  ...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2937"}, {"type": "document", "content": "|\n\n    \n    \n    def has_token_limits(self) -> bool:\n        \"\"\"Returns `True` if this instance plac...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2938"}, {"type": "concept", "id": "hastokenlimitsself"}, {"type": "document", "content": "check_before_request(usage: Usage) -> None\n    \n\nRaises a `UsageLimitExceeded` exception if the next...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2939"}, {"type": "concept", "id": "exceed"}, {"type": "document", "content": "check_tokens(usage: Usage) -> None\n    \n\nRaises a `UsageLimitExceeded` exception if the usage exceed...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2940"}, {"type": "concept", "id": "checktokensusage"}, {"type": "document", "content": "def check_tokens(self, usage: Usage) -> None:\n        \"\"\"Raises a `UsageLimitExceeded` exception if ...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2941"}, {"type": "document", "content": ")\n    \n        total_tokens = usage.total_tokens or 0\n        if self.total_tokens_limit is not None...", "source": "text_data\\usage.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\usage.txt:2942"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../img/logo-white.svg) ](../.. \"PydanticAI\")\n\nPydanticAI\n\nWeather agen...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2942"}, {"type": "document", "content": "* [ Introduction  ](../..)\n  * [ Installation  ](../../install/)\n  * [ Getting Help  ](../../help/)\n...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2943"}, {"type": "document", "content": "* [ Image, Audio & Document Input  ](../../input/)\n    * [ MCP  ](../../mcp/)...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2944"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../mcp/client/)\n      * [ Server  ](../../mcp/server/)\n      * [ MCP Run...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2945"}, {"type": "document", "content": "* [ Pydantic Model  ](../pydantic-model/)\n    * Weather agent  [ Weather agent  ](./) Table of conte...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2946"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../api/result/)\n    * [ pydantic_ai.messages  ](../../api/messages/)\n  ...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2947"}, {"type": "document", "content": "* [ pydantic_ai.models.gemini  ](../../api/models/gemini/)\n    * [ pydantic_ai.models.groq  ](../../...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2948"}, {"type": "document", "content": "* [ pydantic_graph.persistence  ](../../api/pydantic_graph/persistence/)\n    * [ pydantic_graph.merm...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2949"}, {"type": "document", "content": "Table of contents\n\n  * Running the Example \n  * Example Code \n  * Running the UI \n  * UI Code \n\n# We...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2950"}, {"type": "concept", "id": "locations"}, {"type": "document", "content": "## Running the Example\n\nTo run this example properly, you might want to add two extra API keys **(No...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2951"}, {"type": "concept", "id": "pydanticaiexamplesweatheragent"}, {"type": "concept", "id": "properly"}, {"type": "document", "content": "from __future__ import annotations as _annotations\n    \n    import asyncio\n    import os\n    from da...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2952"}, {"type": "document", "content": "# the below tools appropriately, but others like anthropic and gemini require a bit more direction.\n...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2953"}, {"type": "concept", "id": "getlatlng"}, {"type": "concept", "id": "latitude"}, {"type": "concept", "id": "longitude"}, {"type": "concept", "id": "locationdescription"}, {"type": "document", "content": "\"\"\"\n        if ctx.deps.geo_api_key is None:\n            # if no API key is provided, return a dummy...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2954"}, {"type": "concept", "id": "ctxdepsgeoapikey"}, {"type": "concept", "id": "dummy"}, {"type": "document", "content": "@weather_agent.tool\n    async def get_weather(ctx: RunContext[Deps], lat: float, lng: float) -> dict...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2955"}, {"type": "concept", "id": "ctxdepsweatherapikey"}, {"type": "document", "content": "r = await ctx.deps.client.get(\n                'https://api.tomorrow.io/v4/weather/realtime', params...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2956"}, {"type": "concept", "id": "cloudy"}, {"type": "concept", "id": "clear"}, {"type": "concept", "id": "mostly"}, {"type": "concept", "id": "light"}, {"type": "document", "content": "5000: 'Snow',\n            5001: 'Flurries',\n            5100: 'Light Snow',\n            5101: 'Heavy...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2957"}, {"type": "concept", "id": "freezing"}, {"type": "concept", "id": "heavy"}, {"type": "concept", "id": "pellets"}, {"type": "document", "content": "# create a free API key at https://www.tomorrow.io/weather-api/\n            weather_api_key = os.get...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2958"}, {"type": "concept", "id": "httpswwwtomorrowioweatherapi"}, {"type": "concept", "id": "weatherapikey"}, {"type": "concept", "id": "osgetenvweatherapikey"}, {"type": "concept", "id": "httpsgeocodemapsco"}, {"type": "document", "content": "## Running the UI\n\nYou can build multi-turn chat applications for your agent with\n[Gradio](https://w...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2959"}, {"type": "document", "content": "from __future__ import annotations as _annotations\n    \n    import json\n    import os\n    \n    from ...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2960"}, {"type": "concept", "id": "gradio"}, {"type": "concept", "id": "importerror"}, {"type": "document", "content": "geo_api_key = os.getenv('GEO_API_KEY')\n    deps = Deps(client=client, weather_api_key=weather_api_ke...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2961"}, {"type": "concept", "id": "chatbot"}, {"type": "concept", "id": "geoapikey"}, {"type": "concept", "id": "osgetenvgeoapikey"}, {"type": "document", "content": "if hasattr(call.args, 'args_json')\n                            else json.dumps(call.args.args_dict)\n...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.516080", "id": "text_data\\weather-agent.txt:2962"}, {"type": "concept", "id": "calltoolcallid"}, {"type": "concept", "id": "hasattrcallargs"}, {"type": "concept", "id": "argsjson"}, {"type": "concept", "id": "jsondumpscallargsargsdict"}, {"type": "document", "content": "if isinstance(call, ToolReturnPart):\n                        for gr_message in chatbot:\n            ...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\weather-agent.txt:2963"}, {"type": "concept", "id": "grskip"}, {"type": "concept", "id": "isinstancecall"}, {"type": "document", "content": "past_messages = result.all_messages()\n    \n            yield gr.Textbox(interactive=True), gr.skip()...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\weather-agent.txt:2964"}, {"type": "concept", "id": "pastmessages"}, {"type": "concept", "id": "newhistory"}, {"type": "document", "content": "def select_data(message: gr.SelectData) -> str:\n        return message.value['text']\n    \n    \n    w...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\weather-agent.txt:2965"}, {"type": "concept", "id": "center"}, {"type": "concept", "id": "stylemargin"}, {"type": "concept", "id": "selectdatamessage"}, {"type": "concept", "id": "grselectdata"}, {"type": "document", "content": "label='Packing Assistant',\n            type='messages',\n            avatar_images=(None, 'https://ai...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\weather-agent.txt:2966"}, {"type": "concept", "id": "labelpacking"}, {"type": "document", "content": "chatbot.retry(\n            handle_retry, [chatbot, past_messages], [prompt, chatbot, past_messages]\n...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\weather-agent.txt:2967"}, {"type": "concept", "id": "chatbotretry"}, {"type": "concept", "id": "handleretry"}, {"type": "document", "content": "\u00a9 Pydantic Services Inc. 2024 to present...", "source": "text_data\\weather-agent.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\weather-agent.txt:2968"}, {"type": "document", "content": "Skip to content\n\n[ ![logo](../../../img/logo-white.svg) ](../../.. \"PydanticAI\")\n\nPydanticAI\n\npydant...", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2968"}, {"type": "document", "content": "* [ Introduction  ](../../..)\n  * [ Installation  ](../../../install/)\n  * [ Getting Help  ](../../....", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2969"}, {"type": "document", "content": "* [ Graphs  ](../../../graph/)\n    * [ Evals  ](../../../evals/)\n    * [ Image, Audio & Document Inp...", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2970"}, {"type": "document", "content": "MCP\n\n      * [ Client  ](../../../mcp/client/)\n      * [ Server  ](../../../mcp/server/)\n      * [ M...", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2971"}, {"type": "document", "content": "* [ Pydantic Model  ](../../../examples/pydantic-model/)\n    * [ Weather agent  ](../../../examples/...", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2972"}, {"type": "document", "content": "* [ pydantic_ai.result  ](../../result/)\n    * [ pydantic_ai.messages  ](../../messages/)\n    * [ py...", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2973"}, {"type": "document", "content": "* [ pydantic_ai.models.mistral  ](../mistral/)\n    * [ pydantic_ai.models.test  ](../test/)\n    * [ ...", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2974"}, {"type": "concept", "id": "pydanticaimodelswrapper"}, {"type": "document", "content": "* [ pydantic_evals.dataset  ](../../pydantic_evals/dataset/)\n    * [ pydantic_evals.evaluators  ](.....", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2975"}, {"type": "document", "content": "Table of contents\n\n  * wrapper \n  * WrapperModel \n    * wrapped \n\n# pydantic_ai.models.wrapper\n\n### ...", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2976"}, {"type": "concept", "id": "wrappermodel"}, {"type": "concept", "id": "wrapper"}, {"type": "document", "content": "@dataclass(init=False)\n    class WrapperModel(Model):\n        \"\"\"Model which wraps another model.\n  ...", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2977"}, {"type": "concept", "id": "wrapped"}, {"type": "document", "content": "model_request_parameters: ModelRequestParameters,\n        ) -> AsyncIterator[StreamedResponse]:\n    ...", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2978"}, {"type": "document", "content": "wrapped: [Model](../base/#pydantic_ai.models.Model \"pydantic_ai.models.Model\") = infer_model(wrapped...", "source": "text_data\\wrapper.txt", "last_updated": "2025-04-03T16:58:09.531918", "id": "text_data\\wrapper.txt:2979"}, {"type": "concept", "id": "infermodelwrapped"}, {"type": "concept", "id": "underlying"}], "links": [{"type": "contains", "source": "text_data\\agent.txt:0", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agent.txt:0", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\agent.txt:0", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\agent.txt:0", "target": "v0050"}, {"type": "contains", "source": "text_data\\agent.txt:0", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\agent.txt:1", "target": "tools"}, {"type": "contains", "source": "text_data\\agent.txt:1", "target": "contributing"}, {"type": "contains", "source": "text_data\\agent.txt:1", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\agent.txt:1", "target": "documentation"}, {"type": "contains", "source": "text_data\\agent.txt:1", "target": "agents"}, {"type": "contains", "source": "text_data\\agent.txt:2", "target": "input"}, {"type": "contains", "source": "text_data\\agent.txt:2", "target": "image"}, {"type": "contains", "source": "text_data\\agent.txt:2", "target": "audio"}, {"type": "contains", "source": "text_data\\agent.txt:2", "target": "document"}, {"type": "contains", "source": "text_data\\agent.txt:3", "target": "examples"}, {"type": "contains", "source": "text_data\\agent.txt:3", "target": "client"}, {"type": "contains", "source": "text_data\\agent.txt:3", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\agent.txt:3", "target": "server"}, {"type": "contains", "source": "text_data\\agent.txt:3", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\agent.txt:4", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:4", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:4", "target": "stream"}, {"type": "contains", "source": "text_data\\agent.txt:4", "target": "reference"}, {"type": "contains", "source": "text_data\\agent.txt:4", "target": "pydanticaiagent"}, {"type": "contains", "source": "text_data\\agent.txt:5", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:5", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:5", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:5", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:5", "target": "instrument"}, {"type": "contains", "source": "text_data\\agent.txt:6", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:6", "target": "newmessagesjson"}, {"type": "contains", "source": "text_data\\agent.txt:6", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:6", "target": "runresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:6", "target": "capturerunmessages"}, {"type": "contains", "source": "text_data\\agent.txt:7", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\agent.txt:7", "target": "pydanticaimodelsanthropic"}, {"type": "contains", "source": "text_data\\agent.txt:7", "target": "modelsanthropic"}, {"type": "contains", "source": "text_data\\agent.txt:7", "target": "pydanticaimodelsbedrock"}, {"type": "contains", "source": "text_data\\agent.txt:7", "target": "modelsbedrock"}, {"type": "contains", "source": "text_data\\agent.txt:8", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\agent.txt:8", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\agent.txt:8", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\agent.txt:8", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\agent.txt:8", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\agent.txt:9", "target": "table"}, {"type": "contains", "source": "text_data\\agent.txt:9", "target": "contents"}, {"type": "contains", "source": "text_data\\agent.txt:10", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:10", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:10", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:10", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:10", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:11", "target": "agents"}, {"type": "contains", "source": "text_data\\agent.txt:11", "target": "resultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:11", "target": "generic"}, {"type": "contains", "source": "text_data\\agent.txt:11", "target": "pydanticaiagent"}, {"type": "contains", "source": "text_data\\agent.txt:11", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:12", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:12", "target": "minimal"}, {"type": "contains", "source": "text_data\\agent.txt:12", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:12", "target": "example"}, {"type": "contains", "source": "text_data\\agent.txt:12", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agent.txt:30", "target": "agents"}, {"type": "contains", "source": "text_data\\agent.txt:30", "target": "class"}, {"type": "contains", "source": "text_data\\agent.txt:30", "target": "generic"}, {"type": "contains", "source": "text_data\\agent.txt:30", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:30", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:31", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:31", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:31", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:31", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:31", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:32", "target": "dataclassesfieldreprfalse"}, {"type": "contains", "source": "text_data\\agent.txt:32", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:32", "target": "instrument"}, {"type": "contains", "source": "text_data\\agent.txt:32", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:32", "target": "provided"}, {"type": "contains", "source": "text_data\\agent.txt:33", "target": "dataclassesfieldreprfalse"}, {"type": "contains", "source": "text_data\\agent.txt:33", "target": "dictstr"}, {"type": "contains", "source": "text_data\\agent.txt:33", "target": "resulttoolname"}, {"type": "contains", "source": "text_data\\agent.txt:33", "target": "resulttooldescription"}, {"type": "contains", "source": "text_data\\agent.txt:33", "target": "resultschema"}, {"type": "contains", "source": "text_data\\agent.txt:34", "target": "dataclassesfieldreprfalse"}, {"type": "contains", "source": "text_data\\agent.txt:34", "target": "dataclassesfielddefaultnone"}, {"type": "contains", "source": "text_data\\agent.txt:34", "target": "reprfalse"}, {"type": "contains", "source": "text_data\\agent.txt:34", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:34", "target": "mcpservers"}, {"type": "contains", "source": "text_data\\agent.txt:35", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:35", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:35", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:35", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:35", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:36", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:36", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:36", "target": "provide"}, {"type": "contains", "source": "text_data\\agent.txt:36", "target": "allow"}, {"type": "contains", "source": "text_data\\agent.txt:36", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:37", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:37", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:37", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:37", "target": "final"}, {"type": "contains", "source": "text_data\\agent.txt:37", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:38", "target": "register"}, {"type": "contains", "source": "text_data\\agent.txt:38", "target": "tools"}, {"type": "contains", "source": "text_data\\agent.txt:38", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:38", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:38", "target": "resultretries"}, {"type": "contains", "source": "text_data\\agent.txt:39", "target": "which"}, {"type": "contains", "source": "text_data\\agent.txt:39", "target": "instrument"}, {"type": "contains", "source": "text_data\\agent.txt:39", "target": "checks"}, {"type": "contains", "source": "text_data\\agent.txt:39", "target": "necessary"}, {"type": "contains", "source": "text_data\\agent.txt:39", "target": "environment"}, {"type": "contains", "source": "text_data\\agent.txt:40", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:40", "target": "selfmodel"}, {"type": "contains", "source": "text_data\\agent.txt:40", "target": "value"}, {"type": "contains", "source": "text_data\\agent.txt:40", "target": "agentinstrumentallpydanticaiagentinstrumentall"}, {"type": "contains", "source": "text_data\\agent.txt:40", "target": "which"}, {"type": "contains", "source": "text_data\\agent.txt:41", "target": "resulttoolname"}, {"type": "contains", "source": "text_data\\agent.txt:41", "target": "resulttooldescription"}, {"type": "contains", "source": "text_data\\agent.txt:41", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:41", "target": "resultretries"}, {"type": "contains", "source": "text_data\\agent.txt:41", "target": "selfdepstype"}, {"type": "contains", "source": "text_data\\agent.txt:42", "target": "instrument"}, {"type": "contains", "source": "text_data\\agent.txt:42", "target": "selfmcpservers"}, {"type": "contains", "source": "text_data\\agent.txt:42", "target": "mcpservers"}, {"type": "contains", "source": "text_data\\agent.txt:42", "target": "tools"}, {"type": "contains", "source": "text_data\\agent.txt:42", "target": "isinstancetool"}, {"type": "contains", "source": "text_data\\agent.txt:43", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:43", "target": "listmessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:43", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:43", "target": "modelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:43", "target": "modelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:44", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:44", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:44", "target": "modelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:44", "target": "modelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:44", "target": "agentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:45", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:45", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:45", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:45", "target": "graph"}, {"type": "contains", "source": "text_data\\agent.txt:45", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:46", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:46", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:46", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:46", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:46", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:47", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:47", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:47", "target": "infername"}, {"type": "contains", "source": "text_data\\agent.txt:47", "target": "usagelimits"}, {"type": "contains", "source": "text_data\\agent.txt:47", "target": "limits"}, {"type": "contains", "source": "text_data\\agent.txt:48", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:48", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:48", "target": "agentrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:48", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:48", "target": "usagelimitsusagelimits"}, {"type": "contains", "source": "text_data\\agent.txt:49", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:49", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:49", "target": "nodes"}, {"type": "contains", "source": "text_data\\agent.txt:49", "target": "executed"}, {"type": "contains", "source": "text_data\\agent.txt:49", "target": "graph"}, {"type": "contains", "source": "text_data\\agent.txt:50", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:50", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:50", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:50", "target": "stream"}, {"type": "contains", "source": "text_data\\agent.txt:50", "target": "events"}, {"type": "contains", "source": "text_data\\agent.txt:51", "target": "printnodes"}, {"type": "contains", "source": "text_data\\agent.txt:51", "target": "modelrequestnode"}, {"type": "contains", "source": "text_data\\agent.txt:51", "target": "requestmodelrequest"}, {"type": "contains", "source": "text_data\\agent.txt:51", "target": "parts"}, {"type": "contains", "source": "text_data\\agent.txt:51", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\agent.txt:52", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:52", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:52", "target": "validators"}, {"type": "contains", "source": "text_data\\agent.txt:52", "target": "modelnamegpt4o"}, {"type": "contains", "source": "text_data\\agent.txt:52", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\agent.txt:53", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:53", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:53", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:53", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:53", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:54", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:54", "target": "build"}, {"type": "contains", "source": "text_data\\agent.txt:54", "target": "graph"}, {"type": "contains", "source": "text_data\\agent.txt:54", "target": "state"}, {"type": "contains", "source": "text_data\\agent.txt:54", "target": "usageusage"}, {"type": "contains", "source": "text_data\\agent.txt:55", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:55", "target": "consider"}, {"type": "contains", "source": "text_data\\agent.txt:55", "target": "though"}, {"type": "contains", "source": "text_data\\agent.txt:55", "target": "retries0"}, {"type": "contains", "source": "text_data\\agent.txt:55", "target": "runstep0"}, {"type": "contains", "source": "text_data\\agent.txt:56", "target": "agentname"}, {"type": "contains", "source": "text_data\\agent.txt:56", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:56", "target": "usagelimits"}, {"type": "contains", "source": "text_data\\agent.txt:56", "target": "tracer"}, {"type": "contains", "source": "text_data\\agent.txt:56", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:57", "target": "graphdeps"}, {"type": "contains", "source": "text_data\\agent.txt:57", "target": "agentgraphgraphagentdepsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:57", "target": "runresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:57", "target": "userdepsdeps"}, {"type": "contains", "source": "text_data\\agent.txt:57", "target": "promptuserprompt"}, {"type": "contains", "source": "text_data\\agent.txt:58", "target": "startnode"}, {"type": "contains", "source": "text_data\\agent.txt:58", "target": "runspanrunspan"}, {"type": "contains", "source": "text_data\\agent.txt:58", "target": "tracertracer"}, {"type": "contains", "source": "text_data\\agent.txt:58", "target": "agentgraphuserpromptnodeagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:58", "target": "userpromptuserprompt"}, {"type": "contains", "source": "text_data\\agent.txt:59", "target": "overload"}, {"type": "contains", "source": "text_data\\agent.txt:59", "target": "runsync"}, {"type": "contains", "source": "text_data\\agent.txt:59", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:59", "target": "sequencemessagesusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:59", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:60", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:60", "target": "typerunresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:60", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:60", "target": "listmessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:60", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:61", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:61", "target": "method"}, {"type": "contains", "source": "text_data\\agent.txt:61", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:61", "target": "listmessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:61", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:62", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:62", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:62", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:62", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:62", "target": "validators"}, {"type": "contains", "source": "text_data\\agent.txt:63", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:63", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:63", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:63", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:63", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:64", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:64", "target": "infername"}, {"type": "contains", "source": "text_data\\agent.txt:64", "target": "selfname"}, {"type": "contains", "source": "text_data\\agent.txt:64", "target": "selfinfernameinspectcurrentframe"}, {"type": "contains", "source": "text_data\\agent.txt:64", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:65", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:65", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:65", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:65", "target": "listmessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:65", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:66", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:66", "target": "typerunresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:66", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:66", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:66", "target": "listmessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:67", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:67", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:67", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:67", "target": "typerunresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:67", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:68", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:68", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:68", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:68", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:68", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:69", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:69", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:69", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:69", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:69", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:70", "target": "frame"}, {"type": "contains", "source": "text_data\\agent.txt:70", "target": "before"}, {"type": "contains", "source": "text_data\\agent.txt:70", "target": "though"}, {"type": "contains", "source": "text_data\\agent.txt:70", "target": "should"}, {"type": "contains", "source": "text_data\\agent.txt:70", "target": "event"}, {"type": "contains", "source": "text_data\\agent.txt:71", "target": "firstnode"}, {"type": "contains", "source": "text_data\\agent.txt:71", "target": "first"}, {"type": "contains", "source": "text_data\\agent.txt:71", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:71", "target": "infernamefalse"}, {"type": "contains", "source": "text_data\\agent.txt:71", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:72", "target": "resultschema"}, {"type": "contains", "source": "text_data\\agent.txt:72", "target": "isinstancenewpart"}, {"type": "contains", "source": "text_data\\agent.txt:72", "target": "finalresultmodelsstreamedresponse"}, {"type": "contains", "source": "text_data\\agent.txt:72", "target": "graphctxdepsresultschema"}, {"type": "contains", "source": "text_data\\agent.txt:72", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:73", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:73", "target": "finalresultdetails"}, {"type": "contains", "source": "text_data\\agent.txt:73", "target": "yielded"}, {"type": "contains", "source": "text_data\\agent.txt:73", "target": "resultschemafindtoolnewpart"}, {"type": "contains", "source": "text_data\\agent.txt:73", "target": "finalresults"}, {"type": "contains", "source": "text_data\\agent.txt:74", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:74", "target": "oncomplete"}, {"type": "contains", "source": "text_data\\agent.txt:74", "target": "called"}, {"type": "contains", "source": "text_data\\agent.txt:74", "target": "stream"}, {"type": "contains", "source": "text_data\\agent.txt:74", "target": "completed"}, {"type": "contains", "source": "text_data\\agent.txt:75", "target": "parts"}, {"type": "contains", "source": "text_data\\agent.txt:75", "target": "listmessagesmodelrequestpart"}, {"type": "contains", "source": "text_data\\agent.txt:75", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:75", "target": "event"}, {"type": "contains", "source": "text_data\\agent.txt:75", "target": "agentgraphprocessfunctiontools"}, {"type": "contains", "source": "text_data\\agent.txt:76", "target": "parts"}, {"type": "contains", "source": "text_data\\agent.txt:76", "target": "maybe"}, {"type": "contains", "source": "text_data\\agent.txt:76", "target": "should"}, {"type": "contains", "source": "text_data\\agent.txt:76", "target": "incrementing"}, {"type": "contains", "source": "text_data\\agent.txt:76", "target": "retry"}, {"type": "contains", "source": "text_data\\agent.txt:77", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:77", "target": "streamedresponse"}, {"type": "contains", "source": "text_data\\agent.txt:77", "target": "graphctxdepsresultschema"}, {"type": "contains", "source": "text_data\\agent.txt:77", "target": "agentgraphbuildruncontextgraphctx"}, {"type": "contains", "source": "text_data\\agent.txt:77", "target": "graphctxdepsresultvalidators"}, {"type": "contains", "source": "text_data\\agent.txt:78", "target": "utilsunset"}, {"type": "contains", "source": "text_data\\agent.txt:78", "target": "dependencies"}, {"type": "contains", "source": "text_data\\agent.txt:78", "target": "override"}, {"type": "contains", "source": "text_data\\agent.txt:78", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:78", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:79", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:79", "target": "overridedepsbefore"}, {"type": "contains", "source": "text_data\\agent.txt:79", "target": "selfoverridedeps"}, {"type": "contains", "source": "text_data\\agent.txt:79", "target": "utilsunset"}, {"type": "contains", "source": "text_data\\agent.txt:79", "target": "overridemodelbefore"}, {"type": "contains", "source": "text_data\\agent.txt:80", "target": "overload"}, {"type": "contains", "source": "text_data\\agent.txt:80", "target": "callableruncontextagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:80", "target": "awaitablestr"}, {"type": "contains", "source": "text_data\\agent.txt:80", "target": "callable"}, {"type": "contains", "source": "text_data\\agent.txt:80", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:81", "target": "systempromptsystempromptfuncagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:81", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:81", "target": "dynamic"}, {"type": "contains", "source": "text_data\\agent.txt:81", "target": "false"}, {"type": "contains", "source": "text_data\\agent.txt:81", "target": "callablesystempromptsystempromptfuncagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:82", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:82", "target": "decorate"}, {"type": "contains", "source": "text_data\\agent.txt:82", "target": "decorator"}, {"type": "contains", "source": "text_data\\agent.txt:82", "target": "agentsystemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:82", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:83", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:83", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:83", "target": "systempromptsystempromptfuncagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:83", "target": "example"}, {"type": "contains", "source": "text_data\\agent.txt:83", "target": "python"}, {"type": "contains", "source": "text_data\\agent.txt:84", "target": "resultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:84", "target": "dynamic"}, {"type": "contains", "source": "text_data\\agent.txt:84", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:84", "target": "overload"}, {"type": "contains", "source": "text_data\\agent.txt:84", "target": "resultvalidator"}, {"type": "contains", "source": "text_data\\agent.txt:85", "target": "resultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:85", "target": "resultvalidator"}, {"type": "contains", "source": "text_data\\agent.txt:85", "target": "awaitableresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:85", "target": "callableresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:85", "target": "overload"}, {"type": "contains", "source": "text_data\\agent.txt:86", "target": "decorator"}, {"type": "contains", "source": "text_data\\agent.txt:86", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:86", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:86", "target": "resultresultvalidatorfuncagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:86", "target": "resultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:87", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:87", "target": "raise"}, {"type": "contains", "source": "text_data\\agent.txt:87", "target": "modelretrywrong"}, {"type": "contains", "source": "text_data\\agent.txt:87", "target": "response"}, {"type": "contains", "source": "text_data\\agent.txt:87", "target": "toolfunccontextagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:88", "target": "toolparams"}, {"type": "contains", "source": "text_data\\agent.txt:88", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:88", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:88", "target": "toolfunccontextagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:88", "target": "overload"}, {"type": "contains", "source": "text_data\\agent.txt:89", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:89", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:89", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:89", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:89", "target": "toolpreparefuncagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:90", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:90", "target": "signature"}, {"type": "contains", "source": "text_data\\agent.txt:90", "target": "agenttool"}, {"type": "contains", "source": "text_data\\agent.txt:90", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:90", "target": "ctxdeps"}, {"type": "contains", "source": "text_data\\agent.txt:91", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:91", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:91", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:91", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:91", "target": "printresultdata"}, {"type": "contains", "source": "text_data\\agent.txt:92", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:92", "target": "format"}, {"type": "contains", "source": "text_data\\agent.txt:92", "target": "docstring"}, {"type": "contains", "source": "text_data\\agent.txt:92", "target": "toolfunccontextagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:92", "target": "toolparams"}, {"type": "contains", "source": "text_data\\agent.txt:93", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:93", "target": "noinspection"}, {"type": "contains", "source": "text_data\\agent.txt:93", "target": "pytypechecker"}, {"type": "contains", "source": "text_data\\agent.txt:93", "target": "selfregisterfunction"}, {"type": "contains", "source": "text_data\\agent.txt:93", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:94", "target": "toolfuncplaintoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:94", "target": "overload"}, {"type": "contains", "source": "text_data\\agent.txt:94", "target": "toolplain"}, {"type": "contains", "source": "text_data\\agent.txt:94", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:94", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:95", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:95", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:95", "target": "toolfuncplaintoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:95", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:95", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:96", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:96", "target": "signature"}, {"type": "contains", "source": "text_data\\agent.txt:96", "target": "agenttool"}, {"type": "contains", "source": "text_data\\agent.txt:96", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:96", "target": "learn"}, {"type": "contains", "source": "text_data\\agent.txt:97", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:97", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:97", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:97", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:97", "target": "foobar123spam314"}, {"type": "contains", "source": "text_data\\agent.txt:98", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:98", "target": "format"}, {"type": "contains", "source": "text_data\\agent.txt:98", "target": "docstring"}, {"type": "contains", "source": "text_data\\agent.txt:98", "target": "false"}, {"type": "contains", "source": "text_data\\agent.txt:98", "target": "toolfuncplaintoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:99", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:99", "target": "false"}, {"type": "contains", "source": "text_data\\agent.txt:99", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:99", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:99", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:100", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:100", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:100", "target": "takesctx"}, {"type": "contains", "source": "text_data\\agent.txt:100", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:100", "target": "toolpreparefuncagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:101", "target": "toolname"}, {"type": "contains", "source": "text_data\\agent.txt:101", "target": "requireparameterdescriptionsrequireparameterdescriptions"}, {"type": "contains", "source": "text_data\\agent.txt:101", "target": "schemageneratorschemagenerator"}, {"type": "contains", "source": "text_data\\agent.txt:101", "target": "selfregistertooltool"}, {"type": "contains", "source": "text_data\\agent.txt:101", "target": "registertoolself"}, {"type": "contains", "source": "text_data\\agent.txt:102", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:102", "target": "modelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:102", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:102", "target": "selfresultschema"}, {"type": "contains", "source": "text_data\\agent.txt:102", "target": "toolname"}, {"type": "contains", "source": "text_data\\agent.txt:103", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:103", "target": "selfmodel"}, {"type": "contains", "source": "text_data\\agent.txt:103", "target": "somemodel"}, {"type": "contains", "source": "text_data\\agent.txt:103", "target": "selfoverridemodel"}, {"type": "contains", "source": "text_data\\agent.txt:103", "target": "override"}, {"type": "contains", "source": "text_data\\agent.txt:104", "target": "instrument"}, {"type": "contains", "source": "text_data\\agent.txt:104", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:104", "target": "selfmodel"}, {"type": "contains", "source": "text_data\\agent.txt:104", "target": "modelsinfermodelselfmodel"}, {"type": "contains", "source": "text_data\\agent.txt:104", "target": "raise"}, {"type": "contains", "source": "text_data\\agent.txt:105", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:105", "target": "functionframe"}, {"type": "contains", "source": "text_data\\agent.txt:105", "target": "overridden"}, {"type": "contains", "source": "text_data\\agent.txt:105", "target": "overridedeps"}, {"type": "contains", "source": "text_data\\agent.txt:105", "target": "otherwise"}, {"type": "contains", "source": "text_data\\agent.txt:106", "target": "pragma"}, {"type": "contains", "source": "text_data\\agent.txt:106", "target": "branch"}, {"type": "contains", "source": "text_data\\agent.txt:106", "target": "selfname"}, {"type": "contains", "source": "text_data\\agent.txt:106", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:106", "target": "globals"}, {"type": "contains", "source": "text_data\\agent.txt:107", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:107", "target": "lastrunmessages"}, {"type": "contains", "source": "text_data\\agent.txt:107", "target": "attribute"}, {"type": "contains", "source": "text_data\\agent.txt:107", "target": "removed"}, {"type": "contains", "source": "text_data\\agent.txt:107", "target": "capturerunmessages"}, {"type": "contains", "source": "text_data\\agent.txt:108", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:108", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:108", "target": "typerunresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:108", "target": "resultresultschemarunresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:108", "target": "selfresultvalidators"}, {"type": "contains", "source": "text_data\\agent.txt:109", "target": "narrowing"}, {"type": "contains", "source": "text_data\\agent.txt:109", "target": "check"}, {"type": "contains", "source": "text_data\\agent.txt:109", "target": "method"}, {"type": "contains", "source": "text_data\\agent.txt:109", "target": "preserves"}, {"type": "contains", "source": "text_data\\agent.txt:109", "target": "generic"}, {"type": "contains", "source": "text_data\\agent.txt:110", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:110", "target": "isinstancenode"}, {"type": "contains", "source": "text_data\\agent.txt:110", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\agent.txt:110", "target": "agentgraphagentnodet"}, {"type": "contains", "source": "text_data\\agent.txt:110", "target": "endresultfinalresults"}, {"type": "contains", "source": "text_data\\agent.txt:111", "target": "narrowing"}, {"type": "contains", "source": "text_data\\agent.txt:111", "target": "typeguardendresultfinalresults"}, {"type": "contains", "source": "text_data\\agent.txt:111", "target": "check"}, {"type": "contains", "source": "text_data\\agent.txt:111", "target": "method"}, {"type": "contains", "source": "text_data\\agent.txt:111", "target": "preserves"}, {"type": "contains", "source": "text_data\\agent.txt:112", "target": "await"}, {"type": "contains", "source": "text_data\\agent.txt:112", "target": "exitstackenterasynccontextmcpserver"}, {"type": "contains", "source": "text_data\\agent.txt:112", "target": "yield"}, {"type": "contains", "source": "text_data\\agent.txt:112", "target": "finally"}, {"type": "contains", "source": "text_data\\agent.txt:112", "target": "exitstackaclose"}, {"type": "contains", "source": "text_data\\agent.txt:113", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:113", "target": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:113", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:113", "target": "knownmodelnamemodelsbasepydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:113", "target": "pydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:114", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:114", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:114", "target": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:114", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:114", "target": "knownmodelnamemodelsbasepydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:115", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:115", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:115", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\agent.txt:115", "target": "collectionsabcsequencestrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:115", "target": "depstype"}, {"type": "contains", "source": "text_data\\agent.txt:116", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:116", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:116", "target": "resulttoolname"}, {"type": "contains", "source": "text_data\\agent.txt:116", "target": "finalresult"}, {"type": "contains", "source": "text_data\\agent.txt:116", "target": "resulttooldescription"}, {"type": "contains", "source": "text_data\\agent.txt:117", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:117", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:117", "target": "mcpservers"}, {"type": "contains", "source": "text_data\\agent.txt:117", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\agent.txt:117", "target": "collectionsabcsequencemcpservermcppydanticaimcpmcpserver"}, {"type": "contains", "source": "text_data\\agent.txt:118", "target": "create"}, {"type": "contains", "source": "text_data\\agent.txt:118", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:118", "target": "parameters"}, {"type": "contains", "source": "text_data\\agent.txt:119", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:119", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:119", "target": "provide"}, {"type": "contains", "source": "text_data\\agent.txt:119", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:119", "target": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:120", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:120", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:120", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:120", "target": "system"}, {"type": "contains", "source": "text_data\\agent.txt:120", "target": "prompts"}, {"type": "contains", "source": "text_data\\agent.txt:121", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:121", "target": "checking"}, {"type": "contains", "source": "text_data\\agent.txt:121", "target": "depstype"}, {"type": "contains", "source": "text_data\\agent.txt:121", "target": "typehttpsdocspythonorg3libraryfunctionshtmltypeagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:121", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:122", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:122", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:122", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:122", "target": "final"}, {"type": "contains", "source": "text_data\\agent.txt:122", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:123", "target": "tools"}, {"type": "contains", "source": "text_data\\agent.txt:123", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:123", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:123", "target": "register"}, {"type": "contains", "source": "text_data\\agent.txt:123", "target": "resultretries"}, {"type": "contains", "source": "text_data\\agent.txt:124", "target": "register"}, {"type": "contains", "source": "text_data\\agent.txt:124", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:124", "target": "mcpservers"}, {"type": "contains", "source": "text_data\\agent.txt:124", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\agent.txt:124", "target": "collectionsabcsequencemcpservermcppydanticaimcpmcpserver"}, {"type": "contains", "source": "text_data\\agent.txt:125", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:125", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:125", "target": "false"}, {"type": "contains", "source": "text_data\\agent.txt:125", "target": "defermodelcheck"}, {"type": "contains", "source": "text_data\\agent.txt:125", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:126", "target": "instrument"}, {"type": "contains", "source": "text_data\\agent.txt:126", "target": "which"}, {"type": "contains", "source": "text_data\\agent.txt:126", "target": "instrumentationsettingsmodelsinstrumentedpydanticaimodelsinstrumentedinstrumentationsettings"}, {"type": "contains", "source": "text_data\\agent.txt:126", "target": "pydanticaimodelsinstrumentedinstrumentationsettings"}, {"type": "contains", "source": "text_data\\agent.txt:126", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:128", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:128", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:128", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:128", "target": "modelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:128", "target": "modelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:129", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:129", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:129", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:129", "target": "provide"}, {"type": "contains", "source": "text_data\\agent.txt:129", "target": "allow"}, {"type": "contains", "source": "text_data\\agent.txt:130", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:130", "target": "checking"}, {"type": "contains", "source": "text_data\\agent.txt:130", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:130", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:130", "target": "final"}, {"type": "contains", "source": "text_data\\agent.txt:131", "target": "register"}, {"type": "contains", "source": "text_data\\agent.txt:131", "target": "tools"}, {"type": "contains", "source": "text_data\\agent.txt:131", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:131", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:131", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:132", "target": "which"}, {"type": "contains", "source": "text_data\\agent.txt:132", "target": "instrument"}, {"type": "contains", "source": "text_data\\agent.txt:132", "target": "evaluated"}, {"type": "contains", "source": "text_data\\agent.txt:132", "target": "create"}, {"type": "contains", "source": "text_data\\agent.txt:132", "target": "modelpydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:133", "target": "which"}, {"type": "contains", "source": "text_data\\agent.txt:133", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:133", "target": "selfmodel"}, {"type": "contains", "source": "text_data\\agent.txt:133", "target": "logfire"}, {"type": "contains", "source": "text_data\\agent.txt:133", "target": "configured"}, {"type": "contains", "source": "text_data\\agent.txt:134", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:134", "target": "resulttoolname"}, {"type": "contains", "source": "text_data\\agent.txt:134", "target": "resulttooldescription"}, {"type": "contains", "source": "text_data\\agent.txt:134", "target": "selfresulttype"}, {"type": "contains", "source": "text_data\\agent.txt:134", "target": "selfinstrument"}, {"type": "contains", "source": "text_data\\agent.txt:135", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:135", "target": "resultretries"}, {"type": "contains", "source": "text_data\\agent.txt:135", "target": "selffunctiontools"}, {"type": "contains", "source": "text_data\\agent.txt:135", "target": "selfdefaultretries"}, {"type": "contains", "source": "text_data\\agent.txt:135", "target": "selfmaxresultretries"}, {"type": "contains", "source": "text_data\\agent.txt:136", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:136", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:136", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:136", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\agent.txt:136", "target": "strategy"}, {"type": "contains", "source": "text_data\\agent.txt:137", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:137", "target": "settings"}, {"type": "contains", "source": "text_data\\agent.txt:137", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\agent.txt:137", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:137", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:138", "target": "instrument"}, {"type": "contains", "source": "text_data\\agent.txt:138", "target": "instrumentationsettingsmodelsinstrumentedpydanticaimodelsinstrumentedinstrumentationsettings"}, {"type": "contains", "source": "text_data\\agent.txt:138", "target": "pydanticaimodelsinstrumentedinstrumentationsettings"}, {"type": "contains", "source": "text_data\\agent.txt:138", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:138", "target": "instrumentall"}, {"type": "contains", "source": "text_data\\agent.txt:139", "target": "instrument"}, {"type": "contains", "source": "text_data\\agent.txt:139", "target": "instrumentation"}, {"type": "contains", "source": "text_data\\agent.txt:139", "target": "options"}, {"type": "contains", "source": "text_data\\agent.txt:139", "target": "agents"}, {"type": "contains", "source": "text_data\\agent.txt:139", "target": "where"}, {"type": "contains", "source": "text_data\\agent.txt:140", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:140", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:140", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\agent.txt:140", "target": "collectionsabcsequenceusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:140", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:141", "target": "agentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:141", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:141", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:141", "target": "modelsettingssettingspydanticaisettingsmodelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:141", "target": "pydanticaisettingsmodelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:142", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:142", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:142", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\agent.txt:142", "target": "collectionsabcsequenceusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:142", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:143", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:143", "target": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:143", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:143", "target": "knownmodelnamemodelsbasepydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:143", "target": "pydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:144", "target": "infername"}, {"type": "contains", "source": "text_data\\agent.txt:144", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:144", "target": "agentrunresultrunresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:144", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:144", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:145", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:145", "target": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:145", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:145", "target": "knownmodelnamemodelsbasepydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:145", "target": "pydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:146", "target": "infername"}, {"type": "contains", "source": "text_data\\agent.txt:146", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:146", "target": "agentrunresultanyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\agent.txt:146", "target": "typingany"}, {"type": "contains", "source": "text_data\\agent.txt:147", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:147", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:147", "target": "graph"}, {"type": "contains", "source": "text_data\\agent.txt:147", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:147", "target": "prompt"}, {"type": "contains", "source": "text_data\\agent.txt:148", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:148", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:148", "target": "validators"}, {"type": "contains", "source": "text_data\\agent.txt:148", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:148", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:149", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:149", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:149", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:149", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:149", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:150", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:150", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:150", "target": "request"}, {"type": "contains", "source": "text_data\\agent.txt:150", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:150", "target": "modelsettingssettingspydanticaisettingsmodelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:151", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:151", "target": "agentrunresultanyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\agent.txt:151", "target": "typingany"}, {"type": "contains", "source": "text_data\\agent.txt:151", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:151", "target": "source"}, {"type": "contains", "source": "text_data\\agent.txt:152", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:152", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:152", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:152", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:152", "target": "sequencemessagesusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:153", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:153", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:153", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:153", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:153", "target": "validators"}, {"type": "contains", "source": "text_data\\agent.txt:154", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:154", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:154", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:154", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:154", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:155", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:155", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:155", "target": "agentrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:155", "target": "selfinfernameinspectcurrentframe"}, {"type": "contains", "source": "text_data\\agent.txt:155", "target": "selfiter"}, {"type": "contains", "source": "text_data\\agent.txt:156", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:156", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:156", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\agent.txt:156", "target": "collectionsabcsequenceusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:156", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:157", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:157", "target": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:157", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:157", "target": "knownmodelnamemodelsbasepydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:157", "target": "pydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:158", "target": "infername"}, {"type": "contains", "source": "text_data\\agent.txt:158", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:158", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\agent.txt:158", "target": "collectionsabcasynciteratoragentrunagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:158", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:159", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:159", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:159", "target": "nodes"}, {"type": "contains", "source": "text_data\\agent.txt:159", "target": "executed"}, {"type": "contains", "source": "text_data\\agent.txt:159", "target": "graph"}, {"type": "contains", "source": "text_data\\agent.txt:160", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:160", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:160", "target": "capital"}, {"type": "contains", "source": "text_data\\agent.txt:160", "target": "france"}, {"type": "contains", "source": "text_data\\agent.txt:160", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:161", "target": "calltoolsnode"}, {"type": "contains", "source": "text_data\\agent.txt:161", "target": "modelresponsemodelresponse"}, {"type": "contains", "source": "text_data\\agent.txt:161", "target": "partstextpartcontentparis"}, {"type": "contains", "source": "text_data\\agent.txt:161", "target": "partkindtext"}, {"type": "contains", "source": "text_data\\agent.txt:161", "target": "modelnamegpt4o"}, {"type": "contains", "source": "text_data\\agent.txt:162", "target": "parameters"}, {"type": "contains", "source": "text_data\\agent.txt:163", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:163", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:163", "target": "validators"}, {"type": "contains", "source": "text_data\\agent.txt:163", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:163", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:164", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:164", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:164", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:164", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:164", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:165", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:165", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:165", "target": "request"}, {"type": "contains", "source": "text_data\\agent.txt:165", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:165", "target": "modelsettingssettingspydanticaisettingsmodelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:166", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:166", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\agent.txt:166", "target": "collectionsabcasynciteratoragentrunagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:166", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:166", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\agent.txt:170", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:170", "target": "asynccontextmanager"}, {"type": "contains", "source": "text_data\\agent.txt:170", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:170", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:170", "target": "sequencemessagesusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:171", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:171", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:171", "target": "graph"}, {"type": "contains", "source": "text_data\\agent.txt:171", "target": "tools"}, {"type": "contains", "source": "text_data\\agent.txt:171", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:172", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:172", "target": "capital"}, {"type": "contains", "source": "text_data\\agent.txt:172", "target": "france"}, {"type": "contains", "source": "text_data\\agent.txt:172", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:172", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:173", "target": "kindrequest"}, {"type": "contains", "source": "text_data\\agent.txt:173", "target": "calltoolsnode"}, {"type": "contains", "source": "text_data\\agent.txt:173", "target": "modelresponsemodelresponse"}, {"type": "contains", "source": "text_data\\agent.txt:173", "target": "partstextpartcontentparis"}, {"type": "contains", "source": "text_data\\agent.txt:173", "target": "partkindtext"}, {"type": "contains", "source": "text_data\\agent.txt:174", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:174", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:174", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:174", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:174", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:175", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:175", "target": "infername"}, {"type": "contains", "source": "text_data\\agent.txt:175", "target": "build"}, {"type": "contains", "source": "text_data\\agent.txt:175", "target": "graph"}, {"type": "contains", "source": "text_data\\agent.txt:175", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:176", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:176", "target": "state"}, {"type": "contains", "source": "text_data\\agent.txt:176", "target": "usageusage"}, {"type": "contains", "source": "text_data\\agent.txt:176", "target": "consider"}, {"type": "contains", "source": "text_data\\agent.txt:176", "target": "build"}, {"type": "contains", "source": "text_data\\agent.txt:177", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:177", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:177", "target": "usagelimits"}, {"type": "contains", "source": "text_data\\agent.txt:177", "target": "tracer"}, {"type": "contains", "source": "text_data\\agent.txt:177", "target": "instead"}, {"type": "contains", "source": "text_data\\agent.txt:178", "target": "agentname"}, {"type": "contains", "source": "text_data\\agent.txt:178", "target": "logfiremsg"}, {"type": "contains", "source": "text_data\\agent.txt:178", "target": "fagentname"}, {"type": "contains", "source": "text_data\\agent.txt:178", "target": "graphdeps"}, {"type": "contains", "source": "text_data\\agent.txt:178", "target": "agentgraphgraphagentdepsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:179", "target": "startnode"}, {"type": "contains", "source": "text_data\\agent.txt:179", "target": "mcpserversselfmcpservers"}, {"type": "contains", "source": "text_data\\agent.txt:179", "target": "runspanrunspan"}, {"type": "contains", "source": "text_data\\agent.txt:179", "target": "tracertracer"}, {"type": "contains", "source": "text_data\\agent.txt:179", "target": "agentgraphuserpromptnodeagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:180", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:180", "target": "runsync"}, {"type": "contains", "source": "text_data\\agent.txt:180", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:180", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\agent.txt:180", "target": "collectionsabcsequenceusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:181", "target": "agentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:181", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:181", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:181", "target": "modelsettingssettingspydanticaisettingsmodelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:181", "target": "pydanticaisettingsmodelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:182", "target": "runsync"}, {"type": "contains", "source": "text_data\\agent.txt:182", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:182", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:182", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\agent.txt:182", "target": "collectionsabcsequenceusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:183", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:183", "target": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:183", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:183", "target": "knownmodelnamemodelsbasepydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:183", "target": "pydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:184", "target": "infername"}, {"type": "contains", "source": "text_data\\agent.txt:184", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:184", "target": "agentrunresultrunresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:184", "target": "runsync"}, {"type": "contains", "source": "text_data\\agent.txt:184", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:185", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:185", "target": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:185", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:185", "target": "knownmodelnamemodelsbasepydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:185", "target": "pydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:186", "target": "infername"}, {"type": "contains", "source": "text_data\\agent.txt:186", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:186", "target": "agentrunresultanyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\agent.txt:186", "target": "typingany"}, {"type": "contains", "source": "text_data\\agent.txt:187", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:187", "target": "method"}, {"type": "contains", "source": "text_data\\agent.txt:187", "target": "synchronously"}, {"type": "contains", "source": "text_data\\agent.txt:187", "target": "prompt"}, {"type": "contains", "source": "text_data\\agent.txt:187", "target": "convenience"}, {"type": "contains", "source": "text_data\\agent.txt:188", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:188", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:188", "target": "validators"}, {"type": "contains", "source": "text_data\\agent.txt:188", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:188", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:189", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:189", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:189", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:189", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:189", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:190", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:190", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:190", "target": "request"}, {"type": "contains", "source": "text_data\\agent.txt:190", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:190", "target": "modelsettingssettingspydanticaisettingsmodelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:191", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:191", "target": "agentrunresultanyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\agent.txt:191", "target": "typingany"}, {"type": "contains", "source": "text_data\\agent.txt:191", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:191", "target": "source"}, {"type": "contains", "source": "text_data\\agent.txt:192", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:192", "target": "runsync"}, {"type": "contains", "source": "text_data\\agent.txt:192", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:192", "target": "sequencemessagesusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:192", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:193", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:193", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:193", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:193", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:193", "target": "validators"}, {"type": "contains", "source": "text_data\\agent.txt:194", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:194", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:194", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:194", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:194", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:195", "target": "selfinfernameinspectcurrentframe"}, {"type": "contains", "source": "text_data\\agent.txt:195", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:195", "target": "geteventlooprununtilcomplete"}, {"type": "contains", "source": "text_data\\agent.txt:195", "target": "selfrun"}, {"type": "contains", "source": "text_data\\agent.txt:195", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:196", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:196", "target": "runstream"}, {"type": "contains", "source": "text_data\\agent.txt:196", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:196", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\agent.txt:196", "target": "collectionsabcsequenceusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:197", "target": "agentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:197", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:197", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:197", "target": "modelsettingssettingspydanticaisettingsmodelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:197", "target": "pydanticaisettingsmodelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:198", "target": "streamedrunresultresultpydanticairesultstreamedrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:198", "target": "pydanticairesultstreamedrunresultagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:198", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:198", "target": "resultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:198", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:199", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:199", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:199", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:199", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:199", "target": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:200", "target": "usagelimits"}, {"type": "contains", "source": "text_data\\agent.txt:200", "target": "usagelimitsusagepydanticaiusageusagelimits"}, {"type": "contains", "source": "text_data\\agent.txt:200", "target": "pydanticaiusageusagelimits"}, {"type": "contains", "source": "text_data\\agent.txt:200", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:200", "target": "usageusagepydanticaiusageusage"}, {"type": "contains", "source": "text_data\\agent.txt:201", "target": "runstream"}, {"type": "contains", "source": "text_data\\agent.txt:201", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:201", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:201", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\agent.txt:201", "target": "collectionsabcsequenceusercontent"}, {"type": "contains", "source": "text_data\\agent.txt:202", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:202", "target": "modelmodelsbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:202", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\agent.txt:202", "target": "knownmodelnamemodelsbasepydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:202", "target": "pydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\agent.txt:203", "target": "infername"}, {"type": "contains", "source": "text_data\\agent.txt:203", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:203", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\agent.txt:203", "target": "collectionsabcasynciteratorstreamedrunresultresultpydanticairesultstreamedrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:203", "target": "pydanticairesultstreamedrunresultagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:204", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:204", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:204", "target": "response"}, {"type": "contains", "source": "text_data\\agent.txt:204", "target": "prompt"}, {"type": "contains", "source": "text_data\\agent.txt:204", "target": "returning"}, {"type": "contains", "source": "text_data\\agent.txt:205", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:205", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:205", "target": "validators"}, {"type": "contains", "source": "text_data\\agent.txt:205", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:205", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:206", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:206", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:206", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:206", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:206", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:207", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:207", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:207", "target": "request"}, {"type": "contains", "source": "text_data\\agent.txt:207", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:207", "target": "modelsettingssettingspydanticaisettingsmodelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:208", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:208", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\agent.txt:208", "target": "collectionsabcasynciteratorstreamedrunresultresultpydanticairesultstreamedrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:208", "target": "pydanticairesultstreamedrunresultagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:208", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:212", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:212", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agent.txt:212", "target": "asynccontextmanager"}, {"type": "contains", "source": "text_data\\agent.txt:212", "target": "runstream"}, {"type": "contains", "source": "text_data\\agent.txt:212", "target": "userprompt"}, {"type": "contains", "source": "text_data\\agent.txt:213", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:213", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:213", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:213", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:213", "target": "resulttype"}, {"type": "contains", "source": "text_data\\agent.txt:214", "target": "optional"}, {"type": "contains", "source": "text_data\\agent.txt:214", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:214", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:214", "target": "conversation"}, {"type": "contains", "source": "text_data\\agent.txt:214", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:215", "target": "frame"}, {"type": "contains", "source": "text_data\\agent.txt:215", "target": "deprecate"}, {"type": "contains", "source": "text_data\\agent.txt:215", "target": "method"}, {"type": "contains", "source": "text_data\\agent.txt:215", "target": "before"}, {"type": "contains", "source": "text_data\\agent.txt:215", "target": "though"}, {"type": "contains", "source": "text_data\\agent.txt:216", "target": "firstnode"}, {"type": "contains", "source": "text_data\\agent.txt:216", "target": "first"}, {"type": "contains", "source": "text_data\\agent.txt:216", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:216", "target": "usageusage"}, {"type": "contains", "source": "text_data\\agent.txt:216", "target": "infernamefalse"}, {"type": "contains", "source": "text_data\\agent.txt:217", "target": "resultschema"}, {"type": "contains", "source": "text_data\\agent.txt:217", "target": "isinstancenewpart"}, {"type": "contains", "source": "text_data\\agent.txt:217", "target": "graphctxdepsresultschema"}, {"type": "contains", "source": "text_data\\agent.txt:217", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:217", "target": "maybepartevent"}, {"type": "contains", "source": "text_data\\agent.txt:218", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:218", "target": "finalresultdetails"}, {"type": "contains", "source": "text_data\\agent.txt:218", "target": "yielded"}, {"type": "contains", "source": "text_data\\agent.txt:218", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:218", "target": "finalresults"}, {"type": "contains", "source": "text_data\\agent.txt:219", "target": "toolcalls"}, {"type": "contains", "source": "text_data\\agent.txt:219", "target": "streamedrunresultmarkedcompleted"}, {"type": "contains", "source": "text_data\\agent.txt:219", "target": "lastmessage"}, {"type": "contains", "source": "text_data\\agent.txt:219", "target": "messages1"}, {"type": "contains", "source": "text_data\\agent.txt:219", "target": "assert"}, {"type": "contains", "source": "text_data\\agent.txt:220", "target": "parts"}, {"type": "contains", "source": "text_data\\agent.txt:220", "target": "should"}, {"type": "contains", "source": "text_data\\agent.txt:220", "target": "retry"}, {"type": "contains", "source": "text_data\\agent.txt:220", "target": "count"}, {"type": "contains", "source": "text_data\\agent.txt:220", "target": "finalresultdetailstoolname"}, {"type": "contains", "source": "text_data\\agent.txt:221", "target": "parts"}, {"type": "contains", "source": "text_data\\agent.txt:221", "target": "messagesappendmessagesmodelrequestparts"}, {"type": "contains", "source": "text_data\\agent.txt:221", "target": "yield"}, {"type": "contains", "source": "text_data\\agent.txt:221", "target": "streamedrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:221", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:222", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:222", "target": "raise"}, {"type": "contains", "source": "text_data\\agent.txt:222", "target": "break"}, {"type": "contains", "source": "text_data\\agent.txt:222", "target": "await"}, {"type": "contains", "source": "text_data\\agent.txt:222", "target": "agentrunnextnode"}, {"type": "contains", "source": "text_data\\agent.txt:223", "target": "unset"}, {"type": "contains", "source": "text_data\\agent.txt:223", "target": "override"}, {"type": "contains", "source": "text_data\\agent.txt:223", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:223", "target": "agentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:223", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:224", "target": "unset"}, {"type": "contains", "source": "text_data\\agent.txt:224", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:224", "target": "dependencies"}, {"type": "contains", "source": "text_data\\agent.txt:224", "target": "instead"}, {"type": "contains", "source": "text_data\\agent.txt:224", "target": "passed"}, {"type": "contains", "source": "text_data\\agent.txt:226", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:226", "target": "utilsunset"}, {"type": "contains", "source": "text_data\\agent.txt:226", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:226", "target": "dependencies"}, {"type": "contains", "source": "text_data\\agent.txt:226", "target": "override"}, {"type": "contains", "source": "text_data\\agent.txt:227", "target": "overridedepsbefore"}, {"type": "contains", "source": "text_data\\agent.txt:227", "target": "selfoverridedeps"}, {"type": "contains", "source": "text_data\\agent.txt:227", "target": "overridemodelbefore"}, {"type": "contains", "source": "text_data\\agent.txt:227", "target": "selfoverridemodel"}, {"type": "contains", "source": "text_data\\agent.txt:227", "target": "utilsunset"}, {"type": "contains", "source": "text_data\\agent.txt:228", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:228", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:228", "target": "typingcallableruncontexttoolspydanticaitoolsruncontext"}, {"type": "contains", "source": "text_data\\agent.txt:228", "target": "pydanticaitoolsruncontextagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:228", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:229", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:229", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:229", "target": "typingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:229", "target": "runcontexttoolspydanticaitoolsruncontext"}, {"type": "contains", "source": "text_data\\agent.txt:229", "target": "pydanticaitoolsruncontextagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:230", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:230", "target": "typingcallableruncontexttoolspydanticaitoolsruncontext"}, {"type": "contains", "source": "text_data\\agent.txt:230", "target": "pydanticaitoolsruncontextagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:230", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:230", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\agent.txt:231", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:231", "target": "typingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:231", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:231", "target": "systempromptfunc"}, {"type": "contains", "source": "text_data\\agent.txt:231", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:232", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:232", "target": "typingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:232", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\agent.txt:232", "target": "collectionsabcawaitablestrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:232", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:233", "target": "systempromptfunctoolspydanticaitoolssystempromptfunc"}, {"type": "contains", "source": "text_data\\agent.txt:233", "target": "pydanticaisystempromptsystempromptfuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:233", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:233", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:233", "target": "dynamic"}, {"type": "contains", "source": "text_data\\agent.txt:234", "target": "systempromptfunctoolspydanticaitoolssystempromptfunc"}, {"type": "contains", "source": "text_data\\agent.txt:234", "target": "pydanticaisystempromptsystempromptfuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:234", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:235", "target": "decorator"}, {"type": "contains", "source": "text_data\\agent.txt:235", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:235", "target": "agentsystemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:235", "target": "register"}, {"type": "contains", "source": "text_data\\agent.txt:235", "target": "system"}, {"type": "contains", "source": "text_data\\agent.txt:236", "target": "parameters"}, {"type": "contains", "source": "text_data\\agent.txt:236", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:236", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:236", "target": "systempromptfunctoolspydanticaitoolssystempromptfunc"}, {"type": "contains", "source": "text_data\\agent.txt:236", "target": "pydanticaisystempromptsystempromptfuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:237", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:237", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:237", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agent.txt:237", "target": "import"}, {"type": "contains", "source": "text_data\\agent.txt:237", "target": "runcontext"}, {"type": "contains", "source": "text_data\\agent.txt:238", "target": "source"}, {"type": "contains", "source": "text_data\\agent.txt:238", "target": "pydanticaislimpydanticaiagentpy"}, {"type": "contains", "source": "text_data\\agent.txt:239", "target": "systempromptsystempromptfuncagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:239", "target": "decorator"}, {"type": "contains", "source": "text_data\\agent.txt:239", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:239", "target": "agentsystemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:239", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:240", "target": "agentsystemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:240", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:240", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:240", "target": "examples"}, {"type": "contains", "source": "text_data\\agent.txt:240", "target": "below"}, {"type": "contains", "source": "text_data\\agent.txt:241", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:241", "target": "decorator"}, {"type": "contains", "source": "text_data\\agent.txt:241", "target": "systempromptsystempromptfuncagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:241", "target": "runner"}, {"type": "contains", "source": "text_data\\agent.txt:241", "target": "simplesystemprompt"}, {"type": "contains", "source": "text_data\\agent.txt:242", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:242", "target": "dynamic"}, {"type": "contains", "source": "text_data\\agent.txt:242", "target": "decorator"}, {"type": "contains", "source": "text_data\\agent.txt:242", "target": "assert"}, {"type": "contains", "source": "text_data\\agent.txt:242", "target": "selfsystempromptfunctionsappendsystempromptsystempromptrunneragentdepstfunc"}, {"type": "contains", "source": "text_data\\agent.txt:243", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:243", "target": "typingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:243", "target": "resultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:243", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:243", "target": "resultvalidator"}, {"type": "contains", "source": "text_data\\agent.txt:244", "target": "resultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:244", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:244", "target": "runcontexttoolspydanticaitoolsruncontext"}, {"type": "contains", "source": "text_data\\agent.txt:244", "target": "pydanticaitoolsruncontextagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:244", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:245", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:245", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\agent.txt:245", "target": "collectionsabcawaitableresultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:245", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:245", "target": "typingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:246", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:246", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\agent.txt:246", "target": "collectionsabcawaitableresultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:246", "target": "resultvalidator"}, {"type": "contains", "source": "text_data\\agent.txt:246", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:247", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:247", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:247", "target": "typingcallableresultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:247", "target": "resultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:247", "target": "resultvalidator"}, {"type": "contains", "source": "text_data\\agent.txt:248", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:248", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:248", "target": "typingcallableresultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:248", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\agent.txt:248", "target": "collectionsabcawaitableresultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:249", "target": "resultvalidatorfuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:249", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:249", "target": "resultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:249", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:250", "target": "decorator"}, {"type": "contains", "source": "text_data\\agent.txt:250", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:250", "target": "register"}, {"type": "contains", "source": "text_data\\agent.txt:250", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:250", "target": "validator"}, {"type": "contains", "source": "text_data\\agent.txt:251", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:251", "target": "agentresultvalidator"}, {"type": "contains", "source": "text_data\\agent.txt:251", "target": "raise"}, {"type": "contains", "source": "text_data\\agent.txt:251", "target": "modelretrywrong"}, {"type": "contains", "source": "text_data\\agent.txt:251", "target": "response"}, {"type": "contains", "source": "text_data\\agent.txt:252", "target": "source"}, {"type": "contains", "source": "text_data\\agent.txt:252", "target": "pydanticaislimpydanticaiagentpy"}, {"type": "contains", "source": "text_data\\agent.txt:253", "target": "resultvalidator"}, {"type": "contains", "source": "text_data\\agent.txt:253", "target": "resultresultvalidatorfuncagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:253", "target": "resultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:253", "target": "decorator"}, {"type": "contains", "source": "text_data\\agent.txt:253", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:254", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:254", "target": "agentresultvalidator"}, {"type": "contains", "source": "text_data\\agent.txt:254", "target": "raise"}, {"type": "contains", "source": "text_data\\agent.txt:254", "target": "modelretrywrong"}, {"type": "contains", "source": "text_data\\agent.txt:254", "target": "response"}, {"type": "contains", "source": "text_data\\agent.txt:255", "target": "toolfunccontexttoolspydanticaitoolstoolfunccontext"}, {"type": "contains", "source": "text_data\\agent.txt:255", "target": "pydanticaitoolstoolfunccontextagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:255", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:255", "target": "toolparamstoolspydanticaitoolstoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:255", "target": "pydanticaitoolstoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:256", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:256", "target": "toolpreparefunctoolspydanticaitoolstoolpreparefunc"}, {"type": "contains", "source": "text_data\\agent.txt:256", "target": "pydanticaitoolstoolpreparefuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:256", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:256", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:257", "target": "toolfunccontexttoolspydanticaitoolstoolfunccontext"}, {"type": "contains", "source": "text_data\\agent.txt:257", "target": "pydanticaitoolstoolfunccontextagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:257", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:257", "target": "toolparamstoolspydanticaitoolstoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:257", "target": "pydanticaitoolstoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:258", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:258", "target": "toolfunccontexttoolspydanticaitoolstoolfunccontext"}, {"type": "contains", "source": "text_data\\agent.txt:258", "target": "pydanticaitoolstoolfunccontextagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:258", "target": "toolparamstoolspydanticaitoolstoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:258", "target": "pydanticaitoolstoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:259", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:259", "target": "docstringformattoolspydanticaitoolsdocstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:259", "target": "pydanticaitoolsdocstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:259", "target": "requireparameterdescriptions"}, {"type": "contains", "source": "text_data\\agent.txt:259", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\agent.txt:260", "target": "functions"}, {"type": "contains", "source": "text_data\\agent.txt:260", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:260", "target": "signature"}, {"type": "contains", "source": "text_data\\agent.txt:260", "target": "decorator"}, {"type": "contains", "source": "text_data\\agent.txt:260", "target": "register"}, {"type": "contains", "source": "text_data\\agent.txt:261", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:261", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:261", "target": "ctxdeps"}, {"type": "contains", "source": "text_data\\agent.txt:261", "target": "float"}, {"type": "contains", "source": "text_data\\agent.txt:261", "target": "example"}, {"type": "contains", "source": "text_data\\agent.txt:262", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:262", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:262", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:262", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:262", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:263", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:263", "target": "toolpreparefunctoolspydanticaitoolstoolpreparefunc"}, {"type": "contains", "source": "text_data\\agent.txt:263", "target": "pydanticaitoolstoolpreparefuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:263", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:263", "target": "custom"}, {"type": "contains", "source": "text_data\\agent.txt:264", "target": "docstringformattoolspydanticaitoolsdocstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:264", "target": "format"}, {"type": "contains", "source": "text_data\\agent.txt:264", "target": "docstring"}, {"type": "contains", "source": "text_data\\agent.txt:264", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:264", "target": "false"}, {"type": "contains", "source": "text_data\\agent.txt:265", "target": "generatetooljsonschema"}, {"type": "contains", "source": "text_data\\agent.txt:265", "target": "schemagenerator"}, {"type": "contains", "source": "text_data\\agent.txt:265", "target": "typehttpsdocspythonorg3libraryfunctionshtmltypegeneratejsonschemahttpsdocspydanticdevlatestapijsonschemapydanticjsonschemageneratejsonschema"}, {"type": "contains", "source": "text_data\\agent.txt:265", "target": "pydanticjsonschemageneratejsonschema"}, {"type": "contains", "source": "text_data\\agent.txt:265", "target": "schema"}, {"type": "contains", "source": "text_data\\agent.txt:267", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:267", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:267", "target": "toolfunccontextagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:267", "target": "toolparams"}, {"type": "contains", "source": "text_data\\agent.txt:267", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:268", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:268", "target": "signature"}, {"type": "contains", "source": "text_data\\agent.txt:268", "target": "agenttool"}, {"type": "contains", "source": "text_data\\agent.txt:268", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:268", "target": "ctxdeps"}, {"type": "contains", "source": "text_data\\agent.txt:269", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:269", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:269", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:269", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:269", "target": "foobar1spam10"}, {"type": "contains", "source": "text_data\\agent.txt:270", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:270", "target": "toolfunccontextagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:270", "target": "toolparams"}, {"type": "contains", "source": "text_data\\agent.txt:270", "target": "format"}, {"type": "contains", "source": "text_data\\agent.txt:270", "target": "inferred"}, {"type": "contains", "source": "text_data\\agent.txt:271", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:271", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:271", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:271", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:271", "target": "requireparameterdescriptions"}, {"type": "contains", "source": "text_data\\agent.txt:272", "target": "toolplain"}, {"type": "contains", "source": "text_data\\agent.txt:272", "target": "toolfuncplaintoolspydanticaitoolstoolfuncplain"}, {"type": "contains", "source": "text_data\\agent.txt:272", "target": "pydanticaitoolstoolfuncplaintoolparamstoolspydanticaitoolstoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:272", "target": "pydanticaitoolstoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:272", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:273", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:273", "target": "toolpreparefunctoolspydanticaitoolstoolpreparefunc"}, {"type": "contains", "source": "text_data\\agent.txt:273", "target": "pydanticaitoolstoolpreparefuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:273", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:273", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:274", "target": "toolfuncplaintoolspydanticaitoolstoolfuncplain"}, {"type": "contains", "source": "text_data\\agent.txt:274", "target": "pydanticaitoolstoolfuncplaintoolparamstoolspydanticaitoolstoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:274", "target": "pydanticaitoolstoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:274", "target": "generatetooljsonschema"}, {"type": "contains", "source": "text_data\\agent.txt:274", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\agent.txt:275", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:275", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:275", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\agent.txt:275", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:275", "target": "toolpreparefunctoolspydanticaitoolstoolpreparefunc"}, {"type": "contains", "source": "text_data\\agent.txt:276", "target": "generatejsonschemahttpsdocspydanticdevlatestapijsonschemapydanticjsonschemageneratejsonschema"}, {"type": "contains", "source": "text_data\\agent.txt:276", "target": "pydanticjsonschemageneratejsonschema"}, {"type": "contains", "source": "text_data\\agent.txt:276", "target": "generatetooljsonschema"}, {"type": "contains", "source": "text_data\\agent.txt:276", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\agent.txt:276", "target": "typingany"}, {"type": "contains", "source": "text_data\\agent.txt:277", "target": "functions"}, {"type": "contains", "source": "text_data\\agent.txt:277", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:277", "target": "signature"}, {"type": "contains", "source": "text_data\\agent.txt:277", "target": "decorator"}, {"type": "contains", "source": "text_data\\agent.txt:277", "target": "register"}, {"type": "contains", "source": "text_data\\agent.txt:278", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:278", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:278", "target": "example"}, {"type": "contains", "source": "text_data\\agent.txt:278", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agent.txt:278", "target": "import"}, {"type": "contains", "source": "text_data\\agent.txt:279", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:279", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:279", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:279", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:279", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:280", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:280", "target": "toolpreparefunctoolspydanticaitoolstoolpreparefunc"}, {"type": "contains", "source": "text_data\\agent.txt:280", "target": "pydanticaitoolstoolpreparefuncagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:280", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:280", "target": "custom"}, {"type": "contains", "source": "text_data\\agent.txt:281", "target": "docstringformattoolspydanticaitoolsdocstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:281", "target": "format"}, {"type": "contains", "source": "text_data\\agent.txt:281", "target": "docstring"}, {"type": "contains", "source": "text_data\\agent.txt:281", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:281", "target": "false"}, {"type": "contains", "source": "text_data\\agent.txt:282", "target": "generatetooljsonschema"}, {"type": "contains", "source": "text_data\\agent.txt:282", "target": "schemagenerator"}, {"type": "contains", "source": "text_data\\agent.txt:282", "target": "typehttpsdocspythonorg3libraryfunctionshtmltypegeneratejsonschemahttpsdocspydanticdevlatestapijsonschemapydanticjsonschemageneratejsonschema"}, {"type": "contains", "source": "text_data\\agent.txt:282", "target": "pydanticjsonschemageneratejsonschema"}, {"type": "contains", "source": "text_data\\agent.txt:282", "target": "schema"}, {"type": "contains", "source": "text_data\\agent.txt:284", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:284", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:284", "target": "toolplain"}, {"type": "contains", "source": "text_data\\agent.txt:284", "target": "toolfuncplaintoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:284", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:285", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:285", "target": "signature"}, {"type": "contains", "source": "text_data\\agent.txt:285", "target": "agenttool"}, {"type": "contains", "source": "text_data\\agent.txt:285", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:285", "target": "learn"}, {"type": "contains", "source": "text_data\\agent.txt:286", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:286", "target": "retries"}, {"type": "contains", "source": "text_data\\agent.txt:286", "target": "function"}, {"type": "contains", "source": "text_data\\agent.txt:286", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:286", "target": "register"}, {"type": "contains", "source": "text_data\\agent.txt:287", "target": "defaults"}, {"type": "contains", "source": "text_data\\agent.txt:287", "target": "false"}, {"type": "contains", "source": "text_data\\agent.txt:287", "target": "toolfuncplaintoolparams"}, {"type": "contains", "source": "text_data\\agent.txt:287", "target": "format"}, {"type": "contains", "source": "text_data\\agent.txt:287", "target": "inferred"}, {"type": "contains", "source": "text_data\\agent.txt:288", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:288", "target": "prepare"}, {"type": "contains", "source": "text_data\\agent.txt:288", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\agent.txt:288", "target": "requireparameterdescriptions"}, {"type": "contains", "source": "text_data\\agent.txt:288", "target": "schemagenerator"}, {"type": "contains", "source": "text_data\\agent.txt:289", "target": "narrowing"}, {"type": "contains", "source": "text_data\\agent.txt:289", "target": "ismodelrequestnode"}, {"type": "contains", "source": "text_data\\agent.txt:289", "target": "agentnodet"}, {"type": "contains", "source": "text_data\\agent.txt:289", "target": "endpydanticgraphnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\agent.txt:289", "target": "pydanticgraphendfinalresults"}, {"type": "contains", "source": "text_data\\agent.txt:290", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\agent.txt:290", "target": "narrowing"}, {"type": "contains", "source": "text_data\\agent.txt:290", "target": "ismodelrequestnode"}, {"type": "contains", "source": "text_data\\agent.txt:290", "target": "agentgraphagentnodet"}, {"type": "contains", "source": "text_data\\agent.txt:290", "target": "endresultfinalresults"}, {"type": "contains", "source": "text_data\\agent.txt:291", "target": "narrowing"}, {"type": "contains", "source": "text_data\\agent.txt:291", "target": "iscalltoolsnode"}, {"type": "contains", "source": "text_data\\agent.txt:291", "target": "agentnodet"}, {"type": "contains", "source": "text_data\\agent.txt:291", "target": "endpydanticgraphnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\agent.txt:291", "target": "pydanticgraphendfinalresults"}, {"type": "contains", "source": "text_data\\agent.txt:292", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\agent.txt:292", "target": "narrowing"}, {"type": "contains", "source": "text_data\\agent.txt:292", "target": "iscalltoolsnode"}, {"type": "contains", "source": "text_data\\agent.txt:292", "target": "agentgraphagentnodet"}, {"type": "contains", "source": "text_data\\agent.txt:292", "target": "endresultfinalresults"}, {"type": "contains", "source": "text_data\\agent.txt:293", "target": "narrowing"}, {"type": "contains", "source": "text_data\\agent.txt:293", "target": "isuserpromptnode"}, {"type": "contains", "source": "text_data\\agent.txt:293", "target": "agentnodet"}, {"type": "contains", "source": "text_data\\agent.txt:293", "target": "endpydanticgraphnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\agent.txt:293", "target": "pydanticgraphendfinalresults"}, {"type": "contains", "source": "text_data\\agent.txt:294", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\agent.txt:294", "target": "narrowing"}, {"type": "contains", "source": "text_data\\agent.txt:294", "target": "isuserpromptnode"}, {"type": "contains", "source": "text_data\\agent.txt:294", "target": "agentgraphagentnodet"}, {"type": "contains", "source": "text_data\\agent.txt:294", "target": "endresultfinalresults"}, {"type": "contains", "source": "text_data\\agent.txt:295", "target": "pydanticgraphendfinalresults"}, {"type": "contains", "source": "text_data\\agent.txt:295", "target": "narrowing"}, {"type": "contains", "source": "text_data\\agent.txt:295", "target": "isendnode"}, {"type": "contains", "source": "text_data\\agent.txt:295", "target": "agentnodet"}, {"type": "contains", "source": "text_data\\agent.txt:295", "target": "endpydanticgraphnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\agent.txt:296", "target": "narrowing"}, {"type": "contains", "source": "text_data\\agent.txt:296", "target": "runmcpservers"}, {"type": "contains", "source": "text_data\\agent.txt:296", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\agent.txt:296", "target": "isendnode"}, {"type": "contains", "source": "text_data\\agent.txt:296", "target": "agentgraphagentnodet"}, {"type": "contains", "source": "text_data\\agent.txt:297", "target": "returns"}, {"type": "contains", "source": "text_data\\agent.txt:297", "target": "context"}, {"type": "contains", "source": "text_data\\agent.txt:297", "target": "manager"}, {"type": "contains", "source": "text_data\\agent.txt:297", "target": "start"}, {"type": "contains", "source": "text_data\\agent.txt:297", "target": "shutdown"}, {"type": "contains", "source": "text_data\\agent.txt:298", "target": "await"}, {"type": "contains", "source": "text_data\\agent.txt:298", "target": "asynccontextmanager"}, {"type": "contains", "source": "text_data\\agent.txt:298", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:298", "target": "runmcpserversself"}, {"type": "contains", "source": "text_data\\agent.txt:298", "target": "asynciteratornone"}, {"type": "contains", "source": "text_data\\agent.txt:299", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:299", "target": "instance"}, {"type": "contains", "source": "text_data\\agent.txt:299", "target": "bases"}, {"type": "contains", "source": "text_data\\agent.txt:299", "target": "generichttpsdocspythonorg3librarytypinghtmltypinggeneric"}, {"type": "contains", "source": "text_data\\agent.txt:299", "target": "typinggenericagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:300", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:300", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:300", "target": "capital"}, {"type": "contains", "source": "text_data\\agent.txt:300", "target": "france"}, {"type": "contains", "source": "text_data\\agent.txt:300", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:301", "target": "kindrequest"}, {"type": "contains", "source": "text_data\\agent.txt:301", "target": "calltoolsnode"}, {"type": "contains", "source": "text_data\\agent.txt:301", "target": "modelresponsemodelresponse"}, {"type": "contains", "source": "text_data\\agent.txt:301", "target": "partstextpartcontentparis"}, {"type": "contains", "source": "text_data\\agent.txt:301", "target": "partkindtext"}, {"type": "contains", "source": "text_data\\agent.txt:302", "target": "manually"}, {"type": "contains", "source": "text_data\\agent.txt:302", "target": "drive"}, {"type": "contains", "source": "text_data\\agent.txt:302", "target": "iteration"}, {"type": "contains", "source": "text_data\\agent.txt:302", "target": "using"}, {"type": "contains", "source": "text_data\\agent.txt:302", "target": "method"}, {"type": "contains", "source": "text_data\\agent.txt:307", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:307", "target": "instance"}, {"type": "contains", "source": "text_data\\agent.txt:307", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:307", "target": "nodes"}, {"type": "contains", "source": "text_data\\agent.txt:307", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:308", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:308", "target": "capital"}, {"type": "contains", "source": "text_data\\agent.txt:308", "target": "france"}, {"type": "contains", "source": "text_data\\agent.txt:308", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agent.txt:308", "target": "nodes"}, {"type": "contains", "source": "text_data\\agent.txt:309", "target": "kindrequest"}, {"type": "contains", "source": "text_data\\agent.txt:309", "target": "calltoolsnode"}, {"type": "contains", "source": "text_data\\agent.txt:309", "target": "modelresponsemodelresponse"}, {"type": "contains", "source": "text_data\\agent.txt:309", "target": "partstextpartcontentparis"}, {"type": "contains", "source": "text_data\\agent.txt:309", "target": "partkindtext"}, {"type": "contains", "source": "text_data\\agent.txt:310", "target": "agentgraphgraphagentdepsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:310", "target": "graphrun"}, {"type": "contains", "source": "text_data\\agent.txt:310", "target": "property"}, {"type": "contains", "source": "text_data\\agent.txt:310", "target": "graphruncontextagentgraphgraphagentstate"}, {"type": "contains", "source": "text_data\\agent.txt:310", "target": "granular"}, {"type": "contains", "source": "text_data\\agent.txt:311", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:311", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:311", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:311", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:311", "target": "graph"}, {"type": "contains", "source": "text_data\\agent.txt:312", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:312", "target": "graphrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:312", "target": "agentrunresultpydanticaiagentagentrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:312", "target": "selfgraphrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:312", "target": "agentrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:313", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:313", "target": "agentgraphagentnodeagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:313", "target": "resultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:313", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:313", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:314", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:314", "target": "nodes"}, {"type": "contains", "source": "text_data\\agent.txt:314", "target": "import"}, {"type": "contains", "source": "text_data\\agent.txt:314", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:314", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:315", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:315", "target": "nodes"}, {"type": "contains", "source": "text_data\\agent.txt:315", "target": "while"}, {"type": "contains", "source": "text_data\\agent.txt:315", "target": "isinstancenextnode"}, {"type": "contains", "source": "text_data\\agent.txt:315", "target": "await"}, {"type": "contains", "source": "text_data\\agent.txt:316", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\agent.txt:316", "target": "parts"}, {"type": "contains", "source": "text_data\\agent.txt:316", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\agent.txt:316", "target": "contentwhat"}, {"type": "contains", "source": "text_data\\agent.txt:316", "target": "capital"}, {"type": "contains", "source": "text_data\\agent.txt:317", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:317", "target": "graph"}, {"type": "contains", "source": "text_data\\agent.txt:317", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\agent.txt:317", "target": "kindresponse"}, {"type": "contains", "source": "text_data\\agent.txt:317", "target": "enddatafinalresultdataparis"}, {"type": "contains", "source": "text_data\\agent.txt:318", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:318", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:318", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:318", "target": "completed"}, {"type": "contains", "source": "text_data\\agent.txt:318", "target": "might"}, {"type": "contains", "source": "text_data\\agent.txt:319", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:319", "target": "reprself"}, {"type": "contains", "source": "text_data\\agent.txt:319", "target": "selfgraphrunresult"}, {"type": "contains", "source": "text_data\\agent.txt:319", "target": "resultrepr"}, {"type": "contains", "source": "text_data\\agent.txt:319", "target": "finished"}, {"type": "contains", "source": "text_data\\agent.txt:320", "target": "graphruncontextpydanticgraphnodespydanticgraphnodesgraphruncontext"}, {"type": "contains", "source": "text_data\\agent.txt:320", "target": "pydanticgraphgraphruncontext"}, {"type": "contains", "source": "text_data\\agent.txt:320", "target": "graphagentstate"}, {"type": "contains", "source": "text_data\\agent.txt:320", "target": "graphagentdepsagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:320", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:321", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:321", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:321", "target": "property"}, {"type": "contains", "source": "text_data\\agent.txt:321", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:321", "target": "current"}, {"type": "contains", "source": "text_data\\agent.txt:322", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:322", "target": "property"}, {"type": "contains", "source": "text_data\\agent.txt:322", "target": "agentrunresultresultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:322", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:322", "target": "final"}, {"type": "contains", "source": "text_data\\agent.txt:323", "target": "aiter"}, {"type": "contains", "source": "text_data\\agent.txt:323", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:323", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\agent.txt:323", "target": "collectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\agent.txt:323", "target": "agentnodeagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:324", "target": "anext"}, {"type": "contains", "source": "text_data\\agent.txt:324", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:324", "target": "aiter"}, {"type": "contains", "source": "text_data\\agent.txt:324", "target": "asynciteratoragentgraphagentnodeagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:324", "target": "resultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:325", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:325", "target": "advance"}, {"type": "contains", "source": "text_data\\agent.txt:325", "target": "automatically"}, {"type": "contains", "source": "text_data\\agent.txt:325", "target": "based"}, {"type": "contains", "source": "text_data\\agent.txt:325", "target": "returned"}, {"type": "contains", "source": "text_data\\agent.txt:326", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:326", "target": "agentnodeagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:326", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:326", "target": "resultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:326", "target": "endpydanticgraphnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\agent.txt:327", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:327", "target": "manually"}, {"type": "contains", "source": "text_data\\agent.txt:327", "target": "drive"}, {"type": "contains", "source": "text_data\\agent.txt:327", "target": "passing"}, {"type": "contains", "source": "text_data\\agent.txt:327", "target": "inspect"}, {"type": "contains", "source": "text_data\\agent.txt:328", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:328", "target": "import"}, {"type": "contains", "source": "text_data\\agent.txt:328", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:328", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:328", "target": "capital"}, {"type": "contains", "source": "text_data\\agent.txt:329", "target": "systempromptfunctions"}, {"type": "contains", "source": "text_data\\agent.txt:329", "target": "systempromptdynamicfunctions"}, {"type": "contains", "source": "text_data\\agent.txt:329", "target": "modelrequestnode"}, {"type": "contains", "source": "text_data\\agent.txt:329", "target": "requestmodelrequest"}, {"type": "contains", "source": "text_data\\agent.txt:329", "target": "parts"}, {"type": "contains", "source": "text_data\\agent.txt:330", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:330", "target": "partstextpartcontentparis"}, {"type": "contains", "source": "text_data\\agent.txt:330", "target": "partkindtext"}, {"type": "contains", "source": "text_data\\agent.txt:330", "target": "modelnamegpt4o"}, {"type": "contains", "source": "text_data\\agent.txt:330", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\agent.txt:331", "target": "parameters"}, {"type": "contains", "source": "text_data\\agent.txt:331", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:331", "target": "default"}, {"type": "contains", "source": "text_data\\agent.txt:331", "target": "agentnodeagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:331", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:332", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:332", "target": "endpydanticgraphnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\agent.txt:332", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:332", "target": "agentnodeagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:332", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:333", "target": "pydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:333", "target": "agentnodeagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:333", "target": "pydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:333", "target": "resultdatatresultpydanticairesultresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:333", "target": "endpydanticgraphnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\agent.txt:335", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:335", "target": "async"}, {"type": "contains", "source": "text_data\\agent.txt:335", "target": "agentgraphagentnodeagentdepst"}, {"type": "contains", "source": "text_data\\agent.txt:335", "target": "resultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:335", "target": "import"}, {"type": "contains", "source": "text_data\\agent.txt:336", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:336", "target": "agentrunnextnode"}, {"type": "contains", "source": "text_data\\agent.txt:336", "target": "start"}, {"type": "contains", "source": "text_data\\agent.txt:336", "target": "first"}, {"type": "contains", "source": "text_data\\agent.txt:336", "target": "nodes"}, {"type": "contains", "source": "text_data\\agent.txt:337", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\agent.txt:337", "target": "requestmodelrequest"}, {"type": "contains", "source": "text_data\\agent.txt:337", "target": "parts"}, {"type": "contains", "source": "text_data\\agent.txt:337", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\agent.txt:337", "target": "contentwhat"}, {"type": "contains", "source": "text_data\\agent.txt:338", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:338", "target": "graph"}, {"type": "contains", "source": "text_data\\agent.txt:338", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\agent.txt:338", "target": "kindresponse"}, {"type": "contains", "source": "text_data\\agent.txt:338", "target": "enddatafinalresultdataparis"}, {"type": "contains", "source": "text_data\\agent.txt:339", "target": "nextnode"}, {"type": "contains", "source": "text_data\\agent.txt:339", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:339", "target": "class"}, {"type": "contains", "source": "text_data\\agent.txt:339", "target": "accidentally"}, {"type": "contains", "source": "text_data\\agent.txt:339", "target": "instead"}, {"type": "contains", "source": "text_data\\agent.txt:340", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:340", "target": "statistics"}, {"type": "contains", "source": "text_data\\agent.txt:340", "target": "including"}, {"type": "contains", "source": "text_data\\agent.txt:340", "target": "token"}, {"type": "contains", "source": "text_data\\agent.txt:340", "target": "model"}, {"type": "contains", "source": "text_data\\agent.txt:341", "target": "final"}, {"type": "contains", "source": "text_data\\agent.txt:341", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:341", "target": "agent"}, {"type": "contains", "source": "text_data\\agent.txt:341", "target": "source"}, {"type": "contains", "source": "text_data\\agent.txt:341", "target": "pydanticaislimpydanticaiagentpy"}, {"type": "contains", "source": "text_data\\agent.txt:345", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:345", "target": "dataclassesfieldreprfalse"}, {"type": "contains", "source": "text_data\\agent.txt:345", "target": "dataclassesdataclass"}, {"type": "contains", "source": "text_data\\agent.txt:345", "target": "class"}, {"type": "contains", "source": "text_data\\agent.txt:345", "target": "agentrunresultgenericresultdatat"}, {"type": "contains", "source": "text_data\\agent.txt:346", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:346", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:346", "target": "selfresulttoolname"}, {"type": "contains", "source": "text_data\\agent.txt:346", "target": "raise"}, {"type": "contains", "source": "text_data\\agent.txt:346", "target": "valueerrorcannot"}, {"type": "contains", "source": "text_data\\agent.txt:347", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:347", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:347", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:347", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:347", "target": "message"}, {"type": "contains", "source": "text_data\\agent.txt:348", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:348", "target": "bytes"}, {"type": "contains", "source": "text_data\\agent.txt:348", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:348", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:348", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:349", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:349", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:349", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:349", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:349", "target": "bytes"}, {"type": "contains", "source": "text_data\\agent.txt:350", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:350", "target": "message"}, {"type": "contains", "source": "text_data\\agent.txt:350", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:350", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:350", "target": "bytes"}, {"type": "contains", "source": "text_data\\agent.txt:351", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:351", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:351", "target": "provides"}, {"type": "contains", "source": "text_data\\agent.txt:351", "target": "convenient"}, {"type": "contains", "source": "text_data\\agent.txt:351", "target": "modify"}, {"type": "contains", "source": "text_data\\agent.txt:352", "target": "allmessages"}, {"type": "contains", "source": "text_data\\agent.txt:352", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:352", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:352", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:352", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:353", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:353", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:353", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:353", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:353", "target": "message"}, {"type": "contains", "source": "text_data\\agent.txt:355", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:355", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:355", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:355", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:355", "target": "message"}, {"type": "contains", "source": "text_data\\agent.txt:356", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:356", "target": "selfstatemessagehistory"}, {"type": "contains", "source": "text_data\\agent.txt:356", "target": "allmessagesjson"}, {"type": "contains", "source": "text_data\\agent.txt:357", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:357", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:357", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:357", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:357", "target": "message"}, {"type": "contains", "source": "text_data\\agent.txt:358", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:358", "target": "byteshttpsdocspythonorg3librarystdtypeshtmlbytes"}, {"type": "contains", "source": "text_data\\agent.txt:358", "target": "bytes"}, {"type": "contains", "source": "text_data\\agent.txt:358", "target": "representing"}, {"type": "contains", "source": "text_data\\agent.txt:358", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:359", "target": "bytes"}, {"type": "contains", "source": "text_data\\agent.txt:359", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:359", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:359", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:359", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:360", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:360", "target": "messagesmodelmessagestypeadapterdumpjson"}, {"type": "contains", "source": "text_data\\agent.txt:360", "target": "selfallmessagesresulttoolreturncontentresulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:360", "target": "newmessages"}, {"type": "contains", "source": "text_data\\agent.txt:361", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:361", "target": "newmessages"}, {"type": "contains", "source": "text_data\\agent.txt:361", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:361", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:361", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:362", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:362", "target": "message"}, {"type": "contains", "source": "text_data\\agent.txt:362", "target": "result"}, {"type": "contains", "source": "text_data\\agent.txt:362", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:362", "target": "older"}, {"type": "contains", "source": "text_data\\agent.txt:363", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:363", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:363", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\agent.txt:363", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:363", "target": "source"}, {"type": "contains", "source": "text_data\\agent.txt:364", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:364", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:364", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:364", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:364", "target": "message"}, {"type": "contains", "source": "text_data\\agent.txt:365", "target": "returns"}, {"type": "contains", "source": "text_data\\agent.txt:365", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:365", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:365", "target": "selfallmessagesresulttoolreturncontentresulttoolreturncontentselfnewmessageindex"}, {"type": "contains", "source": "text_data\\agent.txt:365", "target": "newmessagesjson"}, {"type": "contains", "source": "text_data\\agent.txt:366", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:366", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\agent.txt:366", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:366", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:366", "target": "message"}, {"type": "contains", "source": "text_data\\agent.txt:367", "target": "description"}, {"type": "contains", "source": "text_data\\agent.txt:367", "target": "byteshttpsdocspythonorg3librarystdtypeshtmlbytes"}, {"type": "contains", "source": "text_data\\agent.txt:367", "target": "bytes"}, {"type": "contains", "source": "text_data\\agent.txt:367", "target": "representing"}, {"type": "contains", "source": "text_data\\agent.txt:367", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:368", "target": "bytes"}, {"type": "contains", "source": "text_data\\agent.txt:368", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:368", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:368", "target": "messages"}, {"type": "contains", "source": "text_data\\agent.txt:368", "target": "content"}, {"type": "contains", "source": "text_data\\agent.txt:369", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:369", "target": "messagesmodelmessagestypeadapterdumpjson"}, {"type": "contains", "source": "text_data\\agent.txt:369", "target": "selfnewmessagesresulttoolreturncontentresulttoolreturncontent"}, {"type": "contains", "source": "text_data\\agent.txt:369", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:370", "target": "usage"}, {"type": "contains", "source": "text_data\\agent.txt:370", "target": "return"}, {"type": "contains", "source": "text_data\\agent.txt:370", "target": "endstrategy"}, {"type": "contains", "source": "text_data\\agent.txt:370", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\agent.txt:370", "target": "capturerunmessages"}, {"type": "contains", "source": "text_data\\agent.txt:371", "target": "capturerunmessages"}, {"type": "contains", "source": "text_data\\agent.txt:371", "target": "instrumentationsettings"}, {"type": "contains", "source": "text_data\\agent.txt:371", "target": "dataclass"}, {"type": "contains", "source": "text_data\\agent.txt:371", "target": "options"}, {"type": "contains", "source": "text_data\\agent.txt:371", "target": "instrumenting"}, {"type": "contains", "source": "text_data\\agent.txt:372", "target": "source"}, {"type": "contains", "source": "text_data\\agent.txt:372", "target": "pydanticaislimpydanticaimodelsinstrumentedpy"}, {"type": "contains", "source": "text_data\\agent.txt:373", "target": "tracer"}, {"type": "contains", "source": "text_data\\agent.txt:373", "target": "fieldreprfalse"}, {"type": "contains", "source": "text_data\\agent.txt:373", "target": "eventlogger"}, {"type": "contains", "source": "text_data\\agent.txt:373", "target": "eventmode"}, {"type": "contains", "source": "text_data\\agent.txt:373", "target": "literalattributes"}, {"type": "contains", "source": "text_data\\agent.txt:374", "target": "events"}, {"type": "contains", "source": "text_data\\agent.txt:374", "target": "attributes"}, {"type": "contains", "source": "text_data\\agent.txt:374", "target": "tracerprovider"}, {"type": "contains", "source": "text_data\\agent.txt:374", "target": "tracer"}, {"type": "contains", "source": "text_data\\agent.txt:374", "target": "provider"}, {"type": "contains", "source": "text_data\\agent.txt:375", "target": "eventloggerprovider"}, {"type": "contains", "source": "text_data\\agent.txt:375", "target": "event"}, {"type": "contains", "source": "text_data\\agent.txt:375", "target": "logger"}, {"type": "contains", "source": "text_data\\agent.txt:375", "target": "provider"}, {"type": "contains", "source": "text_data\\agent.txt:375", "target": "version"}, {"type": "contains", "source": "text_data\\agent.txt:376", "target": "selfeventmode"}, {"type": "contains", "source": "text_data\\agent.txt:376", "target": "eventmode"}, {"type": "contains", "source": "text_data\\agent.txt:377", "target": "attributes"}, {"type": "contains", "source": "text_data\\agent.txt:377", "target": "tracerprovider"}, {"type": "contains", "source": "text_data\\agent.txt:377", "target": "eventloggerprovider"}, {"type": "contains", "source": "text_data\\agent.txt:377", "target": "eventmode"}, {"type": "contains", "source": "text_data\\agent.txt:377", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\agent.txt:378", "target": "events"}, {"type": "contains", "source": "text_data\\agent.txt:378", "target": "attributes"}, {"type": "contains", "source": "text_data\\agent.txt:378", "target": "tracer"}, {"type": "contains", "source": "text_data\\agent.txt:378", "target": "provider"}, {"type": "contains", "source": "text_data\\agent.txt:378", "target": "opentelemetry"}, {"type": "contains", "source": "text_data\\agent.txt:379", "target": "event"}, {"type": "contains", "source": "text_data\\agent.txt:379", "target": "logger"}, {"type": "contains", "source": "text_data\\agent.txt:379", "target": "provider"}, {"type": "contains", "source": "text_data\\agent.txt:379", "target": "eventloggerprovider"}, {"type": "contains", "source": "text_data\\agent.txt:379", "target": "global"}, {"type": "contains", "source": "text_data\\agent.txt:381", "target": "events"}, {"type": "contains", "source": "text_data\\agent.txt:381", "target": "attributes"}, {"type": "contains", "source": "text_data\\agent.txt:381", "target": "tracerprovider"}, {"type": "contains", "source": "text_data\\agent.txt:381", "target": "tracer"}, {"type": "contains", "source": "text_data\\agent.txt:381", "target": "provider"}, {"type": "contains", "source": "text_data\\agent.txt:382", "target": "eventloggerprovider"}, {"type": "contains", "source": "text_data\\agent.txt:382", "target": "event"}, {"type": "contains", "source": "text_data\\agent.txt:382", "target": "logger"}, {"type": "contains", "source": "text_data\\agent.txt:382", "target": "provider"}, {"type": "contains", "source": "text_data\\agent.txt:382", "target": "version"}, {"type": "contains", "source": "text_data\\agent.txt:383", "target": "selfeventmode"}, {"type": "contains", "source": "text_data\\agent.txt:383", "target": "eventmode"}, {"type": "contains", "source": "text_data\\agent.txt:383", "target": "pydantic"}, {"type": "contains", "source": "text_data\\agent.txt:383", "target": "services"}, {"type": "contains", "source": "text_data\\agent.txt:383", "target": "present"}, {"type": "contains", "source": "text_data\\agents.txt:383", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agents.txt:383", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\agents.txt:383", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\agents.txt:383", "target": "v0050"}, {"type": "contains", "source": "text_data\\agents.txt:383", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\agents.txt:384", "target": "agents"}, {"type": "contains", "source": "text_data\\agents.txt:384", "target": "model"}, {"type": "contains", "source": "text_data\\agents.txt:384", "target": "introduction"}, {"type": "contains", "source": "text_data\\agents.txt:384", "target": "contributing"}, {"type": "contains", "source": "text_data\\agents.txt:384", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\agents.txt:385", "target": "tools"}, {"type": "contains", "source": "text_data\\agents.txt:385", "target": "models"}, {"type": "contains", "source": "text_data\\agents.txt:385", "target": "dependencies"}, {"type": "contains", "source": "text_data\\agents.txt:385", "target": "results"}, {"type": "contains", "source": "text_data\\agents.txt:385", "target": "testing"}, {"type": "contains", "source": "text_data\\agents.txt:386", "target": "examples"}, {"type": "contains", "source": "text_data\\agents.txt:386", "target": "client"}, {"type": "contains", "source": "text_data\\agents.txt:386", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\agents.txt:386", "target": "server"}, {"type": "contains", "source": "text_data\\agents.txt:386", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\agents.txt:387", "target": "stream"}, {"type": "contains", "source": "text_data\\agents.txt:387", "target": "reference"}, {"type": "contains", "source": "text_data\\agents.txt:387", "target": "pydantic"}, {"type": "contains", "source": "text_data\\agents.txt:387", "target": "model"}, {"type": "contains", "source": "text_data\\agents.txt:387", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\agents.txt:388", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\agents.txt:388", "target": "apimessages"}, {"type": "contains", "source": "text_data\\agents.txt:388", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\agents.txt:388", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\agents.txt:388", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\agents.txt:389", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\agents.txt:389", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\agents.txt:389", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\agents.txt:389", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\agents.txt:389", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\agents.txt:390", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\agents.txt:390", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\agents.txt:390", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\agents.txt:390", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\agents.txt:390", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\agents.txt:391", "target": "agents"}, {"type": "contains", "source": "text_data\\agents.txt:391", "target": "model"}, {"type": "contains", "source": "text_data\\agents.txt:391", "target": "introduction"}, {"type": "contains", "source": "text_data\\agents.txt:391", "target": "usage"}, {"type": "contains", "source": "text_data\\agents.txt:391", "target": "settings"}, {"type": "contains", "source": "text_data\\agents.txt:392", "target": "agentapiagentpydanticaiagentagent"}, {"type": "contains", "source": "text_data\\agents.txt:392", "target": "class"}, {"type": "contains", "source": "text_data\\agents.txt:392", "target": "documentation"}, {"type": "contains", "source": "text_data\\agents.txt:392", "target": "conceptually"}, {"type": "contains", "source": "text_data\\agents.txt:392", "target": "think"}, {"type": "contains", "source": "text_data\\agents.txt:393", "target": "specified"}, {"type": "contains", "source": "text_data\\agents.txt:393", "target": "model"}, {"type": "contains", "source": "text_data\\agents.txt:393", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:393", "target": "system"}, {"type": "contains", "source": "text_data\\agents.txt:393", "target": "functions"}, {"type": "contains", "source": "text_data\\agents.txt:394", "target": "liststr"}, {"type": "contains", "source": "text_data\\agents.txt:394", "target": "should"}, {"type": "contains", "source": "text_data\\agents.txt:394", "target": "typing"}, {"type": "contains", "source": "text_data\\agents.txt:394", "target": "terms"}, {"type": "contains", "source": "text_data\\agents.txt:394", "target": "agents"}, {"type": "contains", "source": "text_data\\agents.txt:395", "target": "heres"}, {"type": "contains", "source": "text_data\\agents.txt:395", "target": "example"}, {"type": "contains", "source": "text_data\\agents.txt:395", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:395", "target": "simulates"}, {"type": "contains", "source": "text_data\\agents.txt:395", "target": "roulette"}, {"type": "contains", "source": "text_data\\agents.txt:396", "target": "square"}, {"type": "contains", "source": "text_data\\agents.txt:396", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:396", "target": "winner"}, {"type": "contains", "source": "text_data\\agents.txt:396", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agents.txt:396", "target": "import"}, {"type": "contains", "source": "text_data\\agents.txt:397", "target": "printresultdata"}, {"type": "contains", "source": "text_data\\agents.txt:397", "target": "result"}, {"type": "contains", "source": "text_data\\agents.txt:397", "target": "rouletteagentrunsynci"}, {"type": "contains", "source": "text_data\\agents.txt:397", "target": "winner"}, {"type": "contains", "source": "text_data\\agents.txt:397", "target": "depssuccessnumber"}, {"type": "contains", "source": "text_data\\agents.txt:398", "target": "agents"}, {"type": "contains", "source": "text_data\\agents.txt:398", "target": "designed"}, {"type": "contains", "source": "text_data\\agents.txt:398", "target": "reuse"}, {"type": "contains", "source": "text_data\\agents.txt:398", "target": "fastapi"}, {"type": "contains", "source": "text_data\\agents.txt:398", "target": "intended"}, {"type": "contains", "source": "text_data\\agents.txt:399", "target": "which"}, {"type": "contains", "source": "text_data\\agents.txt:399", "target": "returns"}, {"type": "contains", "source": "text_data\\agents.txt:399", "target": "response"}, {"type": "contains", "source": "text_data\\agents.txt:399", "target": "coroutine"}, {"type": "contains", "source": "text_data\\agents.txt:399", "target": "runresultapiagentpydanticaiagentagentrunresult"}, {"type": "contains", "source": "text_data\\agents.txt:400", "target": "agentiterapiagentpydanticaiagentagentiter"}, {"type": "contains", "source": "text_data\\agents.txt:400", "target": "context"}, {"type": "contains", "source": "text_data\\agents.txt:400", "target": "manager"}, {"type": "contains", "source": "text_data\\agents.txt:400", "target": "which"}, {"type": "contains", "source": "text_data\\agents.txt:400", "target": "returns"}, {"type": "contains", "source": "text_data\\agents.txt:401", "target": "capital"}, {"type": "contains", "source": "text_data\\agents.txt:401", "target": "example"}, {"type": "contains", "source": "text_data\\agents.txt:401", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:401", "target": "async"}, {"type": "contains", "source": "text_data\\agents.txt:401", "target": "heres"}, {"type": "contains", "source": "text_data\\agents.txt:402", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agents.txt:402", "target": "messages"}, {"type": "contains", "source": "text_data\\agents.txt:402", "target": "agents"}, {"type": "contains", "source": "text_data\\agents.txt:402", "target": "pydanticgraph"}, {"type": "contains", "source": "text_data\\agents.txt:402", "target": "model"}, {"type": "contains", "source": "text_data\\agents.txt:403", "target": "graph"}, {"type": "contains", "source": "text_data\\agents.txt:403", "target": "method"}, {"type": "contains", "source": "text_data\\agents.txt:403", "target": "returns"}, {"type": "contains", "source": "text_data\\agents.txt:403", "target": "scenarios"}, {"type": "contains", "source": "text_data\\agents.txt:403", "target": "worry"}, {"type": "contains", "source": "text_data\\agents.txt:404", "target": "endapipydanticgraphnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\agents.txt:404", "target": "final"}, {"type": "contains", "source": "text_data\\agents.txt:404", "target": "result"}, {"type": "contains", "source": "text_data\\agents.txt:404", "target": "along"}, {"type": "contains", "source": "text_data\\agents.txt:404", "target": "detailed"}, {"type": "contains", "source": "text_data\\agents.txt:405", "target": "async"}, {"type": "contains", "source": "text_data\\agents.txt:405", "target": "iteration"}, {"type": "contains", "source": "text_data\\agents.txt:405", "target": "heres"}, {"type": "contains", "source": "text_data\\agents.txt:405", "target": "example"}, {"type": "contains", "source": "text_data\\agents.txt:405", "target": "using"}, {"type": "contains", "source": "text_data\\agents.txt:406", "target": "async"}, {"type": "contains", "source": "text_data\\agents.txt:406", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agents.txt:406", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:406", "target": "nodes"}, {"type": "contains", "source": "text_data\\agents.txt:406", "target": "agents"}, {"type": "contains", "source": "text_data\\agents.txt:407", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\agents.txt:407", "target": "partkinduserprompt"}, {"type": "contains", "source": "text_data\\agents.txt:407", "target": "kindrequest"}, {"type": "contains", "source": "text_data\\agents.txt:407", "target": "calltoolsnode"}, {"type": "contains", "source": "text_data\\agents.txt:407", "target": "modelresponsemodelresponse"}, {"type": "contains", "source": "text_data\\agents.txt:408", "target": "manually"}, {"type": "contains", "source": "text_data\\agents.txt:408", "target": "agentrun"}, {"type": "contains", "source": "text_data\\agents.txt:408", "target": "async"}, {"type": "contains", "source": "text_data\\agents.txt:408", "target": "iterator"}, {"type": "contains", "source": "text_data\\agents.txt:408", "target": "yields"}, {"type": "contains", "source": "text_data\\agents.txt:409", "target": "import"}, {"type": "contains", "source": "text_data\\agents.txt:409", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:409", "target": "async"}, {"type": "contains", "source": "text_data\\agents.txt:409", "target": "capital"}, {"type": "contains", "source": "text_data\\agents.txt:409", "target": "france"}, {"type": "contains", "source": "text_data\\agents.txt:410", "target": "systempromptfunctions"}, {"type": "contains", "source": "text_data\\agents.txt:410", "target": "systempromptdynamicfunctions"}, {"type": "contains", "source": "text_data\\agents.txt:410", "target": "modelrequestnode"}, {"type": "contains", "source": "text_data\\agents.txt:410", "target": "requestmodelrequest"}, {"type": "contains", "source": "text_data\\agents.txt:410", "target": "parts"}, {"type": "contains", "source": "text_data\\agents.txt:411", "target": "partstextpartcontentparis"}, {"type": "contains", "source": "text_data\\agents.txt:411", "target": "partkindtext"}, {"type": "contains", "source": "text_data\\agents.txt:411", "target": "modelnamegpt4o"}, {"type": "contains", "source": "text_data\\agents.txt:411", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\agents.txt:411", "target": "kindresponse"}, {"type": "contains", "source": "text_data\\agents.txt:412", "target": "usage"}, {"type": "contains", "source": "text_data\\agents.txt:412", "target": "object"}, {"type": "contains", "source": "text_data\\agents.txt:412", "target": "final"}, {"type": "contains", "source": "text_data\\agents.txt:412", "target": "containing"}, {"type": "contains", "source": "text_data\\agents.txt:412", "target": "streaming"}, {"type": "contains", "source": "text_data\\agents.txt:413", "target": "import"}, {"type": "contains", "source": "text_data\\agents.txt:413", "target": "location"}, {"type": "contains", "source": "text_data\\agents.txt:413", "target": "forecastdate"}, {"type": "contains", "source": "text_data\\agents.txt:413", "target": "dataclass"}, {"type": "contains", "source": "text_data\\agents.txt:413", "target": "async"}, {"type": "contains", "source": "text_data\\agents.txt:414", "target": "forecastdate"}, {"type": "contains", "source": "text_data\\agents.txt:414", "target": "weather"}, {"type": "contains", "source": "text_data\\agents.txt:414", "target": "return"}, {"type": "contains", "source": "text_data\\agents.txt:414", "target": "location"}, {"type": "contains", "source": "text_data\\agents.txt:414", "target": "historical"}, {"type": "contains", "source": "text_data\\agents.txt:415", "target": "async"}, {"type": "contains", "source": "text_data\\agents.txt:415", "target": "request"}, {"type": "contains", "source": "text_data\\agents.txt:415", "target": "return"}, {"type": "contains", "source": "text_data\\agents.txt:415", "target": "await"}, {"type": "contains", "source": "text_data\\agents.txt:415", "target": "ctxdepsgethistoricweatherlocation"}, {"type": "contains", "source": "text_data\\agents.txt:416", "target": "outputmessagesappend"}, {"type": "contains", "source": "text_data\\agents.txt:416", "target": "async"}, {"type": "contains", "source": "text_data\\agents.txt:416", "target": "requeststream"}, {"type": "contains", "source": "text_data\\agents.txt:416", "target": "isinstanceevent"}, {"type": "contains", "source": "text_data\\agents.txt:416", "target": "modelrequestnode"}, {"type": "contains", "source": "text_data\\agents.txt:417", "target": "outputmessagesappend"}, {"type": "contains", "source": "text_data\\agents.txt:417", "target": "frequest"}, {"type": "contains", "source": "text_data\\agents.txt:417", "target": "eventindex"}, {"type": "contains", "source": "text_data\\agents.txt:417", "target": "delta"}, {"type": "contains", "source": "text_data\\agents.txt:417", "target": "eventdeltacontentdeltar"}, {"type": "contains", "source": "text_data\\agents.txt:418", "target": "calls"}, {"type": "contains", "source": "text_data\\agents.txt:418", "target": "outputmessagesappend"}, {"type": "contains", "source": "text_data\\agents.txt:418", "target": "async"}, {"type": "contains", "source": "text_data\\agents.txt:418", "target": "handlestream"}, {"type": "contains", "source": "text_data\\agents.txt:418", "target": "agentiscalltoolsnodenode"}, {"type": "contains", "source": "text_data\\agents.txt:419", "target": "runresultdata"}, {"type": "contains", "source": "text_data\\agents.txt:419", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:419", "target": "isinstanceevent"}, {"type": "contains", "source": "text_data\\agents.txt:419", "target": "functiontoolresultevent"}, {"type": "contains", "source": "text_data\\agents.txt:419", "target": "outputmessagesappend"}, {"type": "contains", "source": "text_data\\agents.txt:420", "target": "request"}, {"type": "contains", "source": "text_data\\agents.txt:420", "target": "streaming"}, {"type": "contains", "source": "text_data\\agents.txt:420", "target": "partial"}, {"type": "contains", "source": "text_data\\agents.txt:420", "target": "toolcallid0001"}, {"type": "contains", "source": "text_data\\agents.txt:420", "target": "tools"}, {"type": "contains", "source": "text_data\\agents.txt:421", "target": "request"}, {"type": "contains", "source": "text_data\\agents.txt:421", "target": "delta"}, {"type": "contains", "source": "text_data\\agents.txt:421", "target": "streaming"}, {"type": "contains", "source": "text_data\\agents.txt:421", "target": "partial"}, {"type": "contains", "source": "text_data\\agents.txt:421", "target": "result"}, {"type": "contains", "source": "text_data\\agents.txt:422", "target": "usage"}, {"type": "contains", "source": "text_data\\agents.txt:422", "target": "limit"}, {"type": "contains", "source": "text_data\\agents.txt:422", "target": "tokens"}, {"type": "contains", "source": "text_data\\agents.txt:422", "target": "additional"}, {"type": "contains", "source": "text_data\\agents.txt:422", "target": "configuration"}, {"type": "contains", "source": "text_data\\agents.txt:423", "target": "import"}, {"type": "contains", "source": "text_data\\agents.txt:423", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:423", "target": "usagelimitexceeded"}, {"type": "contains", "source": "text_data\\agents.txt:423", "target": "resultsync"}, {"type": "contains", "source": "text_data\\agents.txt:423", "target": "agentrunsync"}, {"type": "contains", "source": "text_data\\agents.txt:424", "target": "except"}, {"type": "contains", "source": "text_data\\agents.txt:424", "target": "usagelimitexceeded"}, {"type": "contains", "source": "text_data\\agents.txt:424", "target": "printe"}, {"type": "contains", "source": "text_data\\agents.txt:424", "target": "exceeded"}, {"type": "contains", "source": "text_data\\agents.txt:424", "target": "responsetokenslimit"}, {"type": "contains", "source": "text_data\\agents.txt:425", "target": "restricting"}, {"type": "contains", "source": "text_data\\agents.txt:425", "target": "number"}, {"type": "contains", "source": "text_data\\agents.txt:425", "target": "requests"}, {"type": "contains", "source": "text_data\\agents.txt:425", "target": "useful"}, {"type": "contains", "source": "text_data\\agents.txt:425", "target": "preventing"}, {"type": "contains", "source": "text_data\\agents.txt:426", "target": "import"}, {"type": "contains", "source": "text_data\\agents.txt:426", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:426", "target": "response"}, {"type": "contains", "source": "text_data\\agents.txt:426", "target": "infiniteretrytool"}, {"type": "contains", "source": "text_data\\agents.txt:426", "target": "typingextensions"}, {"type": "contains", "source": "text_data\\agents.txt:427", "target": "resultsync"}, {"type": "contains", "source": "text_data\\agents.txt:427", "target": "agentrunsync"}, {"type": "contains", "source": "text_data\\agents.txt:427", "target": "begin"}, {"type": "contains", "source": "text_data\\agents.txt:427", "target": "infinite"}, {"type": "contains", "source": "text_data\\agents.txt:427", "target": "retry"}, {"type": "contains", "source": "text_data\\agents.txt:428", "target": "model"}, {"type": "contains", "source": "text_data\\agents.txt:428", "target": "structure"}, {"type": "contains", "source": "text_data\\agents.txt:428", "target": "especially"}, {"type": "contains", "source": "text_data\\agents.txt:428", "target": "relevant"}, {"type": "contains", "source": "text_data\\agents.txt:428", "target": "youve"}, {"type": "contains", "source": "text_data\\agents.txt:429", "target": "settings"}, {"type": "contains", "source": "text_data\\agents.txt:429", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\agents.txt:429", "target": "these"}, {"type": "contains", "source": "text_data\\agents.txt:429", "target": "argument"}, {"type": "contains", "source": "text_data\\agents.txt:429", "target": "setting"}, {"type": "contains", "source": "text_data\\agents.txt:430", "target": "model"}, {"type": "contains", "source": "text_data\\agents.txt:430", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:430", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agents.txt:430", "target": "import"}, {"type": "contains", "source": "text_data\\agents.txt:430", "target": "agentopenaigpt4o"}, {"type": "contains", "source": "text_data\\agents.txt:431", "target": "import"}, {"type": "contains", "source": "text_data\\agents.txt:431", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:431", "target": "category"}, {"type": "contains", "source": "text_data\\agents.txt:431", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agents.txt:431", "target": "unexpectedmodelbehavior"}, {"type": "contains", "source": "text_data\\agents.txt:432", "target": "safety"}, {"type": "contains", "source": "text_data\\agents.txt:432", "target": "settings"}, {"type": "contains", "source": "text_data\\agents.txt:432", "target": "category"}, {"type": "contains", "source": "text_data\\agents.txt:432", "target": "harmcategoryhatespeech"}, {"type": "contains", "source": "text_data\\agents.txt:432", "target": "threshold"}, {"type": "contains", "source": "text_data\\agents.txt:433", "target": "conversation"}, {"type": "contains", "source": "text_data\\agents.txt:433", "target": "might"}, {"type": "contains", "source": "text_data\\agents.txt:433", "target": "multiple"}, {"type": "contains", "source": "text_data\\agents.txt:433", "target": "conversations"}, {"type": "contains", "source": "text_data\\agents.txt:433", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:434", "target": "albert"}, {"type": "contains", "source": "text_data\\agents.txt:434", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agents.txt:434", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:434", "target": "einstein"}, {"type": "contains", "source": "text_data\\agents.txt:434", "target": "famous"}, {"type": "contains", "source": "text_data\\agents.txt:435", "target": "hints"}, {"type": "contains", "source": "text_data\\agents.txt:435", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\agents.txt:435", "target": "types"}, {"type": "contains", "source": "text_data\\agents.txt:435", "target": "pydantic"}, {"type": "contains", "source": "text_data\\agents.txt:435", "target": "typing"}, {"type": "contains", "source": "text_data\\agents.txt:436", "target": "particular"}, {"type": "contains", "source": "text_data\\agents.txt:436", "target": "agents"}, {"type": "contains", "source": "text_data\\agents.txt:436", "target": "generic"}, {"type": "contains", "source": "text_data\\agents.txt:436", "target": "their"}, {"type": "contains", "source": "text_data\\agents.txt:436", "target": "dependencies"}, {"type": "contains", "source": "text_data\\agents.txt:437", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:437", "target": "following"}, {"type": "contains", "source": "text_data\\agents.txt:437", "target": "import"}, {"type": "contains", "source": "text_data\\agents.txt:437", "target": "dataclass"}, {"type": "contains", "source": "text_data\\agents.txt:437", "target": "consider"}, {"type": "contains", "source": "text_data\\agents.txt:438", "target": "system"}, {"type": "contains", "source": "text_data\\agents.txt:438", "target": "running"}, {"type": "contains", "source": "text_data\\agents.txt:438", "target": "error"}, {"type": "contains", "source": "text_data\\agents.txt:438", "target": "argument"}, {"type": "contains", "source": "text_data\\agents.txt:438", "target": "incompatible"}, {"type": "contains", "source": "text_data\\agents.txt:439", "target": "system"}, {"type": "contains", "source": "text_data\\agents.txt:439", "target": "prompts"}, {"type": "contains", "source": "text_data\\agents.txt:439", "target": "defined"}, {"type": "contains", "source": "text_data\\agents.txt:439", "target": "these"}, {"type": "contains", "source": "text_data\\agents.txt:439", "target": "known"}, {"type": "contains", "source": "text_data\\agents.txt:440", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:440", "target": "import"}, {"type": "contains", "source": "text_data\\agents.txt:440", "target": "agentsystemprompt"}, {"type": "contains", "source": "text_data\\agents.txt:440", "target": "return"}, {"type": "contains", "source": "text_data\\agents.txt:440", "target": "heres"}, {"type": "contains", "source": "text_data\\agents.txt:441", "target": "validation"}, {"type": "contains", "source": "text_data\\agents.txt:441", "target": "result"}, {"type": "contains", "source": "text_data\\agents.txt:441", "target": "model"}, {"type": "contains", "source": "text_data\\agents.txt:441", "target": "retry"}, {"type": "contains", "source": "text_data\\agents.txt:441", "target": "example"}, {"type": "contains", "source": "text_data\\agents.txt:442", "target": "retry"}, {"type": "contains", "source": "text_data\\agents.txt:442", "target": "count"}, {"type": "contains", "source": "text_data\\agents.txt:442", "target": "result"}, {"type": "contains", "source": "text_data\\agents.txt:442", "target": "default"}, {"type": "contains", "source": "text_data\\agents.txt:442", "target": "altered"}, {"type": "contains", "source": "text_data\\agents.txt:443", "target": "import"}, {"type": "contains", "source": "text_data\\agents.txt:443", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:443", "target": "userid"}, {"type": "contains", "source": "text_data\\agents.txt:443", "target": "modelretry"}, {"type": "contains", "source": "text_data\\agents.txt:443", "target": "their"}, {"type": "contains", "source": "text_data\\agents.txt:444", "target": "coffee"}, {"type": "contains", "source": "text_data\\agents.txt:444", "target": "return"}, {"type": "contains", "source": "text_data\\agents.txt:444", "target": "userid"}, {"type": "contains", "source": "text_data\\agents.txt:444", "target": "result"}, {"type": "contains", "source": "text_data\\agents.txt:444", "target": "agentrunsync"}, {"type": "contains", "source": "text_data\\agents.txt:445", "target": "model"}, {"type": "contains", "source": "text_data\\agents.txt:445", "target": "errors"}, {"type": "contains", "source": "text_data\\agents.txt:445", "target": "models"}, {"type": "contains", "source": "text_data\\agents.txt:445", "target": "behave"}, {"type": "contains", "source": "text_data\\agents.txt:445", "target": "unexpectedly"}, {"type": "contains", "source": "text_data\\agents.txt:446", "target": "agent"}, {"type": "contains", "source": "text_data\\agents.txt:446", "target": "unexpectedmodelbehavior"}, {"type": "contains", "source": "text_data\\agents.txt:446", "target": "capturerunmessages"}, {"type": "contains", "source": "text_data\\agents.txt:446", "target": "modelretryplease"}, {"type": "contains", "source": "text_data\\agents.txt:446", "target": "again"}, {"type": "contains", "source": "text_data\\agents.txt:447", "target": "messages"}, {"type": "contains", "source": "text_data\\agents.txt:447", "target": "parts"}, {"type": "contains", "source": "text_data\\agents.txt:447", "target": "printmessages"}, {"type": "contains", "source": "text_data\\agents.txt:447", "target": "modelrequest"}, {"type": "contains", "source": "text_data\\agents.txt:447", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\agents.txt:448", "target": "toolcallidpydaitoolcallid"}, {"type": "contains", "source": "text_data\\agents.txt:448", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\agents.txt:448", "target": "partkindtoolcall"}, {"type": "contains", "source": "text_data\\agents.txt:448", "target": "modelnamegpt4o"}, {"type": "contains", "source": "text_data\\agents.txt:448", "target": "kindresponse"}, {"type": "contains", "source": "text_data\\agents.txt:449", "target": "kindrequest"}, {"type": "contains", "source": "text_data\\agents.txt:449", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\agents.txt:449", "target": "parts"}, {"type": "contains", "source": "text_data\\agents.txt:449", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\agents.txt:449", "target": "toolnamecalcvolume"}, {"type": "contains", "source": "text_data\\agents.txt:450", "target": "messages"}, {"type": "contains", "source": "text_data\\agents.txt:450", "target": "example"}, {"type": "contains", "source": "text_data\\agents.txt:450", "target": "complete"}, {"type": "contains", "source": "text_data\\agents.txt:450", "target": "runapiagentpydanticaiagentagentrun"}, {"type": "contains", "source": "text_data\\agents.txt:450", "target": "runsyncapiagentpydanticaiagentagentrunsync"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:450", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:450", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:450", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:450", "target": "v0050"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:450", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:451", "target": "tools"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:451", "target": "introduction"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:451", "target": "example"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:451", "target": "logfire"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:451", "target": "contributing"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:452", "target": "evals"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:452", "target": "input"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:452", "target": "multiagent"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:452", "target": "applications"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:452", "target": "multiagentapplications"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:453", "target": "examples"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:453", "target": "client"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:453", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:453", "target": "server"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:453", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:454", "target": "stream"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:454", "target": "reference"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:454", "target": "pydantic"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:454", "target": "model"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:454", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:455", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:455", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:455", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:455", "target": "apisettings"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:455", "target": "pydanticaiusage"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:456", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:456", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:456", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:456", "target": "apimodelstest"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:456", "target": "pydanticaimodelsfunction"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:457", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:457", "target": "apipydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:457", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:457", "target": "apipydanticevalsreporting"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:457", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:458", "target": "example"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:458", "target": "pydantic"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:458", "target": "table"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:458", "target": "contents"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:458", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:459", "target": "agent"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:459", "target": "framework"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:459", "target": "pydantic"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:459", "target": "cihttpsgithubcompydanticpydantic"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:459", "target": "aiactionsworkflowsciymlbadgesvgeventpush"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:460", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:460", "target": "python"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:460", "target": "agent"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:460", "target": "framework"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:460", "target": "fastapi"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:461", "target": "pydantic"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:461", "target": "built"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:461", "target": "openai"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:461", "target": "anthropic"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:461", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:462", "target": "responses"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:462", "target": "typesafe"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:462", "target": "designed"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:462", "target": "checkingagentsstatictypechecking"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:462", "target": "powerful"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:463", "target": "system"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:463", "target": "dependency"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:463", "target": "useful"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:463", "target": "provides"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:463", "target": "example"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:464", "target": "hello"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:464", "target": "world"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:464", "target": "example"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:464", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:464", "target": "agent"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:465", "target": "tools"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:465", "target": "build"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:465", "target": "example"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:465", "target": "interesting"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:465", "target": "easily"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:466", "target": "import"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:466", "target": "dataclass"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:466", "target": "agent"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:466", "target": "databaseconn"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:466", "target": "class"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:467", "target": "support"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:467", "target": "async"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:467", "target": "runcontextsupportdependencies"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:467", "target": "await"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:467", "target": "return"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:468", "target": "result"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:468", "target": "await"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:468", "target": "balance"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:468", "target": "depsdeps"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:468", "target": "printresultdata"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:469", "target": "logfire"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:469", "target": "complete"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:469", "target": "banksupportpy"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:469", "target": "example"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:469", "target": "pydantic"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:470", "target": "agent"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:470", "target": "import"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:470", "target": "support"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:470", "target": "banksupportwithlogfirepy"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:470", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:471", "target": "learn"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:471", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:471", "target": "monitoring"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:471", "target": "performancelogfire"}, {"type": "contains", "source": "text_data\\ai.pydantic.dev.txt:471", "target": "steps"}, {"type": "contains", "source": "text_data\\anthropic.txt:471", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\anthropic.txt:471", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\anthropic.txt:471", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\anthropic.txt:471", "target": "v0050"}, {"type": "contains", "source": "text_data\\anthropic.txt:471", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\anthropic.txt:472", "target": "tools"}, {"type": "contains", "source": "text_data\\anthropic.txt:472", "target": "contributing"}, {"type": "contains", "source": "text_data\\anthropic.txt:472", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\anthropic.txt:472", "target": "documentation"}, {"type": "contains", "source": "text_data\\anthropic.txt:472", "target": "agents"}, {"type": "contains", "source": "text_data\\anthropic.txt:473", "target": "evals"}, {"type": "contains", "source": "text_data\\anthropic.txt:473", "target": "input"}, {"type": "contains", "source": "text_data\\anthropic.txt:473", "target": "graphs"}, {"type": "contains", "source": "text_data\\anthropic.txt:473", "target": "graph"}, {"type": "contains", "source": "text_data\\anthropic.txt:473", "target": "image"}, {"type": "contains", "source": "text_data\\anthropic.txt:474", "target": "examples"}, {"type": "contains", "source": "text_data\\anthropic.txt:474", "target": "client"}, {"type": "contains", "source": "text_data\\anthropic.txt:474", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\anthropic.txt:474", "target": "server"}, {"type": "contains", "source": "text_data\\anthropic.txt:474", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\anthropic.txt:475", "target": "agent"}, {"type": "contains", "source": "text_data\\anthropic.txt:475", "target": "stream"}, {"type": "contains", "source": "text_data\\anthropic.txt:475", "target": "reference"}, {"type": "contains", "source": "text_data\\anthropic.txt:475", "target": "pydantic"}, {"type": "contains", "source": "text_data\\anthropic.txt:475", "target": "model"}, {"type": "contains", "source": "text_data\\anthropic.txt:476", "target": "pydanticaimodelsanthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:476", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\anthropic.txt:476", "target": "result"}, {"type": "contains", "source": "text_data\\anthropic.txt:476", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\anthropic.txt:476", "target": "messages"}, {"type": "contains", "source": "text_data\\anthropic.txt:477", "target": "modelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:477", "target": "system"}, {"type": "contains", "source": "text_data\\anthropic.txt:477", "target": "anthropicstreamedresponse"}, {"type": "contains", "source": "text_data\\anthropic.txt:477", "target": "timestamp"}, {"type": "contains", "source": "text_data\\anthropic.txt:477", "target": "pydanticaimodelsbedrock"}, {"type": "contains", "source": "text_data\\anthropic.txt:478", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\anthropic.txt:478", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\anthropic.txt:478", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\anthropic.txt:478", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\anthropic.txt:478", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\anthropic.txt:479", "target": "setup"}, {"type": "contains", "source": "text_data\\anthropic.txt:479", "target": "latestanthropicmodelnames"}, {"type": "contains", "source": "text_data\\anthropic.txt:479", "target": "modelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:479", "target": "model"}, {"type": "contains", "source": "text_data\\anthropic.txt:479", "target": "table"}, {"type": "contains", "source": "text_data\\anthropic.txt:480", "target": "latestanthropicmodelnames"}, {"type": "contains", "source": "text_data\\anthropic.txt:480", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\anthropic.txt:480", "target": "anthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:480", "target": "anthropicmodelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:480", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\anthropic.txt:481", "target": "anthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:481", "target": "models"}, {"type": "contains", "source": "text_data\\anthropic.txt:481", "target": "model"}, {"type": "contains", "source": "text_data\\anthropic.txt:481", "target": "possible"}, {"type": "contains", "source": "text_data\\anthropic.txt:481", "target": "names"}, {"type": "contains", "source": "text_data\\anthropic.txt:482", "target": "request"}, {"type": "contains", "source": "text_data\\anthropic.txt:482", "target": "anthropicmetadata"}, {"type": "contains", "source": "text_data\\anthropic.txt:482", "target": "anthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:482", "target": "metadataparam"}, {"type": "contains", "source": "text_data\\anthropic.txt:482", "target": "object"}, {"type": "contains", "source": "text_data\\anthropic.txt:483", "target": "anthropicmodel"}, {"type": "contains", "source": "text_data\\anthropic.txt:483", "target": "anthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:483", "target": "class"}, {"type": "contains", "source": "text_data\\anthropic.txt:483", "target": "support"}, {"type": "contains", "source": "text_data\\anthropic.txt:483", "target": "streaming"}, {"type": "contains", "source": "text_data\\anthropic.txt:489", "target": "class"}, {"type": "contains", "source": "text_data\\anthropic.txt:489", "target": "anthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:489", "target": "support"}, {"type": "contains", "source": "text_data\\anthropic.txt:489", "target": "streaming"}, {"type": "contains", "source": "text_data\\anthropic.txt:489", "target": "responses"}, {"type": "contains", "source": "text_data\\anthropic.txt:490", "target": "anthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:490", "target": "modelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:490", "target": "provider"}, {"type": "contains", "source": "text_data\\anthropic.txt:490", "target": "model"}, {"type": "contains", "source": "text_data\\anthropic.txt:490", "target": "providerasyncanthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:491", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\anthropic.txt:491", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\anthropic.txt:491", "target": "return"}, {"type": "contains", "source": "text_data\\anthropic.txt:491", "target": "messages"}, {"type": "contains", "source": "text_data\\anthropic.txt:491", "target": "isinstanceprovider"}, {"type": "contains", "source": "text_data\\anthropic.txt:492", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\anthropic.txt:492", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\anthropic.txt:492", "target": "async"}, {"type": "contains", "source": "text_data\\anthropic.txt:492", "target": "messages"}, {"type": "contains", "source": "text_data\\anthropic.txt:492", "target": "response"}, {"type": "contains", "source": "text_data\\anthropic.txt:493", "target": "model"}, {"type": "contains", "source": "text_data\\anthropic.txt:493", "target": "return"}, {"type": "contains", "source": "text_data\\anthropic.txt:493", "target": "overload"}, {"type": "contains", "source": "text_data\\anthropic.txt:493", "target": "async"}, {"type": "contains", "source": "text_data\\anthropic.txt:493", "target": "messagescreate"}, {"type": "contains", "source": "text_data\\anthropic.txt:494", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\anthropic.txt:494", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\anthropic.txt:494", "target": "anthropicmodelsettings"}, {"type": "contains", "source": "text_data\\anthropic.txt:494", "target": "anthropicmessage"}, {"type": "contains", "source": "text_data\\anthropic.txt:494", "target": "tools"}, {"type": "contains", "source": "text_data\\anthropic.txt:495", "target": "toolchoice"}, {"type": "contains", "source": "text_data\\anthropic.txt:495", "target": "allowparalleltoolcalls"}, {"type": "contains", "source": "text_data\\anthropic.txt:495", "target": "await"}, {"type": "contains", "source": "text_data\\anthropic.txt:495", "target": "modelrequestparametersallowtextresult"}, {"type": "contains", "source": "text_data\\anthropic.txt:495", "target": "modelsettingsgetparalleltoolcalls"}, {"type": "contains", "source": "text_data\\anthropic.txt:496", "target": "notgiven"}, {"type": "contains", "source": "text_data\\anthropic.txt:496", "target": "raise"}, {"type": "contains", "source": "text_data\\anthropic.txt:496", "target": "modelselfmodelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:496", "target": "toolstools"}, {"type": "contains", "source": "text_data\\anthropic.txt:496", "target": "toolchoicetoolchoice"}, {"type": "contains", "source": "text_data\\anthropic.txt:497", "target": "response"}, {"type": "contains", "source": "text_data\\anthropic.txt:497", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\anthropic.txt:497", "target": "raise"}, {"type": "contains", "source": "text_data\\anthropic.txt:497", "target": "processresponseself"}, {"type": "contains", "source": "text_data\\anthropic.txt:497", "target": "anthropicmessage"}, {"type": "contains", "source": "text_data\\anthropic.txt:498", "target": "return"}, {"type": "contains", "source": "text_data\\anthropic.txt:498", "target": "response"}, {"type": "contains", "source": "text_data\\anthropic.txt:498", "target": "timestamp"}, {"type": "contains", "source": "text_data\\anthropic.txt:498", "target": "modelresponseitems"}, {"type": "contains", "source": "text_data\\anthropic.txt:498", "target": "modelnameresponsemodel"}, {"type": "contains", "source": "text_data\\anthropic.txt:499", "target": "tools"}, {"type": "contains", "source": "text_data\\anthropic.txt:499", "target": "return"}, {"type": "contains", "source": "text_data\\anthropic.txt:499", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\anthropic.txt:499", "target": "selfmaptooldefinitionr"}, {"type": "contains", "source": "text_data\\anthropic.txt:499", "target": "modelrequestparametersresulttools"}, {"type": "contains", "source": "text_data\\anthropic.txt:500", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\anthropic.txt:500", "target": "isinstancerequestpart"}, {"type": "contains", "source": "text_data\\anthropic.txt:500", "target": "anthropicmessages"}, {"type": "contains", "source": "text_data\\anthropic.txt:500", "target": "listmessageparam"}, {"type": "contains", "source": "text_data\\anthropic.txt:500", "target": "messages"}, {"type": "contains", "source": "text_data\\anthropic.txt:501", "target": "isinstancerequestpart"}, {"type": "contains", "source": "text_data\\anthropic.txt:501", "target": "toolresultblockparam"}, {"type": "contains", "source": "text_data\\anthropic.txt:501", "target": "usercontentparamsappendcontent"}, {"type": "contains", "source": "text_data\\anthropic.txt:501", "target": "toolreturnpart"}, {"type": "contains", "source": "text_data\\anthropic.txt:501", "target": "tooluseidguardtoolcallidtrequestpart"}, {"type": "contains", "source": "text_data\\anthropic.txt:502", "target": "retryparam"}, {"type": "contains", "source": "text_data\\anthropic.txt:502", "target": "requestparttoolname"}, {"type": "contains", "source": "text_data\\anthropic.txt:502", "target": "textblockparamtypetext"}, {"type": "contains", "source": "text_data\\anthropic.txt:502", "target": "textrequestpartmodelresponse"}, {"type": "contains", "source": "text_data\\anthropic.txt:502", "target": "toolresultblockparam"}, {"type": "contains", "source": "text_data\\anthropic.txt:503", "target": "tooluseblockparam"}, {"type": "contains", "source": "text_data\\anthropic.txt:503", "target": "isinstancem"}, {"type": "contains", "source": "text_data\\anthropic.txt:503", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\anthropic.txt:503", "target": "assistantcontentparams"}, {"type": "contains", "source": "text_data\\anthropic.txt:503", "target": "listtextblockparam"}, {"type": "contains", "source": "text_data\\anthropic.txt:504", "target": "assistantcontentparamsappendtooluseblockparam"}, {"type": "contains", "source": "text_data\\anthropic.txt:504", "target": "anthropicmessagesappendmessageparamroleassistant"}, {"type": "contains", "source": "text_data\\anthropic.txt:504", "target": "contentassistantcontentparams"}, {"type": "contains", "source": "text_data\\anthropic.txt:504", "target": "assertneverm"}, {"type": "contains", "source": "text_data\\anthropic.txt:504", "target": "return"}, {"type": "contains", "source": "text_data\\anthropic.txt:505", "target": "yield"}, {"type": "contains", "source": "text_data\\anthropic.txt:505", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\anthropic.txt:505", "target": "itemmediatype"}, {"type": "contains", "source": "text_data\\anthropic.txt:505", "target": "textblockparamtextitem"}, {"type": "contains", "source": "text_data\\anthropic.txt:505", "target": "typetext"}, {"type": "contains", "source": "text_data\\anthropic.txt:506", "target": "typedocument"}, {"type": "contains", "source": "text_data\\anthropic.txt:506", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\anthropic.txt:506", "target": "yield"}, {"type": "contains", "source": "text_data\\anthropic.txt:506", "target": "itemurl"}, {"type": "contains", "source": "text_data\\anthropic.txt:506", "target": "mediatypeapplicationpdf"}, {"type": "contains", "source": "text_data\\anthropic.txt:507", "target": "itemmediatype"}, {"type": "contains", "source": "text_data\\anthropic.txt:507", "target": "raise"}, {"type": "contains", "source": "text_data\\anthropic.txt:507", "target": "runtimeerrorfunsupported"}, {"type": "contains", "source": "text_data\\anthropic.txt:507", "target": "textplain"}, {"type": "contains", "source": "text_data\\anthropic.txt:507", "target": "response"}, {"type": "contains", "source": "text_data\\anthropic.txt:508", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\anthropic.txt:508", "target": "maptooldefinitionf"}, {"type": "contains", "source": "text_data\\anthropic.txt:508", "target": "tooldefinition"}, {"type": "contains", "source": "text_data\\anthropic.txt:508", "target": "toolparam"}, {"type": "contains", "source": "text_data\\anthropic.txt:508", "target": "return"}, {"type": "contains", "source": "text_data\\anthropic.txt:509", "target": "anthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:509", "target": "modelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:509", "target": "anthropicmodelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:509", "target": "provider"}, {"type": "contains", "source": "text_data\\anthropic.txt:509", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\anthropic.txt:510", "target": "anthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:510", "target": "model"}, {"type": "contains", "source": "text_data\\anthropic.txt:510", "target": "parameters"}, {"type": "contains", "source": "text_data\\anthropic.txt:510", "target": "provider"}, {"type": "contains", "source": "text_data\\anthropic.txt:510", "target": "initialize"}, {"type": "contains", "source": "text_data\\anthropic.txt:512", "target": "anthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:512", "target": "provider"}, {"type": "contains", "source": "text_data\\anthropic.txt:512", "target": "modelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:512", "target": "model"}, {"type": "contains", "source": "text_data\\anthropic.txt:512", "target": "providerasyncanthropic"}, {"type": "contains", "source": "text_data\\anthropic.txt:513", "target": "provider"}, {"type": "contains", "source": "text_data\\anthropic.txt:513", "target": "inferproviderprovider"}, {"type": "contains", "source": "text_data\\anthropic.txt:513", "target": "selfclient"}, {"type": "contains", "source": "text_data\\anthropic.txt:513", "target": "providerclient"}, {"type": "contains", "source": "text_data\\anthropic.txt:513", "target": "modelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:514", "target": "system"}, {"type": "contains", "source": "text_data\\anthropic.txt:514", "target": "model"}, {"type": "contains", "source": "text_data\\anthropic.txt:514", "target": "modelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:514", "target": "anthropicmodelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:514", "target": "property"}, {"type": "contains", "source": "text_data\\anthropic.txt:515", "target": "source"}, {"type": "contains", "source": "text_data\\anthropic.txt:515", "target": "pydanticaislimpydanticaimodelsanthropicpy"}, {"type": "contains", "source": "text_data\\anthropic.txt:516", "target": "async"}, {"type": "contains", "source": "text_data\\anthropic.txt:516", "target": "currentblock"}, {"type": "contains", "source": "text_data\\anthropic.txt:516", "target": "dataclass"}, {"type": "contains", "source": "text_data\\anthropic.txt:516", "target": "class"}, {"type": "contains", "source": "text_data\\anthropic.txt:516", "target": "anthropicstreamedresponsestreamedresponse"}, {"type": "contains", "source": "text_data\\anthropic.txt:517", "target": "maybeevent"}, {"type": "contains", "source": "text_data\\anthropic.txt:517", "target": "yield"}, {"type": "contains", "source": "text_data\\anthropic.txt:517", "target": "selfpartsmanagerhandletextdeltavendorpartidcontent"}, {"type": "contains", "source": "text_data\\anthropic.txt:517", "target": "contentcurrentblocktext"}, {"type": "contains", "source": "text_data\\anthropic.txt:517", "target": "isinstancecurrentblock"}, {"type": "contains", "source": "text_data\\anthropic.txt:518", "target": "valid"}, {"type": "contains", "source": "text_data\\anthropic.txt:518", "target": "isinstanceeventdelta"}, {"type": "contains", "source": "text_data\\anthropic.txt:518", "target": "textdelta"}, {"type": "contains", "source": "text_data\\anthropic.txt:518", "target": "yield"}, {"type": "contains", "source": "text_data\\anthropic.txt:518", "target": "selfpartsmanagerhandletextdeltavendorpartidcontent"}, {"type": "contains", "source": "text_data\\anthropic.txt:519", "target": "maybeevent"}, {"type": "contains", "source": "text_data\\anthropic.txt:519", "target": "except"}, {"type": "contains", "source": "text_data\\anthropic.txt:519", "target": "jsondecodeerror"}, {"type": "contains", "source": "text_data\\anthropic.txt:519", "target": "currentjson"}, {"type": "contains", "source": "text_data\\anthropic.txt:519", "target": "eventdeltapartialjson"}, {"type": "contains", "source": "text_data\\anthropic.txt:520", "target": "property"}, {"type": "contains", "source": "text_data\\anthropic.txt:520", "target": "response"}, {"type": "contains", "source": "text_data\\anthropic.txt:520", "target": "return"}, {"type": "contains", "source": "text_data\\anthropic.txt:520", "target": "currentblock"}, {"type": "contains", "source": "text_data\\anthropic.txt:520", "target": "modelnameself"}, {"type": "contains", "source": "text_data\\anthropic.txt:521", "target": "timestamp"}, {"type": "contains", "source": "text_data\\anthropic.txt:521", "target": "response"}, {"type": "contains", "source": "text_data\\anthropic.txt:521", "target": "modelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:521", "target": "anthropicmodelname"}, {"type": "contains", "source": "text_data\\anthropic.txt:521", "target": "model"}, {"type": "contains", "source": "text_data\\bank-support.txt:521", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\bank-support.txt:521", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\bank-support.txt:521", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\bank-support.txt:521", "target": "v0050"}, {"type": "contains", "source": "text_data\\bank-support.txt:521", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\bank-support.txt:522", "target": "tools"}, {"type": "contains", "source": "text_data\\bank-support.txt:522", "target": "contributing"}, {"type": "contains", "source": "text_data\\bank-support.txt:522", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\bank-support.txt:522", "target": "documentation"}, {"type": "contains", "source": "text_data\\bank-support.txt:522", "target": "agents"}, {"type": "contains", "source": "text_data\\bank-support.txt:523", "target": "input"}, {"type": "contains", "source": "text_data\\bank-support.txt:523", "target": "image"}, {"type": "contains", "source": "text_data\\bank-support.txt:523", "target": "audio"}, {"type": "contains", "source": "text_data\\bank-support.txt:523", "target": "document"}, {"type": "contains", "source": "text_data\\bank-support.txt:524", "target": "examples"}, {"type": "contains", "source": "text_data\\bank-support.txt:524", "target": "client"}, {"type": "contains", "source": "text_data\\bank-support.txt:524", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\bank-support.txt:524", "target": "server"}, {"type": "contains", "source": "text_data\\bank-support.txt:524", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\bank-support.txt:525", "target": "support"}, {"type": "contains", "source": "text_data\\bank-support.txt:525", "target": "example"}, {"type": "contains", "source": "text_data\\bank-support.txt:525", "target": "stream"}, {"type": "contains", "source": "text_data\\bank-support.txt:525", "target": "reference"}, {"type": "contains", "source": "text_data\\bank-support.txt:525", "target": "pydantic"}, {"type": "contains", "source": "text_data\\bank-support.txt:526", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\bank-support.txt:526", "target": "apimessages"}, {"type": "contains", "source": "text_data\\bank-support.txt:526", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\bank-support.txt:526", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\bank-support.txt:526", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\bank-support.txt:527", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\bank-support.txt:527", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\bank-support.txt:527", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\bank-support.txt:527", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\bank-support.txt:527", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\bank-support.txt:528", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\bank-support.txt:528", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\bank-support.txt:528", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\bank-support.txt:528", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\bank-support.txt:528", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\bank-support.txt:529", "target": "example"}, {"type": "contains", "source": "text_data\\bank-support.txt:529", "target": "running"}, {"type": "contains", "source": "text_data\\bank-support.txt:529", "target": "support"}, {"type": "contains", "source": "text_data\\bank-support.txt:529", "target": "pydanticaiexamplesbanksupport"}, {"type": "contains", "source": "text_data\\bank-support.txt:529", "target": "table"}, {"type": "contains", "source": "text_data\\bank-support.txt:530", "target": "import"}, {"type": "contains", "source": "text_data\\bank-support.txt:530", "target": "database"}, {"type": "contains", "source": "text_data\\bank-support.txt:530", "target": "classmethod"}, {"type": "contains", "source": "text_data\\bank-support.txt:530", "target": "async"}, {"type": "contains", "source": "text_data\\bank-support.txt:530", "target": "return"}, {"type": "contains", "source": "text_data\\bank-support.txt:531", "target": "class"}, {"type": "contains", "source": "text_data\\bank-support.txt:531", "target": "customer"}, {"type": "contains", "source": "text_data\\bank-support.txt:531", "target": "their"}, {"type": "contains", "source": "text_data\\bank-support.txt:531", "target": "level"}, {"type": "contains", "source": "text_data\\bank-support.txt:531", "target": "query"}, {"type": "contains", "source": "text_data\\bank-support.txt:532", "target": "customers"}, {"type": "contains", "source": "text_data\\bank-support.txt:532", "target": "async"}, {"type": "contains", "source": "text_data\\bank-support.txt:532", "target": "runcontextsupportdependencies"}, {"type": "contains", "source": "text_data\\bank-support.txt:532", "target": "await"}, {"type": "contains", "source": "text_data\\bank-support.txt:532", "target": "return"}, {"type": "contains", "source": "text_data\\bank-support.txt:533", "target": "result"}, {"type": "contains", "source": "text_data\\bank-support.txt:533", "target": "balance"}, {"type": "contains", "source": "text_data\\bank-support.txt:533", "target": "depsdeps"}, {"type": "contains", "source": "text_data\\bank-support.txt:533", "target": "printresultdata"}, {"type": "contains", "source": "text_data\\bank-support.txt:533", "target": "transactions"}, {"type": "contains", "source": "text_data\\bank-support.txt:534", "target": "pydantic"}, {"type": "contains", "source": "text_data\\bank-support.txt:534", "target": "services"}, {"type": "contains", "source": "text_data\\bank-support.txt:534", "target": "present"}, {"type": "contains", "source": "text_data\\base.txt:534", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\base.txt:534", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\base.txt:534", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\base.txt:534", "target": "v0050"}, {"type": "contains", "source": "text_data\\base.txt:534", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\base.txt:535", "target": "tools"}, {"type": "contains", "source": "text_data\\base.txt:535", "target": "contributing"}, {"type": "contains", "source": "text_data\\base.txt:535", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\base.txt:535", "target": "documentation"}, {"type": "contains", "source": "text_data\\base.txt:535", "target": "agents"}, {"type": "contains", "source": "text_data\\base.txt:536", "target": "evals"}, {"type": "contains", "source": "text_data\\base.txt:536", "target": "input"}, {"type": "contains", "source": "text_data\\base.txt:536", "target": "graphs"}, {"type": "contains", "source": "text_data\\base.txt:536", "target": "graph"}, {"type": "contains", "source": "text_data\\base.txt:536", "target": "image"}, {"type": "contains", "source": "text_data\\base.txt:537", "target": "examples"}, {"type": "contains", "source": "text_data\\base.txt:537", "target": "client"}, {"type": "contains", "source": "text_data\\base.txt:537", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\base.txt:537", "target": "server"}, {"type": "contains", "source": "text_data\\base.txt:537", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\base.txt:538", "target": "agent"}, {"type": "contains", "source": "text_data\\base.txt:538", "target": "stream"}, {"type": "contains", "source": "text_data\\base.txt:538", "target": "reference"}, {"type": "contains", "source": "text_data\\base.txt:538", "target": "pydantic"}, {"type": "contains", "source": "text_data\\base.txt:538", "target": "model"}, {"type": "contains", "source": "text_data\\base.txt:539", "target": "usage"}, {"type": "contains", "source": "text_data\\base.txt:539", "target": "pydanticaimodels"}, {"type": "contains", "source": "text_data\\base.txt:539", "target": "modelname"}, {"type": "contains", "source": "text_data\\base.txt:539", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\base.txt:539", "target": "result"}, {"type": "contains", "source": "text_data\\base.txt:540", "target": "allowmodelrequests"}, {"type": "contains", "source": "text_data\\base.txt:540", "target": "checkallowmodelrequests"}, {"type": "contains", "source": "text_data\\base.txt:540", "target": "overrideallowmodelrequests"}, {"type": "contains", "source": "text_data\\base.txt:540", "target": "pydanticaimodelsopenai"}, {"type": "contains", "source": "text_data\\base.txt:540", "target": "openai"}, {"type": "contains", "source": "text_data\\base.txt:541", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\base.txt:541", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\base.txt:541", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\base.txt:541", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\base.txt:541", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\base.txt:542", "target": "knownmodelname"}, {"type": "contains", "source": "text_data\\base.txt:542", "target": "modelname"}, {"type": "contains", "source": "text_data\\base.txt:542", "target": "table"}, {"type": "contains", "source": "text_data\\base.txt:542", "target": "contents"}, {"type": "contains", "source": "text_data\\base.txt:542", "target": "models"}, {"type": "contains", "source": "text_data\\base.txt:543", "target": "knownmodelname"}, {"type": "contains", "source": "text_data\\base.txt:543", "target": "typealiastypehttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionstypealiastype"}, {"type": "contains", "source": "text_data\\base.txt:543", "target": "typingextensionstypealiastype"}, {"type": "contains", "source": "text_data\\base.txt:543", "target": "literalhttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionsliteral"}, {"type": "contains", "source": "text_data\\base.txt:543", "target": "typingextensionsliteral"}, {"type": "contains", "source": "text_data\\base.txt:544", "target": "bedrockamazontitantextexpressv1"}, {"type": "contains", "source": "text_data\\base.txt:544", "target": "bedrockusamazonnovaprov10"}, {"type": "contains", "source": "text_data\\base.txt:544", "target": "bedrockusamazonnovalitev10"}, {"type": "contains", "source": "text_data\\base.txt:544", "target": "bedrockusamazonnovamicrov10"}, {"type": "contains", "source": "text_data\\base.txt:544", "target": "bedrockanthropicclaude35sonnet20241022v20"}, {"type": "contains", "source": "text_data\\base.txt:545", "target": "bedrockanthropicclaude3haiku20240307v10"}, {"type": "contains", "source": "text_data\\base.txt:545", "target": "bedrockusanthropicclaude3haiku20240307v10"}, {"type": "contains", "source": "text_data\\base.txt:545", "target": "bedrockanthropicclaude3opus20240229v10"}, {"type": "contains", "source": "text_data\\base.txt:545", "target": "bedrockusanthropicclaude3opus20240229v10"}, {"type": "contains", "source": "text_data\\base.txt:545", "target": "bedrockanthropicclaude35sonnet20240620v10"}, {"type": "contains", "source": "text_data\\base.txt:546", "target": "bedrockmetallama38binstructv10"}, {"type": "contains", "source": "text_data\\base.txt:546", "target": "bedrockmetallama370binstructv10"}, {"type": "contains", "source": "text_data\\base.txt:546", "target": "bedrockmetallama318binstructv10"}, {"type": "contains", "source": "text_data\\base.txt:546", "target": "bedrockusmetallama318binstructv10"}, {"type": "contains", "source": "text_data\\base.txt:546", "target": "bedrockmetallama3170binstructv10"}, {"type": "contains", "source": "text_data\\base.txt:547", "target": "bedrockmistralmixtral8x7binstructv01"}, {"type": "contains", "source": "text_data\\base.txt:547", "target": "bedrockmistralmistrallarge2402v10"}, {"type": "contains", "source": "text_data\\base.txt:547", "target": "bedrockmistralmistrallarge2407v10"}, {"type": "contains", "source": "text_data\\base.txt:547", "target": "claude35sonnetlatest"}, {"type": "contains", "source": "text_data\\base.txt:547", "target": "claude3opuslatest"}, {"type": "contains", "source": "text_data\\base.txt:548", "target": "coherecommandr7b122024"}, {"type": "contains", "source": "text_data\\base.txt:548", "target": "deepseekdeepseekchat"}, {"type": "contains", "source": "text_data\\base.txt:548", "target": "deepseekdeepseekreasoner"}, {"type": "contains", "source": "text_data\\base.txt:548", "target": "googleglagemini10pro"}, {"type": "contains", "source": "text_data\\base.txt:548", "target": "googleglagemini15flash"}, {"type": "contains", "source": "text_data\\base.txt:549", "target": "googlevertexgemini15flash8b"}, {"type": "contains", "source": "text_data\\base.txt:549", "target": "googlevertexgemini15pro"}, {"type": "contains", "source": "text_data\\base.txt:549", "target": "googlevertexgemini20flashexp"}, {"type": "contains", "source": "text_data\\base.txt:549", "target": "googlevertexgemini20flashthinkingexp0121"}, {"type": "contains", "source": "text_data\\base.txt:549", "target": "googlevertexgeminiexp1206"}, {"type": "contains", "source": "text_data\\base.txt:550", "target": "gpt40125preview"}, {"type": "contains", "source": "text_data\\base.txt:550", "target": "gpt40314"}, {"type": "contains", "source": "text_data\\base.txt:550", "target": "gpt40613"}, {"type": "contains", "source": "text_data\\base.txt:550", "target": "gpt41106preview"}, {"type": "contains", "source": "text_data\\base.txt:550", "target": "gpt432k"}, {"type": "contains", "source": "text_data\\base.txt:551", "target": "gpt4ominisearchpreview"}, {"type": "contains", "source": "text_data\\base.txt:551", "target": "gpt4ominisearchpreview20250311"}, {"type": "contains", "source": "text_data\\base.txt:551", "target": "gpt4osearchpreview"}, {"type": "contains", "source": "text_data\\base.txt:551", "target": "gpt4osearchpreview20250311"}, {"type": "contains", "source": "text_data\\base.txt:551", "target": "groqdistilwhisperlargev3en"}, {"type": "contains", "source": "text_data\\base.txt:552", "target": "groqdeepseekr1distillqwen32b"}, {"type": "contains", "source": "text_data\\base.txt:552", "target": "groqdeepseekr1distillllama70b"}, {"type": "contains", "source": "text_data\\base.txt:552", "target": "groqllama3370bspecdec"}, {"type": "contains", "source": "text_data\\base.txt:552", "target": "groqllama321bpreview"}, {"type": "contains", "source": "text_data\\base.txt:552", "target": "groqllama323bpreview"}, {"type": "contains", "source": "text_data\\base.txt:553", "target": "openaichatgpt4olatest"}, {"type": "contains", "source": "text_data\\base.txt:553", "target": "openaigpt35turbo"}, {"type": "contains", "source": "text_data\\base.txt:553", "target": "openaigpt35turbo0125"}, {"type": "contains", "source": "text_data\\base.txt:553", "target": "openaigpt35turbo0301"}, {"type": "contains", "source": "text_data\\base.txt:553", "target": "openaigpt35turbo0613"}, {"type": "contains", "source": "text_data\\base.txt:554", "target": "openaigpt4visionpreview"}, {"type": "contains", "source": "text_data\\base.txt:554", "target": "openaigpt4o"}, {"type": "contains", "source": "text_data\\base.txt:554", "target": "openaigpt4o20240513"}, {"type": "contains", "source": "text_data\\base.txt:554", "target": "openaigpt4o20240806"}, {"type": "contains", "source": "text_data\\base.txt:554", "target": "openaigpt4o20241120"}, {"type": "contains", "source": "text_data\\base.txt:555", "target": "openaio1"}, {"type": "contains", "source": "text_data\\base.txt:555", "target": "openaio120241217"}, {"type": "contains", "source": "text_data\\base.txt:555", "target": "openaio1mini"}, {"type": "contains", "source": "text_data\\base.txt:555", "target": "openaio1mini20240912"}, {"type": "contains", "source": "text_data\\base.txt:555", "target": "openaio1preview"}, {"type": "contains", "source": "text_data\\base.txt:556", "target": "model"}, {"type": "contains", "source": "text_data\\base.txt:556", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\base.txt:556", "target": "dataclass"}, {"type": "contains", "source": "text_data\\base.txt:556", "target": "configuration"}, {"type": "contains", "source": "text_data\\base.txt:556", "target": "agents"}, {"type": "contains", "source": "text_data\\base.txt:557", "target": "bases"}, {"type": "contains", "source": "text_data\\base.txt:557", "target": "abchttpsdocspythonorg3libraryabchtmlabcabc"}, {"type": "contains", "source": "text_data\\base.txt:557", "target": "abcabc"}, {"type": "contains", "source": "text_data\\base.txt:557", "target": "abstract"}, {"type": "contains", "source": "text_data\\base.txt:557", "target": "class"}, {"type": "contains", "source": "text_data\\base.txt:558", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\base.txt:558", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\base.txt:558", "target": "model"}, {"type": "contains", "source": "text_data\\base.txt:558", "target": "request"}, {"type": "contains", "source": "text_data\\base.txt:558", "target": "class"}, {"type": "contains", "source": "text_data\\base.txt:559", "target": "model"}, {"type": "contains", "source": "text_data\\base.txt:559", "target": "required"}, {"type": "contains", "source": "text_data\\base.txt:559", "target": "raise"}, {"type": "contains", "source": "text_data\\base.txt:559", "target": "yield"}, {"type": "contains", "source": "text_data\\base.txt:559", "target": "property"}, {"type": "contains", "source": "text_data\\base.txt:560", "target": "provider"}, {"type": "contains", "source": "text_data\\base.txt:560", "target": "system"}, {"type": "contains", "source": "text_data\\base.txt:560", "target": "model"}, {"type": "contains", "source": "text_data\\base.txt:560", "target": "openai"}, {"type": "contains", "source": "text_data\\base.txt:560", "target": "populate"}, {"type": "contains", "source": "text_data\\base.txt:561", "target": "request"}, {"type": "contains", "source": "text_data\\base.txt:561", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\base.txt:561", "target": "messages"}, {"type": "contains", "source": "text_data\\base.txt:561", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\base.txt:561", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\base.txt:562", "target": "async"}, {"type": "contains", "source": "text_data\\base.txt:562", "target": "request"}, {"type": "contains", "source": "text_data\\base.txt:562", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\base.txt:562", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\base.txt:562", "target": "source"}, {"type": "contains", "source": "text_data\\base.txt:563", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\base.txt:563", "target": "requeststream"}, {"type": "contains", "source": "text_data\\base.txt:563", "target": "messages"}, {"type": "contains", "source": "text_data\\base.txt:563", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\base.txt:563", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\base.txt:564", "target": "source"}, {"type": "contains", "source": "text_data\\base.txt:564", "target": "pydanticaislimpydanticaimodelsinitpy"}, {"type": "contains", "source": "text_data\\base.txt:565", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\base.txt:565", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\base.txt:565", "target": "required"}, {"type": "contains", "source": "text_data\\base.txt:565", "target": "yield"}, {"type": "contains", "source": "text_data\\base.txt:565", "target": "asynccontextmanager"}, {"type": "contains", "source": "text_data\\base.txt:566", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\base.txt:566", "target": "system"}, {"type": "contains", "source": "text_data\\base.txt:566", "target": "model"}, {"type": "contains", "source": "text_data\\base.txt:566", "target": "property"}, {"type": "contains", "source": "text_data\\base.txt:566", "target": "provider"}, {"type": "contains", "source": "text_data\\base.txt:567", "target": "bases"}, {"type": "contains", "source": "text_data\\base.txt:567", "target": "abchttpsdocspythonorg3libraryabchtmlabcabc"}, {"type": "contains", "source": "text_data\\base.txt:567", "target": "abcabc"}, {"type": "contains", "source": "text_data\\base.txt:567", "target": "streamed"}, {"type": "contains", "source": "text_data\\base.txt:567", "target": "response"}, {"type": "contains", "source": "text_data\\base.txt:568", "target": "initfalse"}, {"type": "contains", "source": "text_data\\base.txt:568", "target": "selfeventiterator"}, {"type": "contains", "source": "text_data\\base.txt:568", "target": "response"}, {"type": "contains", "source": "text_data\\base.txt:568", "target": "asynciteratormodelresponsestreamevent"}, {"type": "contains", "source": "text_data\\base.txt:568", "target": "usage"}, {"type": "contains", "source": "text_data\\base.txt:569", "target": "should"}, {"type": "contains", "source": "text_data\\base.txt:569", "target": "return"}, {"type": "contains", "source": "text_data\\base.txt:569", "target": "async"}, {"type": "contains", "source": "text_data\\base.txt:569", "target": "events"}, {"type": "contains", "source": "text_data\\base.txt:569", "target": "selfeventiterator"}, {"type": "contains", "source": "text_data\\base.txt:570", "target": "usage"}, {"type": "contains", "source": "text_data\\base.txt:570", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\base.txt:570", "target": "stream"}, {"type": "contains", "source": "text_data\\base.txt:570", "target": "return"}, {"type": "contains", "source": "text_data\\base.txt:570", "target": "response"}, {"type": "contains", "source": "text_data\\base.txt:571", "target": "property"}, {"type": "contains", "source": "text_data\\base.txt:571", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\base.txt:571", "target": "timestampself"}, {"type": "contains", "source": "text_data\\base.txt:571", "target": "datetime"}, {"type": "contains", "source": "text_data\\base.txt:571", "target": "timestamp"}, {"type": "contains", "source": "text_data\\base.txt:572", "target": "aiter"}, {"type": "contains", "source": "text_data\\base.txt:572", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\base.txt:572", "target": "collectionsabcasynciteratormodelresponsestreameventmessagespydanticaimessagesmodelresponsestreamevent"}, {"type": "contains", "source": "text_data\\base.txt:572", "target": "pydanticaimessagesmodelresponsestreamevent"}, {"type": "contains", "source": "text_data\\base.txt:572", "target": "stream"}, {"type": "contains", "source": "text_data\\base.txt:573", "target": "selfeventiterator"}, {"type": "contains", "source": "text_data\\base.txt:573", "target": "stream"}, {"type": "contains", "source": "text_data\\base.txt:573", "target": "modelresponsemessagespydanticaimessagesmodelresponse"}, {"type": "contains", "source": "text_data\\base.txt:573", "target": "aiterself"}, {"type": "contains", "source": "text_data\\base.txt:573", "target": "asynciteratormodelresponsestreamevent"}, {"type": "contains", "source": "text_data\\base.txt:574", "target": "usage"}, {"type": "contains", "source": "text_data\\base.txt:574", "target": "source"}, {"type": "contains", "source": "text_data\\base.txt:574", "target": "pydanticaislimpydanticaimodelsinitpy"}, {"type": "contains", "source": "text_data\\base.txt:574", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\base.txt:574", "target": "stream"}, {"type": "contains", "source": "text_data\\base.txt:575", "target": "usage"}, {"type": "contains", "source": "text_data\\base.txt:575", "target": "response"}, {"type": "contains", "source": "text_data\\base.txt:575", "target": "timestamp"}, {"type": "contains", "source": "text_data\\base.txt:575", "target": "modelname"}, {"type": "contains", "source": "text_data\\base.txt:575", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\base.txt:576", "target": "models"}, {"type": "contains", "source": "text_data\\base.txt:576", "target": "requests"}, {"type": "contains", "source": "text_data\\base.txt:576", "target": "setting"}, {"type": "contains", "source": "text_data\\base.txt:576", "target": "model"}, {"type": "contains", "source": "text_data\\base.txt:576", "target": "checkallowmodelrequests"}, {"type": "contains", "source": "text_data\\base.txt:577", "target": "raises"}, {"type": "contains", "source": "text_data\\base.txt:577", "target": "description"}, {"type": "contains", "source": "text_data\\base.txt:577", "target": "runtimeerrorhttpsdocspythonorg3libraryexceptionshtmlruntimeerror"}, {"type": "contains", "source": "text_data\\base.txt:577", "target": "model"}, {"type": "contains", "source": "text_data\\base.txt:577", "target": "requests"}, {"type": "contains", "source": "text_data\\base.txt:578", "target": "requests"}, {"type": "contains", "source": "text_data\\base.txt:578", "target": "allowed"}, {"type": "contains", "source": "text_data\\base.txt:578", "target": "model"}, {"type": "contains", "source": "text_data\\base.txt:578", "target": "allowmodelrequests"}, {"type": "contains", "source": "text_data\\base.txt:578", "target": "checkallowmodelrequests"}, {"type": "contains", "source": "text_data\\base.txt:579", "target": "allowmodelrequests"}, {"type": "contains", "source": "text_data\\base.txt:579", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\base.txt:579", "target": "context"}, {"type": "contains", "source": "text_data\\base.txt:579", "target": "overrideallowmodelrequests"}, {"type": "contains", "source": "text_data\\base.txt:579", "target": "iteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabciterator"}, {"type": "contains", "source": "text_data\\base.txt:580", "target": "allowmodelrequests"}, {"type": "contains", "source": "text_data\\base.txt:580", "target": "context"}, {"type": "contains", "source": "text_data\\base.txt:580", "target": "oldvalue"}, {"type": "contains", "source": "text_data\\base.txt:580", "target": "pyright"}, {"type": "contains", "source": "text_data\\base.txt:580", "target": "ignorereportconstantredefinition"}, {"type": "contains", "source": "text_data\\bedrock.txt:580", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\bedrock.txt:580", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\bedrock.txt:580", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\bedrock.txt:580", "target": "v0050"}, {"type": "contains", "source": "text_data\\bedrock.txt:580", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\bedrock.txt:581", "target": "tools"}, {"type": "contains", "source": "text_data\\bedrock.txt:581", "target": "contributing"}, {"type": "contains", "source": "text_data\\bedrock.txt:581", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\bedrock.txt:581", "target": "documentation"}, {"type": "contains", "source": "text_data\\bedrock.txt:581", "target": "agents"}, {"type": "contains", "source": "text_data\\bedrock.txt:582", "target": "evals"}, {"type": "contains", "source": "text_data\\bedrock.txt:582", "target": "input"}, {"type": "contains", "source": "text_data\\bedrock.txt:582", "target": "graphs"}, {"type": "contains", "source": "text_data\\bedrock.txt:582", "target": "graph"}, {"type": "contains", "source": "text_data\\bedrock.txt:582", "target": "image"}, {"type": "contains", "source": "text_data\\bedrock.txt:583", "target": "examples"}, {"type": "contains", "source": "text_data\\bedrock.txt:583", "target": "client"}, {"type": "contains", "source": "text_data\\bedrock.txt:583", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\bedrock.txt:583", "target": "server"}, {"type": "contains", "source": "text_data\\bedrock.txt:583", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\bedrock.txt:584", "target": "agent"}, {"type": "contains", "source": "text_data\\bedrock.txt:584", "target": "stream"}, {"type": "contains", "source": "text_data\\bedrock.txt:584", "target": "reference"}, {"type": "contains", "source": "text_data\\bedrock.txt:584", "target": "pydantic"}, {"type": "contains", "source": "text_data\\bedrock.txt:584", "target": "model"}, {"type": "contains", "source": "text_data\\bedrock.txt:585", "target": "pydanticaimodelsbedrock"}, {"type": "contains", "source": "text_data\\bedrock.txt:585", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\bedrock.txt:585", "target": "result"}, {"type": "contains", "source": "text_data\\bedrock.txt:585", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\bedrock.txt:585", "target": "messages"}, {"type": "contains", "source": "text_data\\bedrock.txt:586", "target": "modelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:586", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\bedrock.txt:586", "target": "system"}, {"type": "contains", "source": "text_data\\bedrock.txt:586", "target": "bedrockstreamedresponse"}, {"type": "contains", "source": "text_data\\bedrock.txt:586", "target": "pydanticaimodelscohere"}, {"type": "contains", "source": "text_data\\bedrock.txt:587", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\bedrock.txt:587", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\bedrock.txt:587", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\bedrock.txt:587", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\bedrock.txt:587", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\bedrock.txt:588", "target": "setup"}, {"type": "contains", "source": "text_data\\bedrock.txt:588", "target": "latestbedrockmodelnames"}, {"type": "contains", "source": "text_data\\bedrock.txt:588", "target": "modelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:588", "target": "model"}, {"type": "contains", "source": "text_data\\bedrock.txt:588", "target": "table"}, {"type": "contains", "source": "text_data\\bedrock.txt:589", "target": "latestbedrockmodelnames"}, {"type": "contains", "source": "text_data\\bedrock.txt:589", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\bedrock.txt:589", "target": "typingliteral"}, {"type": "contains", "source": "text_data\\bedrock.txt:589", "target": "amazontitantg1large"}, {"type": "contains", "source": "text_data\\bedrock.txt:589", "target": "amazontitantextlitev1"}, {"type": "contains", "source": "text_data\\bedrock.txt:590", "target": "usanthropicclaude3sonnet20240229v10"}, {"type": "contains", "source": "text_data\\bedrock.txt:590", "target": "anthropicclaude3haiku20240307v10"}, {"type": "contains", "source": "text_data\\bedrock.txt:590", "target": "usanthropicclaude3haiku20240307v10"}, {"type": "contains", "source": "text_data\\bedrock.txt:590", "target": "anthropicclaude3opus20240229v10"}, {"type": "contains", "source": "text_data\\bedrock.txt:590", "target": "usanthropicclaude3opus20240229v10"}, {"type": "contains", "source": "text_data\\bedrock.txt:591", "target": "usmetallama318binstructv10"}, {"type": "contains", "source": "text_data\\bedrock.txt:591", "target": "metallama3170binstructv10"}, {"type": "contains", "source": "text_data\\bedrock.txt:591", "target": "usmetallama3170binstructv10"}, {"type": "contains", "source": "text_data\\bedrock.txt:591", "target": "metallama31405binstructv10"}, {"type": "contains", "source": "text_data\\bedrock.txt:591", "target": "usmetallama3211binstructv10"}, {"type": "contains", "source": "text_data\\bedrock.txt:592", "target": "bedrock"}, {"type": "contains", "source": "text_data\\bedrock.txt:592", "target": "models"}, {"type": "contains", "source": "text_data\\bedrock.txt:592", "target": "latest"}, {"type": "contains", "source": "text_data\\bedrock.txt:592", "target": "bedrockmodelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:592", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\bedrock.txt:593", "target": "bedrock"}, {"type": "contains", "source": "text_data\\bedrock.txt:593", "target": "models"}, {"type": "contains", "source": "text_data\\bedrock.txt:593", "target": "settings"}, {"type": "contains", "source": "text_data\\bedrock.txt:593", "target": "fields"}, {"type": "contains", "source": "text_data\\bedrock.txt:593", "target": "prefixed"}, {"type": "contains", "source": "text_data\\bedrock.txt:599", "target": "model"}, {"type": "contains", "source": "text_data\\bedrock.txt:599", "target": "bedrock"}, {"type": "contains", "source": "text_data\\bedrock.txt:599", "target": "modelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:599", "target": "bedrockmodelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:599", "target": "system"}, {"type": "contains", "source": "text_data\\bedrock.txt:600", "target": "model"}, {"type": "contains", "source": "text_data\\bedrock.txt:600", "target": "provider"}, {"type": "contains", "source": "text_data\\bedrock.txt:600", "target": "bedrock"}, {"type": "contains", "source": "text_data\\bedrock.txt:600", "target": "modelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:600", "target": "initialize"}, {"type": "contains", "source": "text_data\\bedrock.txt:601", "target": "tools"}, {"type": "contains", "source": "text_data\\bedrock.txt:601", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\bedrock.txt:601", "target": "selfmaptooldefinitionr"}, {"type": "contains", "source": "text_data\\bedrock.txt:601", "target": "modelrequestparametersresulttools"}, {"type": "contains", "source": "text_data\\bedrock.txt:601", "target": "return"}, {"type": "contains", "source": "text_data\\bedrock.txt:602", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\bedrock.txt:602", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\bedrock.txt:602", "target": "return"}, {"type": "contains", "source": "text_data\\bedrock.txt:602", "target": "async"}, {"type": "contains", "source": "text_data\\bedrock.txt:602", "target": "await"}, {"type": "contains", "source": "text_data\\bedrock.txt:603", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\bedrock.txt:603", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\bedrock.txt:603", "target": "async"}, {"type": "contains", "source": "text_data\\bedrock.txt:603", "target": "response"}, {"type": "contains", "source": "text_data\\bedrock.txt:603", "target": "requeststream"}, {"type": "contains", "source": "text_data\\bedrock.txt:604", "target": "tooluse"}, {"type": "contains", "source": "text_data\\bedrock.txt:604", "target": "itemgettext"}, {"type": "contains", "source": "text_data\\bedrock.txt:604", "target": "itemsappendtextpartcontenttext"}, {"type": "contains", "source": "text_data\\bedrock.txt:604", "target": "itemgettooluse"}, {"type": "contains", "source": "text_data\\bedrock.txt:604", "target": "assert"}, {"type": "contains", "source": "text_data\\bedrock.txt:605", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\bedrock.txt:605", "target": "overload"}, {"type": "contains", "source": "text_data\\bedrock.txt:605", "target": "async"}, {"type": "contains", "source": "text_data\\bedrock.txt:605", "target": "messagescreate"}, {"type": "contains", "source": "text_data\\bedrock.txt:605", "target": "messages"}, {"type": "contains", "source": "text_data\\bedrock.txt:606", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\bedrock.txt:606", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\bedrock.txt:606", "target": "converseresponsetypedef"}, {"type": "contains", "source": "text_data\\bedrock.txt:606", "target": "tools"}, {"type": "contains", "source": "text_data\\bedrock.txt:606", "target": "supporttoolschoice"}, {"type": "contains", "source": "text_data\\bedrock.txt:607", "target": "toolchoice"}, {"type": "contains", "source": "text_data\\bedrock.txt:607", "target": "inferenceconfig"}, {"type": "contains", "source": "text_data\\bedrock.txt:607", "target": "tools"}, {"type": "contains", "source": "text_data\\bedrock.txt:607", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\bedrock.txt:607", "target": "bedrockmessages"}, {"type": "contains", "source": "text_data\\bedrock.txt:608", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\bedrock.txt:608", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\bedrock.txt:608", "target": "await"}, {"type": "contains", "source": "text_data\\bedrock.txt:608", "target": "params"}, {"type": "contains", "source": "text_data\\bedrock.txt:608", "target": "inferenceconfigurationtypedef"}, {"type": "contains", "source": "text_data\\bedrock.txt:609", "target": "inferenceconfig"}, {"type": "contains", "source": "text_data\\bedrock.txt:609", "target": "maxtokens"}, {"type": "contains", "source": "text_data\\bedrock.txt:609", "target": "temperature"}, {"type": "contains", "source": "text_data\\bedrock.txt:609", "target": "stopsequences"}, {"type": "contains", "source": "text_data\\bedrock.txt:609", "target": "inferenceconfigurationtypedef"}, {"type": "contains", "source": "text_data\\bedrock.txt:610", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\bedrock.txt:610", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\bedrock.txt:610", "target": "pydanticaimessage"}, {"type": "contains", "source": "text_data\\bedrock.txt:610", "target": "bedrock"}, {"type": "contains", "source": "text_data\\bedrock.txt:610", "target": "messageuniontypedef"}, {"type": "contains", "source": "text_data\\bedrock.txt:611", "target": "content"}, {"type": "contains", "source": "text_data\\bedrock.txt:611", "target": "toolresult"}, {"type": "contains", "source": "text_data\\bedrock.txt:611", "target": "tooluseid"}, {"type": "contains", "source": "text_data\\bedrock.txt:611", "target": "parttoolcallid"}, {"type": "contains", "source": "text_data\\bedrock.txt:611", "target": "partmodelresponsestr"}, {"type": "contains", "source": "text_data\\bedrock.txt:612", "target": "content"}, {"type": "contains", "source": "text_data\\bedrock.txt:612", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\bedrock.txt:612", "target": "retrypromptpart"}, {"type": "contains", "source": "text_data\\bedrock.txt:612", "target": "todomarcelo"}, {"type": "contains", "source": "text_data\\bedrock.txt:612", "target": "parttoolname"}, {"type": "contains", "source": "text_data\\bedrock.txt:613", "target": "content"}, {"type": "contains", "source": "text_data\\bedrock.txt:613", "target": "toolresult"}, {"type": "contains", "source": "text_data\\bedrock.txt:613", "target": "tooluseid"}, {"type": "contains", "source": "text_data\\bedrock.txt:613", "target": "parttoolcallid"}, {"type": "contains", "source": "text_data\\bedrock.txt:613", "target": "partmodelresponse"}, {"type": "contains", "source": "text_data\\bedrock.txt:614", "target": "content"}, {"type": "contains", "source": "text_data\\bedrock.txt:614", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\bedrock.txt:614", "target": "contentappendtext"}, {"type": "contains", "source": "text_data\\bedrock.txt:614", "target": "textpart"}, {"type": "contains", "source": "text_data\\bedrock.txt:614", "target": "itemcontent"}, {"type": "contains", "source": "text_data\\bedrock.txt:615", "target": "format"}, {"type": "contains", "source": "text_data\\bedrock.txt:615", "target": "documentcount"}, {"type": "contains", "source": "text_data\\bedrock.txt:615", "target": "contentappendtext"}, {"type": "contains", "source": "text_data\\bedrock.txt:615", "target": "partcontent"}, {"type": "contains", "source": "text_data\\bedrock.txt:615", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\bedrock.txt:616", "target": "format"}, {"type": "contains", "source": "text_data\\bedrock.txt:616", "target": "assert"}, {"type": "contains", "source": "text_data\\bedrock.txt:616", "target": "imageurl"}, {"type": "contains", "source": "text_data\\bedrock.txt:616", "target": "itemisimage"}, {"type": "contains", "source": "text_data\\bedrock.txt:616", "target": "contentappendimage"}, {"type": "contains", "source": "text_data\\bedrock.txt:617", "target": "format"}, {"type": "contains", "source": "text_data\\bedrock.txt:617", "target": "image"}, {"type": "contains", "source": "text_data\\bedrock.txt:617", "target": "source"}, {"type": "contains", "source": "text_data\\bedrock.txt:617", "target": "bytes"}, {"type": "contains", "source": "text_data\\bedrock.txt:617", "target": "responsecontent"}, {"type": "contains", "source": "text_data\\bedrock.txt:618", "target": "return"}, {"type": "contains", "source": "text_data\\bedrock.txt:618", "target": "content"}, {"type": "contains", "source": "text_data\\bedrock.txt:618", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\bedrock.txt:618", "target": "maptoolcallt"}, {"type": "contains", "source": "text_data\\bedrock.txt:618", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\bedrock.txt:619", "target": "model"}, {"type": "contains", "source": "text_data\\bedrock.txt:619", "target": "system"}, {"type": "contains", "source": "text_data\\bedrock.txt:619", "target": "modelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:619", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\bedrock.txt:619", "target": "provider"}, {"type": "contains", "source": "text_data\\bedrock.txt:620", "target": "model"}, {"type": "contains", "source": "text_data\\bedrock.txt:620", "target": "bedrock"}, {"type": "contains", "source": "text_data\\bedrock.txt:620", "target": "provider"}, {"type": "contains", "source": "text_data\\bedrock.txt:620", "target": "modelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:620", "target": "bedrockmodelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:621", "target": "source"}, {"type": "contains", "source": "text_data\\bedrock.txt:621", "target": "pydanticaislimpydanticaimodelsbedrockpy"}, {"type": "contains", "source": "text_data\\bedrock.txt:623", "target": "modelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:623", "target": "provider"}, {"type": "contains", "source": "text_data\\bedrock.txt:623", "target": "bedrock"}, {"type": "contains", "source": "text_data\\bedrock.txt:623", "target": "model"}, {"type": "contains", "source": "text_data\\bedrock.txt:623", "target": "providerbaseclient"}, {"type": "contains", "source": "text_data\\bedrock.txt:624", "target": "selfmodelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:624", "target": "modelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:624", "target": "isinstanceprovider"}, {"type": "contains", "source": "text_data\\bedrock.txt:624", "target": "provider"}, {"type": "contains", "source": "text_data\\bedrock.txt:624", "target": "inferproviderprovider"}, {"type": "contains", "source": "text_data\\bedrock.txt:625", "target": "bases"}, {"type": "contains", "source": "text_data\\bedrock.txt:625", "target": "streamedresponsebasepydanticaimodelsstreamedresponse"}, {"type": "contains", "source": "text_data\\bedrock.txt:625", "target": "pydanticaimodelsstreamedresponse"}, {"type": "contains", "source": "text_data\\bedrock.txt:625", "target": "implementation"}, {"type": "contains", "source": "text_data\\bedrock.txt:625", "target": "streamedresponse"}, {"type": "contains", "source": "text_data\\bedrock.txt:626", "target": "source"}, {"type": "contains", "source": "text_data\\bedrock.txt:626", "target": "pydanticaislimpydanticaimodelsbedrockpy"}, {"type": "contains", "source": "text_data\\bedrock.txt:627", "target": "async"}, {"type": "contains", "source": "text_data\\bedrock.txt:627", "target": "events"}, {"type": "contains", "source": "text_data\\bedrock.txt:627", "target": "dataclass"}, {"type": "contains", "source": "text_data\\bedrock.txt:627", "target": "class"}, {"type": "contains", "source": "text_data\\bedrock.txt:627", "target": "bedrockstreamedresponsestreamedresponse"}, {"type": "contains", "source": "text_data\\bedrock.txt:628", "target": "chunk"}, {"type": "contains", "source": "text_data\\bedrock.txt:628", "target": "continue"}, {"type": "contains", "source": "text_data\\bedrock.txt:628", "target": "conversestreamoutputtypedef"}, {"type": "contains", "source": "text_data\\bedrock.txt:628", "target": "toolid"}, {"type": "contains", "source": "text_data\\bedrock.txt:628", "target": "async"}, {"type": "contains", "source": "text_data\\bedrock.txt:629", "target": "maybeevent"}, {"type": "contains", "source": "text_data\\bedrock.txt:629", "target": "start"}, {"type": "contains", "source": "text_data\\bedrock.txt:629", "target": "chunkcontentblockstartstart"}, {"type": "contains", "source": "text_data\\bedrock.txt:629", "target": "tooluse"}, {"type": "contains", "source": "text_data\\bedrock.txt:629", "target": "toolusestart"}, {"type": "contains", "source": "text_data\\bedrock.txt:630", "target": "delta"}, {"type": "contains", "source": "text_data\\bedrock.txt:630", "target": "maybeevent"}, {"type": "contains", "source": "text_data\\bedrock.txt:630", "target": "yield"}, {"type": "contains", "source": "text_data\\bedrock.txt:630", "target": "tooluse"}, {"type": "contains", "source": "text_data\\bedrock.txt:630", "target": "index"}, {"type": "contains", "source": "text_data\\bedrock.txt:631", "target": "property"}, {"type": "contains", "source": "text_data\\bedrock.txt:631", "target": "return"}, {"type": "contains", "source": "text_data\\bedrock.txt:631", "target": "resultusage"}, {"type": "contains", "source": "text_data\\bedrock.txt:631", "target": "yield"}, {"type": "contains", "source": "text_data\\bedrock.txt:631", "target": "maybeevent"}, {"type": "contains", "source": "text_data\\bedrock.txt:632", "target": "modelname"}, {"type": "contains", "source": "text_data\\bedrock.txt:632", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\bedrock.txt:632", "target": "model"}, {"type": "contains", "source": "text_data\\bedrock.txt:632", "target": "response"}, {"type": "contains", "source": "text_data\\bedrock.txt:632", "target": "pydantic"}, {"type": "contains", "source": "text_data\\chat-app.txt:632", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\chat-app.txt:632", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\chat-app.txt:632", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\chat-app.txt:632", "target": "v0050"}, {"type": "contains", "source": "text_data\\chat-app.txt:632", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\chat-app.txt:633", "target": "tools"}, {"type": "contains", "source": "text_data\\chat-app.txt:633", "target": "contributing"}, {"type": "contains", "source": "text_data\\chat-app.txt:633", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\chat-app.txt:633", "target": "documentation"}, {"type": "contains", "source": "text_data\\chat-app.txt:633", "target": "agents"}, {"type": "contains", "source": "text_data\\chat-app.txt:634", "target": "input"}, {"type": "contains", "source": "text_data\\chat-app.txt:634", "target": "image"}, {"type": "contains", "source": "text_data\\chat-app.txt:634", "target": "audio"}, {"type": "contains", "source": "text_data\\chat-app.txt:634", "target": "document"}, {"type": "contains", "source": "text_data\\chat-app.txt:635", "target": "examples"}, {"type": "contains", "source": "text_data\\chat-app.txt:635", "target": "client"}, {"type": "contains", "source": "text_data\\chat-app.txt:635", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\chat-app.txt:635", "target": "server"}, {"type": "contains", "source": "text_data\\chat-app.txt:635", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\chat-app.txt:636", "target": "stream"}, {"type": "contains", "source": "text_data\\chat-app.txt:636", "target": "fastapi"}, {"type": "contains", "source": "text_data\\chat-app.txt:636", "target": "example"}, {"type": "contains", "source": "text_data\\chat-app.txt:636", "target": "reference"}, {"type": "contains", "source": "text_data\\chat-app.txt:636", "target": "pydantic"}, {"type": "contains", "source": "text_data\\chat-app.txt:637", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\chat-app.txt:637", "target": "apiresult"}, {"type": "contains", "source": "text_data\\chat-app.txt:637", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\chat-app.txt:637", "target": "apimessages"}, {"type": "contains", "source": "text_data\\chat-app.txt:637", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\chat-app.txt:638", "target": "pydanticaimodelsgemini"}, {"type": "contains", "source": "text_data\\chat-app.txt:638", "target": "apimodelsgemini"}, {"type": "contains", "source": "text_data\\chat-app.txt:638", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\chat-app.txt:638", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\chat-app.txt:638", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\chat-app.txt:639", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\chat-app.txt:639", "target": "apipydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\chat-app.txt:639", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\chat-app.txt:639", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\chat-app.txt:639", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\chat-app.txt:640", "target": "example"}, {"type": "contains", "source": "text_data\\chat-app.txt:640", "target": "running"}, {"type": "contains", "source": "text_data\\chat-app.txt:640", "target": "fastapi"}, {"type": "contains", "source": "text_data\\chat-app.txt:640", "target": "demonstrates"}, {"type": "contains", "source": "text_data\\chat-app.txt:640", "target": "between"}, {"type": "contains", "source": "text_data\\chat-app.txt:641", "target": "python"}, {"type": "contains", "source": "text_data\\chat-app.txt:641", "target": "pydanticaiexampleschatapp"}, {"type": "contains", "source": "text_data\\chat-app.txt:641", "target": "example"}, {"type": "contains", "source": "text_data\\chat-app.txt:641", "target": "pipuv"}, {"type": "contains", "source": "text_data\\chat-app.txt:641", "target": "localhost8000httplocalhost8000"}, {"type": "contains", "source": "text_data\\chat-app.txt:642", "target": "import"}, {"type": "contains", "source": "text_data\\chat-app.txt:642", "target": "annotations"}, {"type": "contains", "source": "text_data\\chat-app.txt:642", "target": "datetime"}, {"type": "contains", "source": "text_data\\chat-app.txt:642", "target": "fastapi"}, {"type": "contains", "source": "text_data\\chat-app.txt:642", "target": "future"}, {"type": "contains", "source": "text_data\\chat-app.txt:643", "target": "import"}, {"type": "contains", "source": "text_data\\chat-app.txt:643", "target": "agent"}, {"type": "contains", "source": "text_data\\chat-app.txt:643", "target": "async"}, {"type": "contains", "source": "text_data\\chat-app.txt:643", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\chat-app.txt:643", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\chat-app.txt:644", "target": "async"}, {"type": "contains", "source": "text_data\\chat-app.txt:644", "target": "return"}, {"type": "contains", "source": "text_data\\chat-app.txt:644", "target": "fileresponse"}, {"type": "contains", "source": "text_data\\chat-app.txt:644", "target": "fileresponsethisdir"}, {"type": "contains", "source": "text_data\\chat-app.txt:644", "target": "database"}, {"type": "contains", "source": "text_data\\chat-app.txt:645", "target": "return"}, {"type": "contains", "source": "text_data\\chat-app.txt:645", "target": "timestamp"}, {"type": "contains", "source": "text_data\\chat-app.txt:645", "target": "await"}, {"type": "contains", "source": "text_data\\chat-app.txt:645", "target": "databasegetmessages"}, {"type": "contains", "source": "text_data\\chat-app.txt:645", "target": "response"}, {"type": "contains", "source": "text_data\\chat-app.txt:646", "target": "timestamp"}, {"type": "contains", "source": "text_data\\chat-app.txt:646", "target": "content"}, {"type": "contains", "source": "text_data\\chat-app.txt:646", "target": "firstpartcontent"}, {"type": "contains", "source": "text_data\\chat-app.txt:646", "target": "async"}, {"type": "contains", "source": "text_data\\chat-app.txt:646", "target": "database"}, {"type": "contains", "source": "text_data\\chat-app.txt:647", "target": "prompt"}, {"type": "contains", "source": "text_data\\chat-app.txt:647", "target": "messages"}, {"type": "contains", "source": "text_data\\chat-app.txt:647", "target": "history"}, {"type": "contains", "source": "text_data\\chat-app.txt:647", "target": "agent"}, {"type": "contains", "source": "text_data\\chat-app.txt:647", "target": "streams"}, {"type": "contains", "source": "text_data\\chat-app.txt:648", "target": "database"}, {"type": "contains", "source": "text_data\\chat-app.txt:648", "target": "messages"}, {"type": "contains", "source": "text_data\\chat-app.txt:648", "target": "async"}, {"type": "contains", "source": "text_data\\chat-app.txt:648", "target": "resultstreamdebounceby001"}, {"type": "contains", "source": "text_data\\chat-app.txt:648", "target": "frontend"}, {"type": "contains", "source": "text_data\\chat-app.txt:649", "target": "executor"}, {"type": "contains", "source": "text_data\\chat-app.txt:649", "target": "sqlite"}, {"type": "contains", "source": "text_data\\chat-app.txt:649", "target": "rudimentary"}, {"type": "contains", "source": "text_data\\chat-app.txt:649", "target": "database"}, {"type": "contains", "source": "text_data\\chat-app.txt:649", "target": "store"}, {"type": "contains", "source": "text_data\\chat-app.txt:650", "target": "await"}, {"type": "contains", "source": "text_data\\chat-app.txt:650", "target": "messages"}, {"type": "contains", "source": "text_data\\chat-app.txt:650", "target": "loopruninexecutorexecutor"}, {"type": "contains", "source": "text_data\\chat-app.txt:650", "target": "clsconnect"}, {"type": "contains", "source": "text_data\\chat-app.txt:650", "target": "clscon"}, {"type": "contains", "source": "text_data\\chat-app.txt:651", "target": "messages"}, {"type": "contains", "source": "text_data\\chat-app.txt:651", "target": "await"}, {"type": "contains", "source": "text_data\\chat-app.txt:651", "target": "selfasyncify"}, {"type": "contains", "source": "text_data\\chat-app.txt:651", "target": "selfexecute"}, {"type": "contains", "source": "text_data\\chat-app.txt:651", "target": "messagelist"}, {"type": "contains", "source": "text_data\\chat-app.txt:652", "target": "commit"}, {"type": "contains", "source": "text_data\\chat-app.txt:652", "target": "return"}, {"type": "contains", "source": "text_data\\chat-app.txt:652", "target": "kwargs"}, {"type": "contains", "source": "text_data\\chat-app.txt:652", "target": "ignore"}, {"type": "contains", "source": "text_data\\chat-app.txt:652", "target": "literalstring"}, {"type": "contains", "source": "text_data\\chat-app.txt:653", "target": "simple"}, {"type": "contains", "source": "text_data\\chat-app.txt:653", "target": "render"}, {"type": "contains", "source": "text_data\\chat-app.txt:653", "target": "chatapphtml"}, {"type": "contains", "source": "text_data\\chat-app.txt:654", "target": "conversation"}, {"type": "contains", "source": "text_data\\chat-app.txt:654", "target": "content"}, {"type": "contains", "source": "text_data\\chat-app.txt:654", "target": "fontweight"}, {"type": "contains", "source": "text_data\\chat-app.txt:654", "target": "display"}, {"type": "contains", "source": "text_data\\chat-app.txt:654", "target": "block"}, {"type": "contains", "source": "text_data\\chat-app.txt:655", "target": "rotation"}, {"type": "contains", "source": "text_data\\chat-app.txt:655", "target": "transform"}, {"type": "contains", "source": "text_data\\chat-app.txt:655", "target": "width"}, {"type": "contains", "source": "text_data\\chat-app.txt:655", "target": "height"}, {"type": "contains", "source": "text_data\\chat-app.txt:655", "target": "border"}, {"type": "contains", "source": "text_data\\chat-app.txt:656", "target": "script"}, {"type": "contains", "source": "text_data\\chat-app.txt:656", "target": "idspinnerdiv"}, {"type": "contains", "source": "text_data\\chat-app.txt:656", "target": "methodpost"}, {"type": "contains", "source": "text_data\\chat-app.txt:656", "target": "input"}, {"type": "contains", "source": "text_data\\chat-app.txt:656", "target": "idpromptinput"}, {"type": "contains", "source": "text_data\\chat-app.txt:657", "target": "const"}, {"type": "contains", "source": "text_data\\chat-app.txt:657", "target": "await"}, {"type": "contains", "source": "text_data\\chat-app.txt:657", "target": "jscode"}, {"type": "contains", "source": "text_data\\chat-app.txt:657", "target": "script"}, {"type": "contains", "source": "text_data\\chat-app.txt:657", "target": "transpile"}, {"type": "contains", "source": "text_data\\chat-app.txt:658", "target": "typescript"}, {"type": "contains", "source": "text_data\\chat-app.txt:658", "target": "browser"}, {"type": "contains", "source": "text_data\\chat-app.txt:658", "target": "handle"}, {"type": "contains", "source": "text_data\\chat-app.txt:658", "target": "rendering"}, {"type": "contains", "source": "text_data\\chat-app.txt:658", "target": "messages"}, {"type": "contains", "source": "text_data\\chat-app.txt:659", "target": "const"}, {"type": "contains", "source": "text_data\\chat-app.txt:659", "target": "response"}, {"type": "contains", "source": "text_data\\chat-app.txt:659", "target": "warning"}, {"type": "contains", "source": "text_data\\chat-app.txt:659", "target": "avoid"}, {"type": "contains", "source": "text_data\\chat-app.txt:659", "target": "complexity"}, {"type": "contains", "source": "text_data\\chat-app.txt:660", "target": "const"}, {"type": "contains", "source": "text_data\\chat-app.txt:660", "target": "response"}, {"type": "contains", "source": "text_data\\chat-app.txt:660", "target": "await"}, {"type": "contains", "source": "text_data\\chat-app.txt:660", "target": "addmessagestext"}, {"type": "contains", "source": "text_data\\chat-app.txt:660", "target": "responsestatus"}, {"type": "contains", "source": "text_data\\chat-app.txt:661", "target": "message"}, {"type": "contains", "source": "text_data\\chat-app.txt:661", "target": "string"}, {"type": "contains", "source": "text_data\\chat-app.txt:661", "target": "messages"}, {"type": "contains", "source": "text_data\\chat-app.txt:661", "target": "const"}, {"type": "contains", "source": "text_data\\chat-app.txt:661", "target": "timestamp"}, {"type": "contains", "source": "text_data\\chat-app.txt:662", "target": "const"}, {"type": "contains", "source": "text_data\\chat-app.txt:662", "target": "timestamp"}, {"type": "contains", "source": "text_data\\chat-app.txt:662", "target": "msgdiv"}, {"type": "contains", "source": "text_data\\chat-app.txt:662", "target": "message"}, {"type": "contains", "source": "text_data\\chat-app.txt:662", "target": "messages"}, {"type": "contains", "source": "text_data\\chat-app.txt:663", "target": "const"}, {"type": "contains", "source": "text_data\\chat-app.txt:663", "target": "await"}, {"type": "contains", "source": "text_data\\chat-app.txt:663", "target": "documentgetelementbyiderrorclasslistremovednone"}, {"type": "contains", "source": "text_data\\chat-app.txt:663", "target": "documentgetelementbyidspinnerclasslistremoveactive"}, {"type": "contains", "source": "text_data\\chat-app.txt:663", "target": "async"}, {"type": "contains", "source": "text_data\\chat-app.txt:664", "target": "messages"}, {"type": "contains", "source": "text_data\\chat-app.txt:664", "target": "fetchchatthenonfetchresponsecatchonerror"}, {"type": "contains", "source": "text_data\\chat-app.txt:665", "target": "pydantic"}, {"type": "contains", "source": "text_data\\chat-app.txt:665", "target": "services"}, {"type": "contains", "source": "text_data\\chat-app.txt:665", "target": "present"}, {"type": "contains", "source": "text_data\\cli.txt:665", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\cli.txt:665", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\cli.txt:665", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\cli.txt:665", "target": "v0050"}, {"type": "contains", "source": "text_data\\cli.txt:665", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\cli.txt:666", "target": "tools"}, {"type": "contains", "source": "text_data\\cli.txt:666", "target": "contributing"}, {"type": "contains", "source": "text_data\\cli.txt:666", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\cli.txt:666", "target": "documentation"}, {"type": "contains", "source": "text_data\\cli.txt:666", "target": "agents"}, {"type": "contains", "source": "text_data\\cli.txt:667", "target": "examples"}, {"type": "contains", "source": "text_data\\cli.txt:667", "target": "command"}, {"type": "contains", "source": "text_data\\cli.txt:667", "target": "interface"}, {"type": "contains", "source": "text_data\\cli.txt:667", "target": "usage"}, {"type": "contains", "source": "text_data\\cli.txt:667", "target": "client"}, {"type": "contains", "source": "text_data\\cli.txt:668", "target": "stream"}, {"type": "contains", "source": "text_data\\cli.txt:668", "target": "reference"}, {"type": "contains", "source": "text_data\\cli.txt:668", "target": "pydantic"}, {"type": "contains", "source": "text_data\\cli.txt:668", "target": "model"}, {"type": "contains", "source": "text_data\\cli.txt:668", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\cli.txt:669", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\cli.txt:669", "target": "apimessages"}, {"type": "contains", "source": "text_data\\cli.txt:669", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\cli.txt:669", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\cli.txt:669", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\cli.txt:670", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\cli.txt:670", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\cli.txt:670", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\cli.txt:670", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\cli.txt:670", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\cli.txt:671", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\cli.txt:671", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\cli.txt:671", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\cli.txt:671", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\cli.txt:671", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\cli.txt:672", "target": "installation"}, {"type": "contains", "source": "text_data\\cli.txt:672", "target": "usage"}, {"type": "contains", "source": "text_data\\cli.txt:672", "target": "command"}, {"type": "contains", "source": "text_data\\cli.txt:672", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\cli.txt:672", "target": "table"}, {"type": "contains", "source": "text_data\\cli.txt:673", "target": "install"}, {"type": "contains", "source": "text_data\\cli.txt:673", "target": "pydanticaicli"}, {"type": "contains", "source": "text_data\\cli.txt:673", "target": "registerpythonargcomplete"}, {"type": "contains", "source": "text_data\\cli.txt:673", "target": "environment"}, {"type": "contains", "source": "text_data\\cli.txt:673", "target": "variable"}, {"type": "contains", "source": "text_data\\cli.txt:674", "target": "model"}, {"type": "contains", "source": "text_data\\cli.txt:674", "target": "interactive"}, {"type": "contains", "source": "text_data\\cli.txt:674", "target": "session"}, {"type": "contains", "source": "text_data\\cli.txt:674", "target": "markdown"}, {"type": "contains", "source": "text_data\\cli.txt:674", "target": "multiline"}, {"type": "contains", "source": "text_data\\client.txt:674", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\client.txt:674", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\client.txt:674", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\client.txt:674", "target": "v0050"}, {"type": "contains", "source": "text_data\\client.txt:674", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\client.txt:675", "target": "tools"}, {"type": "contains", "source": "text_data\\client.txt:675", "target": "contributing"}, {"type": "contains", "source": "text_data\\client.txt:675", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\client.txt:675", "target": "documentation"}, {"type": "contains", "source": "text_data\\client.txt:675", "target": "agents"}, {"type": "contains", "source": "text_data\\client.txt:676", "target": "input"}, {"type": "contains", "source": "text_data\\client.txt:676", "target": "image"}, {"type": "contains", "source": "text_data\\client.txt:676", "target": "audio"}, {"type": "contains", "source": "text_data\\client.txt:676", "target": "document"}, {"type": "contains", "source": "text_data\\client.txt:677", "target": "client"}, {"type": "contains", "source": "text_data\\client.txt:677", "target": "server"}, {"type": "contains", "source": "text_data\\client.txt:677", "target": "examples"}, {"type": "contains", "source": "text_data\\client.txt:677", "target": "table"}, {"type": "contains", "source": "text_data\\client.txt:677", "target": "contents"}, {"type": "contains", "source": "text_data\\client.txt:678", "target": "stream"}, {"type": "contains", "source": "text_data\\client.txt:678", "target": "reference"}, {"type": "contains", "source": "text_data\\client.txt:678", "target": "pydantic"}, {"type": "contains", "source": "text_data\\client.txt:678", "target": "model"}, {"type": "contains", "source": "text_data\\client.txt:678", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\client.txt:679", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\client.txt:679", "target": "apiresult"}, {"type": "contains", "source": "text_data\\client.txt:679", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\client.txt:679", "target": "apimessages"}, {"type": "contains", "source": "text_data\\client.txt:679", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\client.txt:680", "target": "pydanticaimodelsgemini"}, {"type": "contains", "source": "text_data\\client.txt:680", "target": "apimodelsgemini"}, {"type": "contains", "source": "text_data\\client.txt:680", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\client.txt:680", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\client.txt:680", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\client.txt:681", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\client.txt:681", "target": "apipydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\client.txt:681", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\client.txt:681", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\client.txt:681", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\client.txt:682", "target": "install"}, {"type": "contains", "source": "text_data\\client.txt:682", "target": "usage"}, {"type": "contains", "source": "text_data\\client.txt:682", "target": "client"}, {"type": "contains", "source": "text_data\\client.txt:682", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\client.txt:682", "target": "servers"}, {"type": "contains", "source": "text_data\\client.txt:683", "target": "server"}, {"type": "contains", "source": "text_data\\client.txt:683", "target": "which"}, {"type": "contains", "source": "text_data\\client.txt:683", "target": "connects"}, {"type": "contains", "source": "text_data\\client.txt:683", "target": "using"}, {"type": "contains", "source": "text_data\\client.txt:683", "target": "transport"}, {"type": "contains", "source": "text_data\\client.txt:684", "target": "server"}, {"type": "contains", "source": "text_data\\client.txt:684", "target": "mcpserverhttpapimcppydanticaimcpmcpserverhttp"}, {"type": "contains", "source": "text_data\\client.txt:684", "target": "running"}, {"type": "contains", "source": "text_data\\client.txt:684", "target": "client"}, {"type": "contains", "source": "text_data\\client.txt:684", "target": "connects"}, {"type": "contains", "source": "text_data\\client.txt:685", "target": "server"}, {"type": "contains", "source": "text_data\\client.txt:685", "target": "import"}, {"type": "contains", "source": "text_data\\client.txt:685", "target": "agent"}, {"type": "contains", "source": "text_data\\client.txt:685", "target": "async"}, {"type": "contains", "source": "text_data\\client.txt:685", "target": "between"}, {"type": "contains", "source": "text_data\\client.txt:686", "target": "model"}, {"type": "contains", "source": "text_data\\client.txt:686", "target": "answer"}, {"type": "contains", "source": "text_data\\client.txt:686", "target": "python"}, {"type": "contains", "source": "text_data\\client.txt:686", "target": "returns"}, {"type": "contains", "source": "text_data\\client.txt:686", "target": "example"}, {"type": "contains", "source": "text_data\\client.txt:687", "target": "logfire"}, {"type": "contains", "source": "text_data\\client.txt:687", "target": "visualise"}, {"type": "contains", "source": "text_data\\client.txt:687", "target": "clearly"}, {"type": "contains", "source": "text_data\\client.txt:687", "target": "thats"}, {"type": "contains", "source": "text_data\\client.txt:687", "target": "adding"}, {"type": "contains", "source": "text_data\\client.txt:688", "target": "server"}, {"type": "contains", "source": "text_data\\client.txt:688", "target": "stdio"}, {"type": "contains", "source": "text_data\\client.txt:688", "target": "mcpserverstdioapimcppydanticaimcpmcpserverstdio"}, {"type": "contains", "source": "text_data\\client.txt:688", "target": "other"}, {"type": "contains", "source": "text_data\\client.txt:688", "target": "transport"}, {"type": "contains", "source": "text_data\\client.txt:689", "target": "import"}, {"type": "contains", "source": "text_data\\client.txt:689", "target": "agent"}, {"type": "contains", "source": "text_data\\client.txt:689", "target": "async"}, {"type": "contains", "source": "text_data\\client.txt:689", "target": "between"}, {"type": "contains", "source": "text_data\\client.txt:689", "target": "mcpstdioclientpy"}, {"type": "contains", "source": "text_data\\cohere.txt:689", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\cohere.txt:689", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\cohere.txt:689", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\cohere.txt:689", "target": "v0050"}, {"type": "contains", "source": "text_data\\cohere.txt:689", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\cohere.txt:690", "target": "tools"}, {"type": "contains", "source": "text_data\\cohere.txt:690", "target": "contributing"}, {"type": "contains", "source": "text_data\\cohere.txt:690", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\cohere.txt:690", "target": "documentation"}, {"type": "contains", "source": "text_data\\cohere.txt:690", "target": "agents"}, {"type": "contains", "source": "text_data\\cohere.txt:691", "target": "evals"}, {"type": "contains", "source": "text_data\\cohere.txt:691", "target": "input"}, {"type": "contains", "source": "text_data\\cohere.txt:691", "target": "graphs"}, {"type": "contains", "source": "text_data\\cohere.txt:691", "target": "graph"}, {"type": "contains", "source": "text_data\\cohere.txt:691", "target": "image"}, {"type": "contains", "source": "text_data\\cohere.txt:692", "target": "examples"}, {"type": "contains", "source": "text_data\\cohere.txt:692", "target": "client"}, {"type": "contains", "source": "text_data\\cohere.txt:692", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\cohere.txt:692", "target": "server"}, {"type": "contains", "source": "text_data\\cohere.txt:692", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\cohere.txt:693", "target": "agent"}, {"type": "contains", "source": "text_data\\cohere.txt:693", "target": "stream"}, {"type": "contains", "source": "text_data\\cohere.txt:693", "target": "reference"}, {"type": "contains", "source": "text_data\\cohere.txt:693", "target": "pydantic"}, {"type": "contains", "source": "text_data\\cohere.txt:693", "target": "model"}, {"type": "contains", "source": "text_data\\cohere.txt:694", "target": "pydanticaimodelscohere"}, {"type": "contains", "source": "text_data\\cohere.txt:694", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\cohere.txt:694", "target": "result"}, {"type": "contains", "source": "text_data\\cohere.txt:694", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\cohere.txt:694", "target": "messages"}, {"type": "contains", "source": "text_data\\cohere.txt:695", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\cohere.txt:695", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\cohere.txt:695", "target": "coheremodelsettings"}, {"type": "contains", "source": "text_data\\cohere.txt:695", "target": "coheremodel"}, {"type": "contains", "source": "text_data\\cohere.txt:695", "target": "modelname"}, {"type": "contains", "source": "text_data\\cohere.txt:696", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\cohere.txt:696", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\cohere.txt:696", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\cohere.txt:696", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\cohere.txt:696", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\cohere.txt:697", "target": "setup"}, {"type": "contains", "source": "text_data\\cohere.txt:697", "target": "latestcoheremodelnames"}, {"type": "contains", "source": "text_data\\cohere.txt:697", "target": "model"}, {"type": "contains", "source": "text_data\\cohere.txt:697", "target": "table"}, {"type": "contains", "source": "text_data\\cohere.txt:697", "target": "contents"}, {"type": "contains", "source": "text_data\\cohere.txt:698", "target": "latestcoheremodelnames"}, {"type": "contains", "source": "text_data\\cohere.txt:698", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\cohere.txt:698", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\cohere.txt:698", "target": "typingliteral"}, {"type": "contains", "source": "text_data\\cohere.txt:698", "target": "c4aiayaexpanse32b"}, {"type": "contains", "source": "text_data\\cohere.txt:699", "target": "cohere"}, {"type": "contains", "source": "text_data\\cohere.txt:699", "target": "models"}, {"type": "contains", "source": "text_data\\cohere.txt:699", "target": "latest"}, {"type": "contains", "source": "text_data\\cohere.txt:699", "target": "coheremodelname"}, {"type": "contains", "source": "text_data\\cohere.txt:699", "target": "model"}, {"type": "contains", "source": "text_data\\cohere.txt:700", "target": "cohere"}, {"type": "contains", "source": "text_data\\cohere.txt:700", "target": "fields"}, {"type": "contains", "source": "text_data\\cohere.txt:700", "target": "prefixed"}, {"type": "contains", "source": "text_data\\cohere.txt:700", "target": "merge"}, {"type": "contains", "source": "text_data\\cohere.txt:700", "target": "other"}, {"type": "contains", "source": "text_data\\cohere.txt:701", "target": "source"}, {"type": "contains", "source": "text_data\\cohere.txt:701", "target": "pydanticaislimpydanticaimodelscoherepy"}, {"type": "contains", "source": "text_data\\cohere.txt:705", "target": "cohere"}, {"type": "contains", "source": "text_data\\cohere.txt:705", "target": "class"}, {"type": "contains", "source": "text_data\\cohere.txt:705", "target": "model"}, {"type": "contains", "source": "text_data\\cohere.txt:705", "target": "client"}, {"type": "contains", "source": "text_data\\cohere.txt:705", "target": "fieldreprfalse"}, {"type": "contains", "source": "text_data\\cohere.txt:706", "target": "provider"}, {"type": "contains", "source": "text_data\\cohere.txt:706", "target": "cohere"}, {"type": "contains", "source": "text_data\\cohere.txt:706", "target": "model"}, {"type": "contains", "source": "text_data\\cohere.txt:706", "target": "modelname"}, {"type": "contains", "source": "text_data\\cohere.txt:706", "target": "initialize"}, {"type": "contains", "source": "text_data\\cohere.txt:707", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\cohere.txt:707", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\cohere.txt:707", "target": "property"}, {"type": "contains", "source": "text_data\\cohere.txt:707", "target": "return"}, {"type": "contains", "source": "text_data\\cohere.txt:707", "target": "baseurlself"}, {"type": "contains", "source": "text_data\\cohere.txt:708", "target": "return"}, {"type": "contains", "source": "text_data\\cohere.txt:708", "target": "model"}, {"type": "contains", "source": "text_data\\cohere.txt:708", "target": "messages"}, {"type": "contains", "source": "text_data\\cohere.txt:708", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\cohere.txt:708", "target": "selfmodelname"}, {"type": "contains", "source": "text_data\\cohere.txt:709", "target": "statuscode"}, {"type": "contains", "source": "text_data\\cohere.txt:709", "target": "raise"}, {"type": "contains", "source": "text_data\\cohere.txt:709", "target": "toolstools"}, {"type": "contains", "source": "text_data\\cohere.txt:709", "target": "maxtokensmodelsettingsgetmaxtokens"}, {"type": "contains", "source": "text_data\\cohere.txt:709", "target": "temperaturemodelsettingsgettemperature"}, {"type": "contains", "source": "text_data\\cohere.txt:710", "target": "response"}, {"type": "contains", "source": "text_data\\cohere.txt:710", "target": "raise"}, {"type": "contains", "source": "text_data\\cohere.txt:710", "target": "processresponseself"}, {"type": "contains", "source": "text_data\\cohere.txt:710", "target": "chatresponse"}, {"type": "contains", "source": "text_data\\cohere.txt:710", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\cohere.txt:711", "target": "isinstancemessage"}, {"type": "contains", "source": "text_data\\cohere.txt:711", "target": "partsappend"}, {"type": "contains", "source": "text_data\\cohere.txt:711", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\cohere.txt:711", "target": "toolnamecfunctionname"}, {"type": "contains", "source": "text_data\\cohere.txt:711", "target": "argscfunctionarguments"}, {"type": "contains", "source": "text_data\\cohere.txt:712", "target": "toolcalls"}, {"type": "contains", "source": "text_data\\cohere.txt:712", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\cohere.txt:712", "target": "messageparam"}, {"type": "contains", "source": "text_data\\cohere.txt:712", "target": "listtoolcallv2"}, {"type": "contains", "source": "text_data\\cohere.txt:712", "target": "messageparts"}, {"type": "contains", "source": "text_data\\cohere.txt:713", "target": "tools"}, {"type": "contains", "source": "text_data\\cohere.txt:713", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\cohere.txt:713", "target": "selfmaptooldefinitionr"}, {"type": "contains", "source": "text_data\\cohere.txt:713", "target": "modelrequestparametersresulttools"}, {"type": "contains", "source": "text_data\\cohere.txt:713", "target": "return"}, {"type": "contains", "source": "text_data\\cohere.txt:714", "target": "toolv2"}, {"type": "contains", "source": "text_data\\cohere.txt:714", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\cohere.txt:714", "target": "argumentstargsasjsonstr"}, {"type": "contains", "source": "text_data\\cohere.txt:714", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\cohere.txt:714", "target": "maptooldefinitionf"}, {"type": "contains", "source": "text_data\\cohere.txt:715", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\cohere.txt:715", "target": "yield"}, {"type": "contains", "source": "text_data\\cohere.txt:715", "target": "userchatmessagev2roleuser"}, {"type": "contains", "source": "text_data\\cohere.txt:715", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\cohere.txt:715", "target": "isinstancepartcontent"}, {"type": "contains", "source": "text_data\\cohere.txt:716", "target": "yield"}, {"type": "contains", "source": "text_data\\cohere.txt:716", "target": "toolchatmessagev2"}, {"type": "contains", "source": "text_data\\cohere.txt:716", "target": "roletool"}, {"type": "contains", "source": "text_data\\cohere.txt:716", "target": "toolcallidguardtoolcallidtpart"}, {"type": "contains", "source": "text_data\\cohere.txt:716", "target": "contentpartmodelresponse"}, {"type": "contains", "source": "text_data\\cohere.txt:717", "target": "cohere"}, {"type": "contains", "source": "text_data\\cohere.txt:717", "target": "modelname"}, {"type": "contains", "source": "text_data\\cohere.txt:717", "target": "coheremodelname"}, {"type": "contains", "source": "text_data\\cohere.txt:717", "target": "provider"}, {"type": "contains", "source": "text_data\\cohere.txt:717", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\cohere.txt:718", "target": "cohere"}, {"type": "contains", "source": "text_data\\cohere.txt:718", "target": "model"}, {"type": "contains", "source": "text_data\\cohere.txt:718", "target": "provider"}, {"type": "contains", "source": "text_data\\cohere.txt:718", "target": "parameters"}, {"type": "contains", "source": "text_data\\cohere.txt:718", "target": "initialize"}, {"type": "contains", "source": "text_data\\cohere.txt:720", "target": "provider"}, {"type": "contains", "source": "text_data\\cohere.txt:720", "target": "cohere"}, {"type": "contains", "source": "text_data\\cohere.txt:720", "target": "modelname"}, {"type": "contains", "source": "text_data\\cohere.txt:720", "target": "model"}, {"type": "contains", "source": "text_data\\cohere.txt:720", "target": "coheremodelname"}, {"type": "contains", "source": "text_data\\cohere.txt:721", "target": "isinstanceprovider"}, {"type": "contains", "source": "text_data\\cohere.txt:721", "target": "provider"}, {"type": "contains", "source": "text_data\\cohere.txt:721", "target": "inferproviderprovider"}, {"type": "contains", "source": "text_data\\cohere.txt:721", "target": "selfclient"}, {"type": "contains", "source": "text_data\\cohere.txt:721", "target": "providerclient"}, {"type": "contains", "source": "text_data\\cohere.txt:722", "target": "system"}, {"type": "contains", "source": "text_data\\cohere.txt:722", "target": "model"}, {"type": "contains", "source": "text_data\\cohere.txt:722", "target": "modelname"}, {"type": "contains", "source": "text_data\\cohere.txt:722", "target": "coheremodelname"}, {"type": "contains", "source": "text_data\\cohere.txt:722", "target": "property"}, {"type": "contains", "source": "text_data\\common-tools.txt:722", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\common-tools.txt:722", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\common-tools.txt:722", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\common-tools.txt:722", "target": "v0050"}, {"type": "contains", "source": "text_data\\common-tools.txt:722", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\common-tools.txt:723", "target": "tools"}, {"type": "contains", "source": "text_data\\common-tools.txt:723", "target": "installation"}, {"type": "contains", "source": "text_data\\common-tools.txt:723", "target": "contributing"}, {"type": "contains", "source": "text_data\\common-tools.txt:723", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\common-tools.txt:723", "target": "documentation"}, {"type": "contains", "source": "text_data\\common-tools.txt:724", "target": "evals"}, {"type": "contains", "source": "text_data\\common-tools.txt:724", "target": "input"}, {"type": "contains", "source": "text_data\\common-tools.txt:724", "target": "multiagent"}, {"type": "contains", "source": "text_data\\common-tools.txt:724", "target": "applications"}, {"type": "contains", "source": "text_data\\common-tools.txt:724", "target": "multiagentapplications"}, {"type": "contains", "source": "text_data\\common-tools.txt:725", "target": "examples"}, {"type": "contains", "source": "text_data\\common-tools.txt:725", "target": "client"}, {"type": "contains", "source": "text_data\\common-tools.txt:725", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\common-tools.txt:725", "target": "server"}, {"type": "contains", "source": "text_data\\common-tools.txt:725", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\common-tools.txt:726", "target": "stream"}, {"type": "contains", "source": "text_data\\common-tools.txt:726", "target": "reference"}, {"type": "contains", "source": "text_data\\common-tools.txt:726", "target": "pydantic"}, {"type": "contains", "source": "text_data\\common-tools.txt:726", "target": "model"}, {"type": "contains", "source": "text_data\\common-tools.txt:726", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\common-tools.txt:727", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\common-tools.txt:727", "target": "apimessages"}, {"type": "contains", "source": "text_data\\common-tools.txt:727", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\common-tools.txt:727", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\common-tools.txt:727", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\common-tools.txt:728", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\common-tools.txt:728", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\common-tools.txt:728", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\common-tools.txt:728", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\common-tools.txt:728", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\common-tools.txt:729", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\common-tools.txt:729", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\common-tools.txt:729", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\common-tools.txt:729", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\common-tools.txt:729", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\common-tools.txt:730", "target": "duckduckgo"}, {"type": "contains", "source": "text_data\\common-tools.txt:730", "target": "search"}, {"type": "contains", "source": "text_data\\common-tools.txt:730", "target": "installation"}, {"type": "contains", "source": "text_data\\common-tools.txt:730", "target": "usage"}, {"type": "contains", "source": "text_data\\common-tools.txt:730", "target": "tools"}, {"type": "contains", "source": "text_data\\common-tools.txt:731", "target": "pydanticaislimduckduckgo"}, {"type": "contains", "source": "text_data\\common-tools.txt:731", "target": "pipuv"}, {"type": "contains", "source": "text_data\\common-tools.txt:731", "target": "install"}, {"type": "contains", "source": "text_data\\common-tools.txt:731", "target": "usage"}, {"type": "contains", "source": "text_data\\common-tools.txt:731", "target": "heres"}, {"type": "contains", "source": "text_data\\common-tools.txt:732", "target": "agent"}, {"type": "contains", "source": "text_data\\common-tools.txt:732", "target": "import"}, {"type": "contains", "source": "text_data\\common-tools.txt:732", "target": "animated"}, {"type": "contains", "source": "text_data\\common-tools.txt:732", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\common-tools.txt:732", "target": "pydanticaicommontoolsduckduckgo"}, {"type": "contains", "source": "text_data\\common-tools.txt:733", "target": "animated"}, {"type": "contains", "source": "text_data\\common-tools.txt:733", "target": "highestgrossing"}, {"type": "contains", "source": "text_data\\common-tools.txt:733", "target": "example"}, {"type": "contains", "source": "text_data\\common-tools.txt:733", "target": "records"}, {"type": "contains", "source": "text_data\\common-tools.txt:733", "target": "article"}, {"type": "contains", "source": "text_data\\common-tools.txt:734", "target": "films"}, {"type": "contains", "source": "text_data\\common-tools.txt:734", "target": "animated"}, {"type": "contains", "source": "text_data\\common-tools.txt:734", "target": "begun"}, {"type": "contains", "source": "text_data\\common-tools.txt:734", "target": "although"}, {"type": "contains", "source": "text_data\\common-tools.txt:734", "target": "boxoffice"}, {"type": "contains", "source": "text_data\\common-tools.txt:735", "target": "films"}, {"type": "contains", "source": "text_data\\common-tools.txt:735", "target": "animated"}, {"type": "contains", "source": "text_data\\common-tools.txt:735", "target": "inside"}, {"type": "contains", "source": "text_data\\common-tools.txt:735", "target": "outlets"}, {"type": "contains", "source": "text_data\\common-tools.txt:735", "target": "reporting"}, {"type": "contains", "source": "text_data\\common-tools.txt:736", "target": "updated"}, {"type": "contains", "source": "text_data\\common-tools.txt:736", "target": "source"}, {"type": "contains", "source": "text_data\\common-tools.txt:736", "target": "youre"}, {"type": "contains", "source": "text_data\\common-tools.txt:736", "target": "looking"}, {"type": "contains", "source": "text_data\\common-tools.txt:736", "target": "final"}, {"type": "contains", "source": "text_data\\common-tools.txt:737", "target": "tavily"}, {"type": "contains", "source": "text_data\\common-tools.txt:737", "target": "search"}, {"type": "contains", "source": "text_data\\common-tools.txt:737", "target": "install"}, {"type": "contains", "source": "text_data\\common-tools.txt:737", "target": "pydanticaislimtavily"}, {"type": "contains", "source": "text_data\\common-tools.txt:737", "target": "service"}, {"type": "contains", "source": "text_data\\common-tools.txt:738", "target": "import"}, {"type": "contains", "source": "text_data\\common-tools.txt:738", "target": "agent"}, {"type": "contains", "source": "text_data\\common-tools.txt:738", "target": "genai"}, {"type": "contains", "source": "text_data\\common-tools.txt:738", "target": "apikey"}, {"type": "contains", "source": "text_data\\common-tools.txt:738", "target": "pydanticaiagent"}, {"type": "contains", "source": "text_data\\common-tools.txt:739", "target": "public"}, {"type": "contains", "source": "text_data\\common-tools.txt:739", "target": "telus"}, {"type": "contains", "source": "text_data\\common-tools.txt:739", "target": "digital"}, {"type": "contains", "source": "text_data\\common-tools.txt:739", "target": "survey"}, {"type": "contains", "source": "text_data\\common-tools.txt:739", "target": "enterprise"}, {"type": "contains", "source": "text_data\\common-tools.txt:740", "target": "guide"}, {"type": "contains", "source": "text_data\\common-tools.txt:740", "target": "provides"}, {"type": "contains", "source": "text_data\\common-tools.txt:740", "target": "insights"}, {"type": "contains", "source": "text_data\\common-tools.txt:740", "target": "genai"}, {"type": "contains", "source": "text_data\\common-tools.txt:740", "target": "revolutionizing"}, {"type": "contains", "source": "text_data\\common-tools.txt:741", "target": "pydantic"}, {"type": "contains", "source": "text_data\\common-tools.txt:741", "target": "services"}, {"type": "contains", "source": "text_data\\common-tools.txt:741", "target": "present"}, {"type": "contains", "source": "text_data\\common_tools.txt:741", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\common_tools.txt:741", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\common_tools.txt:741", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\common_tools.txt:741", "target": "v0050"}, {"type": "contains", "source": "text_data\\common_tools.txt:741", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\common_tools.txt:742", "target": "tools"}, {"type": "contains", "source": "text_data\\common_tools.txt:742", "target": "contributing"}, {"type": "contains", "source": "text_data\\common_tools.txt:742", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\common_tools.txt:742", "target": "documentation"}, {"type": "contains", "source": "text_data\\common_tools.txt:742", "target": "agents"}, {"type": "contains", "source": "text_data\\common_tools.txt:743", "target": "input"}, {"type": "contains", "source": "text_data\\common_tools.txt:743", "target": "image"}, {"type": "contains", "source": "text_data\\common_tools.txt:743", "target": "audio"}, {"type": "contains", "source": "text_data\\common_tools.txt:743", "target": "document"}, {"type": "contains", "source": "text_data\\common_tools.txt:744", "target": "examples"}, {"type": "contains", "source": "text_data\\common_tools.txt:744", "target": "client"}, {"type": "contains", "source": "text_data\\common_tools.txt:744", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\common_tools.txt:744", "target": "server"}, {"type": "contains", "source": "text_data\\common_tools.txt:744", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\common_tools.txt:745", "target": "agent"}, {"type": "contains", "source": "text_data\\common_tools.txt:745", "target": "stream"}, {"type": "contains", "source": "text_data\\common_tools.txt:745", "target": "reference"}, {"type": "contains", "source": "text_data\\common_tools.txt:745", "target": "pydanticaicommontools"}, {"type": "contains", "source": "text_data\\common_tools.txt:745", "target": "pydantic"}, {"type": "contains", "source": "text_data\\common_tools.txt:746", "target": "duckduckgo"}, {"type": "contains", "source": "text_data\\common_tools.txt:746", "target": "duckduckgosearchtool"}, {"type": "contains", "source": "text_data\\common_tools.txt:746", "target": "tavily"}, {"type": "contains", "source": "text_data\\common_tools.txt:746", "target": "tavilysearchtool"}, {"type": "contains", "source": "text_data\\common_tools.txt:746", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\common_tools.txt:747", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\common_tools.txt:747", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\common_tools.txt:747", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\common_tools.txt:747", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\common_tools.txt:747", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\common_tools.txt:748", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\common_tools.txt:748", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\common_tools.txt:748", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\common_tools.txt:748", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\common_tools.txt:748", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\common_tools.txt:749", "target": "duckduckgosearchtool"}, {"type": "contains", "source": "text_data\\common_tools.txt:749", "target": "duckduckgo"}, {"type": "contains", "source": "text_data\\common_tools.txt:749", "target": "table"}, {"type": "contains", "source": "text_data\\common_tools.txt:749", "target": "contents"}, {"type": "contains", "source": "text_data\\common_tools.txt:749", "target": "tavily"}, {"type": "contains", "source": "text_data\\common_tools.txt:750", "target": "duckduckgo"}, {"type": "contains", "source": "text_data\\common_tools.txt:750", "target": "search"}, {"type": "contains", "source": "text_data\\common_tools.txt:750", "target": "results"}, {"type": "contains", "source": "text_data\\common_tools.txt:750", "target": "creates"}, {"type": "contains", "source": "text_data\\common_tools.txt:750", "target": "parameters"}, {"type": "contains", "source": "text_data\\common_tools.txt:751", "target": "duckduckgo"}, {"type": "contains", "source": "text_data\\common_tools.txt:751", "target": "results"}, {"type": "contains", "source": "text_data\\common_tools.txt:751", "target": "maxresults"}, {"type": "contains", "source": "text_data\\common_tools.txt:751", "target": "search"}, {"type": "contains", "source": "text_data\\common_tools.txt:751", "target": "returns"}, {"type": "contains", "source": "text_data\\common_tools.txt:752", "target": "tavily"}, {"type": "contains", "source": "text_data\\common_tools.txt:752", "target": "creates"}, {"type": "contains", "source": "text_data\\common_tools.txt:752", "target": "search"}, {"type": "contains", "source": "text_data\\common_tools.txt:752", "target": "parameters"}, {"type": "contains", "source": "text_data\\common_tools.txt:752", "target": "description"}, {"type": "contains", "source": "text_data\\common_tools.txt:753", "target": "tavily"}, {"type": "contains", "source": "text_data\\common_tools.txt:753", "target": "tavilysearchtoolapikey"}, {"type": "contains", "source": "text_data\\common_tools.txt:753", "target": "creates"}, {"type": "contains", "source": "text_data\\common_tools.txt:753", "target": "search"}, {"type": "contains", "source": "text_data\\common_tools.txt:753", "target": "apikey"}, {"type": "contains", "source": "text_data\\contributing.txt:753", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\contributing.txt:753", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\contributing.txt:753", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\contributing.txt:753", "target": "v0050"}, {"type": "contains", "source": "text_data\\contributing.txt:753", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\contributing.txt:754", "target": "documentation"}, {"type": "contains", "source": "text_data\\contributing.txt:754", "target": "models"}, {"type": "contains", "source": "text_data\\contributing.txt:754", "target": "tools"}, {"type": "contains", "source": "text_data\\contributing.txt:754", "target": "installation"}, {"type": "contains", "source": "text_data\\contributing.txt:754", "target": "contributing"}, {"type": "contains", "source": "text_data\\contributing.txt:755", "target": "evals"}, {"type": "contains", "source": "text_data\\contributing.txt:755", "target": "input"}, {"type": "contains", "source": "text_data\\contributing.txt:755", "target": "multiagent"}, {"type": "contains", "source": "text_data\\contributing.txt:755", "target": "applications"}, {"type": "contains", "source": "text_data\\contributing.txt:755", "target": "multiagentapplications"}, {"type": "contains", "source": "text_data\\contributing.txt:756", "target": "examples"}, {"type": "contains", "source": "text_data\\contributing.txt:756", "target": "client"}, {"type": "contains", "source": "text_data\\contributing.txt:756", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\contributing.txt:756", "target": "server"}, {"type": "contains", "source": "text_data\\contributing.txt:756", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\contributing.txt:757", "target": "stream"}, {"type": "contains", "source": "text_data\\contributing.txt:757", "target": "reference"}, {"type": "contains", "source": "text_data\\contributing.txt:757", "target": "pydantic"}, {"type": "contains", "source": "text_data\\contributing.txt:757", "target": "model"}, {"type": "contains", "source": "text_data\\contributing.txt:757", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\contributing.txt:758", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\contributing.txt:758", "target": "apimessages"}, {"type": "contains", "source": "text_data\\contributing.txt:758", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\contributing.txt:758", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\contributing.txt:758", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\contributing.txt:759", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\contributing.txt:759", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\contributing.txt:759", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\contributing.txt:759", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\contributing.txt:759", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\contributing.txt:760", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\contributing.txt:760", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\contributing.txt:760", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\contributing.txt:760", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\contributing.txt:760", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\contributing.txt:761", "target": "install"}, {"type": "contains", "source": "text_data\\contributing.txt:761", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\contributing.txt:761", "target": "precommit"}, {"type": "contains", "source": "text_data\\contributing.txt:761", "target": "installation"}, {"type": "contains", "source": "text_data\\contributing.txt:761", "target": "setup"}, {"type": "contains", "source": "text_data\\contributing.txt:762", "target": "install"}, {"type": "contains", "source": "text_data\\contributing.txt:762", "target": "precommit"}, {"type": "contains", "source": "text_data\\contributing.txt:762", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\contributing.txt:762", "target": "tests"}, {"type": "contains", "source": "text_data\\contributing.txt:762", "target": "commands"}, {"type": "contains", "source": "text_data\\contributing.txt:763", "target": "rules"}, {"type": "contains", "source": "text_data\\contributing.txt:763", "target": "models"}, {"type": "contains", "source": "text_data\\contributing.txt:763", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\contributing.txt:763", "target": "accept"}, {"type": "contains", "source": "text_data\\contributing.txt:763", "target": "adding"}, {"type": "contains", "source": "text_data\\contributing.txt:764", "target": "model"}, {"type": "contains", "source": "text_data\\contributing.txt:764", "target": "extra"}, {"type": "contains", "source": "text_data\\contributing.txt:764", "target": "dependency"}, {"type": "contains", "source": "text_data\\contributing.txt:764", "target": "needs"}, {"type": "contains", "source": "text_data\\contributing.txt:764", "target": "which"}, {"type": "contains", "source": "text_data\\contributing.txt:765", "target": "youre"}, {"type": "contains", "source": "text_data\\contributing.txt:765", "target": "unsure"}, {"type": "contains", "source": "text_data\\contributing.txt:765", "target": "about"}, {"type": "contains", "source": "text_data\\contributing.txt:765", "target": "adding"}, {"type": "contains", "source": "text_data\\contributing.txt:765", "target": "model"}, {"type": "contains", "source": "text_data\\dataset.txt:765", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\dataset.txt:765", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\dataset.txt:765", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\dataset.txt:765", "target": "v0050"}, {"type": "contains", "source": "text_data\\dataset.txt:765", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\dataset.txt:766", "target": "tools"}, {"type": "contains", "source": "text_data\\dataset.txt:766", "target": "contributing"}, {"type": "contains", "source": "text_data\\dataset.txt:766", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\dataset.txt:766", "target": "documentation"}, {"type": "contains", "source": "text_data\\dataset.txt:766", "target": "agents"}, {"type": "contains", "source": "text_data\\dataset.txt:767", "target": "evals"}, {"type": "contains", "source": "text_data\\dataset.txt:767", "target": "input"}, {"type": "contains", "source": "text_data\\dataset.txt:767", "target": "graphs"}, {"type": "contains", "source": "text_data\\dataset.txt:767", "target": "graph"}, {"type": "contains", "source": "text_data\\dataset.txt:767", "target": "image"}, {"type": "contains", "source": "text_data\\dataset.txt:768", "target": "examples"}, {"type": "contains", "source": "text_data\\dataset.txt:768", "target": "client"}, {"type": "contains", "source": "text_data\\dataset.txt:768", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\dataset.txt:768", "target": "server"}, {"type": "contains", "source": "text_data\\dataset.txt:768", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\dataset.txt:769", "target": "agent"}, {"type": "contains", "source": "text_data\\dataset.txt:769", "target": "stream"}, {"type": "contains", "source": "text_data\\dataset.txt:769", "target": "reference"}, {"type": "contains", "source": "text_data\\dataset.txt:769", "target": "pydantic"}, {"type": "contains", "source": "text_data\\dataset.txt:769", "target": "model"}, {"type": "contains", "source": "text_data\\dataset.txt:770", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\dataset.txt:770", "target": "result"}, {"type": "contains", "source": "text_data\\dataset.txt:770", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\dataset.txt:770", "target": "messages"}, {"type": "contains", "source": "text_data\\dataset.txt:770", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\dataset.txt:771", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\dataset.txt:771", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\dataset.txt:771", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\dataset.txt:771", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\dataset.txt:771", "target": "modelsgroq"}, {"type": "contains", "source": "text_data\\dataset.txt:772", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:772", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\dataset.txt:772", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\dataset.txt:772", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\dataset.txt:772", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:773", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:773", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:773", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\dataset.txt:773", "target": "reporting"}, {"type": "contains", "source": "text_data\\dataset.txt:773", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\dataset.txt:774", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:774", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:774", "target": "inputs"}, {"type": "contains", "source": "text_data\\dataset.txt:774", "target": "metadata"}, {"type": "contains", "source": "text_data\\dataset.txt:774", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:775", "target": "against"}, {"type": "contains", "source": "text_data\\dataset.txt:775", "target": "single"}, {"type": "contains", "source": "text_data\\dataset.txt:775", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:775", "target": "datasets"}, {"type": "contains", "source": "text_data\\dataset.txt:775", "target": "loaded"}, {"type": "contains", "source": "text_data\\dataset.txt:776", "target": "addition"}, {"type": "contains", "source": "text_data\\dataset.txt:776", "target": "example"}, {"type": "contains", "source": "text_data\\dataset.txt:776", "target": "pydanticevals"}, {"type": "contains", "source": "text_data\\dataset.txt:776", "target": "import"}, {"type": "contains", "source": "text_data\\dataset.txt:776", "target": "namesimple"}, {"type": "contains", "source": "text_data\\dataset.txt:777", "target": "source"}, {"type": "contains", "source": "text_data\\dataset.txt:777", "target": "pydanticevalspydanticevalsdatasetpy"}, {"type": "contains", "source": "text_data\\dataset.txt:778", "target": "addition"}, {"type": "contains", "source": "text_data\\dataset.txt:778", "target": "single"}, {"type": "contains", "source": "text_data\\dataset.txt:778", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:778", "target": "dataclassinitfalse"}, {"type": "contains", "source": "text_data\\dataset.txt:778", "target": "class"}, {"type": "contains", "source": "text_data\\dataset.txt:779", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:779", "target": "inputs"}, {"type": "contains", "source": "text_data\\dataset.txt:779", "target": "evaluated"}, {"type": "contains", "source": "text_data\\dataset.txt:779", "target": "metadata"}, {"type": "contains", "source": "text_data\\dataset.txt:779", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:780", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:780", "target": "inputs"}, {"type": "contains", "source": "text_data\\dataset.txt:780", "target": "metadata"}, {"type": "contains", "source": "text_data\\dataset.txt:780", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:780", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:781", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:781", "target": "expectedoutput"}, {"type": "contains", "source": "text_data\\dataset.txt:781", "target": "tuple"}, {"type": "contains", "source": "text_data\\dataset.txt:781", "target": "sequence"}, {"type": "contains", "source": "text_data\\dataset.txt:781", "target": "optional"}, {"type": "contains", "source": "text_data\\dataset.txt:782", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:782", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:782", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:782", "target": "inputs"}, {"type": "contains", "source": "text_data\\dataset.txt:782", "target": "inputst"}, {"type": "contains", "source": "text_data\\dataset.txt:783", "target": "optional"}, {"type": "contains", "source": "text_data\\dataset.txt:783", "target": "inputs"}, {"type": "contains", "source": "text_data\\dataset.txt:783", "target": "metadata"}, {"type": "contains", "source": "text_data\\dataset.txt:783", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:783", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:784", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:784", "target": "tuplehttpsdocspythonorg3librarystdtypeshtmltupleevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:784", "target": "pydanticevalsevaluatorsevaluatorinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:784", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:784", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:786", "target": "inputs"}, {"type": "contains", "source": "text_data\\dataset.txt:786", "target": "metadata"}, {"type": "contains", "source": "text_data\\dataset.txt:786", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:786", "target": "optional"}, {"type": "contains", "source": "text_data\\dataset.txt:786", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:787", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:787", "target": "tuple"}, {"type": "contains", "source": "text_data\\dataset.txt:787", "target": "sequence"}, {"type": "contains", "source": "text_data\\dataset.txt:787", "target": "specific"}, {"type": "contains", "source": "text_data\\dataset.txt:787", "target": "these"}, {"type": "contains", "source": "text_data\\dataset.txt:788", "target": "inputs"}, {"type": "contains", "source": "text_data\\dataset.txt:788", "target": "metadata"}, {"type": "contains", "source": "text_data\\dataset.txt:788", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\dataset.txt:788", "target": "expectedoutput"}, {"type": "contains", "source": "text_data\\dataset.txt:788", "target": "classattribute"}, {"type": "contains", "source": "text_data\\dataset.txt:789", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:789", "target": "expectedoutput"}, {"type": "contains", "source": "text_data\\dataset.txt:789", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:789", "target": "expected"}, {"type": "contains", "source": "text_data\\dataset.txt:789", "target": "output"}, {"type": "contains", "source": "text_data\\dataset.txt:790", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:790", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:790", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:790", "target": "bases"}, {"type": "contains", "source": "text_data\\dataset.txt:790", "target": "basemodelhttpsdocspydanticdevlatestapibasemodelpydanticbasemodel"}, {"type": "contains", "source": "text_data\\dataset.txt:791", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:791", "target": "import"}, {"type": "contains", "source": "text_data\\dataset.txt:791", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:791", "target": "dataclass"}, {"type": "contains", "source": "text_data\\dataset.txt:791", "target": "evaluatorcontext"}, {"type": "contains", "source": "text_data\\dataset.txt:792", "target": "return"}, {"type": "contains", "source": "text_data\\dataset.txt:792", "target": "inputstextupper"}, {"type": "contains", "source": "text_data\\dataset.txt:792", "target": "async"}, {"type": "contains", "source": "text_data\\dataset.txt:792", "target": "report"}, {"type": "contains", "source": "text_data\\dataset.txt:792", "target": "await"}, {"type": "contains", "source": "text_data\\dataset.txt:793", "target": "source"}, {"type": "contains", "source": "text_data\\dataset.txt:793", "target": "pydanticevalspydanticevalsdatasetpy"}, {"type": "contains", "source": "text_data\\dataset.txt:801", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:801", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:801", "target": "import"}, {"type": "contains", "source": "text_data\\dataset.txt:801", "target": "class"}, {"type": "contains", "source": "text_data\\dataset.txt:801", "target": "dataclass"}, {"type": "contains", "source": "text_data\\dataset.txt:802", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:802", "target": "return"}, {"type": "contains", "source": "text_data\\dataset.txt:802", "target": "inputstext"}, {"type": "contains", "source": "text_data\\dataset.txt:802", "target": "async"}, {"type": "contains", "source": "text_data\\dataset.txt:802", "target": "dataclass"}, {"type": "contains", "source": "text_data\\dataset.txt:803", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:803", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:803", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:803", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:803", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:804", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:804", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:804", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:804", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:804", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:805", "target": "maxconcurrency"}, {"type": "contains", "source": "text_data\\dataset.txt:805", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:805", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:805", "target": "raise"}, {"type": "contains", "source": "text_data\\dataset.txt:805", "target": "valueerrorfduplicate"}, {"type": "contains", "source": "text_data\\dataset.txt:806", "target": "returns"}, {"type": "contains", "source": "text_data\\dataset.txt:806", "target": "evaluated"}, {"type": "contains", "source": "text_data\\dataset.txt:806", "target": "report"}, {"type": "contains", "source": "text_data\\dataset.txt:806", "target": "evaluate"}, {"type": "contains", "source": "text_data\\dataset.txt:806", "target": "should"}, {"type": "contains", "source": "text_data\\dataset.txt:807", "target": "limiter"}, {"type": "contains", "source": "text_data\\dataset.txt:807", "target": "namename"}, {"type": "contains", "source": "text_data\\dataset.txt:807", "target": "async"}, {"type": "contains", "source": "text_data\\dataset.txt:807", "target": "handlecasecase"}, {"type": "contains", "source": "text_data\\dataset.txt:807", "target": "reportcasename"}, {"type": "contains", "source": "text_data\\dataset.txt:808", "target": "tododavidm"}, {"type": "contains", "source": "text_data\\dataset.txt:808", "target": "attribute"}, {"type": "contains", "source": "text_data\\dataset.txt:808", "target": "remove"}, {"type": "contains", "source": "text_data\\dataset.txt:808", "target": "details"}, {"type": "contains", "source": "text_data\\dataset.txt:808", "target": "panel"}, {"type": "contains", "source": "text_data\\dataset.txt:809", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:809", "target": "evaluated"}, {"type": "contains", "source": "text_data\\dataset.txt:809", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\dataset.txt:809", "target": "pragma"}, {"type": "contains", "source": "text_data\\dataset.txt:809", "target": "cover"}, {"type": "contains", "source": "text_data\\dataset.txt:810", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:810", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:810", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:810", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:810", "target": "evaluated"}, {"type": "contains", "source": "text_data\\dataset.txt:811", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:811", "target": "optional"}, {"type": "contains", "source": "text_data\\dataset.txt:811", "target": "inputs"}, {"type": "contains", "source": "text_data\\dataset.txt:811", "target": "metadata"}, {"type": "contains", "source": "text_data\\dataset.txt:811", "target": "provided"}, {"type": "contains", "source": "text_data\\dataset.txt:812", "target": "evaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:812", "target": "specificcase"}, {"type": "contains", "source": "text_data\\dataset.txt:812", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:812", "target": "added"}, {"type": "contains", "source": "text_data\\dataset.txt:812", "target": "inputsinputs"}, {"type": "contains", "source": "text_data\\dataset.txt:813", "target": "specificcase"}, {"type": "contains", "source": "text_data\\dataset.txt:813", "target": "added"}, {"type": "contains", "source": "text_data\\dataset.txt:813", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:813", "target": "raises"}, {"type": "contains", "source": "text_data\\dataset.txt:813", "target": "valueerror"}, {"type": "contains", "source": "text_data\\dataset.txt:814", "target": "parameters"}, {"type": "contains", "source": "text_data\\dataset.txt:814", "target": "getattrc"}, {"type": "contains", "source": "text_data\\dataset.txt:814", "target": "classmethod"}, {"type": "contains", "source": "text_data\\dataset.txt:814", "target": "functoolscache"}, {"type": "contains", "source": "text_data\\dataset.txt:814", "target": "paramscls"}, {"type": "contains", "source": "text_data\\dataset.txt:815", "target": "format"}, {"type": "contains", "source": "text_data\\dataset.txt:815", "target": "should"}, {"type": "contains", "source": "text_data\\dataset.txt:815", "target": "explicitly"}, {"type": "contains", "source": "text_data\\dataset.txt:815", "target": "generic"}, {"type": "contains", "source": "text_data\\dataset.txt:815", "target": "parameters"}, {"type": "contains", "source": "text_data\\dataset.txt:816", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:816", "target": "cannot"}, {"type": "contains", "source": "text_data\\dataset.txt:816", "target": "either"}, {"type": "contains", "source": "text_data\\dataset.txt:816", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:816", "target": "custom"}, {"type": "contains", "source": "text_data\\dataset.txt:817", "target": "contents"}, {"type": "contains", "source": "text_data\\dataset.txt:817", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:817", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:817", "target": "string"}, {"type": "contains", "source": "text_data\\dataset.txt:817", "target": "content"}, {"type": "contains", "source": "text_data\\dataset.txt:818", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:818", "target": "parsed"}, {"type": "contains", "source": "text_data\\dataset.txt:818", "target": "return"}, {"type": "contains", "source": "text_data\\dataset.txt:818", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:818", "target": "these"}, {"type": "contains", "source": "text_data\\dataset.txt:819", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:819", "target": "dictionary"}, {"type": "contains", "source": "text_data\\dataset.txt:819", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:819", "target": "fromdict"}, {"type": "contains", "source": "text_data\\dataset.txt:819", "target": "dictstr"}, {"type": "contains", "source": "text_data\\dataset.txt:820", "target": "datasetmodel"}, {"type": "contains", "source": "text_data\\dataset.txt:820", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:820", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:820", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:820", "target": "datasetmodeltype"}, {"type": "contains", "source": "text_data\\dataset.txt:821", "target": "listevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:821", "target": "returns"}, {"type": "contains", "source": "text_data\\dataset.txt:821", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:821", "target": "instance"}, {"type": "contains", "source": "text_data\\dataset.txt:821", "target": "created"}, {"type": "contains", "source": "text_data\\dataset.txt:822", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:822", "target": "rowevaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:822", "target": "listevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:822", "target": "evaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:822", "target": "loadevaluatorfromregistryregistry"}, {"type": "contains", "source": "text_data\\dataset.txt:823", "target": "errors"}, {"type": "contains", "source": "text_data\\dataset.txt:823", "target": "result"}, {"type": "contains", "source": "text_data\\dataset.txt:823", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:823", "target": "casesappendrow"}, {"type": "contains", "source": "text_data\\dataset.txt:823", "target": "raise"}, {"type": "contains", "source": "text_data\\dataset.txt:824", "target": "schema"}, {"type": "contains", "source": "text_data\\dataset.txt:824", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:824", "target": "format"}, {"type": "contains", "source": "text_data\\dataset.txt:824", "target": "schemapath"}, {"type": "contains", "source": "text_data\\dataset.txt:824", "target": "inferred"}, {"type": "contains", "source": "text_data\\dataset.txt:825", "target": "schemapath"}, {"type": "contains", "source": "text_data\\dataset.txt:825", "target": "schemaref"}, {"type": "contains", "source": "text_data\\dataset.txt:825", "target": "strschemapath"}, {"type": "contains", "source": "text_data\\dataset.txt:825", "target": "pragma"}, {"type": "contains", "source": "text_data\\dataset.txt:825", "target": "cover"}, {"type": "contains", "source": "text_data\\dataset.txt:826", "target": "byaliastrue"}, {"type": "contains", "source": "text_data\\dataset.txt:826", "target": "excludedefaultstrue"}, {"type": "contains", "source": "text_data\\dataset.txt:826", "target": "contextcontext"}, {"type": "contains", "source": "text_data\\dataset.txt:826", "target": "content"}, {"type": "contains", "source": "text_data\\dataset.txt:826", "target": "schemaref"}, {"type": "contains", "source": "text_data\\dataset.txt:827", "target": "schema"}, {"type": "contains", "source": "text_data\\dataset.txt:827", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:827", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:827", "target": "evaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:827", "target": "modeljsonschemawithevaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:828", "target": "typehintspname"}, {"type": "contains", "source": "text_data\\dataset.txt:828", "target": "registry"}, {"type": "contains", "source": "text_data\\dataset.txt:828", "target": "getregistrycustomevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:828", "target": "evaluatorschematypes"}, {"type": "contains", "source": "text_data\\dataset.txt:828", "target": "listany"}, {"type": "contains", "source": "text_data\\dataset.txt:829", "target": "fields"}, {"type": "contains", "source": "text_data\\dataset.txt:829", "target": "pyright"}, {"type": "contains", "source": "text_data\\dataset.txt:829", "target": "config"}, {"type": "contains", "source": "text_data\\dataset.txt:829", "target": "requiredtypehintspname"}, {"type": "contains", "source": "text_data\\dataset.txt:829", "target": "typehintspname"}, {"type": "contains", "source": "text_data\\dataset.txt:830", "target": "typehinttype"}, {"type": "contains", "source": "text_data\\dataset.txt:830", "target": "lentypehints"}, {"type": "contains", "source": "text_data\\dataset.txt:830", "target": "evaluatorschematypesappendmaketypeddictshortevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:830", "target": "evaluatorschematypesappendliteralname"}, {"type": "contains", "source": "text_data\\dataset.txt:830", "target": "short"}, {"type": "contains", "source": "text_data\\dataset.txt:831", "target": "pyright"}, {"type": "contains", "source": "text_data\\dataset.txt:831", "target": "intype"}, {"type": "contains", "source": "text_data\\dataset.txt:831", "target": "outtype"}, {"type": "contains", "source": "text_data\\dataset.txt:831", "target": "metatype"}, {"type": "contains", "source": "text_data\\dataset.txt:831", "target": "class"}, {"type": "contains", "source": "text_data\\dataset.txt:832", "target": "evaluatorschematypes"}, {"type": "contains", "source": "text_data\\dataset.txt:832", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:832", "target": "listuniontupleevaluatorschematypes"}, {"type": "contains", "source": "text_data\\dataset.txt:832", "target": "pyright"}, {"type": "contains", "source": "text_data\\dataset.txt:832", "target": "ignore"}, {"type": "contains", "source": "text_data\\dataset.txt:833", "target": "schema"}, {"type": "contains", "source": "text_data\\dataset.txt:833", "target": "classmethod"}, {"type": "contains", "source": "text_data\\dataset.txt:833", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:833", "target": "schemacontent"}, {"type": "contains", "source": "text_data\\dataset.txt:833", "target": "saveschema"}, {"type": "contains", "source": "text_data\\dataset.txt:834", "target": "classmethod"}, {"type": "contains", "source": "text_data\\dataset.txt:834", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:834", "target": "class"}, {"type": "contains", "source": "text_data\\dataset.txt:834", "target": "outputtype"}, {"type": "contains", "source": "text_data\\dataset.txt:834", "target": "metadatatype"}, {"type": "contains", "source": "text_data\\dataset.txt:835", "target": "format"}, {"type": "contains", "source": "text_data\\dataset.txt:835", "target": "return"}, {"type": "contains", "source": "text_data\\dataset.txt:835", "target": "suffix"}, {"type": "contains", "source": "text_data\\dataset.txt:835", "target": "infer"}, {"type": "contains", "source": "text_data\\dataset.txt:835", "target": "inferred"}, {"type": "contains", "source": "text_data\\dataset.txt:836", "target": "schema"}, {"type": "contains", "source": "text_data\\dataset.txt:836", "target": "context"}, {"type": "contains", "source": "text_data\\dataset.txt:836", "target": "return"}, {"type": "contains", "source": "text_data\\dataset.txt:836", "target": "nxtself"}, {"type": "contains", "source": "text_data\\dataset.txt:836", "target": "modelserializermodewrap"}, {"type": "contains", "source": "text_data\\dataset.txt:837", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:837", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:837", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:837", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:837", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:838", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:838", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:838", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:838", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\dataset.txt:838", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:839", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:839", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:839", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:839", "target": "optional"}, {"type": "contains", "source": "text_data\\dataset.txt:839", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\dataset.txt:841", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:841", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:841", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:841", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:841", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:842", "target": "superinit"}, {"type": "contains", "source": "text_data\\dataset.txt:842", "target": "casescases"}, {"type": "contains", "source": "text_data\\dataset.txt:842", "target": "evaluatorslistevaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:842", "target": "evaluate"}, {"type": "contains", "source": "text_data\\dataset.txt:842", "target": "async"}, {"type": "contains", "source": "text_data\\dataset.txt:843", "target": "evaluate"}, {"type": "contains", "source": "text_data\\dataset.txt:843", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\dataset.txt:843", "target": "typingcallableinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:843", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\dataset.txt:843", "target": "collectionsabcawaitableoutputt"}, {"type": "contains", "source": "text_data\\dataset.txt:844", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:844", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:844", "target": "evaluates"}, {"type": "contains", "source": "text_data\\dataset.txt:844", "target": "using"}, {"type": "contains", "source": "text_data\\dataset.txt:844", "target": "given"}, {"type": "contains", "source": "text_data\\dataset.txt:845", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:845", "target": "default"}, {"type": "contains", "source": "text_data\\dataset.txt:845", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\dataset.txt:845", "target": "typingcallableinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:845", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\dataset.txt:846", "target": "maxconcurrency"}, {"type": "contains", "source": "text_data\\dataset.txt:846", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\dataset.txt:846", "target": "maximum"}, {"type": "contains", "source": "text_data\\dataset.txt:846", "target": "number"}, {"type": "contains", "source": "text_data\\dataset.txt:846", "target": "concurrent"}, {"type": "contains", "source": "text_data\\dataset.txt:847", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:847", "target": "evaluationreportreportingpydanticevalsreportingevaluationreport"}, {"type": "contains", "source": "text_data\\dataset.txt:847", "target": "pydanticevalsreportingevaluationreport"}, {"type": "contains", "source": "text_data\\dataset.txt:847", "target": "report"}, {"type": "contains", "source": "text_data\\dataset.txt:847", "target": "containing"}, {"type": "contains", "source": "text_data\\dataset.txt:848", "target": "evaluate"}, {"type": "contains", "source": "text_data\\dataset.txt:848", "target": "maxconcurrency"}, {"type": "contains", "source": "text_data\\dataset.txt:848", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:848", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:848", "target": "report"}, {"type": "contains", "source": "text_data\\dataset.txt:849", "target": "maxconcurrency"}, {"type": "contains", "source": "text_data\\dataset.txt:849", "target": "limiter"}, {"type": "contains", "source": "text_data\\dataset.txt:849", "target": "async"}, {"type": "contains", "source": "text_data\\dataset.txt:849", "target": "omitted"}, {"type": "contains", "source": "text_data\\dataset.txt:849", "target": "function"}, {"type": "contains", "source": "text_data\\dataset.txt:850", "target": "tododavidm"}, {"type": "contains", "source": "text_data\\dataset.txt:850", "target": "attribute"}, {"type": "contains", "source": "text_data\\dataset.txt:850", "target": "remove"}, {"type": "contains", "source": "text_data\\dataset.txt:850", "target": "details"}, {"type": "contains", "source": "text_data\\dataset.txt:850", "target": "panel"}, {"type": "contains", "source": "text_data\\dataset.txt:851", "target": "evalspansetattributeaverages"}, {"type": "contains", "source": "text_data\\dataset.txt:851", "target": "reportaverages"}, {"type": "contains", "source": "text_data\\dataset.txt:851", "target": "return"}, {"type": "contains", "source": "text_data\\dataset.txt:851", "target": "report"}, {"type": "contains", "source": "text_data\\dataset.txt:851", "target": "evaluatesync"}, {"type": "contains", "source": "text_data\\dataset.txt:852", "target": "evaluatesync"}, {"type": "contains", "source": "text_data\\dataset.txt:852", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\dataset.txt:852", "target": "typingcallableinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:852", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\dataset.txt:852", "target": "collectionsabcawaitableoutputt"}, {"type": "contains", "source": "text_data\\dataset.txt:853", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:853", "target": "default"}, {"type": "contains", "source": "text_data\\dataset.txt:853", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\dataset.txt:853", "target": "typingcallableinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:853", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\dataset.txt:854", "target": "maxconcurrency"}, {"type": "contains", "source": "text_data\\dataset.txt:854", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\dataset.txt:854", "target": "maximum"}, {"type": "contains", "source": "text_data\\dataset.txt:854", "target": "number"}, {"type": "contains", "source": "text_data\\dataset.txt:854", "target": "concurrent"}, {"type": "contains", "source": "text_data\\dataset.txt:855", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:855", "target": "evaluationreportreportingpydanticevalsreportingevaluationreport"}, {"type": "contains", "source": "text_data\\dataset.txt:855", "target": "pydanticevalsreportingevaluationreport"}, {"type": "contains", "source": "text_data\\dataset.txt:855", "target": "report"}, {"type": "contains", "source": "text_data\\dataset.txt:855", "target": "containing"}, {"type": "contains", "source": "text_data\\dataset.txt:856", "target": "evaluatesync"}, {"type": "contains", "source": "text_data\\dataset.txt:856", "target": "callableinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:856", "target": "awaitableoutputt"}, {"type": "contains", "source": "text_data\\dataset.txt:856", "target": "maxconcurrency"}, {"type": "contains", "source": "text_data\\dataset.txt:856", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\dataset.txt:857", "target": "omitted"}, {"type": "contains", "source": "text_data\\dataset.txt:857", "target": "function"}, {"type": "contains", "source": "text_data\\dataset.txt:857", "target": "maxconcurrency"}, {"type": "contains", "source": "text_data\\dataset.txt:857", "target": "maximum"}, {"type": "contains", "source": "text_data\\dataset.txt:857", "target": "number"}, {"type": "contains", "source": "text_data\\dataset.txt:858", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:858", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:858", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:858", "target": "addcase"}, {"type": "contains", "source": "text_data\\dataset.txt:858", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:859", "target": "optional"}, {"type": "contains", "source": "text_data\\dataset.txt:859", "target": "inputs"}, {"type": "contains", "source": "text_data\\dataset.txt:859", "target": "metadata"}, {"type": "contains", "source": "text_data\\dataset.txt:859", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:859", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:860", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:860", "target": "tuplehttpsdocspythonorg3librarystdtypeshtmltupleevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:860", "target": "pydanticevalsevaluatorsevaluatorinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:860", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:860", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:862", "target": "inputs"}, {"type": "contains", "source": "text_data\\dataset.txt:862", "target": "metadata"}, {"type": "contains", "source": "text_data\\dataset.txt:862", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:862", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:862", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:863", "target": "evaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:863", "target": "expectedoutput"}, {"type": "contains", "source": "text_data\\dataset.txt:863", "target": "expected"}, {"type": "contains", "source": "text_data\\dataset.txt:863", "target": "output"}, {"type": "contains", "source": "text_data\\dataset.txt:863", "target": "comparison"}, {"type": "contains", "source": "text_data\\dataset.txt:864", "target": "evaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:864", "target": "addevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:864", "target": "evaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:864", "target": "pydanticevalsevaluatorsevaluatorinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:864", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:865", "target": "evaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:865", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:865", "target": "added"}, {"type": "contains", "source": "text_data\\dataset.txt:865", "target": "specific"}, {"type": "contains", "source": "text_data\\dataset.txt:865", "target": "parameters"}, {"type": "contains", "source": "text_data\\dataset.txt:866", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:866", "target": "valueerrorhttpsdocspythonorg3libraryexceptionshtmlvalueerror"}, {"type": "contains", "source": "text_data\\dataset.txt:866", "target": "specificcase"}, {"type": "contains", "source": "text_data\\dataset.txt:866", "target": "provided"}, {"type": "contains", "source": "text_data\\dataset.txt:866", "target": "exists"}, {"type": "contains", "source": "text_data\\dataset.txt:867", "target": "evaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:867", "target": "specificcase"}, {"type": "contains", "source": "text_data\\dataset.txt:867", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:867", "target": "provided"}, {"type": "contains", "source": "text_data\\dataset.txt:867", "target": "added"}, {"type": "contains", "source": "text_data\\dataset.txt:868", "target": "added"}, {"type": "contains", "source": "text_data\\dataset.txt:868", "target": "could"}, {"type": "contains", "source": "text_data\\dataset.txt:868", "target": "lookup"}, {"type": "contains", "source": "text_data\\dataset.txt:868", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:868", "target": "private"}, {"type": "contains", "source": "text_data\\dataset.txt:869", "target": "fromfile"}, {"type": "contains", "source": "text_data\\dataset.txt:869", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\dataset.txt:869", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\dataset.txt:869", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:869", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\dataset.txt:870", "target": "selfhttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionsself"}, {"type": "contains", "source": "text_data\\dataset.txt:870", "target": "typingextensionsself"}, {"type": "contains", "source": "text_data\\dataset.txt:871", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:871", "target": "parameters"}, {"type": "contains", "source": "text_data\\dataset.txt:872", "target": "format"}, {"type": "contains", "source": "text_data\\dataset.txt:872", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:872", "target": "default"}, {"type": "contains", "source": "text_data\\dataset.txt:872", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\dataset.txt:872", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\dataset.txt:873", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:873", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\dataset.txt:873", "target": "collectionsabcsequencetypehttpsdocspythonorg3libraryfunctionshtmltypeevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:873", "target": "pydanticevalsevaluatorsevaluatorinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:873", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:874", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:874", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:874", "target": "cannot"}, {"type": "contains", "source": "text_data\\dataset.txt:874", "target": "selfhttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionsself"}, {"type": "contains", "source": "text_data\\dataset.txt:874", "target": "typingextensionsself"}, {"type": "contains", "source": "text_data\\dataset.txt:875", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:875", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:875", "target": "format"}, {"type": "contains", "source": "text_data\\dataset.txt:875", "target": "classmethod"}, {"type": "contains", "source": "text_data\\dataset.txt:875", "target": "fromfile"}, {"type": "contains", "source": "text_data\\dataset.txt:876", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:876", "target": "validationerror"}, {"type": "contains", "source": "text_data\\dataset.txt:876", "target": "cannot"}, {"type": "contains", "source": "text_data\\dataset.txt:876", "target": "instance"}, {"type": "contains", "source": "text_data\\dataset.txt:876", "target": "loaded"}, {"type": "contains", "source": "text_data\\dataset.txt:877", "target": "fromtext"}, {"type": "contains", "source": "text_data\\dataset.txt:877", "target": "contents"}, {"type": "contains", "source": "text_data\\dataset.txt:877", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:877", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\dataset.txt:877", "target": "typingliteralyaml"}, {"type": "contains", "source": "text_data\\dataset.txt:878", "target": "content"}, {"type": "contains", "source": "text_data\\dataset.txt:878", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:878", "target": "default"}, {"type": "contains", "source": "text_data\\dataset.txt:878", "target": "contents"}, {"type": "contains", "source": "text_data\\dataset.txt:878", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:879", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:879", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\dataset.txt:879", "target": "collectionsabcsequencetypehttpsdocspythonorg3libraryfunctionshtmltypeevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:879", "target": "pydanticevalsevaluatorsevaluatorinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:879", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:880", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:880", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:880", "target": "parsed"}, {"type": "contains", "source": "text_data\\dataset.txt:880", "target": "selfhttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionsself"}, {"type": "contains", "source": "text_data\\dataset.txt:880", "target": "typingextensionsself"}, {"type": "contains", "source": "text_data\\dataset.txt:881", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:881", "target": "string"}, {"type": "contains", "source": "text_data\\dataset.txt:881", "target": "content"}, {"type": "contains", "source": "text_data\\dataset.txt:881", "target": "contents"}, {"type": "contains", "source": "text_data\\dataset.txt:881", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:882", "target": "return"}, {"type": "contains", "source": "text_data\\dataset.txt:882", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:882", "target": "loaded"}, {"type": "contains", "source": "text_data\\dataset.txt:882", "target": "yamlsafeloadcontents"}, {"type": "contains", "source": "text_data\\dataset.txt:882", "target": "clsfromdictloaded"}, {"type": "contains", "source": "text_data\\dataset.txt:883", "target": "fromdict"}, {"type": "contains", "source": "text_data\\dataset.txt:883", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:883", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\dataset.txt:883", "target": "typingany"}, {"type": "contains", "source": "text_data\\dataset.txt:883", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:884", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:884", "target": "default"}, {"type": "contains", "source": "text_data\\dataset.txt:884", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:884", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\dataset.txt:884", "target": "typingany"}, {"type": "contains", "source": "text_data\\dataset.txt:885", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:885", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\dataset.txt:885", "target": "collectionsabcsequencetypehttpsdocspythonorg3libraryfunctionshtmltypeevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:885", "target": "pydanticevalsevaluatorsevaluatorinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:885", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:886", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:886", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:886", "target": "dictionary"}, {"type": "contains", "source": "text_data\\dataset.txt:886", "target": "selfhttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionsself"}, {"type": "contains", "source": "text_data\\dataset.txt:886", "target": "typingextensionsself"}, {"type": "contains", "source": "text_data\\dataset.txt:887", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:887", "target": "dictionary"}, {"type": "contains", "source": "text_data\\dataset.txt:887", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:887", "target": "classmethod"}, {"type": "contains", "source": "text_data\\dataset.txt:887", "target": "fromdict"}, {"type": "contains", "source": "text_data\\dataset.txt:888", "target": "datasetmodeltype"}, {"type": "contains", "source": "text_data\\dataset.txt:888", "target": "clsserializationtype"}, {"type": "contains", "source": "text_data\\dataset.txt:888", "target": "datasetmodel"}, {"type": "contains", "source": "text_data\\dataset.txt:888", "target": "datasetmodeltypemodelvalidatedata"}, {"type": "contains", "source": "text_data\\dataset.txt:888", "target": "return"}, {"type": "contains", "source": "text_data\\dataset.txt:889", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\dataset.txt:889", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\dataset.txt:889", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:889", "target": "tofile"}, {"type": "contains", "source": "text_data\\dataset.txt:889", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\dataset.txt:890", "target": "typehttpsdocspythonorg3libraryfunctionshtmltypeevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:890", "target": "pydanticevalsevaluatorsevaluatorinputst"}, {"type": "contains", "source": "text_data\\dataset.txt:890", "target": "outputt"}, {"type": "contains", "source": "text_data\\dataset.txt:890", "target": "metadatat"}, {"type": "contains", "source": "text_data\\dataset.txt:891", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:891", "target": "parameters"}, {"type": "contains", "source": "text_data\\dataset.txt:892", "target": "format"}, {"type": "contains", "source": "text_data\\dataset.txt:892", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:892", "target": "default"}, {"type": "contains", "source": "text_data\\dataset.txt:892", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\dataset.txt:892", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\dataset.txt:893", "target": "schema"}, {"type": "contains", "source": "text_data\\dataset.txt:893", "target": "schemapath"}, {"type": "contains", "source": "text_data\\dataset.txt:893", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\dataset.txt:893", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\dataset.txt:893", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:894", "target": "source"}, {"type": "contains", "source": "text_data\\dataset.txt:894", "target": "pydanticevalspydanticevalsdatasetpy"}, {"type": "contains", "source": "text_data\\dataset.txt:896", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:896", "target": "schemapath"}, {"type": "contains", "source": "text_data\\dataset.txt:896", "target": "format"}, {"type": "contains", "source": "text_data\\dataset.txt:896", "target": "schema"}, {"type": "contains", "source": "text_data\\dataset.txt:896", "target": "tofile"}, {"type": "contains", "source": "text_data\\dataset.txt:897", "target": "schemaref"}, {"type": "contains", "source": "text_data\\dataset.txt:897", "target": "schemapath"}, {"type": "contains", "source": "text_data\\dataset.txt:897", "target": "strschemapath"}, {"type": "contains", "source": "text_data\\dataset.txt:897", "target": "pragma"}, {"type": "contains", "source": "text_data\\dataset.txt:897", "target": "cover"}, {"type": "contains", "source": "text_data\\dataset.txt:898", "target": "schemaref"}, {"type": "contains", "source": "text_data\\dataset.txt:898", "target": "byaliastrue"}, {"type": "contains", "source": "text_data\\dataset.txt:898", "target": "excludedefaultstrue"}, {"type": "contains", "source": "text_data\\dataset.txt:898", "target": "contextcontext"}, {"type": "contains", "source": "text_data\\dataset.txt:898", "target": "content"}, {"type": "contains", "source": "text_data\\dataset.txt:899", "target": "pathwritetextjsondata"}, {"type": "contains", "source": "text_data\\dataset.txt:899", "target": "modeljsonschemawithevaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:899", "target": "classmethod"}, {"type": "contains", "source": "text_data\\dataset.txt:900", "target": "modeljsonschemawithevaluators"}, {"type": "contains", "source": "text_data\\dataset.txt:900", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:900", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\dataset.txt:900", "target": "collectionsabcsequence"}, {"type": "contains", "source": "text_data\\dataset.txt:900", "target": "typehttpsdocspythonorg3libraryfunctionshtmltypeevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:901", "target": "schema"}, {"type": "contains", "source": "text_data\\dataset.txt:901", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:901", "target": "evaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:901", "target": "generate"}, {"type": "contains", "source": "text_data\\dataset.txt:901", "target": "including"}, {"type": "contains", "source": "text_data\\dataset.txt:902", "target": "description"}, {"type": "contains", "source": "text_data\\dataset.txt:902", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:902", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\dataset.txt:902", "target": "typingany"}, {"type": "contains", "source": "text_data\\dataset.txt:902", "target": "dictionary"}, {"type": "contains", "source": "text_data\\dataset.txt:904", "target": "schema"}, {"type": "contains", "source": "text_data\\dataset.txt:904", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\dataset.txt:904", "target": "dataset"}, {"type": "contains", "source": "text_data\\dataset.txt:904", "target": "evaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:904", "target": "classmethod"}, {"type": "contains", "source": "text_data\\dataset.txt:905", "target": "dictstr"}, {"type": "contains", "source": "text_data\\dataset.txt:905", "target": "typehintspname"}, {"type": "contains", "source": "text_data\\dataset.txt:905", "target": "evaluatorschematypes"}, {"type": "contains", "source": "text_data\\dataset.txt:905", "target": "listany"}, {"type": "contains", "source": "text_data\\dataset.txt:905", "target": "evaluatorclass"}, {"type": "contains", "source": "text_data\\dataset.txt:906", "target": "pyright"}, {"type": "contains", "source": "text_data\\dataset.txt:906", "target": "config"}, {"type": "contains", "source": "text_data\\dataset.txt:906", "target": "lentypehints"}, {"type": "contains", "source": "text_data\\dataset.txt:906", "target": "typeddictfclsnameprefixname"}, {"type": "contains", "source": "text_data\\dataset.txt:906", "target": "fields"}, {"type": "contains", "source": "text_data\\dataset.txt:907", "target": "typehinttype"}, {"type": "contains", "source": "text_data\\dataset.txt:907", "target": "evaluatorschematypesappendmaketypeddictshortevaluator"}, {"type": "contains", "source": "text_data\\dataset.txt:907", "target": "paramstd"}, {"type": "contains", "source": "text_data\\dataset.txt:907", "target": "typehintsvalues"}, {"type": "contains", "source": "text_data\\dataset.txt:907", "target": "lenrequiredtypehints"}, {"type": "contains", "source": "text_data\\dataset.txt:908", "target": "pyright"}, {"type": "contains", "source": "text_data\\dataset.txt:908", "target": "intype"}, {"type": "contains", "source": "text_data\\dataset.txt:908", "target": "outtype"}, {"type": "contains", "source": "text_data\\dataset.txt:908", "target": "metatype"}, {"type": "contains", "source": "text_data\\dataset.txt:908", "target": "class"}, {"type": "contains", "source": "text_data\\dataset.txt:909", "target": "jsonschema"}, {"type": "contains", "source": "text_data\\dataset.txt:909", "target": "class"}, {"type": "contains", "source": "text_data\\dataset.txt:909", "target": "datasetbasemodel"}, {"type": "contains", "source": "text_data\\dataset.txt:909", "target": "extraforbid"}, {"type": "contains", "source": "text_data\\dataset.txt:909", "target": "cases"}, {"type": "contains", "source": "text_data\\dataset.txt:910", "target": "value"}, {"type": "contains", "source": "text_data\\dataset.txt:910", "target": "attribute"}, {"type": "contains", "source": "text_data\\dataset.txt:910", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\dataset.txt:910", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\dataset.txt:910", "target": "typingany"}, {"type": "contains", "source": "text_data\\dataset.txt:911", "target": "value"}, {"type": "contains", "source": "text_data\\dataset.txt:911", "target": "attribute"}, {"type": "contains", "source": "text_data\\dataset.txt:911", "target": "current"}, {"type": "contains", "source": "text_data\\dataset.txt:911", "target": "currentcase"}, {"type": "contains", "source": "text_data\\dataset.txt:911", "target": "incrementevalmetric"}, {"type": "contains", "source": "text_data\\dataset.txt:912", "target": "increment"}, {"type": "contains", "source": "text_data\\dataset.txt:912", "target": "metric"}, {"type": "contains", "source": "text_data\\dataset.txt:912", "target": "required"}, {"type": "contains", "source": "text_data\\dataset.txt:912", "target": "amount"}, {"type": "contains", "source": "text_data\\dataset.txt:912", "target": "current"}, {"type": "contains", "source": "text_data\\dataset.txt:913", "target": "amount"}, {"type": "contains", "source": "text_data\\dataset.txt:913", "target": "increment"}, {"type": "contains", "source": "text_data\\dataset.txt:913", "target": "metric"}, {"type": "contains", "source": "text_data\\dataset.txt:913", "target": "currentcase"}, {"type": "contains", "source": "text_data\\dataset.txt:913", "target": "incrementevalmetricname"}, {"type": "contains", "source": "text_data\\dependencies.txt:913", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\dependencies.txt:913", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\dependencies.txt:913", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\dependencies.txt:913", "target": "v0050"}, {"type": "contains", "source": "text_data\\dependencies.txt:913", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\dependencies.txt:914", "target": "dependencies"}, {"type": "contains", "source": "text_data\\dependencies.txt:914", "target": "tools"}, {"type": "contains", "source": "text_data\\dependencies.txt:914", "target": "contributing"}, {"type": "contains", "source": "text_data\\dependencies.txt:914", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\dependencies.txt:914", "target": "documentation"}, {"type": "contains", "source": "text_data\\dependencies.txt:915", "target": "evals"}, {"type": "contains", "source": "text_data\\dependencies.txt:915", "target": "input"}, {"type": "contains", "source": "text_data\\dependencies.txt:915", "target": "debugging"}, {"type": "contains", "source": "text_data\\dependencies.txt:915", "target": "monitoring"}, {"type": "contains", "source": "text_data\\dependencies.txt:915", "target": "logfire"}, {"type": "contains", "source": "text_data\\dependencies.txt:916", "target": "examples"}, {"type": "contains", "source": "text_data\\dependencies.txt:916", "target": "client"}, {"type": "contains", "source": "text_data\\dependencies.txt:916", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\dependencies.txt:916", "target": "server"}, {"type": "contains", "source": "text_data\\dependencies.txt:916", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\dependencies.txt:917", "target": "stream"}, {"type": "contains", "source": "text_data\\dependencies.txt:917", "target": "reference"}, {"type": "contains", "source": "text_data\\dependencies.txt:917", "target": "pydantic"}, {"type": "contains", "source": "text_data\\dependencies.txt:917", "target": "model"}, {"type": "contains", "source": "text_data\\dependencies.txt:917", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\dependencies.txt:918", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\dependencies.txt:918", "target": "apimessages"}, {"type": "contains", "source": "text_data\\dependencies.txt:918", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\dependencies.txt:918", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\dependencies.txt:918", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\dependencies.txt:919", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\dependencies.txt:919", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\dependencies.txt:919", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\dependencies.txt:919", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\dependencies.txt:919", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\dependencies.txt:920", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\dependencies.txt:920", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\dependencies.txt:920", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\dependencies.txt:920", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\dependencies.txt:920", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\dependencies.txt:921", "target": "dependencies"}, {"type": "contains", "source": "text_data\\dependencies.txt:921", "target": "system"}, {"type": "contains", "source": "text_data\\dependencies.txt:921", "target": "defining"}, {"type": "contains", "source": "text_data\\dependencies.txt:921", "target": "dependency"}, {"type": "contains", "source": "text_data\\dependencies.txt:921", "target": "easier"}, {"type": "contains", "source": "text_data\\dependencies.txt:922", "target": "dependencies"}, {"type": "contains", "source": "text_data\\dependencies.txt:922", "target": "defining"}, {"type": "contains", "source": "text_data\\dependencies.txt:922", "target": "example"}, {"type": "contains", "source": "text_data\\dependencies.txt:922", "target": "python"}, {"type": "contains", "source": "text_data\\dependencies.txt:922", "target": "while"}, {"type": "contains", "source": "text_data\\dependencies.txt:923", "target": "import"}, {"type": "contains", "source": "text_data\\dependencies.txt:923", "target": "agent"}, {"type": "contains", "source": "text_data\\dependencies.txt:923", "target": "dataclass"}, {"type": "contains", "source": "text_data\\dependencies.txt:923", "target": "httpxasyncclient"}, {"type": "contains", "source": "text_data\\dependencies.txt:923", "target": "async"}, {"type": "contains", "source": "text_data\\dependencies.txt:924", "target": "dependencies"}, {"type": "contains", "source": "text_data\\dependencies.txt:924", "target": "example"}, {"type": "contains", "source": "text_data\\dependencies.txt:924", "target": "complete"}, {"type": "contains", "source": "text_data\\dependencies.txt:924", "target": "youll"}, {"type": "contains", "source": "text_data\\dependencies.txt:924", "target": "addasynciorunmain"}, {"type": "contains", "source": "text_data\\dependencies.txt:925", "target": "import"}, {"type": "contains", "source": "text_data\\dependencies.txt:925", "target": "agent"}, {"type": "contains", "source": "text_data\\dependencies.txt:925", "target": "async"}, {"type": "contains", "source": "text_data\\dependencies.txt:925", "target": "dataclass"}, {"type": "contains", "source": "text_data\\dependencies.txt:925", "target": "httpxasyncclient"}, {"type": "contains", "source": "text_data\\dependencies.txt:926", "target": "mydepsfoobar"}, {"type": "contains", "source": "text_data\\dependencies.txt:926", "target": "client"}, {"type": "contains", "source": "text_data\\dependencies.txt:926", "target": "result"}, {"type": "contains", "source": "text_data\\dependencies.txt:926", "target": "await"}, {"type": "contains", "source": "text_data\\dependencies.txt:926", "target": "agentruntell"}, {"type": "contains", "source": "text_data\\dependencies.txt:927", "target": "dependencies"}, {"type": "contains", "source": "text_data\\dependencies.txt:927", "target": "synchronous"}, {"type": "contains", "source": "text_data\\dependencies.txt:927", "target": "async"}, {"type": "contains", "source": "text_data\\dependencies.txt:927", "target": "asynchronous"}, {"type": "contains", "source": "text_data\\dependencies.txt:927", "target": "functions"}, {"type": "contains", "source": "text_data\\dependencies.txt:928", "target": "runsync"}, {"type": "contains", "source": "text_data\\dependencies.txt:928", "target": "synchronous"}, {"type": "contains", "source": "text_data\\dependencies.txt:928", "target": "asynchronous"}, {"type": "contains", "source": "text_data\\dependencies.txt:928", "target": "dependencies"}, {"type": "contains", "source": "text_data\\dependencies.txt:928", "target": "whether"}, {"type": "contains", "source": "text_data\\dependencies.txt:929", "target": "import"}, {"type": "contains", "source": "text_data\\dependencies.txt:929", "target": "agent"}, {"type": "contains", "source": "text_data\\dependencies.txt:929", "target": "dataclass"}, {"type": "contains", "source": "text_data\\dependencies.txt:929", "target": "httpxclient"}, {"type": "contains", "source": "text_data\\dependencies.txt:929", "target": "dataclasses"}, {"type": "contains", "source": "text_data\\dependencies.txt:930", "target": "depsdeps"}, {"type": "contains", "source": "text_data\\dependencies.txt:930", "target": "printresultdata"}, {"type": "contains", "source": "text_data\\dependencies.txt:930", "target": "about"}, {"type": "contains", "source": "text_data\\dependencies.txt:930", "target": "toothpaste"}, {"type": "contains", "source": "text_data\\dependencies.txt:930", "target": "scandal"}, {"type": "contains", "source": "text_data\\dependencies.txt:931", "target": "example"}, {"type": "contains", "source": "text_data\\dependencies.txt:931", "target": "complete"}, {"type": "contains", "source": "text_data\\dependencies.txt:931", "target": "youll"}, {"type": "contains", "source": "text_data\\dependencies.txt:931", "target": "addasynciorunmain"}, {"type": "contains", "source": "text_data\\dependencies.txt:931", "target": "system"}, {"type": "contains", "source": "text_data\\dependencies.txt:932", "target": "import"}, {"type": "contains", "source": "text_data\\dependencies.txt:932", "target": "agent"}, {"type": "contains", "source": "text_data\\dependencies.txt:932", "target": "dataclass"}, {"type": "contains", "source": "text_data\\dependencies.txt:932", "target": "async"}, {"type": "contains", "source": "text_data\\dependencies.txt:932", "target": "runcontextmydeps"}, {"type": "contains", "source": "text_data\\dependencies.txt:933", "target": "finalresponse"}, {"type": "contains", "source": "text_data\\dependencies.txt:933", "target": "headersauthorization"}, {"type": "contains", "source": "text_data\\dependencies.txt:933", "target": "fbearer"}, {"type": "contains", "source": "text_data\\dependencies.txt:933", "target": "ctxdepsapikey"}, {"type": "contains", "source": "text_data\\dependencies.txt:933", "target": "responseraiseforstatus"}, {"type": "contains", "source": "text_data\\dependencies.txt:934", "target": "async"}, {"type": "contains", "source": "text_data\\dependencies.txt:934", "target": "client"}, {"type": "contains", "source": "text_data\\dependencies.txt:934", "target": "return"}, {"type": "contains", "source": "text_data\\dependencies.txt:934", "target": "finalresponse"}, {"type": "contains", "source": "text_data\\dependencies.txt:934", "target": "httpxasyncclient"}, {"type": "contains", "source": "text_data\\dependencies.txt:935", "target": "dependencies"}, {"type": "contains", "source": "text_data\\dependencies.txt:935", "target": "agent"}, {"type": "contains", "source": "text_data\\dependencies.txt:935", "target": "while"}, {"type": "contains", "source": "text_data\\dependencies.txt:935", "target": "calling"}, {"type": "contains", "source": "text_data\\dependencies.txt:935", "target": "example"}, {"type": "contains", "source": "text_data\\dependencies.txt:936", "target": "import"}, {"type": "contains", "source": "text_data\\dependencies.txt:936", "target": "async"}, {"type": "contains", "source": "text_data\\dependencies.txt:936", "target": "dataclass"}, {"type": "contains", "source": "text_data\\dependencies.txt:936", "target": "await"}, {"type": "contains", "source": "text_data\\dependencies.txt:936", "target": "return"}, {"type": "contains", "source": "text_data\\dependencies.txt:937", "target": "async"}, {"type": "contains", "source": "text_data\\dependencies.txt:937", "target": "client"}, {"type": "contains", "source": "text_data\\dependencies.txt:937", "target": "applicationcodeprompt"}, {"type": "contains", "source": "text_data\\dependencies.txt:937", "target": "within"}, {"type": "contains", "source": "text_data\\dependencies.txt:937", "target": "application"}, {"type": "contains", "source": "text_data\\dependencies.txt:938", "target": "async"}, {"type": "contains", "source": "text_data\\dependencies.txt:938", "target": "examples"}, {"type": "contains", "source": "text_data\\dependencies.txt:938", "target": "example"}, {"type": "contains", "source": "text_data\\dependencies.txt:938", "target": "complete"}, {"type": "contains", "source": "text_data\\dependencies.txt:938", "target": "testjokeapppy"}, {"type": "contains", "source": "text_data\\dependencies.txt:939", "target": "following"}, {"type": "contains", "source": "text_data\\dependencies.txt:939", "target": "examples"}, {"type": "contains", "source": "text_data\\dependencies.txt:939", "target": "demonstrate"}, {"type": "contains", "source": "text_data\\dependencies.txt:939", "target": "dependencies"}, {"type": "contains", "source": "text_data\\dependencies.txt:939", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\evals.txt:939", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\evals.txt:939", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\evals.txt:939", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\evals.txt:939", "target": "v0050"}, {"type": "contains", "source": "text_data\\evals.txt:939", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\evals.txt:940", "target": "tools"}, {"type": "contains", "source": "text_data\\evals.txt:940", "target": "installation"}, {"type": "contains", "source": "text_data\\evals.txt:940", "target": "contributing"}, {"type": "contains", "source": "text_data\\evals.txt:940", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\evals.txt:940", "target": "documentation"}, {"type": "contains", "source": "text_data\\evals.txt:941", "target": "datasets"}, {"type": "contains", "source": "text_data\\evals.txt:941", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evals.txt:941", "target": "integration"}, {"type": "contains", "source": "text_data\\evals.txt:941", "target": "input"}, {"type": "contains", "source": "text_data\\evals.txt:941", "target": "installation"}, {"type": "contains", "source": "text_data\\evals.txt:942", "target": "examples"}, {"type": "contains", "source": "text_data\\evals.txt:942", "target": "client"}, {"type": "contains", "source": "text_data\\evals.txt:942", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\evals.txt:942", "target": "server"}, {"type": "contains", "source": "text_data\\evals.txt:942", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\evals.txt:943", "target": "stream"}, {"type": "contains", "source": "text_data\\evals.txt:943", "target": "reference"}, {"type": "contains", "source": "text_data\\evals.txt:943", "target": "pydantic"}, {"type": "contains", "source": "text_data\\evals.txt:943", "target": "model"}, {"type": "contains", "source": "text_data\\evals.txt:943", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\evals.txt:944", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\evals.txt:944", "target": "apimessages"}, {"type": "contains", "source": "text_data\\evals.txt:944", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\evals.txt:944", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\evals.txt:944", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\evals.txt:945", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\evals.txt:945", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\evals.txt:945", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\evals.txt:945", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\evals.txt:945", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\evals.txt:946", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\evals.txt:946", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\evals.txt:946", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\evals.txt:946", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\evals.txt:946", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\evals.txt:947", "target": "evals"}, {"type": "contains", "source": "text_data\\evals.txt:947", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evals.txt:947", "target": "datasets"}, {"type": "contains", "source": "text_data\\evals.txt:947", "target": "integration"}, {"type": "contains", "source": "text_data\\evals.txt:947", "target": "performance"}, {"type": "contains", "source": "text_data\\evals.txt:948", "target": "pydantic"}, {"type": "contains", "source": "text_data\\evals.txt:948", "target": "evals"}, {"type": "contains", "source": "text_data\\evals.txt:948", "target": "package"}, {"type": "contains", "source": "text_data\\evals.txt:948", "target": "install"}, {"type": "contains", "source": "text_data\\evals.txt:948", "target": "pydanticevals"}, {"type": "contains", "source": "text_data\\evals.txt:949", "target": "evals"}, {"type": "contains", "source": "text_data\\evals.txt:949", "target": "pydanticevalslogfire"}, {"type": "contains", "source": "text_data\\evals.txt:949", "target": "datasets"}, {"type": "contains", "source": "text_data\\evals.txt:949", "target": "cases"}, {"type": "contains", "source": "text_data\\evals.txt:949", "target": "pydanticevals"}, {"type": "contains", "source": "text_data\\evals.txt:950", "target": "cases"}, {"type": "contains", "source": "text_data\\evals.txt:950", "target": "dataset"}, {"type": "contains", "source": "text_data\\evals.txt:950", "target": "pydantic"}, {"type": "contains", "source": "text_data\\evals.txt:950", "target": "evals"}, {"type": "contains", "source": "text_data\\evals.txt:950", "target": "everything"}, {"type": "contains", "source": "text_data\\evals.txt:951", "target": "evaluators"}, {"type": "contains", "source": "text_data\\evals.txt:951", "target": "example"}, {"type": "contains", "source": "text_data\\evals.txt:951", "target": "complete"}, {"type": "contains", "source": "text_data\\evals.txt:951", "target": "components"}, {"type": "contains", "source": "text_data\\evals.txt:951", "target": "analyze"}, {"type": "contains", "source": "text_data\\evals.txt:952", "target": "import"}, {"type": "contains", "source": "text_data\\evals.txt:952", "target": "return"}, {"type": "contains", "source": "text_data\\evals.txt:952", "target": "dataclass"}, {"type": "contains", "source": "text_data\\evals.txt:952", "target": "dataclasses"}, {"type": "contains", "source": "text_data\\evals.txt:952", "target": "simpleevaldataset"}, {"type": "contains", "source": "text_data\\evals.txt:953", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evals.txt:953", "target": "process"}, {"type": "contains", "source": "text_data\\evals.txt:953", "target": "example"}, {"type": "contains", "source": "text_data\\evals.txt:953", "target": "complete"}, {"type": "contains", "source": "text_data\\evals.txt:953", "target": "involves"}, {"type": "contains", "source": "text_data\\evals.txt:954", "target": "dataset"}, {"type": "contains", "source": "text_data\\evals.txt:954", "target": "return"}, {"type": "contains", "source": "text_data\\evals.txt:954", "target": "import"}, {"type": "contains", "source": "text_data\\evals.txt:954", "target": "pydanticevals"}, {"type": "contains", "source": "text_data\\evals.txt:954", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\evals.txt:955", "target": "dataset"}, {"type": "contains", "source": "text_data\\evals.txt:955", "target": "casescase1"}, {"type": "contains", "source": "text_data\\evals.txt:955", "target": "evaluatorsisinstancetypenamestr"}, {"type": "contains", "source": "text_data\\evals.txt:955", "target": "myevaluator"}, {"type": "contains", "source": "text_data\\evals.txt:955", "target": "async"}, {"type": "contains", "source": "text_data\\evals.txt:956", "target": "myevaluator"}, {"type": "contains", "source": "text_data\\evals.txt:956", "target": "simplecase"}, {"type": "contains", "source": "text_data\\evals.txt:956", "target": "capital"}, {"type": "contains", "source": "text_data\\evals.txt:956", "target": "france"}, {"type": "contains", "source": "text_data\\evals.txt:956", "target": "paris"}, {"type": "contains", "source": "text_data\\evals.txt:957", "target": "example"}, {"type": "contains", "source": "text_data\\evals.txt:957", "target": "create"}, {"type": "contains", "source": "text_data\\evals.txt:957", "target": "custom"}, {"type": "contains", "source": "text_data\\evals.txt:957", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evals.txt:957", "target": "function"}, {"type": "contains", "source": "text_data\\evals.txt:958", "target": "import"}, {"type": "contains", "source": "text_data\\evals.txt:958", "target": "agent"}, {"type": "contains", "source": "text_data\\evals.txt:958", "target": "class"}, {"type": "contains", "source": "text_data\\evals.txt:958", "target": "liststr"}, {"type": "contains", "source": "text_data\\evals.txt:958", "target": "future"}, {"type": "contains", "source": "text_data\\evals.txt:959", "target": "recipe"}, {"type": "contains", "source": "text_data\\evals.txt:959", "target": "async"}, {"type": "contains", "source": "text_data\\evals.txt:959", "target": "transformrecipecustomerorder"}, {"type": "contains", "source": "text_data\\evals.txt:959", "target": "customerorder"}, {"type": "contains", "source": "text_data\\evals.txt:959", "target": "await"}, {"type": "contains", "source": "text_data\\evals.txt:960", "target": "evaluators"}, {"type": "contains", "source": "text_data\\evals.txt:960", "target": "llmjudge"}, {"type": "contains", "source": "text_data\\evals.txt:960", "target": "rubricrecipe"}, {"type": "contains", "source": "text_data\\evals.txt:960", "target": "should"}, {"type": "contains", "source": "text_data\\evals.txt:960", "target": "nameglutenfreerecipe"}, {"type": "contains", "source": "text_data\\evals.txt:961", "target": "includeinputtrue"}, {"type": "contains", "source": "text_data\\evals.txt:961", "target": "modelanthropicclaude37sonnetlatest"}, {"type": "contains", "source": "text_data\\evals.txt:961", "target": "report"}, {"type": "contains", "source": "text_data\\evals.txt:961", "target": "recipedatasetevaluatesynctransformrecipe"}, {"type": "contains", "source": "text_data\\evals.txt:961", "target": "printreport"}, {"type": "contains", "source": "text_data\\evals.txt:962", "target": "datasets"}, {"type": "contains", "source": "text_data\\evals.txt:962", "target": "example"}, {"type": "contains", "source": "text_data\\evals.txt:962", "target": "complete"}, {"type": "contains", "source": "text_data\\evals.txt:962", "target": "saving"}, {"type": "contains", "source": "text_data\\evals.txt:962", "target": "loading"}, {"type": "contains", "source": "text_data\\evals.txt:963", "target": "import"}, {"type": "contains", "source": "text_data\\evals.txt:963", "target": "recipe"}, {"type": "contains", "source": "text_data\\evals.txt:963", "target": "inputs"}, {"type": "contains", "source": "text_data\\evals.txt:963", "target": "dishname"}, {"type": "contains", "source": "text_data\\evals.txt:963", "target": "dietaryrestriction"}, {"type": "contains", "source": "text_data\\evals.txt:964", "target": "recipe"}, {"type": "contains", "source": "text_data\\evals.txt:964", "target": "dataset"}, {"type": "contains", "source": "text_data\\evals.txt:964", "target": "glutenfree"}, {"type": "contains", "source": "text_data\\evals.txt:964", "target": "evaluators"}, {"type": "contains", "source": "text_data\\evals.txt:964", "target": "llmjudge"}, {"type": "contains", "source": "text_data\\evals.txt:965", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evals.txt:965", "target": "example"}, {"type": "contains", "source": "text_data\\evals.txt:965", "target": "complete"}, {"type": "contains", "source": "text_data\\evals.txt:965", "target": "parallel"}, {"type": "contains", "source": "text_data\\evals.txt:965", "target": "control"}, {"type": "contains", "source": "text_data\\evals.txt:966", "target": "dataset"}, {"type": "contains", "source": "text_data\\evals.txt:966", "target": "import"}, {"type": "contains", "source": "text_data\\evals.txt:966", "target": "cases"}, {"type": "contains", "source": "text_data\\evals.txt:966", "target": "asyncio"}, {"type": "contains", "source": "text_data\\evals.txt:966", "target": "pydanticevals"}, {"type": "contains", "source": "text_data\\evals.txt:967", "target": "timetime"}, {"type": "contains", "source": "text_data\\evals.txt:967", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evals.txt:967", "target": "reportdefault"}, {"type": "contains", "source": "text_data\\evals.txt:967", "target": "datasetevaluatesyncdoublenumber"}, {"type": "contains", "source": "text_data\\evals.txt:967", "target": "printfevaluation"}, {"type": "contains", "source": "text_data\\evals.txt:968", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evals.txt:968", "target": "timetime"}, {"type": "contains", "source": "text_data\\evals.txt:968", "target": "case4"}, {"type": "contains", "source": "text_data\\evals.txt:968", "target": "averages"}, {"type": "contains", "source": "text_data\\evals.txt:968", "target": "limited"}, {"type": "contains", "source": "text_data\\evals.txt:969", "target": "case0"}, {"type": "contains", "source": "text_data\\evals.txt:969", "target": "case1"}, {"type": "contains", "source": "text_data\\evals.txt:969", "target": "case2"}, {"type": "contains", "source": "text_data\\evals.txt:969", "target": "case3"}, {"type": "contains", "source": "text_data\\evals.txt:969", "target": "case4"}, {"type": "contains", "source": "text_data\\evals.txt:970", "target": "during"}, {"type": "contains", "source": "text_data\\evals.txt:970", "target": "opentelemetry"}, {"type": "contains", "source": "text_data\\evals.txt:970", "target": "spantree"}, {"type": "contains", "source": "text_data\\evals.txt:970", "target": "provides"}, {"type": "contains", "source": "text_data\\evals.txt:970", "target": "spans"}, {"type": "contains", "source": "text_data\\evals.txt:971", "target": "there"}, {"type": "contains", "source": "text_data\\evals.txt:971", "target": "useful"}, {"type": "contains", "source": "text_data\\evals.txt:971", "target": "opentelemetryexamplepy"}, {"type": "contains", "source": "text_data\\evals.txt:972", "target": "import"}, {"type": "contains", "source": "text_data\\evals.txt:972", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evals.txt:972", "target": "spantree"}, {"type": "contains", "source": "text_data\\evals.txt:972", "target": "asyncio"}, {"type": "contains", "source": "text_data\\evals.txt:972", "target": "typing"}, {"type": "contains", "source": "text_data\\evals.txt:973", "target": "processing"}, {"type": "contains", "source": "text_data\\evals.txt:973", "target": "spantree"}, {"type": "contains", "source": "text_data\\evals.txt:973", "target": "performancescore"}, {"type": "contains", "source": "text_data\\evals.txt:973", "target": "spans"}, {"type": "contains", "source": "text_data\\evals.txt:973", "target": "processingspans"}, {"type": "contains", "source": "text_data\\evals.txt:974", "target": "haserrors"}, {"type": "contains", "source": "text_data\\evals.txt:974", "target": "performancescore"}, {"type": "contains", "source": "text_data\\evals.txt:974", "target": "simulate"}, {"type": "contains", "source": "text_data\\evals.txt:974", "target": "processing"}, {"type": "contains", "source": "text_data\\evals.txt:974", "target": "processed"}, {"type": "contains", "source": "text_data\\evals.txt:975", "target": "return"}, {"type": "contains", "source": "text_data\\evals.txt:975", "target": "processing"}, {"type": "contains", "source": "text_data\\evals.txt:975", "target": "processed"}, {"type": "contains", "source": "text_data\\evals.txt:975", "target": "cases"}, {"type": "contains", "source": "text_data\\evals.txt:975", "target": "dataset"}, {"type": "contains", "source": "text_data\\evals.txt:976", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evals.txt:976", "target": "report"}, {"type": "contains", "source": "text_data\\evals.txt:976", "target": "evaluatorsspantracingevaluator"}, {"type": "contains", "source": "text_data\\evals.txt:976", "target": "spans"}, {"type": "contains", "source": "text_data\\evals.txt:976", "target": "automatically"}, {"type": "contains", "source": "text_data\\evals.txt:977", "target": "performancescore"}, {"type": "contains", "source": "text_data\\evals.txt:977", "target": "error"}, {"type": "contains", "source": "text_data\\evals.txt:977", "target": "contains"}, {"type": "contains", "source": "text_data\\evals.txt:977", "target": "marker"}, {"type": "contains", "source": "text_data\\evals.txt:977", "target": "normaltext"}, {"type": "contains", "source": "text_data\\evals.txt:979", "target": "datasets"}, {"type": "contains", "source": "text_data\\evals.txt:979", "target": "generated"}, {"type": "contains", "source": "text_data\\evals.txt:979", "target": "dataset"}, {"type": "contains", "source": "text_data\\evals.txt:979", "target": "example"}, {"type": "contains", "source": "text_data\\evals.txt:979", "target": "complete"}, {"type": "contains", "source": "text_data\\evals.txt:980", "target": "import"}, {"type": "contains", "source": "text_data\\evals.txt:980", "target": "question"}, {"type": "contains", "source": "text_data\\evals.txt:980", "target": "answer"}, {"type": "contains", "source": "text_data\\evals.txt:980", "target": "class"}, {"type": "contains", "source": "text_data\\evals.txt:980", "target": "useattributedocstringstrue"}, {"type": "contains", "source": "text_data\\evals.txt:981", "target": "level"}, {"type": "contains", "source": "text_data\\evals.txt:981", "target": "difficulty"}, {"type": "contains", "source": "text_data\\evals.txt:981", "target": "category"}, {"type": "contains", "source": "text_data\\evals.txt:981", "target": "confidence"}, {"type": "contains", "source": "text_data\\evals.txt:981", "target": "class"}, {"type": "contains", "source": "text_data\\evals.txt:982", "target": "question"}, {"type": "contains", "source": "text_data\\evals.txt:982", "target": "capital"}, {"type": "contains", "source": "text_data\\evals.txt:982", "target": "inputs"}, {"type": "contains", "source": "text_data\\evals.txt:982", "target": "metadata"}, {"type": "contains", "source": "text_data\\evals.txt:982", "target": "difficulty"}, {"type": "contains", "source": "text_data\\evals.txt:983", "target": "expectedoutput"}, {"type": "contains", "source": "text_data\\evals.txt:983", "target": "answer"}, {"type": "contains", "source": "text_data\\evals.txt:983", "target": "eiffel"}, {"type": "contains", "source": "text_data\\evals.txt:983", "target": "tower"}, {"type": "contains", "source": "text_data\\evals.txt:983", "target": "confidence"}, {"type": "contains", "source": "text_data\\evals.txt:984", "target": "example"}, {"type": "contains", "source": "text_data\\evals.txt:984", "target": "complete"}, {"type": "contains", "source": "text_data\\evals.txt:984", "target": "youll"}, {"type": "contains", "source": "text_data\\evals.txt:984", "target": "addasynciorunmainanswer"}, {"type": "contains", "source": "text_data\\evals.txt:984", "target": "write"}, {"type": "contains", "source": "text_data\\evals.txt:985", "target": "import"}, {"type": "contains", "source": "text_data\\evals.txt:985", "target": "answeroutput"}, {"type": "contains", "source": "text_data\\evals.txt:985", "target": "metadatatype"}, {"type": "contains", "source": "text_data\\evals.txt:985", "target": "dataset"}, {"type": "contains", "source": "text_data\\evals.txt:985", "target": "generatedataset"}, {"type": "contains", "source": "text_data\\evals.txt:986", "target": "question"}, {"type": "contains", "source": "text_data\\evals.txt:986", "target": "capital"}, {"type": "contains", "source": "text_data\\evals.txt:986", "target": "inputs"}, {"type": "contains", "source": "text_data\\evals.txt:986", "target": "printoutputfilereadtext"}, {"type": "contains", "source": "text_data\\evals.txt:986", "target": "schema"}, {"type": "contains", "source": "text_data\\evals.txt:987", "target": "inputs"}, {"type": "contains", "source": "text_data\\evals.txt:987", "target": "question"}, {"type": "contains", "source": "text_data\\evals.txt:987", "target": "which"}, {"type": "contains", "source": "text_data\\evals.txt:987", "target": "worldfamous"}, {"type": "contains", "source": "text_data\\evals.txt:987", "target": "landmark"}, {"type": "contains", "source": "text_data\\evals.txt:988", "target": "traces"}, {"type": "contains", "source": "text_data\\evals.txt:988", "target": "logfire"}, {"type": "contains", "source": "text_data\\evals.txt:988", "target": "pydantic"}, {"type": "contains", "source": "text_data\\evals.txt:988", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evals.txt:988", "target": "these"}, {"type": "contains", "source": "text_data\\evals.txt:989", "target": "logfire"}, {"type": "contains", "source": "text_data\\evals.txt:989", "target": "import"}, {"type": "contains", "source": "text_data\\evals.txt:989", "target": "evals"}, {"type": "contains", "source": "text_data\\evals.txt:989", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evals.txt:989", "target": "logfireintegrationpy"}, {"type": "contains", "source": "text_data\\evals.txt:990", "target": "logfire"}, {"type": "contains", "source": "text_data\\evals.txt:990", "target": "execution"}, {"type": "contains", "source": "text_data\\evals.txt:990", "target": "evals"}, {"type": "contains", "source": "text_data\\evals.txt:990", "target": "opentelemetry"}, {"type": "contains", "source": "text_data\\evals.txt:990", "target": "during"}, {"type": "contains", "source": "text_data\\evals.txt:991", "target": "evaluations"}, {"type": "contains", "source": "text_data\\evals.txt:991", "target": "during"}, {"type": "contains", "source": "text_data\\evals.txt:991", "target": "being"}, {"type": "contains", "source": "text_data\\evals.txt:991", "target": "evaluated"}, {"type": "contains", "source": "text_data\\evals.txt:991", "target": "opentelemetry"}, {"type": "contains", "source": "text_data\\evaluators.txt:991", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\evaluators.txt:991", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\evaluators.txt:991", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\evaluators.txt:991", "target": "v0050"}, {"type": "contains", "source": "text_data\\evaluators.txt:991", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\evaluators.txt:992", "target": "tools"}, {"type": "contains", "source": "text_data\\evaluators.txt:992", "target": "contributing"}, {"type": "contains", "source": "text_data\\evaluators.txt:992", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\evaluators.txt:992", "target": "documentation"}, {"type": "contains", "source": "text_data\\evaluators.txt:992", "target": "agents"}, {"type": "contains", "source": "text_data\\evaluators.txt:993", "target": "evals"}, {"type": "contains", "source": "text_data\\evaluators.txt:993", "target": "input"}, {"type": "contains", "source": "text_data\\evaluators.txt:993", "target": "graphs"}, {"type": "contains", "source": "text_data\\evaluators.txt:993", "target": "graph"}, {"type": "contains", "source": "text_data\\evaluators.txt:993", "target": "image"}, {"type": "contains", "source": "text_data\\evaluators.txt:994", "target": "examples"}, {"type": "contains", "source": "text_data\\evaluators.txt:994", "target": "client"}, {"type": "contains", "source": "text_data\\evaluators.txt:994", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\evaluators.txt:994", "target": "server"}, {"type": "contains", "source": "text_data\\evaluators.txt:994", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\evaluators.txt:995", "target": "agent"}, {"type": "contains", "source": "text_data\\evaluators.txt:995", "target": "stream"}, {"type": "contains", "source": "text_data\\evaluators.txt:995", "target": "reference"}, {"type": "contains", "source": "text_data\\evaluators.txt:995", "target": "pydantic"}, {"type": "contains", "source": "text_data\\evaluators.txt:995", "target": "model"}, {"type": "contains", "source": "text_data\\evaluators.txt:996", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\evaluators.txt:996", "target": "result"}, {"type": "contains", "source": "text_data\\evaluators.txt:996", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\evaluators.txt:996", "target": "messages"}, {"type": "contains", "source": "text_data\\evaluators.txt:996", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\evaluators.txt:997", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\evaluators.txt:997", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\evaluators.txt:997", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\evaluators.txt:997", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\evaluators.txt:997", "target": "modelsgroq"}, {"type": "contains", "source": "text_data\\evaluators.txt:998", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\evaluators.txt:998", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\evaluators.txt:998", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\evaluators.txt:998", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\evaluators.txt:998", "target": "dataset"}, {"type": "contains", "source": "text_data\\evaluators.txt:999", "target": "downcast"}, {"type": "contains", "source": "text_data\\evaluators.txt:999", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evaluators.txt:999", "target": "evaluate"}, {"type": "contains", "source": "text_data\\evaluators.txt:999", "target": "evaluatesync"}, {"type": "contains", "source": "text_data\\evaluators.txt:999", "target": "evaluateasync"}, {"type": "contains", "source": "text_data\\evaluators.txt:1000", "target": "contains"}, {"type": "contains", "source": "text_data\\evaluators.txt:1000", "target": "objecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "contains", "source": "text_data\\evaluators.txt:1000", "target": "table"}, {"type": "contains", "source": "text_data\\evaluators.txt:1000", "target": "contents"}, {"type": "contains", "source": "text_data\\evaluators.txt:1000", "target": "evaluators"}, {"type": "contains", "source": "text_data\\evaluators.txt:1001", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1001", "target": "checks"}, {"type": "contains", "source": "text_data\\evaluators.txt:1001", "target": "expectedoutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1001", "target": "strings"}, {"type": "contains", "source": "text_data\\evaluators.txt:1001", "target": "check"}, {"type": "contains", "source": "text_data\\evaluators.txt:1002", "target": "source"}, {"type": "contains", "source": "text_data\\evaluators.txt:1002", "target": "pydanticevalspydanticevalsevaluatorscommonpy"}, {"type": "contains", "source": "text_data\\evaluators.txt:1003", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1003", "target": "object"}, {"type": "contains", "source": "text_data\\evaluators.txt:1003", "target": "strings"}, {"type": "contains", "source": "text_data\\evaluators.txt:1003", "target": "checks"}, {"type": "contains", "source": "text_data\\evaluators.txt:1003", "target": "expectedoutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1004", "target": "outputstr"}, {"type": "contains", "source": "text_data\\evaluators.txt:1004", "target": "expectedstr"}, {"type": "contains", "source": "text_data\\evaluators.txt:1004", "target": "failurereason"}, {"type": "contains", "source": "text_data\\evaluators.txt:1004", "target": "asstrings"}, {"type": "contains", "source": "text_data\\evaluators.txt:1004", "target": "maxlength100"}, {"type": "contains", "source": "text_data\\evaluators.txt:1005", "target": "string"}, {"type": "contains", "source": "text_data\\evaluators.txt:1005", "target": "outputdict"}, {"type": "contains", "source": "text_data\\evaluators.txt:1005", "target": "castdictany"}, {"type": "contains", "source": "text_data\\evaluators.txt:1005", "target": "pyright"}, {"type": "contains", "source": "text_data\\evaluators.txt:1005", "target": "ignorereportunknownmembertype"}, {"type": "contains", "source": "text_data\\evaluators.txt:1006", "target": "ktrunc"}, {"type": "contains", "source": "text_data\\evaluators.txt:1006", "target": "truncatedreprk"}, {"type": "contains", "source": "text_data\\evaluators.txt:1006", "target": "maxlength30"}, {"type": "contains", "source": "text_data\\evaluators.txt:1006", "target": "failurereason"}, {"type": "contains", "source": "text_data\\evaluators.txt:1006", "target": "foutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1007", "target": "outputtrunc"}, {"type": "contains", "source": "text_data\\evaluators.txt:1007", "target": "pyright"}, {"type": "contains", "source": "text_data\\evaluators.txt:1007", "target": "selfvalue"}, {"type": "contains", "source": "text_data\\evaluators.txt:1007", "target": "ctxoutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1007", "target": "ignorereportunknownmembertype"}, {"type": "contains", "source": "text_data\\evaluators.txt:1008", "target": "except"}, {"type": "contains", "source": "text_data\\evaluators.txt:1008", "target": "typeerror"}, {"type": "contains", "source": "text_data\\evaluators.txt:1008", "target": "valueerror"}, {"type": "contains", "source": "text_data\\evaluators.txt:1008", "target": "failurereason"}, {"type": "contains", "source": "text_data\\evaluators.txt:1008", "target": "fcontainment"}, {"type": "contains", "source": "text_data\\evaluators.txt:1009", "target": "object"}, {"type": "contains", "source": "text_data\\evaluators.txt:1009", "target": "value"}, {"type": "contains", "source": "text_data\\evaluators.txt:1009", "target": "objecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "contains", "source": "text_data\\evaluators.txt:1009", "target": "check"}, {"type": "contains", "source": "text_data\\evaluators.txt:1009", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1010", "target": "objecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "contains", "source": "text_data\\evaluators.txt:1010", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1010", "target": "bases"}, {"type": "contains", "source": "text_data\\evaluators.txt:1010", "target": "evaluatorobjecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "contains", "source": "text_data\\evaluators.txt:1010", "target": "check"}, {"type": "contains", "source": "text_data\\evaluators.txt:1011", "target": "object"}, {"type": "contains", "source": "text_data\\evaluators.txt:1011", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1011", "target": "dataclass"}, {"type": "contains", "source": "text_data\\evaluators.txt:1011", "target": "expected"}, {"type": "contains", "source": "text_data\\evaluators.txt:1011", "target": "ctxexpectedoutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1012", "target": "object"}, {"type": "contains", "source": "text_data\\evaluators.txt:1012", "target": "query"}, {"type": "contains", "source": "text_data\\evaluators.txt:1012", "target": "check"}, {"type": "contains", "source": "text_data\\evaluators.txt:1012", "target": "contains"}, {"type": "contains", "source": "text_data\\evaluators.txt:1012", "target": "matches"}, {"type": "contains", "source": "text_data\\evaluators.txt:1013", "target": "objecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "contains", "source": "text_data\\evaluators.txt:1013", "target": "bases"}, {"type": "contains", "source": "text_data\\evaluators.txt:1013", "target": "evaluatorobjecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "contains", "source": "text_data\\evaluators.txt:1013", "target": "check"}, {"type": "contains", "source": "text_data\\evaluators.txt:1013", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1014", "target": "object"}, {"type": "contains", "source": "text_data\\evaluators.txt:1014", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1014", "target": "selftypename"}, {"type": "contains", "source": "text_data\\evaluators.txt:1014", "target": "return"}, {"type": "contains", "source": "text_data\\evaluators.txt:1014", "target": "reason"}, {"type": "contains", "source": "text_data\\evaluators.txt:1015", "target": "return"}, {"type": "contains", "source": "text_data\\evaluators.txt:1015", "target": "evaluationreasonvaluefalse"}, {"type": "contains", "source": "text_data\\evaluators.txt:1015", "target": "reasonreason"}, {"type": "contains", "source": "text_data\\evaluators.txt:1015", "target": "llmjudge"}, {"type": "contains", "source": "text_data\\evaluators.txt:1015", "target": "dataclass"}, {"type": "contains", "source": "text_data\\evaluators.txt:1016", "target": "objecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "contains", "source": "text_data\\evaluators.txt:1016", "target": "bases"}, {"type": "contains", "source": "text_data\\evaluators.txt:1016", "target": "evaluatorobjecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "contains", "source": "text_data\\evaluators.txt:1016", "target": "judge"}, {"type": "contains", "source": "text_data\\evaluators.txt:1016", "target": "whether"}, {"type": "contains", "source": "text_data\\evaluators.txt:1017", "target": "object"}, {"type": "contains", "source": "text_data\\evaluators.txt:1017", "target": "model"}, {"type": "contains", "source": "text_data\\evaluators.txt:1017", "target": "rubric"}, {"type": "contains", "source": "text_data\\evaluators.txt:1017", "target": "llmasajudge"}, {"type": "contains", "source": "text_data\\evaluators.txt:1017", "target": "import"}, {"type": "contains", "source": "text_data\\evaluators.txt:1018", "target": "llmasajudge"}, {"type": "contains", "source": "text_data\\evaluators.txt:1018", "target": "import"}, {"type": "contains", "source": "text_data\\evaluators.txt:1018", "target": "judgeoutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1018", "target": "gradingoutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1018", "target": "await"}, {"type": "contains", "source": "text_data\\evaluators.txt:1019", "target": "objecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "contains", "source": "text_data\\evaluators.txt:1019", "target": "bases"}, {"type": "contains", "source": "text_data\\evaluators.txt:1019", "target": "evaluatorobjecthttpsdocspythonorg3libraryfunctionshtmlobject"}, {"type": "contains", "source": "text_data\\evaluators.txt:1019", "target": "check"}, {"type": "contains", "source": "text_data\\evaluators.txt:1019", "target": "execution"}, {"type": "contains", "source": "text_data\\evaluators.txt:1020", "target": "object"}, {"type": "contains", "source": "text_data\\evaluators.txt:1020", "target": "seconds"}, {"type": "contains", "source": "text_data\\evaluators.txt:1020", "target": "dataclass"}, {"type": "contains", "source": "text_data\\evaluators.txt:1020", "target": "timedelta"}, {"type": "contains", "source": "text_data\\evaluators.txt:1020", "target": "duration"}, {"type": "contains", "source": "text_data\\evaluators.txt:1021", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evaluators.txt:1021", "target": "python"}, {"type": "contains", "source": "text_data\\evaluators.txt:1021", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1021", "target": "result"}, {"type": "contains", "source": "text_data\\evaluators.txt:1021", "target": "evaluating"}, {"type": "contains", "source": "text_data\\evaluators.txt:1022", "target": "object"}, {"type": "contains", "source": "text_data\\evaluators.txt:1022", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evaluators.txt:1022", "target": "dataclass"}, {"type": "contains", "source": "text_data\\evaluators.txt:1022", "target": "python"}, {"type": "contains", "source": "text_data\\evaluators.txt:1022", "target": "expression"}, {"type": "contains", "source": "text_data\\evaluators.txt:1023", "target": "context"}, {"type": "contains", "source": "text_data\\evaluators.txt:1023", "target": "execution"}, {"type": "contains", "source": "text_data\\evaluators.txt:1023", "target": "inputs"}, {"type": "contains", "source": "text_data\\evaluators.txt:1023", "target": "outputs"}, {"type": "contains", "source": "text_data\\evaluators.txt:1023", "target": "evaluating"}, {"type": "contains", "source": "text_data\\evaluators.txt:1024", "target": "source"}, {"type": "contains", "source": "text_data\\evaluators.txt:1024", "target": "pydanticevalspydanticevalsevaluatorscontextpy"}, {"type": "contains", "source": "text_data\\evaluators.txt:1025", "target": "dataclass"}, {"type": "contains", "source": "text_data\\evaluators.txt:1025", "target": "class"}, {"type": "contains", "source": "text_data\\evaluators.txt:1025", "target": "execution"}, {"type": "contains", "source": "text_data\\evaluators.txt:1025", "target": "context"}, {"type": "contains", "source": "text_data\\evaluators.txt:1025", "target": "evaluating"}, {"type": "contains", "source": "text_data\\evaluators.txt:1026", "target": "inputs"}, {"type": "contains", "source": "text_data\\evaluators.txt:1026", "target": "expected"}, {"type": "contains", "source": "text_data\\evaluators.txt:1026", "target": "provided"}, {"type": "contains", "source": "text_data\\evaluators.txt:1026", "target": "metadata"}, {"type": "contains", "source": "text_data\\evaluators.txt:1026", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1027", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1027", "target": "duration"}, {"type": "contains", "source": "text_data\\evaluators.txt:1027", "target": "float"}, {"type": "contains", "source": "text_data\\evaluators.txt:1027", "target": "spantree"}, {"type": "contains", "source": "text_data\\evaluators.txt:1027", "target": "attributes"}, {"type": "contains", "source": "text_data\\evaluators.txt:1028", "target": "execution"}, {"type": "contains", "source": "text_data\\evaluators.txt:1028", "target": "during"}, {"type": "contains", "source": "text_data\\evaluators.txt:1028", "target": "spantree"}, {"type": "contains", "source": "text_data\\evaluators.txt:1028", "target": "spans"}, {"type": "contains", "source": "text_data\\evaluators.txt:1028", "target": "metrics"}, {"type": "contains", "source": "text_data\\evaluators.txt:1029", "target": "raise"}, {"type": "contains", "source": "text_data\\evaluators.txt:1029", "target": "selfspantree"}, {"type": "contains", "source": "text_data\\evaluators.txt:1029", "target": "necessary"}, {"type": "contains", "source": "text_data\\evaluators.txt:1029", "target": "dependencies"}, {"type": "contains", "source": "text_data\\evaluators.txt:1029", "target": "installed"}, {"type": "contains", "source": "text_data\\evaluators.txt:1030", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\evaluators.txt:1030", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1030", "target": "metadata"}, {"type": "contains", "source": "text_data\\evaluators.txt:1030", "target": "inputs"}, {"type": "contains", "source": "text_data\\evaluators.txt:1030", "target": "provided"}, {"type": "contains", "source": "text_data\\evaluators.txt:1031", "target": "duration"}, {"type": "contains", "source": "text_data\\evaluators.txt:1031", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\evaluators.txt:1031", "target": "attributes"}, {"type": "contains", "source": "text_data\\evaluators.txt:1031", "target": "floathttpsdocspythonorg3libraryfunctionshtmlfloat"}, {"type": "contains", "source": "text_data\\evaluators.txt:1031", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\evaluators.txt:1032", "target": "metrics"}, {"type": "contains", "source": "text_data\\evaluators.txt:1032", "target": "spantree"}, {"type": "contains", "source": "text_data\\evaluators.txt:1032", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\evaluators.txt:1032", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\evaluators.txt:1032", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\evaluators.txt:1033", "target": "execution"}, {"type": "contains", "source": "text_data\\evaluators.txt:1033", "target": "during"}, {"type": "contains", "source": "text_data\\evaluators.txt:1033", "target": "spans"}, {"type": "contains", "source": "text_data\\evaluators.txt:1033", "target": "description"}, {"type": "contains", "source": "text_data\\evaluators.txt:1033", "target": "optional"}, {"type": "contains", "source": "text_data\\evaluators.txt:1034", "target": "result"}, {"type": "contains", "source": "text_data\\evaluators.txt:1034", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1034", "target": "parameters"}, {"type": "contains", "source": "text_data\\evaluators.txt:1034", "target": "description"}, {"type": "contains", "source": "text_data\\evaluators.txt:1034", "target": "default"}, {"type": "contains", "source": "text_data\\evaluators.txt:1035", "target": "value"}, {"type": "contains", "source": "text_data\\evaluators.txt:1035", "target": "result"}, {"type": "contains", "source": "text_data\\evaluators.txt:1035", "target": "reason"}, {"type": "contains", "source": "text_data\\evaluators.txt:1035", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1035", "target": "optional"}, {"type": "contains", "source": "text_data\\evaluators.txt:1036", "target": "required"}, {"type": "contains", "source": "text_data\\evaluators.txt:1036", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1036", "target": "result"}, {"type": "contains", "source": "text_data\\evaluators.txt:1036", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\evaluators.txt:1036", "target": "source"}, {"type": "contains", "source": "text_data\\evaluators.txt:1038", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1038", "target": "result"}, {"type": "contains", "source": "text_data\\evaluators.txt:1038", "target": "value"}, {"type": "contains", "source": "text_data\\evaluators.txt:1038", "target": "reason"}, {"type": "contains", "source": "text_data\\evaluators.txt:1038", "target": "source"}, {"type": "contains", "source": "text_data\\evaluators.txt:1039", "target": "types"}, {"type": "contains", "source": "text_data\\evaluators.txt:1039", "target": "value"}, {"type": "contains", "source": "text_data\\evaluators.txt:1039", "target": "valuetype"}, {"type": "contains", "source": "text_data\\evaluators.txt:1039", "target": "valuetypes"}, {"type": "contains", "source": "text_data\\evaluators.txt:1039", "target": "check"}, {"type": "contains", "source": "text_data\\evaluators.txt:1040", "target": "downcast"}, {"type": "contains", "source": "text_data\\evaluators.txt:1040", "target": "evaluationresultt"}, {"type": "contains", "source": "text_data\\evaluators.txt:1040", "target": "valuetypes"}, {"type": "contains", "source": "text_data\\evaluators.txt:1040", "target": "typehttpsdocspythonorg3libraryfunctionshtmltypet"}, {"type": "contains", "source": "text_data\\evaluators.txt:1040", "target": "result"}, {"type": "contains", "source": "text_data\\evaluators.txt:1042", "target": "valuetypes"}, {"type": "contains", "source": "text_data\\evaluators.txt:1042", "target": "types"}, {"type": "contains", "source": "text_data\\evaluators.txt:1042", "target": "value"}, {"type": "contains", "source": "text_data\\evaluators.txt:1042", "target": "valuetype"}, {"type": "contains", "source": "text_data\\evaluators.txt:1042", "target": "downcast"}, {"type": "contains", "source": "text_data\\evaluators.txt:1043", "target": "return"}, {"type": "contains", "source": "text_data\\evaluators.txt:1043", "target": "castevaluationresultt"}, {"type": "contains", "source": "text_data\\evaluators.txt:1043", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evaluators.txt:1043", "target": "dataclass"}, {"type": "contains", "source": "text_data\\evaluators.txt:1044", "target": "evaluatorcontext"}, {"type": "contains", "source": "text_data\\evaluators.txt:1044", "target": "class"}, {"type": "contains", "source": "text_data\\evaluators.txt:1044", "target": "evaluators"}, {"type": "contains", "source": "text_data\\evaluators.txt:1044", "target": "import"}, {"type": "contains", "source": "text_data\\evaluators.txt:1044", "target": "dataclass"}, {"type": "contains", "source": "text_data\\evaluators.txt:1048", "target": "dataclass"}, {"type": "contains", "source": "text_data\\evaluators.txt:1048", "target": "class"}, {"type": "contains", "source": "text_data\\evaluators.txt:1048", "target": "evaluatorcontext"}, {"type": "contains", "source": "text_data\\evaluators.txt:1048", "target": "evaluators"}, {"type": "contains", "source": "text_data\\evaluators.txt:1048", "target": "import"}, {"type": "contains", "source": "text_data\\evaluators.txt:1049", "target": "return"}, {"type": "contains", "source": "text_data\\evaluators.txt:1049", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evaluators.txt:1049", "target": "pydanticconfig"}, {"type": "contains", "source": "text_data\\evaluators.txt:1049", "target": "configdictarbitrarytypesallowedtrue"}, {"type": "contains", "source": "text_data\\evaluators.txt:1049", "target": "classmethod"}, {"type": "contains", "source": "text_data\\evaluators.txt:1050", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1050", "target": "either"}, {"type": "contains", "source": "text_data\\evaluators.txt:1050", "target": "evaluatoroutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1050", "target": "awaitableevaluatoroutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1050", "target": "context"}, {"type": "contains", "source": "text_data\\evaluators.txt:1051", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1051", "target": "evaluate"}, {"type": "contains", "source": "text_data\\evaluators.txt:1051", "target": "async"}, {"type": "contains", "source": "text_data\\evaluators.txt:1051", "target": "awaitable"}, {"type": "contains", "source": "text_data\\evaluators.txt:1051", "target": "asynchronous"}, {"type": "contains", "source": "text_data\\evaluators.txt:1052", "target": "async"}, {"type": "contains", "source": "text_data\\evaluators.txt:1052", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1052", "target": "return"}, {"type": "contains", "source": "text_data\\evaluators.txt:1052", "target": "implementations"}, {"type": "contains", "source": "text_data\\evaluators.txt:1052", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1053", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1053", "target": "return"}, {"type": "contains", "source": "text_data\\evaluators.txt:1053", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1053", "target": "await"}, {"type": "contains", "source": "text_data\\evaluators.txt:1053", "target": "context"}, {"type": "contains", "source": "text_data\\evaluators.txt:1054", "target": "value"}, {"type": "contains", "source": "text_data\\evaluators.txt:1054", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evaluators.txt:1054", "target": "jsonserializable"}, {"type": "contains", "source": "text_data\\evaluators.txt:1054", "target": "fielddefault"}, {"type": "contains", "source": "text_data\\evaluators.txt:1054", "target": "missing"}, {"type": "contains", "source": "text_data\\evaluators.txt:1055", "target": "arguments"}, {"type": "contains", "source": "text_data\\evaluators.txt:1055", "target": "lenrawarguments"}, {"type": "contains", "source": "text_data\\evaluators.txt:1055", "target": "continue"}, {"type": "contains", "source": "text_data\\evaluators.txt:1055", "target": "rawargumentsfieldname"}, {"type": "contains", "source": "text_data\\evaluators.txt:1055", "target": "value"}, {"type": "contains", "source": "text_data\\evaluators.txt:1056", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\evaluators.txt:1056", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evaluators.txt:1056", "target": "return"}, {"type": "contains", "source": "text_data\\evaluators.txt:1056", "target": "during"}, {"type": "contains", "source": "text_data\\evaluators.txt:1056", "target": "serialization"}, {"type": "contains", "source": "text_data\\evaluators.txt:1057", "target": "return"}, {"type": "contains", "source": "text_data\\evaluators.txt:1057", "target": "evaluate"}, {"type": "contains", "source": "text_data\\evaluators.txt:1057", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evaluators.txt:1057", "target": "classmethod"}, {"type": "contains", "source": "text_data\\evaluators.txt:1057", "target": "namecls"}, {"type": "contains", "source": "text_data\\evaluators.txt:1058", "target": "context"}, {"type": "contains", "source": "text_data\\evaluators.txt:1058", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1058", "target": "either"}, {"type": "contains", "source": "text_data\\evaluators.txt:1058", "target": "evaluate"}, {"type": "contains", "source": "text_data\\evaluators.txt:1058", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1059", "target": "evaluatoroutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1059", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\evaluators.txt:1059", "target": "collectionsabcawaitableevaluatoroutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1059", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1059", "target": "either"}, {"type": "contains", "source": "text_data\\evaluators.txt:1060", "target": "source"}, {"type": "contains", "source": "text_data\\evaluators.txt:1060", "target": "pydanticevalspydanticevalsevaluatorsevaluatorpy"}, {"type": "contains", "source": "text_data\\evaluators.txt:1062", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1062", "target": "either"}, {"type": "contains", "source": "text_data\\evaluators.txt:1062", "target": "evaluate"}, {"type": "contains", "source": "text_data\\evaluators.txt:1062", "target": "evaluatoroutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1062", "target": "awaitableevaluatoroutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1063", "target": "awaitable"}, {"type": "contains", "source": "text_data\\evaluators.txt:1063", "target": "asynchronous"}, {"type": "contains", "source": "text_data\\evaluators.txt:1063", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1063", "target": "raise"}, {"type": "contains", "source": "text_data\\evaluators.txt:1063", "target": "notimplementederroryou"}, {"type": "contains", "source": "text_data\\evaluators.txt:1064", "target": "evaluatorcontextinputst"}, {"type": "contains", "source": "text_data\\evaluators.txt:1064", "target": "outputt"}, {"type": "contains", "source": "text_data\\evaluators.txt:1064", "target": "metadatat"}, {"type": "contains", "source": "text_data\\evaluators.txt:1064", "target": "async"}, {"type": "contains", "source": "text_data\\evaluators.txt:1064", "target": "evaluatesync"}, {"type": "contains", "source": "text_data\\evaluators.txt:1065", "target": "evaluatoroutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1065", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1065", "target": "description"}, {"type": "contains", "source": "text_data\\evaluators.txt:1065", "target": "result"}, {"type": "contains", "source": "text_data\\evaluators.txt:1065", "target": "which"}, {"type": "contains", "source": "text_data\\evaluators.txt:1066", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1066", "target": "async"}, {"type": "contains", "source": "text_data\\evaluators.txt:1066", "target": "evaluatesyncself"}, {"type": "contains", "source": "text_data\\evaluators.txt:1066", "target": "evaluatorcontextinputst"}, {"type": "contains", "source": "text_data\\evaluators.txt:1066", "target": "outputt"}, {"type": "contains", "source": "text_data\\evaluators.txt:1067", "target": "return"}, {"type": "contains", "source": "text_data\\evaluators.txt:1067", "target": "inspectiscoroutineoutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1067", "target": "pragma"}, {"type": "contains", "source": "text_data\\evaluators.txt:1067", "target": "cover"}, {"type": "contains", "source": "text_data\\evaluators.txt:1067", "target": "geteventlooprununtilcompleteoutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1068", "target": "evaluatorcontextinputst"}, {"type": "contains", "source": "text_data\\evaluators.txt:1068", "target": "outputt"}, {"type": "contains", "source": "text_data\\evaluators.txt:1068", "target": "metadatat"}, {"type": "contains", "source": "text_data\\evaluators.txt:1068", "target": "async"}, {"type": "contains", "source": "text_data\\evaluators.txt:1068", "target": "implementations"}, {"type": "contains", "source": "text_data\\evaluators.txt:1069", "target": "evaluatoroutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1069", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1069", "target": "description"}, {"type": "contains", "source": "text_data\\evaluators.txt:1069", "target": "result"}, {"type": "contains", "source": "text_data\\evaluators.txt:1069", "target": "which"}, {"type": "contains", "source": "text_data\\evaluators.txt:1070", "target": "async"}, {"type": "contains", "source": "text_data\\evaluators.txt:1070", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1070", "target": "implementations"}, {"type": "contains", "source": "text_data\\evaluators.txt:1070", "target": "returns"}, {"type": "contains", "source": "text_data\\evaluators.txt:1070", "target": "result"}, {"type": "contains", "source": "text_data\\evaluators.txt:1071", "target": "return"}, {"type": "contains", "source": "text_data\\evaluators.txt:1071", "target": "output"}, {"type": "contains", "source": "text_data\\evaluators.txt:1071", "target": "await"}, {"type": "contains", "source": "text_data\\evaluators.txt:1071", "target": "evaluation"}, {"type": "contains", "source": "text_data\\evaluators.txt:1071", "target": "names"}, {"type": "contains", "source": "text_data\\evaluators.txt:1072", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\evaluators.txt:1072", "target": "typingany"}, {"type": "contains", "source": "text_data\\evaluators.txt:1072", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evaluators.txt:1072", "target": "jsonserializable"}, {"type": "contains", "source": "text_data\\evaluators.txt:1072", "target": "serializeinfo"}, {"type": "contains", "source": "text_data\\evaluators.txt:1074", "target": "value"}, {"type": "contains", "source": "text_data\\evaluators.txt:1074", "target": "evaluator"}, {"type": "contains", "source": "text_data\\evaluators.txt:1074", "target": "jsonserializable"}, {"type": "contains", "source": "text_data\\evaluators.txt:1074", "target": "fielddefault"}, {"type": "contains", "source": "text_data\\evaluators.txt:1074", "target": "missing"}, {"type": "contains", "source": "text_data\\evaluators.txt:1075", "target": "arguments"}, {"type": "contains", "source": "text_data\\evaluators.txt:1075", "target": "lenrawarguments"}, {"type": "contains", "source": "text_data\\evaluators.txt:1075", "target": "continue"}, {"type": "contains", "source": "text_data\\evaluators.txt:1075", "target": "rawargumentsfieldname"}, {"type": "contains", "source": "text_data\\evaluators.txt:1075", "target": "value"}, {"type": "contains", "source": "text_data\\evaluators.txt:1076", "target": "evaluationreason"}, {"type": "contains", "source": "text_data\\evaluators.txt:1076", "target": "unionhttpsdocspythonorg3librarytypinghtmltypingunion"}, {"type": "contains", "source": "text_data\\evaluators.txt:1076", "target": "evaluatoroutput"}, {"type": "contains", "source": "text_data\\evaluators.txt:1076", "target": "typingunion"}, {"type": "contains", "source": "text_data\\evaluators.txt:1076", "target": "evaluationscalar"}, {"type": "contains", "source": "text_data\\examples.txt:1076", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\examples.txt:1076", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\examples.txt:1076", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\examples.txt:1076", "target": "v0050"}, {"type": "contains", "source": "text_data\\examples.txt:1076", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\examples.txt:1077", "target": "tools"}, {"type": "contains", "source": "text_data\\examples.txt:1077", "target": "contributing"}, {"type": "contains", "source": "text_data\\examples.txt:1077", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\examples.txt:1077", "target": "documentation"}, {"type": "contains", "source": "text_data\\examples.txt:1077", "target": "agents"}, {"type": "contains", "source": "text_data\\examples.txt:1078", "target": "examples"}, {"type": "contains", "source": "text_data\\examples.txt:1078", "target": "client"}, {"type": "contains", "source": "text_data\\examples.txt:1078", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\examples.txt:1078", "target": "server"}, {"type": "contains", "source": "text_data\\examples.txt:1078", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\examples.txt:1079", "target": "stream"}, {"type": "contains", "source": "text_data\\examples.txt:1079", "target": "reference"}, {"type": "contains", "source": "text_data\\examples.txt:1079", "target": "pydantic"}, {"type": "contains", "source": "text_data\\examples.txt:1079", "target": "model"}, {"type": "contains", "source": "text_data\\examples.txt:1079", "target": "pydanticmodel"}, {"type": "contains", "source": "text_data\\examples.txt:1080", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\examples.txt:1080", "target": "apisettings"}, {"type": "contains", "source": "text_data\\examples.txt:1080", "target": "pydanticaiusage"}, {"type": "contains", "source": "text_data\\examples.txt:1080", "target": "apiusage"}, {"type": "contains", "source": "text_data\\examples.txt:1080", "target": "pydanticaimcp"}, {"type": "contains", "source": "text_data\\examples.txt:1081", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\examples.txt:1081", "target": "apimodelstest"}, {"type": "contains", "source": "text_data\\examples.txt:1081", "target": "pydanticaimodelsfunction"}, {"type": "contains", "source": "text_data\\examples.txt:1081", "target": "apimodelsfunction"}, {"type": "contains", "source": "text_data\\examples.txt:1081", "target": "pydanticaimodelsfallback"}, {"type": "contains", "source": "text_data\\examples.txt:1082", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\examples.txt:1082", "target": "apipydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\examples.txt:1082", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\examples.txt:1082", "target": "apipydanticevalsreporting"}, {"type": "contains", "source": "text_data\\examples.txt:1082", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\examples.txt:1083", "target": "examples"}, {"type": "contains", "source": "text_data\\examples.txt:1083", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\examples.txt:1083", "target": "dependencies"}, {"type": "contains", "source": "text_data\\examples.txt:1083", "target": "installing"}, {"type": "contains", "source": "text_data\\examples.txt:1083", "target": "install"}, {"type": "contains", "source": "text_data\\examples.txt:1084", "target": "examples"}, {"type": "contains", "source": "text_data\\examples.txt:1084", "target": "pipuv"}, {"type": "contains", "source": "text_data\\examples.txt:1084", "target": "install"}, {"type": "contains", "source": "text_data\\examples.txt:1084", "target": "pydanticaiexamples"}, {"type": "contains", "source": "text_data\\examples.txt:1084", "target": "extra"}, {"type": "contains", "source": "text_data\\examples.txt:1085", "target": "pipuv"}, {"type": "contains", "source": "text_data\\examples.txt:1085", "target": "examples"}, {"type": "contains", "source": "text_data\\examples.txt:1085", "target": "pydanticaiexamplespydanticmodel"}, {"type": "contains", "source": "text_data\\examples.txt:1085", "target": "python"}, {"type": "contains", "source": "text_data\\examples.txt:1085", "target": "pydanticaiexamplesexamplemodulename"}, {"type": "contains", "source": "text_data\\examples.txt:1086", "target": "pydanticaiexamples"}, {"type": "contains", "source": "text_data\\examples.txt:1086", "target": "copyto"}, {"type": "contains", "source": "text_data\\examples.txt:1086", "target": "examples"}, {"type": "contains", "source": "text_data\\examples.txt:1086", "target": "pipuv"}, {"type": "contains", "source": "text_data\\examples.txt:1086", "target": "python"}, {"type": "contains", "source": "text_data\\exceptions.txt:1086", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\exceptions.txt:1086", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\exceptions.txt:1086", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\exceptions.txt:1086", "target": "v0050"}, {"type": "contains", "source": "text_data\\exceptions.txt:1086", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\exceptions.txt:1087", "target": "tools"}, {"type": "contains", "source": "text_data\\exceptions.txt:1087", "target": "contributing"}, {"type": "contains", "source": "text_data\\exceptions.txt:1087", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\exceptions.txt:1087", "target": "documentation"}, {"type": "contains", "source": "text_data\\exceptions.txt:1087", "target": "agents"}, {"type": "contains", "source": "text_data\\exceptions.txt:1088", "target": "evals"}, {"type": "contains", "source": "text_data\\exceptions.txt:1088", "target": "input"}, {"type": "contains", "source": "text_data\\exceptions.txt:1088", "target": "graphs"}, {"type": "contains", "source": "text_data\\exceptions.txt:1088", "target": "graph"}, {"type": "contains", "source": "text_data\\exceptions.txt:1088", "target": "image"}, {"type": "contains", "source": "text_data\\exceptions.txt:1089", "target": "examples"}, {"type": "contains", "source": "text_data\\exceptions.txt:1089", "target": "client"}, {"type": "contains", "source": "text_data\\exceptions.txt:1089", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\exceptions.txt:1089", "target": "server"}, {"type": "contains", "source": "text_data\\exceptions.txt:1089", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\exceptions.txt:1090", "target": "agent"}, {"type": "contains", "source": "text_data\\exceptions.txt:1090", "target": "stream"}, {"type": "contains", "source": "text_data\\exceptions.txt:1090", "target": "reference"}, {"type": "contains", "source": "text_data\\exceptions.txt:1090", "target": "pydantic"}, {"type": "contains", "source": "text_data\\exceptions.txt:1090", "target": "model"}, {"type": "contains", "source": "text_data\\exceptions.txt:1091", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\exceptions.txt:1091", "target": "result"}, {"type": "contains", "source": "text_data\\exceptions.txt:1091", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\exceptions.txt:1091", "target": "messages"}, {"type": "contains", "source": "text_data\\exceptions.txt:1091", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\exceptions.txt:1092", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\exceptions.txt:1092", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\exceptions.txt:1092", "target": "modelsgroq"}, {"type": "contains", "source": "text_data\\exceptions.txt:1092", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\exceptions.txt:1092", "target": "modelsinstrumented"}, {"type": "contains", "source": "text_data\\exceptions.txt:1093", "target": "message"}, {"type": "contains", "source": "text_data\\exceptions.txt:1093", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\exceptions.txt:1093", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\exceptions.txt:1093", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\exceptions.txt:1093", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\exceptions.txt:1094", "target": "graphsetuperror"}, {"type": "contains", "source": "text_data\\exceptions.txt:1094", "target": "message"}, {"type": "contains", "source": "text_data\\exceptions.txt:1094", "target": "table"}, {"type": "contains", "source": "text_data\\exceptions.txt:1094", "target": "contents"}, {"type": "contains", "source": "text_data\\exceptions.txt:1094", "target": "exceptions"}, {"type": "contains", "source": "text_data\\exceptions.txt:1095", "target": "message"}, {"type": "contains", "source": "text_data\\exceptions.txt:1095", "target": "error"}, {"type": "contains", "source": "text_data\\exceptions.txt:1095", "target": "caused"}, {"type": "contains", "source": "text_data\\exceptions.txt:1095", "target": "graph"}, {"type": "contains", "source": "text_data\\exceptions.txt:1095", "target": "description"}, {"type": "contains", "source": "text_data\\exceptions.txt:1096", "target": "message"}, {"type": "contains", "source": "text_data\\exceptions.txt:1096", "target": "error"}, {"type": "contains", "source": "text_data\\exceptions.txt:1096", "target": "caused"}, {"type": "contains", "source": "text_data\\exceptions.txt:1096", "target": "source"}, {"type": "contains", "source": "text_data\\exceptions.txt:1096", "target": "pydanticgraphpydanticgraphexceptionspy"}, {"type": "contains", "source": "text_data\\exceptions.txt:1097", "target": "source"}, {"type": "contains", "source": "text_data\\exceptions.txt:1097", "target": "pydanticgraphpydanticgraphexceptionspy"}, {"type": "contains", "source": "text_data\\exceptions.txt:1098", "target": "status"}, {"type": "contains", "source": "text_data\\exceptions.txt:1098", "target": "error"}, {"type": "contains", "source": "text_data\\exceptions.txt:1098", "target": "actualstatus"}, {"type": "contains", "source": "text_data\\exceptions.txt:1098", "target": "snapshotstatus"}, {"type": "contains", "source": "text_data\\exceptions.txt:1098", "target": "created"}, {"type": "contains", "source": "text_data\\exceptions.txt:1099", "target": "status"}, {"type": "contains", "source": "text_data\\exceptions.txt:1099", "target": "check"}, {"type": "contains", "source": "text_data\\exceptions.txt:1099", "target": "valid"}, {"type": "contains", "source": "text_data\\exceptions.txt:1099", "target": "checkstatus"}, {"type": "contains", "source": "text_data\\exceptions.txt:1099", "target": "snapshotstatuspersistencepydanticgraphpersistencesnapshotstatus"}, {"type": "contains", "source": "text_data\\fallback.txt:1099", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\fallback.txt:1099", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\fallback.txt:1099", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\fallback.txt:1099", "target": "v0050"}, {"type": "contains", "source": "text_data\\fallback.txt:1099", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\fallback.txt:1100", "target": "tools"}, {"type": "contains", "source": "text_data\\fallback.txt:1100", "target": "contributing"}, {"type": "contains", "source": "text_data\\fallback.txt:1100", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\fallback.txt:1100", "target": "documentation"}, {"type": "contains", "source": "text_data\\fallback.txt:1100", "target": "agents"}, {"type": "contains", "source": "text_data\\fallback.txt:1101", "target": "evals"}, {"type": "contains", "source": "text_data\\fallback.txt:1101", "target": "input"}, {"type": "contains", "source": "text_data\\fallback.txt:1101", "target": "graphs"}, {"type": "contains", "source": "text_data\\fallback.txt:1101", "target": "graph"}, {"type": "contains", "source": "text_data\\fallback.txt:1101", "target": "image"}, {"type": "contains", "source": "text_data\\fallback.txt:1102", "target": "examples"}, {"type": "contains", "source": "text_data\\fallback.txt:1102", "target": "client"}, {"type": "contains", "source": "text_data\\fallback.txt:1102", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\fallback.txt:1102", "target": "server"}, {"type": "contains", "source": "text_data\\fallback.txt:1102", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\fallback.txt:1103", "target": "agent"}, {"type": "contains", "source": "text_data\\fallback.txt:1103", "target": "stream"}, {"type": "contains", "source": "text_data\\fallback.txt:1103", "target": "reference"}, {"type": "contains", "source": "text_data\\fallback.txt:1103", "target": "pydantic"}, {"type": "contains", "source": "text_data\\fallback.txt:1103", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1104", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\fallback.txt:1104", "target": "result"}, {"type": "contains", "source": "text_data\\fallback.txt:1104", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\fallback.txt:1104", "target": "messages"}, {"type": "contains", "source": "text_data\\fallback.txt:1104", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\fallback.txt:1105", "target": "pydanticaimodelsfallback"}, {"type": "contains", "source": "text_data\\fallback.txt:1105", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\fallback.txt:1105", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\fallback.txt:1105", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\fallback.txt:1105", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\fallback.txt:1106", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\fallback.txt:1106", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\fallback.txt:1106", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\fallback.txt:1106", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\fallback.txt:1106", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\fallback.txt:1107", "target": "fallback"}, {"type": "contains", "source": "text_data\\fallback.txt:1107", "target": "fallbackmodel"}, {"type": "contains", "source": "text_data\\fallback.txt:1107", "target": "table"}, {"type": "contains", "source": "text_data\\fallback.txt:1107", "target": "contents"}, {"type": "contains", "source": "text_data\\fallback.txt:1107", "target": "request"}, {"type": "contains", "source": "text_data\\fallback.txt:1111", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1111", "target": "class"}, {"type": "contains", "source": "text_data\\fallback.txt:1111", "target": "fallback"}, {"type": "contains", "source": "text_data\\fallback.txt:1111", "target": "models"}, {"type": "contains", "source": "text_data\\fallback.txt:1111", "target": "fallbackon"}, {"type": "contains", "source": "text_data\\fallback.txt:1112", "target": "fallback"}, {"type": "contains", "source": "text_data\\fallback.txt:1112", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1112", "target": "instance"}, {"type": "contains", "source": "text_data\\fallback.txt:1112", "target": "fallbackmodels"}, {"type": "contains", "source": "text_data\\fallback.txt:1112", "target": "fallbackon"}, {"type": "contains", "source": "text_data\\fallback.txt:1113", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\fallback.txt:1113", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\fallback.txt:1113", "target": "usage"}, {"type": "contains", "source": "text_data\\fallback.txt:1113", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1113", "target": "raise"}, {"type": "contains", "source": "text_data\\fallback.txt:1114", "target": "raise"}, {"type": "contains", "source": "text_data\\fallback.txt:1114", "target": "exceptions"}, {"type": "contains", "source": "text_data\\fallback.txt:1114", "target": "async"}, {"type": "contains", "source": "text_data\\fallback.txt:1114", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\fallback.txt:1114", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\fallback.txt:1115", "target": "response"}, {"type": "contains", "source": "text_data\\fallback.txt:1115", "target": "raise"}, {"type": "contains", "source": "text_data\\fallback.txt:1115", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1115", "target": "async"}, {"type": "contains", "source": "text_data\\fallback.txt:1115", "target": "asyncexitstack"}, {"type": "contains", "source": "text_data\\fallback.txt:1116", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1116", "target": "property"}, {"type": "contains", "source": "text_data\\fallback.txt:1116", "target": "attributes"}, {"type": "contains", "source": "text_data\\fallback.txt:1116", "target": "return"}, {"type": "contains", "source": "text_data\\fallback.txt:1116", "target": "selfmodels"}, {"type": "contains", "source": "text_data\\fallback.txt:1117", "target": "property"}, {"type": "contains", "source": "text_data\\fallback.txt:1117", "target": "baseurlself"}, {"type": "contains", "source": "text_data\\fallback.txt:1117", "target": "return"}, {"type": "contains", "source": "text_data\\fallback.txt:1117", "target": "selfmodels0baseurl"}, {"type": "contains", "source": "text_data\\fallback.txt:1118", "target": "modelbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\fallback.txt:1118", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\fallback.txt:1118", "target": "knownmodelnamebasepydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\fallback.txt:1118", "target": "pydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\fallback.txt:1118", "target": "defaultmodel"}, {"type": "contains", "source": "text_data\\fallback.txt:1119", "target": "tuplehttpsdocspythonorg3librarystdtypeshtmltupletypehttpsdocspythonorg3libraryfunctionshtmltypeexceptionhttpsdocspythonorg3libraryexceptionshtmlexception"}, {"type": "contains", "source": "text_data\\fallback.txt:1119", "target": "modelhttperrorexceptionspydanticaiexceptionsmodelhttperror"}, {"type": "contains", "source": "text_data\\fallback.txt:1119", "target": "pydanticaiexceptionsmodelhttperror"}, {"type": "contains", "source": "text_data\\fallback.txt:1120", "target": "initialize"}, {"type": "contains", "source": "text_data\\fallback.txt:1120", "target": "fallback"}, {"type": "contains", "source": "text_data\\fallback.txt:1120", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1120", "target": "instance"}, {"type": "contains", "source": "text_data\\fallback.txt:1120", "target": "parameters"}, {"type": "contains", "source": "text_data\\fallback.txt:1121", "target": "default"}, {"type": "contains", "source": "text_data\\fallback.txt:1121", "target": "modelbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\fallback.txt:1121", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\fallback.txt:1121", "target": "knownmodelnamebasepydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\fallback.txt:1121", "target": "pydanticaimodelsknownmodelname"}, {"type": "contains", "source": "text_data\\fallback.txt:1122", "target": "fallbackon"}, {"type": "contains", "source": "text_data\\fallback.txt:1122", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\fallback.txt:1122", "target": "typingcallableexceptionhttpsdocspythonorg3libraryexceptionshtmlexception"}, {"type": "contains", "source": "text_data\\fallback.txt:1122", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\fallback.txt:1122", "target": "tuplehttpsdocspythonorg3librarystdtypeshtmltupletypehttpsdocspythonorg3libraryfunctionshtmltypeexceptionhttpsdocspythonorg3libraryexceptionshtmlexception"}, {"type": "contains", "source": "text_data\\fallback.txt:1124", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1124", "target": "fallbackmodels"}, {"type": "contains", "source": "text_data\\fallback.txt:1124", "target": "fallback"}, {"type": "contains", "source": "text_data\\fallback.txt:1124", "target": "defaultmodel"}, {"type": "contains", "source": "text_data\\fallback.txt:1124", "target": "knownmodelname"}, {"type": "contains", "source": "text_data\\fallback.txt:1125", "target": "selffallbackon"}, {"type": "contains", "source": "text_data\\fallback.txt:1125", "target": "isinstancefallbackon"}, {"type": "contains", "source": "text_data\\fallback.txt:1125", "target": "tuple"}, {"type": "contains", "source": "text_data\\fallback.txt:1125", "target": "defaultfallbackconditionfactoryfallbackon"}, {"type": "contains", "source": "text_data\\fallback.txt:1125", "target": "fallbackon"}, {"type": "contains", "source": "text_data\\fallback.txt:1126", "target": "request"}, {"type": "contains", "source": "text_data\\fallback.txt:1126", "target": "messages"}, {"type": "contains", "source": "text_data\\fallback.txt:1126", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\fallback.txt:1126", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\fallback.txt:1126", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\fallback.txt:1127", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1127", "target": "sequence"}, {"type": "contains", "source": "text_data\\fallback.txt:1127", "target": "until"}, {"type": "contains", "source": "text_data\\fallback.txt:1127", "target": "succeeds"}, {"type": "contains", "source": "text_data\\fallback.txt:1127", "target": "failure"}, {"type": "contains", "source": "text_data\\fallback.txt:1128", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\fallback.txt:1128", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\fallback.txt:1128", "target": "usage"}, {"type": "contains", "source": "text_data\\fallback.txt:1128", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1128", "target": "raise"}, {"type": "contains", "source": "text_data\\fallback.txt:1129", "target": "raise"}, {"type": "contains", "source": "text_data\\fallback.txt:1129", "target": "continue"}, {"type": "contains", "source": "text_data\\fallback.txt:1129", "target": "selfsetspanattributesmodel"}, {"type": "contains", "source": "text_data\\fallback.txt:1129", "target": "return"}, {"type": "contains", "source": "text_data\\fallback.txt:1129", "target": "response"}, {"type": "contains", "source": "text_data\\fallback.txt:1130", "target": "requeststream"}, {"type": "contains", "source": "text_data\\fallback.txt:1130", "target": "messages"}, {"type": "contains", "source": "text_data\\fallback.txt:1130", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\fallback.txt:1130", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\fallback.txt:1130", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\fallback.txt:1131", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1131", "target": "sequence"}, {"type": "contains", "source": "text_data\\fallback.txt:1131", "target": "until"}, {"type": "contains", "source": "text_data\\fallback.txt:1131", "target": "succeeds"}, {"type": "contains", "source": "text_data\\fallback.txt:1131", "target": "source"}, {"type": "contains", "source": "text_data\\fallback.txt:1132", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\fallback.txt:1132", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\fallback.txt:1132", "target": "async"}, {"type": "contains", "source": "text_data\\fallback.txt:1132", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1132", "target": "asynccontextmanager"}, {"type": "contains", "source": "text_data\\fallback.txt:1133", "target": "raise"}, {"type": "contains", "source": "text_data\\fallback.txt:1133", "target": "exceptionsappendexc"}, {"type": "contains", "source": "text_data\\fallback.txt:1133", "target": "continue"}, {"type": "contains", "source": "text_data\\fallback.txt:1133", "target": "selfsetspanattributesmodel"}, {"type": "contains", "source": "text_data\\fallback.txt:1133", "target": "yield"}, {"type": "contains", "source": "text_data\\fallback.txt:1134", "target": "modelname"}, {"type": "contains", "source": "text_data\\fallback.txt:1134", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\fallback.txt:1134", "target": "model"}, {"type": "contains", "source": "text_data\\fallback.txt:1134", "target": "pydantic"}, {"type": "contains", "source": "text_data\\fallback.txt:1134", "target": "services"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1134", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1134", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1134", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1134", "target": "v0050"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1134", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1135", "target": "tools"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1135", "target": "contributing"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1135", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1135", "target": "documentation"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1135", "target": "agents"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1136", "target": "input"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1136", "target": "image"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1136", "target": "audio"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1136", "target": "document"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1137", "target": "examples"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1137", "target": "client"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1137", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1137", "target": "server"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1137", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1138", "target": "flight"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1138", "target": "booking"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1138", "target": "example"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1138", "target": "stream"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1138", "target": "reference"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1139", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1139", "target": "apimessages"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1139", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1139", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1139", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1140", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1140", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1140", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1140", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1140", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1141", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1141", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1141", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1141", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1141", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1142", "target": "example"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1142", "target": "agent"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1142", "target": "running"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1142", "target": "flight"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1142", "target": "control"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1143", "target": "pydanticaiexamplesflightbooking"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1143", "target": "pipuv"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1143", "target": "python"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1143", "target": "example"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1143", "target": "flightbookingpy"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1144", "target": "import"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1144", "target": "logfire"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1144", "target": "datetime"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1144", "target": "dataclasses"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1144", "target": "dataclass"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1145", "target": "fielddescriptionthreeletter"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1145", "target": "airport"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1145", "target": "datetimedate"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1145", "target": "class"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1145", "target": "flight"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1146", "target": "agent"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1146", "target": "details"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1146", "target": "flight"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1146", "target": "flights"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1146", "target": "instrumenttrue"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1147", "target": "noflightfound"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1147", "target": "return"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1147", "target": "result"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1147", "target": "flightdetails"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1147", "target": "resultorigin"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1148", "target": "resultdate"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1148", "target": "ctxdepsreqdate"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1148", "target": "class"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1148", "target": "extract"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1148", "target": "selection"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1149", "target": "international"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1149", "target": "airport"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1149", "target": "seats"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1149", "target": "extra"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1149", "target": "flight"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1150", "target": "international"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1150", "target": "airport"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1150", "target": "destination"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1150", "target": "january"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1150", "target": "flight"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1151", "target": "airport"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1151", "target": "international"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1151", "target": "price"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1151", "target": "origin"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1151", "target": "destination"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1152", "target": "usage"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1152", "target": "flight"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1152", "target": "found"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1152", "target": "webpagetextflightswebpage"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1152", "target": "reqoriginsfo"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1153", "target": "flight"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1153", "target": "found"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1153", "target": "break"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1153", "target": "answer"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1153", "target": "await"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1154", "target": "seatpreference"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1154", "target": "async"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1154", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1154", "target": "answer"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1154", "target": "findseatusage"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1155", "target": "async"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1155", "target": "buyticketsflightdetails"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1155", "target": "flightdetails"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1155", "target": "seatpreference"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1155", "target": "printfpurchasing"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1156", "target": "pydantic"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1156", "target": "services"}, {"type": "contains", "source": "text_data\\flight-booking.txt:1156", "target": "present"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1156", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1156", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1156", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1156", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1156", "target": "repository"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1157", "target": "tools"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1157", "target": "contributing"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1157", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1157", "target": "documentation"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1157", "target": "agents"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1158", "target": "input"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1158", "target": "image"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1158", "target": "audio"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1158", "target": "document"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1159", "target": "examples"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1159", "target": "client"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1159", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1159", "target": "server"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1159", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1160", "target": "agent"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1160", "target": "stream"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1160", "target": "reference"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1160", "target": "pydantic"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1160", "target": "model"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1161", "target": "pydanticaiformatasxml"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1161", "target": "formatasxml"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1161", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1161", "target": "result"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1161", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1162", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1162", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1162", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1162", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1162", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1163", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1163", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1163", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1163", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1163", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1164", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1164", "target": "formatasxml"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1164", "target": "table"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1164", "target": "contents"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1164", "target": "pydanticaiformatasxml"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1165", "target": "format"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1165", "target": "python"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1165", "target": "object"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1165", "target": "useful"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1165", "target": "since"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1166", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1166", "target": "outer"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1166", "target": "description"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1166", "target": "default"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1166", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1167", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1167", "target": "string"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1167", "target": "includeroottag"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1167", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1167", "target": "whether"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1168", "target": "description"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1168", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1168", "target": "representation"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1168", "target": "object"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1168", "target": "example"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1169", "target": "source"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1169", "target": "pydanticaislimpydanticaiformatasxmlpy"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1170", "target": "roottag"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1170", "target": "examples"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1170", "target": "python"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1170", "target": "object"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1170", "target": "outer"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1171", "target": "string"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1171", "target": "itemtag"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1171", "target": "iterable"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1171", "target": "overridden"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1171", "target": "class"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1172", "target": "indent"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1172", "target": "return"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1172", "target": "namejohnname"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1172", "target": "height6height"}, {"type": "contains", "source": "text_data\\format_as_xml.txt:1172", "target": "weight200weight"}, {"type": "contains", "source": "text_data\\function.txt:1172", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\function.txt:1172", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\function.txt:1172", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\function.txt:1172", "target": "v0050"}, {"type": "contains", "source": "text_data\\function.txt:1172", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\function.txt:1173", "target": "tools"}, {"type": "contains", "source": "text_data\\function.txt:1173", "target": "contributing"}, {"type": "contains", "source": "text_data\\function.txt:1173", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\function.txt:1173", "target": "documentation"}, {"type": "contains", "source": "text_data\\function.txt:1173", "target": "agents"}, {"type": "contains", "source": "text_data\\function.txt:1174", "target": "evals"}, {"type": "contains", "source": "text_data\\function.txt:1174", "target": "input"}, {"type": "contains", "source": "text_data\\function.txt:1174", "target": "graphs"}, {"type": "contains", "source": "text_data\\function.txt:1174", "target": "graph"}, {"type": "contains", "source": "text_data\\function.txt:1174", "target": "image"}, {"type": "contains", "source": "text_data\\function.txt:1175", "target": "examples"}, {"type": "contains", "source": "text_data\\function.txt:1175", "target": "client"}, {"type": "contains", "source": "text_data\\function.txt:1175", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\function.txt:1175", "target": "server"}, {"type": "contains", "source": "text_data\\function.txt:1175", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\function.txt:1176", "target": "agent"}, {"type": "contains", "source": "text_data\\function.txt:1176", "target": "stream"}, {"type": "contains", "source": "text_data\\function.txt:1176", "target": "reference"}, {"type": "contains", "source": "text_data\\function.txt:1176", "target": "pydantic"}, {"type": "contains", "source": "text_data\\function.txt:1176", "target": "model"}, {"type": "contains", "source": "text_data\\function.txt:1177", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\function.txt:1177", "target": "result"}, {"type": "contains", "source": "text_data\\function.txt:1177", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\function.txt:1177", "target": "messages"}, {"type": "contains", "source": "text_data\\function.txt:1177", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\function.txt:1178", "target": "pydanticaimodelsfunction"}, {"type": "contains", "source": "text_data\\function.txt:1178", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1178", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\function.txt:1178", "target": "mistral"}, {"type": "contains", "source": "text_data\\function.txt:1178", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\function.txt:1179", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\function.txt:1179", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\function.txt:1179", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\function.txt:1179", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\function.txt:1179", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\function.txt:1180", "target": "function"}, {"type": "contains", "source": "text_data\\function.txt:1180", "target": "functionmodel"}, {"type": "contains", "source": "text_data\\function.txt:1180", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1180", "target": "table"}, {"type": "contains", "source": "text_data\\function.txt:1180", "target": "contents"}, {"type": "contains", "source": "text_data\\function.txt:1181", "target": "import"}, {"type": "contains", "source": "text_data\\function.txt:1181", "target": "agent"}, {"type": "contains", "source": "text_data\\function.txt:1181", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\function.txt:1181", "target": "agentinfo"}, {"type": "contains", "source": "text_data\\function.txt:1181", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\function.txt:1182", "target": "world"}, {"type": "contains", "source": "text_data\\function.txt:1182", "target": "printinfo"}, {"type": "contains", "source": "text_data\\function.txt:1182", "target": "agentinfo"}, {"type": "contains", "source": "text_data\\function.txt:1182", "target": "functiontools"}, {"type": "contains", "source": "text_data\\function.txt:1182", "target": "allowtextresulttrue"}, {"type": "contains", "source": "text_data\\function.txt:1183", "target": "functionmodel"}, {"type": "contains", "source": "text_data\\function.txt:1183", "target": "testing"}, {"type": "contains", "source": "text_data\\function.txt:1183", "target": "functionmodeltestingunittestingwith"}, {"type": "contains", "source": "text_data\\function.txt:1183", "target": "detailed"}, {"type": "contains", "source": "text_data\\function.txt:1183", "target": "documentation"}, {"type": "contains", "source": "text_data\\function.txt:1187", "target": "function"}, {"type": "contains", "source": "text_data\\function.txt:1187", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1187", "target": "overload"}, {"type": "contains", "source": "text_data\\function.txt:1187", "target": "class"}, {"type": "contains", "source": "text_data\\function.txt:1187", "target": "functiondef"}, {"type": "contains", "source": "text_data\\function.txt:1188", "target": "function"}, {"type": "contains", "source": "text_data\\function.txt:1188", "target": "streamfunction"}, {"type": "contains", "source": "text_data\\function.txt:1188", "target": "functiondef"}, {"type": "contains", "source": "text_data\\function.txt:1188", "target": "streamfunctiondef"}, {"type": "contains", "source": "text_data\\function.txt:1188", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1189", "target": "function"}, {"type": "contains", "source": "text_data\\function.txt:1189", "target": "streamfunction"}, {"type": "contains", "source": "text_data\\function.txt:1189", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1189", "target": "provided"}, {"type": "contains", "source": "text_data\\function.txt:1189", "target": "selffunction"}, {"type": "contains", "source": "text_data\\function.txt:1190", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\function.txt:1190", "target": "agentinfo"}, {"type": "contains", "source": "text_data\\function.txt:1190", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\function.txt:1190", "target": "async"}, {"type": "contains", "source": "text_data\\function.txt:1190", "target": "request"}, {"type": "contains", "source": "text_data\\function.txt:1191", "target": "response"}, {"type": "contains", "source": "text_data\\function.txt:1191", "target": "messages"}, {"type": "contains", "source": "text_data\\function.txt:1191", "target": "agentinfo"}, {"type": "contains", "source": "text_data\\function.txt:1191", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\function.txt:1191", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\function.txt:1192", "target": "agentinfo"}, {"type": "contains", "source": "text_data\\function.txt:1192", "target": "modelrequestparametersfunctiontools"}, {"type": "contains", "source": "text_data\\function.txt:1192", "target": "modelrequestparametersallowtextresult"}, {"type": "contains", "source": "text_data\\function.txt:1192", "target": "modelrequestparametersresulttools"}, {"type": "contains", "source": "text_data\\function.txt:1192", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\function.txt:1193", "target": "property"}, {"type": "contains", "source": "text_data\\function.txt:1193", "target": "model"}, {"type": "contains", "source": "text_data\\function.txt:1193", "target": "return"}, {"type": "contains", "source": "text_data\\function.txt:1193", "target": "yield"}, {"type": "contains", "source": "text_data\\function.txt:1193", "target": "functionstreamedresponsemodelnameselfmodelname"}, {"type": "contains", "source": "text_data\\function.txt:1194", "target": "function"}, {"type": "contains", "source": "text_data\\function.txt:1194", "target": "functiondef"}, {"type": "contains", "source": "text_data\\function.txt:1194", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1194", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\function.txt:1194", "target": "streamfunction"}, {"type": "contains", "source": "text_data\\function.txt:1195", "target": "streamfunction"}, {"type": "contains", "source": "text_data\\function.txt:1195", "target": "streamfunctiondef"}, {"type": "contains", "source": "text_data\\function.txt:1195", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1195", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\function.txt:1196", "target": "function"}, {"type": "contains", "source": "text_data\\function.txt:1196", "target": "streamfunction"}, {"type": "contains", "source": "text_data\\function.txt:1196", "target": "provided"}, {"type": "contains", "source": "text_data\\function.txt:1196", "target": "requests"}, {"type": "contains", "source": "text_data\\function.txt:1196", "target": "initialize"}, {"type": "contains", "source": "text_data\\function.txt:1198", "target": "function"}, {"type": "contains", "source": "text_data\\function.txt:1198", "target": "streamfunction"}, {"type": "contains", "source": "text_data\\function.txt:1198", "target": "provided"}, {"type": "contains", "source": "text_data\\function.txt:1198", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1198", "target": "requests"}, {"type": "contains", "source": "text_data\\function.txt:1199", "target": "selffunction"}, {"type": "contains", "source": "text_data\\function.txt:1199", "target": "selfstreamfunction"}, {"type": "contains", "source": "text_data\\function.txt:1199", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1199", "target": "function"}, {"type": "contains", "source": "text_data\\function.txt:1199", "target": "streamfunction"}, {"type": "contains", "source": "text_data\\function.txt:1200", "target": "system"}, {"type": "contains", "source": "text_data\\function.txt:1200", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\function.txt:1200", "target": "model"}, {"type": "contains", "source": "text_data\\function.txt:1200", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1200", "target": "property"}, {"type": "contains", "source": "text_data\\function.txt:1201", "target": "tools"}, {"type": "contains", "source": "text_data\\function.txt:1201", "target": "agent"}, {"type": "contains", "source": "text_data\\function.txt:1201", "target": "listtooldefinition"}, {"type": "contains", "source": "text_data\\function.txt:1201", "target": "result"}, {"type": "contains", "source": "text_data\\function.txt:1201", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\function.txt:1202", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\function.txt:1202", "target": "model"}, {"type": "contains", "source": "text_data\\function.txt:1202", "target": "settings"}, {"type": "contains", "source": "text_data\\function.txt:1202", "target": "passed"}, {"type": "contains", "source": "text_data\\function.txt:1202", "target": "functiontools"}, {"type": "contains", "source": "text_data\\function.txt:1203", "target": "tools"}, {"type": "contains", "source": "text_data\\function.txt:1203", "target": "allowtextresult"}, {"type": "contains", "source": "text_data\\function.txt:1203", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\function.txt:1203", "target": "functiontools"}, {"type": "contains", "source": "text_data\\function.txt:1203", "target": "listhttpsdocspythonorg3librarystdtypeshtmllisttooldefinitiontoolspydanticaitoolstooldefinition"}, {"type": "contains", "source": "text_data\\function.txt:1204", "target": "resulttools"}, {"type": "contains", "source": "text_data\\function.txt:1204", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\function.txt:1204", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\function.txt:1204", "target": "listhttpsdocspythonorg3librarystdtypeshtmllisttooldefinitiontoolspydanticaitoolstooldefinition"}, {"type": "contains", "source": "text_data\\function.txt:1204", "target": "pydanticaitoolstooldefinition"}, {"type": "contains", "source": "text_data\\function.txt:1205", "target": "incremental"}, {"type": "contains", "source": "text_data\\function.txt:1205", "target": "change"}, {"type": "contains", "source": "text_data\\function.txt:1205", "target": "source"}, {"type": "contains", "source": "text_data\\function.txt:1205", "target": "pydanticaislimpydanticaimodelsfunctionpy"}, {"type": "contains", "source": "text_data\\function.txt:1205", "target": "dataclass"}, {"type": "contains", "source": "text_data\\function.txt:1206", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\function.txt:1206", "target": "incremental"}, {"type": "contains", "source": "text_data\\function.txt:1206", "target": "change"}, {"type": "contains", "source": "text_data\\function.txt:1206", "target": "jsonargs"}, {"type": "contains", "source": "text_data\\function.txt:1206", "target": "classattribute"}, {"type": "contains", "source": "text_data\\function.txt:1207", "target": "deltatoolcalls"}, {"type": "contains", "source": "text_data\\function.txt:1207", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\function.txt:1207", "target": "typealiashttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionstypealias"}, {"type": "contains", "source": "text_data\\function.txt:1207", "target": "typingextensionstypealias"}, {"type": "contains", "source": "text_data\\function.txt:1207", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictinthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\function.txt:1208", "target": "functiondef"}, {"type": "contains", "source": "text_data\\function.txt:1208", "target": "typealiashttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionstypealias"}, {"type": "contains", "source": "text_data\\function.txt:1208", "target": "typingextensionstypealias"}, {"type": "contains", "source": "text_data\\function.txt:1208", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\function.txt:1208", "target": "typingcallable"}, {"type": "contains", "source": "text_data\\function.txt:1209", "target": "pydanticaimessagesmodelresponse"}, {"type": "contains", "source": "text_data\\function.txt:1209", "target": "unionhttpsdocspythonorg3librarytypinghtmltypingunion"}, {"type": "contains", "source": "text_data\\function.txt:1209", "target": "typingunionmodelresponsemessagespydanticaimessagesmodelresponse"}, {"type": "contains", "source": "text_data\\function.txt:1209", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\function.txt:1209", "target": "collectionsabcawaitablemodelresponsemessagespydanticaimessagesmodelresponse"}, {"type": "contains", "source": "text_data\\function.txt:1210", "target": "function"}, {"type": "contains", "source": "text_data\\function.txt:1210", "target": "generate"}, {"type": "contains", "source": "text_data\\function.txt:1210", "target": "nonstreamed"}, {"type": "contains", "source": "text_data\\function.txt:1210", "target": "response"}, {"type": "contains", "source": "text_data\\function.txt:1210", "target": "streamfunctiondef"}, {"type": "contains", "source": "text_data\\function.txt:1211", "target": "streamfunctiondef"}, {"type": "contains", "source": "text_data\\function.txt:1211", "target": "typealiashttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionstypealias"}, {"type": "contains", "source": "text_data\\function.txt:1211", "target": "typingextensionstypealias"}, {"type": "contains", "source": "text_data\\function.txt:1211", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\function.txt:1211", "target": "typingcallable"}, {"type": "contains", "source": "text_data\\function.txt:1212", "target": "deltatoolcalls"}, {"type": "contains", "source": "text_data\\function.txt:1212", "target": "function"}, {"type": "contains", "source": "text_data\\function.txt:1212", "target": "generate"}, {"type": "contains", "source": "text_data\\function.txt:1212", "target": "streamed"}, {"type": "contains", "source": "text_data\\function.txt:1212", "target": "response"}, {"type": "contains", "source": "text_data\\function.txt:1213", "target": "source"}, {"type": "contains", "source": "text_data\\function.txt:1213", "target": "pydanticaislimpydanticaimodelsfunctionpy"}, {"type": "contains", "source": "text_data\\function.txt:1214", "target": "selfusage"}, {"type": "contains", "source": "text_data\\function.txt:1214", "target": "async"}, {"type": "contains", "source": "text_data\\function.txt:1214", "target": "dataclass"}, {"type": "contains", "source": "text_data\\function.txt:1214", "target": "class"}, {"type": "contains", "source": "text_data\\function.txt:1214", "target": "functionstreamedresponsestreamedresponse"}, {"type": "contains", "source": "text_data\\function.txt:1215", "target": "yield"}, {"type": "contains", "source": "text_data\\function.txt:1215", "target": "selfpartsmanagerhandletextdeltavendorpartidcontent"}, {"type": "contains", "source": "text_data\\function.txt:1215", "target": "contentitem"}, {"type": "contains", "source": "text_data\\function.txt:1215", "target": "deltatoolcalls"}, {"type": "contains", "source": "text_data\\function.txt:1215", "target": "dtcindex"}, {"type": "contains", "source": "text_data\\function.txt:1216", "target": "property"}, {"type": "contains", "source": "text_data\\function.txt:1216", "target": "maybeevent"}, {"type": "contains", "source": "text_data\\function.txt:1216", "target": "response"}, {"type": "contains", "source": "text_data\\function.txt:1216", "target": "return"}, {"type": "contains", "source": "text_data\\function.txt:1216", "target": "argsdeltatoolcalljsonargs"}, {"type": "contains", "source": "text_data\\function.txt:1217", "target": "timestamp"}, {"type": "contains", "source": "text_data\\function.txt:1217", "target": "response"}, {"type": "contains", "source": "text_data\\function.txt:1217", "target": "modelname"}, {"type": "contains", "source": "text_data\\function.txt:1217", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\function.txt:1217", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1217", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\gemini.txt:1217", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\gemini.txt:1217", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\gemini.txt:1217", "target": "v0050"}, {"type": "contains", "source": "text_data\\gemini.txt:1217", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\gemini.txt:1218", "target": "tools"}, {"type": "contains", "source": "text_data\\gemini.txt:1218", "target": "contributing"}, {"type": "contains", "source": "text_data\\gemini.txt:1218", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\gemini.txt:1218", "target": "documentation"}, {"type": "contains", "source": "text_data\\gemini.txt:1218", "target": "agents"}, {"type": "contains", "source": "text_data\\gemini.txt:1219", "target": "evals"}, {"type": "contains", "source": "text_data\\gemini.txt:1219", "target": "input"}, {"type": "contains", "source": "text_data\\gemini.txt:1219", "target": "graphs"}, {"type": "contains", "source": "text_data\\gemini.txt:1219", "target": "graph"}, {"type": "contains", "source": "text_data\\gemini.txt:1219", "target": "image"}, {"type": "contains", "source": "text_data\\gemini.txt:1220", "target": "examples"}, {"type": "contains", "source": "text_data\\gemini.txt:1220", "target": "client"}, {"type": "contains", "source": "text_data\\gemini.txt:1220", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\gemini.txt:1220", "target": "server"}, {"type": "contains", "source": "text_data\\gemini.txt:1220", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\gemini.txt:1221", "target": "agent"}, {"type": "contains", "source": "text_data\\gemini.txt:1221", "target": "stream"}, {"type": "contains", "source": "text_data\\gemini.txt:1221", "target": "reference"}, {"type": "contains", "source": "text_data\\gemini.txt:1221", "target": "pydantic"}, {"type": "contains", "source": "text_data\\gemini.txt:1221", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1222", "target": "pydanticaimodelsgemini"}, {"type": "contains", "source": "text_data\\gemini.txt:1222", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\gemini.txt:1222", "target": "result"}, {"type": "contains", "source": "text_data\\gemini.txt:1222", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\gemini.txt:1222", "target": "messages"}, {"type": "contains", "source": "text_data\\gemini.txt:1223", "target": "modelname"}, {"type": "contains", "source": "text_data\\gemini.txt:1223", "target": "geminimodelname"}, {"type": "contains", "source": "text_data\\gemini.txt:1223", "target": "geminimodelsettings"}, {"type": "contains", "source": "text_data\\gemini.txt:1223", "target": "geminimodel"}, {"type": "contains", "source": "text_data\\gemini.txt:1223", "target": "system"}, {"type": "contains", "source": "text_data\\gemini.txt:1224", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\gemini.txt:1224", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\gemini.txt:1224", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\gemini.txt:1224", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\gemini.txt:1224", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\gemini.txt:1225", "target": "modelname"}, {"type": "contains", "source": "text_data\\gemini.txt:1225", "target": "table"}, {"type": "contains", "source": "text_data\\gemini.txt:1225", "target": "contents"}, {"type": "contains", "source": "text_data\\gemini.txt:1225", "target": "setup"}, {"type": "contains", "source": "text_data\\gemini.txt:1225", "target": "gemini"}, {"type": "contains", "source": "text_data\\gemini.txt:1226", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1226", "target": "python"}, {"type": "contains", "source": "text_data\\gemini.txt:1226", "target": "doesnt"}, {"type": "contains", "source": "text_data\\gemini.txt:1226", "target": "implement"}, {"type": "contains", "source": "text_data\\gemini.txt:1226", "target": "google"}, {"type": "contains", "source": "text_data\\gemini.txt:1227", "target": "latestgeminimodelnames"}, {"type": "contains", "source": "text_data\\gemini.txt:1227", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\gemini.txt:1227", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\gemini.txt:1227", "target": "typingliteral"}, {"type": "contains", "source": "text_data\\gemini.txt:1227", "target": "gemini15flash"}, {"type": "contains", "source": "text_data\\gemini.txt:1228", "target": "gemini"}, {"type": "contains", "source": "text_data\\gemini.txt:1228", "target": "models"}, {"type": "contains", "source": "text_data\\gemini.txt:1228", "target": "latest"}, {"type": "contains", "source": "text_data\\gemini.txt:1228", "target": "geminimodelname"}, {"type": "contains", "source": "text_data\\gemini.txt:1228", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1229", "target": "gemini"}, {"type": "contains", "source": "text_data\\gemini.txt:1229", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1229", "target": "settings"}, {"type": "contains", "source": "text_data\\gemini.txt:1229", "target": "request"}, {"type": "contains", "source": "text_data\\gemini.txt:1229", "target": "fields"}, {"type": "contains", "source": "text_data\\gemini.txt:1230", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1230", "target": "gemini"}, {"type": "contains", "source": "text_data\\gemini.txt:1230", "target": "generativelanguagegoogleapiscom"}, {"type": "contains", "source": "text_data\\gemini.txt:1230", "target": "implemented"}, {"type": "contains", "source": "text_data\\gemini.txt:1230", "target": "scratch"}, {"type": "contains", "source": "text_data\\gemini.txt:1235", "target": "fieldreprfalse"}, {"type": "contains", "source": "text_data\\gemini.txt:1235", "target": "class"}, {"type": "contains", "source": "text_data\\gemini.txt:1235", "target": "dataclassinitfalse"}, {"type": "contains", "source": "text_data\\gemini.txt:1235", "target": "geminimodelmodel"}, {"type": "contains", "source": "text_data\\gemini.txt:1235", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1236", "target": "provider"}, {"type": "contains", "source": "text_data\\gemini.txt:1236", "target": "modelname"}, {"type": "contains", "source": "text_data\\gemini.txt:1236", "target": "googlevertex"}, {"type": "contains", "source": "text_data\\gemini.txt:1236", "target": "providerhttpxasyncclient"}, {"type": "contains", "source": "text_data\\gemini.txt:1236", "target": "googlegla"}, {"type": "contains", "source": "text_data\\gemini.txt:1237", "target": "selfurl"}, {"type": "contains", "source": "text_data\\gemini.txt:1237", "target": "provider"}, {"type": "contains", "source": "text_data\\gemini.txt:1237", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\gemini.txt:1237", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\gemini.txt:1237", "target": "selfmodelname"}, {"type": "contains", "source": "text_data\\gemini.txt:1238", "target": "async"}, {"type": "contains", "source": "text_data\\gemini.txt:1238", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\gemini.txt:1238", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\gemini.txt:1238", "target": "checkallowmodelrequests"}, {"type": "contains", "source": "text_data\\gemini.txt:1238", "target": "selfmakerequest"}, {"type": "contains", "source": "text_data\\gemini.txt:1239", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\gemini.txt:1239", "target": "property"}, {"type": "contains", "source": "text_data\\gemini.txt:1239", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1239", "target": "return"}, {"type": "contains", "source": "text_data\\gemini.txt:1239", "target": "async"}, {"type": "contains", "source": "text_data\\gemini.txt:1240", "target": "tools"}, {"type": "contains", "source": "text_data\\gemini.txt:1240", "target": "return"}, {"type": "contains", "source": "text_data\\gemini.txt:1240", "target": "modelrequestparametersresulttools"}, {"type": "contains", "source": "text_data\\gemini.txt:1240", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\gemini.txt:1240", "target": "functionfromabstracttoolt"}, {"type": "contains", "source": "text_data\\gemini.txt:1241", "target": "tools"}, {"type": "contains", "source": "text_data\\gemini.txt:1241", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\gemini.txt:1241", "target": "syspromptparts"}, {"type": "contains", "source": "text_data\\gemini.txt:1241", "target": "messages"}, {"type": "contains", "source": "text_data\\gemini.txt:1241", "target": "listmodelmessage"}, {"type": "contains", "source": "text_data\\gemini.txt:1242", "target": "tools"}, {"type": "contains", "source": "text_data\\gemini.txt:1242", "target": "toolconfig"}, {"type": "contains", "source": "text_data\\gemini.txt:1242", "target": "maxtokens"}, {"type": "contains", "source": "text_data\\gemini.txt:1242", "target": "temperature"}, {"type": "contains", "source": "text_data\\gemini.txt:1242", "target": "requestdatatools"}, {"type": "contains", "source": "text_data\\gemini.txt:1243", "target": "frequencypenalty"}, {"type": "contains", "source": "text_data\\gemini.txt:1243", "target": "geminisafetysettings"}, {"type": "contains", "source": "text_data\\gemini.txt:1243", "target": "generationconfig"}, {"type": "contains", "source": "text_data\\gemini.txt:1243", "target": "generationconfigpresencepenalty"}, {"type": "contains", "source": "text_data\\gemini.txt:1243", "target": "presencepenalty"}, {"type": "contains", "source": "text_data\\gemini.txt:1244", "target": "statuscode"}, {"type": "contains", "source": "text_data\\gemini.txt:1244", "target": "raise"}, {"type": "contains", "source": "text_data\\gemini.txt:1244", "target": "requestjson"}, {"type": "contains", "source": "text_data\\gemini.txt:1244", "target": "geminirequesttadumpjsonrequestdata"}, {"type": "contains", "source": "text_data\\gemini.txt:1244", "target": "byaliastrue"}, {"type": "contains", "source": "text_data\\gemini.txt:1245", "target": "response"}, {"type": "contains", "source": "text_data\\gemini.txt:1245", "target": "raise"}, {"type": "contains", "source": "text_data\\gemini.txt:1245", "target": "gemini"}, {"type": "contains", "source": "text_data\\gemini.txt:1245", "target": "strresponse"}, {"type": "contains", "source": "text_data\\gemini.txt:1245", "target": "yield"}, {"type": "contains", "source": "text_data\\gemini.txt:1246", "target": "return"}, {"type": "contains", "source": "text_data\\gemini.txt:1246", "target": "async"}, {"type": "contains", "source": "text_data\\gemini.txt:1246", "target": "httpresponse"}, {"type": "contains", "source": "text_data\\gemini.txt:1246", "target": "response"}, {"type": "contains", "source": "text_data\\gemini.txt:1246", "target": "aiterbytes"}, {"type": "contains", "source": "text_data\\gemini.txt:1247", "target": "startresponse"}, {"type": "contains", "source": "text_data\\gemini.txt:1247", "target": "experimentalallowpartialtrailingstrings"}, {"type": "contains", "source": "text_data\\gemini.txt:1247", "target": "responses"}, {"type": "contains", "source": "text_data\\gemini.txt:1247", "target": "responses1"}, {"type": "contains", "source": "text_data\\gemini.txt:1247", "target": "lastcandidates"}, {"type": "contains", "source": "text_data\\gemini.txt:1248", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\gemini.txt:1248", "target": "listgeminicontent"}, {"type": "contains", "source": "text_data\\gemini.txt:1248", "target": "tuplelistgeminitextpart"}, {"type": "contains", "source": "text_data\\gemini.txt:1248", "target": "syspromptparts"}, {"type": "contains", "source": "text_data\\gemini.txt:1248", "target": "listgeminitextpart"}, {"type": "contains", "source": "text_data\\gemini.txt:1249", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\gemini.txt:1249", "target": "messagepartsappendresponsepartfromresponseparttoolname"}, {"type": "contains", "source": "text_data\\gemini.txt:1249", "target": "response"}, {"type": "contains", "source": "text_data\\gemini.txt:1249", "target": "toolreturnpart"}, {"type": "contains", "source": "text_data\\gemini.txt:1249", "target": "partmodelresponseobject"}, {"type": "contains", "source": "text_data\\gemini.txt:1250", "target": "return"}, {"type": "contains", "source": "text_data\\gemini.txt:1250", "target": "listgeminipartunion"}, {"type": "contains", "source": "text_data\\gemini.txt:1250", "target": "partcontent"}, {"type": "contains", "source": "text_data\\gemini.txt:1250", "target": "messageparts"}, {"type": "contains", "source": "text_data\\gemini.txt:1250", "target": "contentsappendgeminicontentroleuser"}, {"type": "contains", "source": "text_data\\gemini.txt:1251", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\gemini.txt:1251", "target": "base64encoded"}, {"type": "contains", "source": "text_data\\gemini.txt:1251", "target": "mimetype"}, {"type": "contains", "source": "text_data\\gemini.txt:1251", "target": "contentappendtext"}, {"type": "contains", "source": "text_data\\gemini.txt:1251", "target": "binarycontent"}, {"type": "contains", "source": "text_data\\gemini.txt:1252", "target": "mimetype"}, {"type": "contains", "source": "text_data\\gemini.txt:1252", "target": "inlinedata"}, {"type": "contains", "source": "text_data\\gemini.txt:1252", "target": "geminiinlinedatapart"}, {"type": "contains", "source": "text_data\\gemini.txt:1252", "target": "inlinedatadata"}, {"type": "contains", "source": "text_data\\gemini.txt:1252", "target": "base64b64encoderesponsecontentdecodeutf8"}, {"type": "contains", "source": "text_data\\gemini.txt:1253", "target": "modelname"}, {"type": "contains", "source": "text_data\\gemini.txt:1253", "target": "geminimodelname"}, {"type": "contains", "source": "text_data\\gemini.txt:1253", "target": "provider"}, {"type": "contains", "source": "text_data\\gemini.txt:1253", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\gemini.txt:1253", "target": "typingliteralgooglegla"}, {"type": "contains", "source": "text_data\\gemini.txt:1254", "target": "provider"}, {"type": "contains", "source": "text_data\\gemini.txt:1254", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1254", "target": "parameters"}, {"type": "contains", "source": "text_data\\gemini.txt:1254", "target": "googlevertex"}, {"type": "contains", "source": "text_data\\gemini.txt:1254", "target": "googlegla"}, {"type": "contains", "source": "text_data\\gemini.txt:1256", "target": "provider"}, {"type": "contains", "source": "text_data\\gemini.txt:1256", "target": "modelname"}, {"type": "contains", "source": "text_data\\gemini.txt:1256", "target": "googlevertex"}, {"type": "contains", "source": "text_data\\gemini.txt:1256", "target": "providerhttpxasyncclient"}, {"type": "contains", "source": "text_data\\gemini.txt:1256", "target": "googlegla"}, {"type": "contains", "source": "text_data\\gemini.txt:1257", "target": "provider"}, {"type": "contains", "source": "text_data\\gemini.txt:1257", "target": "inferproviderprovider"}, {"type": "contains", "source": "text_data\\gemini.txt:1257", "target": "selfsystem"}, {"type": "contains", "source": "text_data\\gemini.txt:1257", "target": "providername"}, {"type": "contains", "source": "text_data\\gemini.txt:1257", "target": "selfclient"}, {"type": "contains", "source": "text_data\\gemini.txt:1258", "target": "system"}, {"type": "contains", "source": "text_data\\gemini.txt:1258", "target": "authentication"}, {"type": "contains", "source": "text_data\\gemini.txt:1258", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1258", "target": "abstract"}, {"type": "contains", "source": "text_data\\gemini.txt:1258", "target": "definition"}, {"type": "contains", "source": "text_data\\gemini.txt:1259", "target": "xgoogapikey"}, {"type": "contains", "source": "text_data\\gemini.txt:1259", "target": "authentication"}, {"type": "contains", "source": "text_data\\gemini.txt:1259", "target": "using"}, {"type": "contains", "source": "text_data\\gemini.txt:1259", "target": "header"}, {"type": "contains", "source": "text_data\\gemini.txt:1259", "target": "dataclass"}, {"type": "contains", "source": "text_data\\gemini.txt:1260", "target": "implementation"}, {"type": "contains", "source": "text_data\\gemini.txt:1260", "target": "streamedresponse"}, {"type": "contains", "source": "text_data\\gemini.txt:1260", "target": "gemini"}, {"type": "contains", "source": "text_data\\gemini.txt:1260", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1260", "target": "source"}, {"type": "contains", "source": "text_data\\gemini.txt:1261", "target": "content"}, {"type": "contains", "source": "text_data\\gemini.txt:1261", "target": "async"}, {"type": "contains", "source": "text_data\\gemini.txt:1261", "target": "candidate"}, {"type": "contains", "source": "text_data\\gemini.txt:1261", "target": "dataclass"}, {"type": "contains", "source": "text_data\\gemini.txt:1261", "target": "class"}, {"type": "contains", "source": "text_data\\gemini.txt:1262", "target": "geminipart"}, {"type": "contains", "source": "text_data\\gemini.txt:1262", "target": "deltas"}, {"type": "contains", "source": "text_data\\gemini.txt:1262", "target": "parts"}, {"type": "contains", "source": "text_data\\gemini.txt:1262", "target": "functioncall"}, {"type": "contains", "source": "text_data\\gemini.txt:1262", "target": "geminipartunion"}, {"type": "contains", "source": "text_data\\gemini.txt:1263", "target": "maybeevent"}, {"type": "contains", "source": "text_data\\gemini.txt:1263", "target": "confirm"}, {"type": "contains", "source": "text_data\\gemini.txt:1263", "target": "whether"}, {"type": "contains", "source": "text_data\\gemini.txt:1263", "target": "actually"}, {"type": "contains", "source": "text_data\\gemini.txt:1263", "target": "still"}, {"type": "contains", "source": "text_data\\gemini.txt:1264", "target": "yield"}, {"type": "contains", "source": "text_data\\gemini.txt:1264", "target": "geminipart"}, {"type": "contains", "source": "text_data\\gemini.txt:1264", "target": "would"}, {"type": "contains", "source": "text_data\\gemini.txt:1264", "target": "complicated"}, {"type": "contains", "source": "text_data\\gemini.txt:1264", "target": "maybeevent"}, {"type": "contains", "source": "text_data\\gemini.txt:1265", "target": "yield"}, {"type": "contains", "source": "text_data\\gemini.txt:1265", "target": "latest"}, {"type": "contains", "source": "text_data\\gemini.txt:1265", "target": "response"}, {"type": "contains", "source": "text_data\\gemini.txt:1265", "target": "complete"}, {"type": "contains", "source": "text_data\\gemini.txt:1265", "target": "changing"}, {"type": "contains", "source": "text_data\\gemini.txt:1266", "target": "yield"}, {"type": "contains", "source": "text_data\\gemini.txt:1266", "target": "response"}, {"type": "contains", "source": "text_data\\gemini.txt:1266", "target": "geminiresponses1"}, {"type": "contains", "source": "text_data\\gemini.txt:1266", "target": "selfusage"}, {"type": "contains", "source": "text_data\\gemini.txt:1266", "target": "metadataasusager"}, {"type": "contains", "source": "text_data\\gemini.txt:1267", "target": "timestamp"}, {"type": "contains", "source": "text_data\\gemini.txt:1267", "target": "response"}, {"type": "contains", "source": "text_data\\gemini.txt:1267", "target": "return"}, {"type": "contains", "source": "text_data\\gemini.txt:1267", "target": "selftimestamp"}, {"type": "contains", "source": "text_data\\gemini.txt:1267", "target": "modelname"}, {"type": "contains", "source": "text_data\\gemini.txt:1268", "target": "timestamp"}, {"type": "contains", "source": "text_data\\gemini.txt:1268", "target": "model"}, {"type": "contains", "source": "text_data\\gemini.txt:1268", "target": "response"}, {"type": "contains", "source": "text_data\\gemini.txt:1268", "target": "geminisafetysettings"}, {"type": "contains", "source": "text_data\\gemini.txt:1268", "target": "safety"}, {"type": "contains", "source": "text_data\\gemini.txt:1269", "target": "source"}, {"type": "contains", "source": "text_data\\gemini.txt:1269", "target": "pydanticaislimpydanticaimodelsgeminipy"}, {"type": "contains", "source": "text_data\\gemini.txt:1270", "target": "safety"}, {"type": "contains", "source": "text_data\\gemini.txt:1270", "target": "category"}, {"type": "contains", "source": "text_data\\gemini.txt:1270", "target": "settings"}, {"type": "contains", "source": "text_data\\gemini.txt:1270", "target": "gemini"}, {"type": "contains", "source": "text_data\\gemini.txt:1270", "target": "threshold"}, {"type": "contains", "source": "text_data\\gemini.txt:1271", "target": "safety"}, {"type": "contains", "source": "text_data\\gemini.txt:1271", "target": "settings"}, {"type": "contains", "source": "text_data\\gemini.txt:1271", "target": "category"}, {"type": "contains", "source": "text_data\\gemini.txt:1271", "target": "threshold"}, {"type": "contains", "source": "text_data\\gemini.txt:1271", "target": "literal"}, {"type": "contains", "source": "text_data\\gemini.txt:1272", "target": "threshold"}, {"type": "contains", "source": "text_data\\gemini.txt:1272", "target": "category"}, {"type": "contains", "source": "text_data\\gemini.txt:1272", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\gemini.txt:1272", "target": "typingliteral"}, {"type": "contains", "source": "text_data\\gemini.txt:1272", "target": "safety"}, {"type": "contains", "source": "text_data\\generation.txt:1272", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\generation.txt:1272", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\generation.txt:1272", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\generation.txt:1272", "target": "v0050"}, {"type": "contains", "source": "text_data\\generation.txt:1272", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\generation.txt:1273", "target": "tools"}, {"type": "contains", "source": "text_data\\generation.txt:1273", "target": "contributing"}, {"type": "contains", "source": "text_data\\generation.txt:1273", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\generation.txt:1273", "target": "documentation"}, {"type": "contains", "source": "text_data\\generation.txt:1273", "target": "agents"}, {"type": "contains", "source": "text_data\\generation.txt:1274", "target": "evals"}, {"type": "contains", "source": "text_data\\generation.txt:1274", "target": "input"}, {"type": "contains", "source": "text_data\\generation.txt:1274", "target": "graphs"}, {"type": "contains", "source": "text_data\\generation.txt:1274", "target": "graph"}, {"type": "contains", "source": "text_data\\generation.txt:1274", "target": "image"}, {"type": "contains", "source": "text_data\\generation.txt:1275", "target": "examples"}, {"type": "contains", "source": "text_data\\generation.txt:1275", "target": "client"}, {"type": "contains", "source": "text_data\\generation.txt:1275", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\generation.txt:1275", "target": "server"}, {"type": "contains", "source": "text_data\\generation.txt:1275", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\generation.txt:1276", "target": "agent"}, {"type": "contains", "source": "text_data\\generation.txt:1276", "target": "stream"}, {"type": "contains", "source": "text_data\\generation.txt:1276", "target": "reference"}, {"type": "contains", "source": "text_data\\generation.txt:1276", "target": "pydantic"}, {"type": "contains", "source": "text_data\\generation.txt:1276", "target": "model"}, {"type": "contains", "source": "text_data\\generation.txt:1277", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\generation.txt:1277", "target": "result"}, {"type": "contains", "source": "text_data\\generation.txt:1277", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\generation.txt:1277", "target": "messages"}, {"type": "contains", "source": "text_data\\generation.txt:1277", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\generation.txt:1278", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\generation.txt:1278", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\generation.txt:1278", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\generation.txt:1278", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\generation.txt:1278", "target": "modelsgroq"}, {"type": "contains", "source": "text_data\\generation.txt:1279", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\generation.txt:1279", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\generation.txt:1279", "target": "pydanticevalsgeneration"}, {"type": "contains", "source": "text_data\\generation.txt:1279", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\generation.txt:1279", "target": "dataset"}, {"type": "contains", "source": "text_data\\generation.txt:1280", "target": "generatedataset"}, {"type": "contains", "source": "text_data\\generation.txt:1280", "target": "generating"}, {"type": "contains", "source": "text_data\\generation.txt:1280", "target": "datasets"}, {"type": "contains", "source": "text_data\\generation.txt:1280", "target": "table"}, {"type": "contains", "source": "text_data\\generation.txt:1280", "target": "contents"}, {"type": "contains", "source": "text_data\\generation.txt:1281", "target": "generatedataset"}, {"type": "contains", "source": "text_data\\generation.txt:1281", "target": "datasettype"}, {"type": "contains", "source": "text_data\\generation.txt:1281", "target": "typehttpsdocspythonorg3libraryfunctionshtmltype"}, {"type": "contains", "source": "text_data\\generation.txt:1281", "target": "datasetdatasetpydanticevalsdatasetdataset"}, {"type": "contains", "source": "text_data\\generation.txt:1281", "target": "pydanticevalsdatasetinputst"}, {"type": "contains", "source": "text_data\\generation.txt:1282", "target": "outputt"}, {"type": "contains", "source": "text_data\\generation.txt:1282", "target": "metadatat"}, {"type": "contains", "source": "text_data\\generation.txt:1282", "target": "typehttpsdocspythonorg3libraryfunctionshtmltypeevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "contains", "source": "text_data\\generation.txt:1282", "target": "pydanticevalsevaluatorsevaluatorevaluatorinputst"}, {"type": "contains", "source": "text_data\\generation.txt:1282", "target": "model"}, {"type": "contains", "source": "text_data\\generation.txt:1283", "target": "generate"}, {"type": "contains", "source": "text_data\\generation.txt:1283", "target": "dataset"}, {"type": "contains", "source": "text_data\\generation.txt:1283", "target": "cases"}, {"type": "contains", "source": "text_data\\generation.txt:1283", "target": "input"}, {"type": "contains", "source": "text_data\\generation.txt:1283", "target": "output"}, {"type": "contains", "source": "text_data\\generation.txt:1284", "target": "dataset"}, {"type": "contains", "source": "text_data\\generation.txt:1284", "target": "description"}, {"type": "contains", "source": "text_data\\generation.txt:1284", "target": "default"}, {"type": "contains", "source": "text_data\\generation.txt:1284", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\generation.txt:1284", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\generation.txt:1285", "target": "model"}, {"type": "contains", "source": "text_data\\generation.txt:1285", "target": "customevaluatortypes"}, {"type": "contains", "source": "text_data\\generation.txt:1285", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\generation.txt:1285", "target": "collectionsabcsequencetypehttpsdocspythonorg3libraryfunctionshtmltypeevaluatorevaluatorspydanticevalsevaluatorsevaluator"}, {"type": "contains", "source": "text_data\\generation.txt:1285", "target": "pydanticevalsevaluatorsevaluatorevaluatorinputst"}, {"type": "contains", "source": "text_data\\generation.txt:1286", "target": "nexamples"}, {"type": "contains", "source": "text_data\\generation.txt:1286", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\generation.txt:1286", "target": "number"}, {"type": "contains", "source": "text_data\\generation.txt:1286", "target": "examples"}, {"type": "contains", "source": "text_data\\generation.txt:1286", "target": "generate"}, {"type": "contains", "source": "text_data\\generation.txt:1287", "target": "description"}, {"type": "contains", "source": "text_data\\generation.txt:1287", "target": "dataset"}, {"type": "contains", "source": "text_data\\generation.txt:1287", "target": "datasetdatasetpydanticevalsdatasetdataset"}, {"type": "contains", "source": "text_data\\generation.txt:1287", "target": "pydanticevalsdatasetinputst"}, {"type": "contains", "source": "text_data\\generation.txt:1287", "target": "outputt"}, {"type": "contains", "source": "text_data\\generation.txt:1288", "target": "outputt"}, {"type": "contains", "source": "text_data\\generation.txt:1288", "target": "metadatat"}, {"type": "contains", "source": "text_data\\generation.txt:1288", "target": "dataset"}, {"type": "contains", "source": "text_data\\generation.txt:1288", "target": "input"}, {"type": "contains", "source": "text_data\\generation.txt:1288", "target": "output"}, {"type": "contains", "source": "text_data\\generation.txt:1289", "target": "generate"}, {"type": "contains", "source": "text_data\\generation.txt:1289", "target": "optional"}, {"type": "contains", "source": "text_data\\generation.txt:1289", "target": "dataset"}, {"type": "contains", "source": "text_data\\generation.txt:1289", "target": "types"}, {"type": "contains", "source": "text_data\\generation.txt:1289", "target": "model"}, {"type": "contains", "source": "text_data\\generation.txt:1290", "target": "object"}, {"type": "contains", "source": "text_data\\generation.txt:1290", "target": "dataset"}, {"type": "contains", "source": "text_data\\generation.txt:1290", "target": "cases"}, {"type": "contains", "source": "text_data\\generation.txt:1290", "target": "response"}, {"type": "contains", "source": "text_data\\generation.txt:1290", "target": "agent"}, {"type": "contains", "source": "text_data\\generation.txt:1291", "target": "result"}, {"type": "contains", "source": "text_data\\generation.txt:1291", "target": "customevaluatortypescustomevaluatortypes"}, {"type": "contains", "source": "text_data\\generation.txt:1291", "target": "resulttypestr"}, {"type": "contains", "source": "text_data\\generation.txt:1291", "target": "retries1"}, {"type": "contains", "source": "text_data\\generation.txt:1291", "target": "await"}, {"type": "contains", "source": "text_data\\graph.txt:1291", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\graph.txt:1291", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\graph.txt:1291", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\graph.txt:1291", "target": "v0050"}, {"type": "contains", "source": "text_data\\graph.txt:1291", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\graph.txt:1292", "target": "tools"}, {"type": "contains", "source": "text_data\\graph.txt:1292", "target": "contributing"}, {"type": "contains", "source": "text_data\\graph.txt:1292", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\graph.txt:1292", "target": "documentation"}, {"type": "contains", "source": "text_data\\graph.txt:1292", "target": "agents"}, {"type": "contains", "source": "text_data\\graph.txt:1293", "target": "evals"}, {"type": "contains", "source": "text_data\\graph.txt:1293", "target": "input"}, {"type": "contains", "source": "text_data\\graph.txt:1293", "target": "graphs"}, {"type": "contains", "source": "text_data\\graph.txt:1293", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1293", "target": "image"}, {"type": "contains", "source": "text_data\\graph.txt:1294", "target": "examples"}, {"type": "contains", "source": "text_data\\graph.txt:1294", "target": "client"}, {"type": "contains", "source": "text_data\\graph.txt:1294", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\graph.txt:1294", "target": "server"}, {"type": "contains", "source": "text_data\\graph.txt:1294", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\graph.txt:1295", "target": "agent"}, {"type": "contains", "source": "text_data\\graph.txt:1295", "target": "stream"}, {"type": "contains", "source": "text_data\\graph.txt:1295", "target": "reference"}, {"type": "contains", "source": "text_data\\graph.txt:1295", "target": "pydantic"}, {"type": "contains", "source": "text_data\\graph.txt:1295", "target": "model"}, {"type": "contains", "source": "text_data\\graph.txt:1296", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\graph.txt:1296", "target": "result"}, {"type": "contains", "source": "text_data\\graph.txt:1296", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\graph.txt:1296", "target": "messages"}, {"type": "contains", "source": "text_data\\graph.txt:1296", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\graph.txt:1297", "target": "pydanticgraph"}, {"type": "contains", "source": "text_data\\graph.txt:1297", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1297", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\graph.txt:1297", "target": "modelsgroq"}, {"type": "contains", "source": "text_data\\graph.txt:1297", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\graph.txt:1298", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\graph.txt:1298", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\graph.txt:1298", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\graph.txt:1298", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\graph.txt:1298", "target": "pydanticevalsgeneration"}, {"type": "contains", "source": "text_data\\graph.txt:1299", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1299", "target": "table"}, {"type": "contains", "source": "text_data\\graph.txt:1299", "target": "contents"}, {"type": "contains", "source": "text_data\\graph.txt:1299", "target": "runsync"}, {"type": "contains", "source": "text_data\\graph.txt:1299", "target": "iterfrompersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1300", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1300", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1300", "target": "which"}, {"type": "contains", "source": "text_data\\graph.txt:1300", "target": "number"}, {"type": "contains", "source": "text_data\\graph.txt:1300", "target": "definition"}, {"type": "contains", "source": "text_data\\graph.txt:1301", "target": "dataclass"}, {"type": "contains", "source": "text_data\\graph.txt:1301", "target": "import"}, {"type": "contains", "source": "text_data\\graph.txt:1301", "target": "graphruncontext"}, {"type": "contains", "source": "text_data\\graph.txt:1301", "target": "class"}, {"type": "contains", "source": "text_data\\graph.txt:1301", "target": "check42"}, {"type": "contains", "source": "text_data\\graph.txt:1302", "target": "example"}, {"type": "contains", "source": "text_data\\graph.txt:1302", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1302", "target": "complete"}, {"type": "contains", "source": "text_data\\graph.txt:1302", "target": "running"}, {"type": "contains", "source": "text_data\\graph.txt:1302", "target": "mermaidcode"}, {"type": "contains", "source": "text_data\\graph.txt:1311", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1311", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1311", "target": "number"}, {"type": "contains", "source": "text_data\\graph.txt:1311", "target": "import"}, {"type": "contains", "source": "text_data\\graph.txt:1311", "target": "class"}, {"type": "contains", "source": "text_data\\graph.txt:1312", "target": "dataclass"}, {"type": "contains", "source": "text_data\\graph.txt:1312", "target": "class"}, {"type": "contains", "source": "text_data\\graph.txt:1312", "target": "check42"}, {"type": "contains", "source": "text_data\\graph.txt:1312", "target": "return"}, {"type": "contains", "source": "text_data\\graph.txt:1312", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1313", "target": "example"}, {"type": "contains", "source": "text_data\\graph.txt:1313", "target": "fieldreprfalse"}, {"type": "contains", "source": "text_data\\graph.txt:1313", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1313", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1313", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1314", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1314", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1314", "target": "utilsunset"}, {"type": "contains", "source": "text_data\\graph.txt:1314", "target": "statetype"}, {"type": "contains", "source": "text_data\\graph.txt:1314", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1315", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1315", "target": "runendtype"}, {"type": "contains", "source": "text_data\\graph.txt:1315", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1315", "target": "autoinstrument"}, {"type": "contains", "source": "text_data\\graph.txt:1315", "target": "parentnamespace"}, {"type": "contains", "source": "text_data\\graph.txt:1316", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1316", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1316", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1316", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1316", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1317", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1317", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1317", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1317", "target": "interface"}, {"type": "contains", "source": "text_data\\graph.txt:1317", "target": "defaults"}, {"type": "contains", "source": "text_data\\graph.txt:1318", "target": "statestate"}, {"type": "contains", "source": "text_data\\graph.txt:1318", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1318", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1318", "target": "await"}, {"type": "contains", "source": "text_data\\graph.txt:1318", "target": "never42graphrunincrement"}, {"type": "contains", "source": "text_data\\graph.txt:1319", "target": "graphrun"}, {"type": "contains", "source": "text_data\\graph.txt:1319", "target": "finalresult"}, {"type": "contains", "source": "text_data\\graph.txt:1319", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1319", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1319", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1320", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1320", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1320", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1320", "target": "therefore"}, {"type": "contains", "source": "text_data\\graph.txt:1320", "target": "method"}, {"type": "contains", "source": "text_data\\graph.txt:1321", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1321", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1321", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1321", "target": "selfname"}, {"type": "contains", "source": "text_data\\graph.txt:1321", "target": "selfinfernameinspectcurrentframe"}, {"type": "contains", "source": "text_data\\graph.txt:1322", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1322", "target": "graphrun"}, {"type": "contains", "source": "text_data\\graph.txt:1322", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1322", "target": "which"}, {"type": "contains", "source": "text_data\\graph.txt:1322", "target": "executed"}, {"type": "contains", "source": "text_data\\graph.txt:1323", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1323", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1323", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1323", "target": "completed"}, {"type": "contains", "source": "text_data\\graph.txt:1323", "target": "details"}, {"type": "contains", "source": "text_data\\graph.txt:1324", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1324", "target": "frame"}, {"type": "contains", "source": "text_data\\graph.txt:1324", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1324", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1324", "target": "whether"}, {"type": "contains", "source": "text_data\\graph.txt:1325", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1325", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1325", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1325", "target": "exitstack"}, {"type": "contains", "source": "text_data\\graph.txt:1325", "target": "stack"}, {"type": "contains", "source": "text_data\\graph.txt:1326", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1326", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1326", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1326", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1326", "target": "frame"}, {"type": "contains", "source": "text_data\\graph.txt:1327", "target": "snapshot"}, {"type": "contains", "source": "text_data\\graph.txt:1327", "target": "frame"}, {"type": "contains", "source": "text_data\\graph.txt:1327", "target": "fback"}, {"type": "contains", "source": "text_data\\graph.txt:1327", "target": "because"}, {"type": "contains", "source": "text_data\\graph.txt:1327", "target": "asynccontextmanager"}, {"type": "contains", "source": "text_data\\graph.txt:1328", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1328", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1328", "target": "initialize"}, {"type": "contains", "source": "text_data\\graph.txt:1328", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1328", "target": "stackentercontextspan"}, {"type": "contains", "source": "text_data\\graph.txt:1329", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1329", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1329", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1329", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1329", "target": "useful"}, {"type": "contains", "source": "text_data\\graph.txt:1330", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1330", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1330", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1330", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1330", "target": "basenodestatet"}, {"type": "contains", "source": "text_data\\graph.txt:1331", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1331", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1331", "target": "dependencies"}, {"type": "contains", "source": "text_data\\graph.txt:1331", "target": "whether"}, {"type": "contains", "source": "text_data\\graph.txt:1331", "target": "infer"}, {"type": "contains", "source": "text_data\\graph.txt:1332", "target": "sequencemermaidnodeident"}, {"type": "contains", "source": "text_data\\graph.txt:1332", "target": "mermaidnodeident"}, {"type": "contains", "source": "text_data\\graph.txt:1332", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1332", "target": "mermaidcode"}, {"type": "contains", "source": "text_data\\graph.txt:1332", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1333", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1333", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1333", "target": "title"}, {"type": "contains", "source": "text_data\\graph.txt:1333", "target": "include"}, {"type": "contains", "source": "text_data\\graph.txt:1333", "target": "whether"}, {"type": "contains", "source": "text_data\\graph.txt:1334", "target": "increment"}, {"type": "contains", "source": "text_data\\graph.txt:1334", "target": "never42graph"}, {"type": "contains", "source": "text_data\\graph.txt:1334", "target": "check42"}, {"type": "contains", "source": "text_data\\graph.txt:1334", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1334", "target": "title"}, {"type": "contains", "source": "text_data\\graph.txt:1335", "target": "increment"}, {"type": "contains", "source": "text_data\\graph.txt:1335", "target": "check42"}, {"type": "contains", "source": "text_data\\graph.txt:1335", "target": "selfname"}, {"type": "contains", "source": "text_data\\graph.txt:1335", "target": "title"}, {"type": "contains", "source": "text_data\\graph.txt:1335", "target": "statediagramv2"}, {"type": "contains", "source": "text_data\\graph.txt:1336", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1336", "target": "kwargs"}, {"type": "contains", "source": "text_data\\graph.txt:1336", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1336", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1336", "target": "image"}, {"type": "contains", "source": "text_data\\graph.txt:1337", "target": "kwargs"}, {"type": "contains", "source": "text_data\\graph.txt:1337", "target": "selfname"}, {"type": "contains", "source": "text_data\\graph.txt:1337", "target": "image"}, {"type": "contains", "source": "text_data\\graph.txt:1337", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1337", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1338", "target": "kwargs"}, {"type": "contains", "source": "text_data\\graph.txt:1338", "target": "service"}, {"type": "contains", "source": "text_data\\graph.txt:1338", "target": "image"}, {"type": "contains", "source": "text_data\\graph.txt:1338", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1338", "target": "format"}, {"type": "contains", "source": "text_data\\graph.txt:1339", "target": "kwargs"}, {"type": "contains", "source": "text_data\\graph.txt:1339", "target": "selfname"}, {"type": "contains", "source": "text_data\\graph.txt:1339", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1339", "target": "return"}, {"type": "contains", "source": "text_data\\graph.txt:1339", "target": "selfstatetype"}, {"type": "contains", "source": "text_data\\graph.txt:1340", "target": "statetype"}, {"type": "contains", "source": "text_data\\graph.txt:1340", "target": "runendtype"}, {"type": "contains", "source": "text_data\\graph.txt:1340", "target": "selfstatetype"}, {"type": "contains", "source": "text_data\\graph.txt:1340", "target": "selfrunendtype"}, {"type": "contains", "source": "text_data\\graph.txt:1340", "target": "nodedef"}, {"type": "contains", "source": "text_data\\graph.txt:1341", "target": "runendtype"}, {"type": "contains", "source": "text_data\\graph.txt:1341", "target": "return"}, {"type": "contains", "source": "text_data\\graph.txt:1341", "target": "statetype"}, {"type": "contains", "source": "text_data\\graph.txt:1341", "target": "utilsissetstatetype"}, {"type": "contains", "source": "text_data\\graph.txt:1341", "target": "utilsissetrunendtype"}, {"type": "contains", "source": "text_data\\graph.txt:1342", "target": "nodeid"}, {"type": "contains", "source": "text_data\\graph.txt:1342", "target": "dictstr"}, {"type": "contains", "source": "text_data\\graph.txt:1342", "target": "registernode"}, {"type": "contains", "source": "text_data\\graph.txt:1342", "target": "typebasenodestatet"}, {"type": "contains", "source": "text_data\\graph.txt:1342", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1343", "target": "badedgeslist"}, {"type": "contains", "source": "text_data\\graph.txt:1343", "target": "referenced"}, {"type": "contains", "source": "text_data\\graph.txt:1343", "target": "raise"}, {"type": "contains", "source": "text_data\\graph.txt:1343", "target": "included"}, {"type": "contains", "source": "text_data\\graph.txt:1343", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1344", "target": "functionframe"}, {"type": "contains", "source": "text_data\\graph.txt:1344", "target": "agent"}, {"type": "contains", "source": "text_data\\graph.txt:1344", "target": "selfname"}, {"type": "contains", "source": "text_data\\graph.txt:1344", "target": "infernameself"}, {"type": "contains", "source": "text_data\\graph.txt:1344", "target": "typesframetype"}, {"type": "contains", "source": "text_data\\graph.txt:1345", "target": "globals"}, {"type": "contains", "source": "text_data\\graph.txt:1345", "target": "parentframeflocals"}, {"type": "contains", "source": "text_data\\graph.txt:1345", "target": "parentframefglobals"}, {"type": "contains", "source": "text_data\\graph.txt:1345", "target": "couldnt"}, {"type": "contains", "source": "text_data\\graph.txt:1345", "target": "agent"}, {"type": "contains", "source": "text_data\\graph.txt:1346", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1346", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\graph.txt:1346", "target": "collectionsabcsequencetypehttpsdocspythonorg3libraryfunctionshtmltypebasenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1346", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1346", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1347", "target": "unset"}, {"type": "contains", "source": "text_data\\graph.txt:1347", "target": "statetype"}, {"type": "contains", "source": "text_data\\graph.txt:1347", "target": "typehttpsdocspythonorg3libraryfunctionshtmltypestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1347", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1347", "target": "runendtype"}, {"type": "contains", "source": "text_data\\graph.txt:1348", "target": "create"}, {"type": "contains", "source": "text_data\\graph.txt:1348", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1348", "target": "sequence"}, {"type": "contains", "source": "text_data\\graph.txt:1348", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1348", "target": "parameters"}, {"type": "contains", "source": "text_data\\graph.txt:1349", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1349", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1349", "target": "default"}, {"type": "contains", "source": "text_data\\graph.txt:1349", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\graph.txt:1349", "target": "collectionsabcsequencetypehttpsdocspythonorg3libraryfunctionshtmltypebasenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1350", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1350", "target": "unset"}, {"type": "contains", "source": "text_data\\graph.txt:1350", "target": "inferred"}, {"type": "contains", "source": "text_data\\graph.txt:1350", "target": "generally"}, {"type": "contains", "source": "text_data\\graph.txt:1350", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1351", "target": "autoinstrument"}, {"type": "contains", "source": "text_data\\graph.txt:1351", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\graph.txt:1351", "target": "whether"}, {"type": "contains", "source": "text_data\\graph.txt:1351", "target": "create"}, {"type": "contains", "source": "text_data\\graph.txt:1351", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1353", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1353", "target": "utilsunset"}, {"type": "contains", "source": "text_data\\graph.txt:1353", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1353", "target": "sequencetypebasenodestatet"}, {"type": "contains", "source": "text_data\\graph.txt:1353", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1354", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1354", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1354", "target": "method"}, {"type": "contains", "source": "text_data\\graph.txt:1354", "target": "statetype"}, {"type": "contains", "source": "text_data\\graph.txt:1354", "target": "generally"}, {"type": "contains", "source": "text_data\\graph.txt:1355", "target": "selfvalidateedges"}, {"type": "contains", "source": "text_data\\graph.txt:1355", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1356", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1356", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1356", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1356", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1356", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1357", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1357", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1357", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1357", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1357", "target": "basestatepersistencepersistencepydanticgraphpersistencebasestatepersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1358", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1358", "target": "starting"}, {"type": "contains", "source": "text_data\\graph.txt:1358", "target": "until"}, {"type": "contains", "source": "text_data\\graph.txt:1358", "target": "parameters"}, {"type": "contains", "source": "text_data\\graph.txt:1359", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1359", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1359", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1359", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1359", "target": "default"}, {"type": "contains", "source": "text_data\\graph.txt:1360", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1360", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1360", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1360", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1360", "target": "dependencies"}, {"type": "contains", "source": "text_data\\graph.txt:1361", "target": "logfirespan"}, {"type": "contains", "source": "text_data\\graph.txt:1361", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1361", "target": "provided"}, {"type": "contains", "source": "text_data\\graph.txt:1361", "target": "created"}, {"type": "contains", "source": "text_data\\graph.txt:1361", "target": "depending"}, {"type": "contains", "source": "text_data\\graph.txt:1362", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1362", "target": "await"}, {"type": "contains", "source": "text_data\\graph.txt:1362", "target": "never42graphrunincrement"}, {"type": "contains", "source": "text_data\\graph.txt:1362", "target": "statestate"}, {"type": "contains", "source": "text_data\\graph.txt:1362", "target": "printstate"}, {"type": "contains", "source": "text_data\\graph.txt:1363", "target": "source"}, {"type": "contains", "source": "text_data\\graph.txt:1363", "target": "pydanticgraphpydanticgraphgraphpy"}, {"type": "contains", "source": "text_data\\graph.txt:1364", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1364", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1364", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1364", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1364", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1365", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1365", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1365", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1365", "target": "interface"}, {"type": "contains", "source": "text_data\\graph.txt:1365", "target": "defaults"}, {"type": "contains", "source": "text_data\\graph.txt:1366", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1366", "target": "statestate"}, {"type": "contains", "source": "text_data\\graph.txt:1366", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1366", "target": "await"}, {"type": "contains", "source": "text_data\\graph.txt:1366", "target": "never42graphrunincrement"}, {"type": "contains", "source": "text_data\\graph.txt:1367", "target": "finalresult"}, {"type": "contains", "source": "text_data\\graph.txt:1367", "target": "graphrunresult"}, {"type": "contains", "source": "text_data\\graph.txt:1367", "target": "assert"}, {"type": "contains", "source": "text_data\\graph.txt:1367", "target": "graphrun"}, {"type": "contains", "source": "text_data\\graph.txt:1367", "target": "should"}, {"type": "contains", "source": "text_data\\graph.txt:1368", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1368", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1368", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1368", "target": "runsync"}, {"type": "contains", "source": "text_data\\graph.txt:1368", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1369", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1369", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1369", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1369", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1369", "target": "basestatepersistencepersistencepydanticgraphpersistencebasestatepersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1370", "target": "method"}, {"type": "contains", "source": "text_data\\graph.txt:1370", "target": "synchronously"}, {"type": "contains", "source": "text_data\\graph.txt:1370", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1370", "target": "convenience"}, {"type": "contains", "source": "text_data\\graph.txt:1370", "target": "wraps"}, {"type": "contains", "source": "text_data\\graph.txt:1371", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1371", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1371", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1371", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1371", "target": "default"}, {"type": "contains", "source": "text_data\\graph.txt:1372", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1372", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1372", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1372", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1372", "target": "dependencies"}, {"type": "contains", "source": "text_data\\graph.txt:1373", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1373", "target": "graphrunresultstatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1373", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1373", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1373", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1374", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1374", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1374", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1374", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1374", "target": "method"}, {"type": "contains", "source": "text_data\\graph.txt:1375", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1375", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1375", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1375", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1375", "target": "provide"}, {"type": "contains", "source": "text_data\\graph.txt:1376", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1377", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1377", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1377", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1377", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1377", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1378", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1378", "target": "basestatepersistencepersistencepydanticgraphpersistencebasestatepersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1378", "target": "pydanticgraphpersistencebasestatepersistencestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1378", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1378", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1379", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\graph.txt:1379", "target": "collectionsabcasynciteratorgraphrunstatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1379", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1379", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1379", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1380", "target": "graphrun"}, {"type": "contains", "source": "text_data\\graph.txt:1380", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1380", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1380", "target": "which"}, {"type": "contains", "source": "text_data\\graph.txt:1380", "target": "executed"}, {"type": "contains", "source": "text_data\\graph.txt:1381", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1381", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1381", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1381", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1381", "target": "default"}, {"type": "contains", "source": "text_data\\graph.txt:1382", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1382", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1382", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1382", "target": "dependencies"}, {"type": "contains", "source": "text_data\\graph.txt:1382", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1383", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1383", "target": "abstractcontextmanagerhttpsdocspythonorg3librarycontextlibhtmlcontextlibabstractcontextmanager"}, {"type": "contains", "source": "text_data\\graph.txt:1383", "target": "contextlibabstractcontextmanageranyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\graph.txt:1383", "target": "typingany"}, {"type": "contains", "source": "text_data\\graph.txt:1383", "target": "provided"}, {"type": "contains", "source": "text_data\\graph.txt:1384", "target": "source"}, {"type": "contains", "source": "text_data\\graph.txt:1384", "target": "pydanticgraphpydanticgraphgraphpy"}, {"type": "contains", "source": "text_data\\graph.txt:1385", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1385", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1385", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1385", "target": "which"}, {"type": "contains", "source": "text_data\\graph.txt:1385", "target": "executed"}, {"type": "contains", "source": "text_data\\graph.txt:1386", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1386", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1386", "target": "execution"}, {"type": "contains", "source": "text_data\\graph.txt:1386", "target": "graphrun"}, {"type": "contains", "source": "text_data\\graph.txt:1386", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1387", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1387", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1387", "target": "frame"}, {"type": "contains", "source": "text_data\\graph.txt:1387", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1387", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1388", "target": "graphself"}, {"type": "contains", "source": "text_data\\graph.txt:1388", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1388", "target": "simplestatepersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1388", "target": "persistencesetgraphtypesself"}, {"type": "contains", "source": "text_data\\graph.txt:1388", "target": "selfautoinstrument"}, {"type": "contains", "source": "text_data\\graph.txt:1389", "target": "iterfrompersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1389", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1389", "target": "basestatepersistencepersistencepydanticgraphpersistencebasestatepersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1389", "target": "pydanticgraphpersistencebasestatepersistencestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1389", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1390", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1390", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\graph.txt:1390", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\graph.txt:1390", "target": "collectionsabcasynciteratorgraphrunstatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1390", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1391", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1391", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1391", "target": "contextmanager"}, {"type": "contains", "source": "text_data\\graph.txt:1391", "target": "iterate"}, {"type": "contains", "source": "text_data\\graph.txt:1391", "target": "graphs"}, {"type": "contains", "source": "text_data\\graph.txt:1392", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1392", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1392", "target": "default"}, {"type": "contains", "source": "text_data\\graph.txt:1392", "target": "basestatepersistencepersistencepydanticgraphpersistencebasestatepersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1392", "target": "pydanticgraphpersistencebasestatepersistencestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1393", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1393", "target": "abstractcontextmanagerhttpsdocspythonorg3librarycontextlibhtmlcontextlibabstractcontextmanager"}, {"type": "contains", "source": "text_data\\graph.txt:1393", "target": "contextlibabstractcontextmanageranyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\graph.txt:1393", "target": "typingany"}, {"type": "contains", "source": "text_data\\graph.txt:1393", "target": "provided"}, {"type": "contains", "source": "text_data\\graph.txt:1394", "target": "source"}, {"type": "contains", "source": "text_data\\graph.txt:1394", "target": "pydanticgraphpydanticgraphgraphpy"}, {"type": "contains", "source": "text_data\\graph.txt:1395", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1395", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1395", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1395", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1395", "target": "asynccontextmanager"}, {"type": "contains", "source": "text_data\\graph.txt:1396", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1396", "target": "frame"}, {"type": "contains", "source": "text_data\\graph.txt:1396", "target": "snapshot"}, {"type": "contains", "source": "text_data\\graph.txt:1396", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1396", "target": "dependencies"}, {"type": "contains", "source": "text_data\\graph.txt:1397", "target": "graphself"}, {"type": "contains", "source": "text_data\\graph.txt:1397", "target": "snapshotnodesetsnapshotidsnapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1397", "target": "selfautoinstrument"}, {"type": "contains", "source": "text_data\\graph.txt:1397", "target": "logfireapispanrun"}, {"type": "contains", "source": "text_data\\graph.txt:1397", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1398", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1398", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1398", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1398", "target": "initialize"}, {"type": "contains", "source": "text_data\\graph.txt:1398", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1399", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1399", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\graph.txt:1400", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1400", "target": "initialize"}, {"type": "contains", "source": "text_data\\graph.txt:1400", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1400", "target": "without"}, {"type": "contains", "source": "text_data\\graph.txt:1400", "target": "running"}, {"type": "contains", "source": "text_data\\graph.txt:1401", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1401", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1401", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1401", "target": "required"}, {"type": "contains", "source": "text_data\\graph.txt:1401", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1402", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1402", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1402", "target": "statetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1402", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1402", "target": "start"}, {"type": "contains", "source": "text_data\\graph.txt:1404", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1404", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1404", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1404", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1404", "target": "initialize"}, {"type": "contains", "source": "text_data\\graph.txt:1405", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1405", "target": "selfname"}, {"type": "contains", "source": "text_data\\graph.txt:1405", "target": "selfinfernameinspectcurrentframe"}, {"type": "contains", "source": "text_data\\graph.txt:1405", "target": "persistencesetgraphtypesself"}, {"type": "contains", "source": "text_data\\graph.txt:1405", "target": "await"}, {"type": "contains", "source": "text_data\\graph.txt:1406", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1406", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1406", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1406", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1406", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1407", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1407", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1407", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1407", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\graph.txt:1407", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1408", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1408", "target": "return"}, {"type": "contains", "source": "text_data\\graph.txt:1408", "target": "parameters"}, {"type": "contains", "source": "text_data\\graph.txt:1409", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1409", "target": "default"}, {"type": "contains", "source": "text_data\\graph.txt:1409", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1409", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1409", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1410", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1410", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1410", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1410", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1410", "target": "basestatepersistencepersistencepydanticgraphpersistencebasestatepersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1411", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1411", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\graph.txt:1411", "target": "whether"}, {"type": "contains", "source": "text_data\\graph.txt:1411", "target": "infer"}, {"type": "contains", "source": "text_data\\graph.txt:1411", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1412", "target": "endnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\graph.txt:1412", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1412", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1412", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1412", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1414", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1414", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1414", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1414", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1414", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1415", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1415", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1415", "target": "dependencies"}, {"type": "contains", "source": "text_data\\graph.txt:1415", "target": "whether"}, {"type": "contains", "source": "text_data\\graph.txt:1415", "target": "infer"}, {"type": "contains", "source": "text_data\\graph.txt:1416", "target": "pydanticgraphmermaidnodeident"}, {"type": "contains", "source": "text_data\\graph.txt:1416", "target": "mermaidcode"}, {"type": "contains", "source": "text_data\\graph.txt:1416", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1416", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\graph.txt:1416", "target": "collectionsabcsequencenodeidentmermaidpydanticgraphmermaidnodeident"}, {"type": "contains", "source": "text_data\\graph.txt:1417", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\graph.txt:1417", "target": "pydanticgraphmermaidnodeident"}, {"type": "contains", "source": "text_data\\graph.txt:1417", "target": "notes"}, {"type": "contains", "source": "text_data\\graph.txt:1417", "target": "highlightednodes"}, {"type": "contains", "source": "text_data\\graph.txt:1417", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\graph.txt:1418", "target": "direction"}, {"type": "contains", "source": "text_data\\graph.txt:1418", "target": "statediagramdirectionmermaidpydanticgraphmermaidstatediagramdirection"}, {"type": "contains", "source": "text_data\\graph.txt:1418", "target": "pydanticgraphmermaidstatediagramdirection"}, {"type": "contains", "source": "text_data\\graph.txt:1418", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\graph.txt:1419", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1419", "target": "generate"}, {"type": "contains", "source": "text_data\\graph.txt:1419", "target": "representing"}, {"type": "contains", "source": "text_data\\graph.txt:1419", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1419", "target": "mermaidhttpsmermaidjsorg"}, {"type": "contains", "source": "text_data\\graph.txt:1420", "target": "title"}, {"type": "contains", "source": "text_data\\graph.txt:1420", "target": "pydanticgraphmermaidnodeident"}, {"type": "contains", "source": "text_data\\graph.txt:1420", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1420", "target": "default"}, {"type": "contains", "source": "text_data\\graph.txt:1420", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1421", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\graph.txt:1421", "target": "whether"}, {"type": "contains", "source": "text_data\\graph.txt:1421", "target": "include"}, {"type": "contains", "source": "text_data\\graph.txt:1421", "target": "notes"}, {"type": "contains", "source": "text_data\\graph.txt:1421", "target": "pydanticgraphmermaidnodeident"}, {"type": "contains", "source": "text_data\\graph.txt:1422", "target": "direction"}, {"type": "contains", "source": "text_data\\graph.txt:1422", "target": "highlightcss"}, {"type": "contains", "source": "text_data\\graph.txt:1422", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\graph.txt:1422", "target": "highlighting"}, {"type": "contains", "source": "text_data\\graph.txt:1422", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1423", "target": "increment"}, {"type": "contains", "source": "text_data\\graph.txt:1423", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1423", "target": "check42"}, {"type": "contains", "source": "text_data\\graph.txt:1423", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1423", "target": "rendered"}, {"type": "contains", "source": "text_data\\graph.txt:1424", "target": "source"}, {"type": "contains", "source": "text_data\\graph.txt:1424", "target": "pydanticgraphpydanticgraphgraphpy"}, {"type": "contains", "source": "text_data\\graph.txt:1425", "target": "sequencemermaidnodeident"}, {"type": "contains", "source": "text_data\\graph.txt:1425", "target": "mermaidnodeident"}, {"type": "contains", "source": "text_data\\graph.txt:1425", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1425", "target": "mermaidcode"}, {"type": "contains", "source": "text_data\\graph.txt:1425", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1426", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1426", "target": "nodes"}, {"type": "contains", "source": "text_data\\graph.txt:1426", "target": "title"}, {"type": "contains", "source": "text_data\\graph.txt:1426", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1426", "target": "include"}, {"type": "contains", "source": "text_data\\graph.txt:1427", "target": "increment"}, {"type": "contains", "source": "text_data\\graph.txt:1427", "target": "check42"}, {"type": "contains", "source": "text_data\\graph.txt:1427", "target": "never42graph"}, {"type": "contains", "source": "text_data\\graph.txt:1427", "target": "title"}, {"type": "contains", "source": "text_data\\graph.txt:1427", "target": "statediagramv2"}, {"type": "contains", "source": "text_data\\graph.txt:1428", "target": "selfname"}, {"type": "contains", "source": "text_data\\graph.txt:1428", "target": "title"}, {"type": "contains", "source": "text_data\\graph.txt:1428", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1428", "target": "selfinfernameinspectcurrentframe"}, {"type": "contains", "source": "text_data\\graph.txt:1428", "target": "return"}, {"type": "contains", "source": "text_data\\graph.txt:1429", "target": "kwargs"}, {"type": "contains", "source": "text_data\\graph.txt:1429", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1429", "target": "mermaidimage"}, {"type": "contains", "source": "text_data\\graph.txt:1429", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1429", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\graph.txt:1430", "target": "service"}, {"type": "contains", "source": "text_data\\graph.txt:1430", "target": "external"}, {"type": "contains", "source": "text_data\\graph.txt:1430", "target": "method"}, {"type": "contains", "source": "text_data\\graph.txt:1430", "target": "makes"}, {"type": "contains", "source": "text_data\\graph.txt:1430", "target": "request"}, {"type": "contains", "source": "text_data\\graph.txt:1431", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1431", "target": "byteshttpsdocspythonorg3librarystdtypeshtmlbytes"}, {"type": "contains", "source": "text_data\\graph.txt:1431", "target": "image"}, {"type": "contains", "source": "text_data\\graph.txt:1431", "target": "bytes"}, {"type": "contains", "source": "text_data\\graph.txt:1431", "target": "source"}, {"type": "contains", "source": "text_data\\graph.txt:1432", "target": "kwargs"}, {"type": "contains", "source": "text_data\\graph.txt:1432", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1432", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1432", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1432", "target": "image"}, {"type": "contains", "source": "text_data\\graph.txt:1433", "target": "selfname"}, {"type": "contains", "source": "text_data\\graph.txt:1433", "target": "kwargs"}, {"type": "contains", "source": "text_data\\graph.txt:1433", "target": "returns"}, {"type": "contains", "source": "text_data\\graph.txt:1433", "target": "image"}, {"type": "contains", "source": "text_data\\graph.txt:1433", "target": "bytes"}, {"type": "contains", "source": "text_data\\graph.txt:1434", "target": "kwargs"}, {"type": "contains", "source": "text_data\\graph.txt:1434", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1434", "target": "mermaidsave"}, {"type": "contains", "source": "text_data\\graph.txt:1434", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\graph.txt:1434", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\graph.txt:1435", "target": "service"}, {"type": "contains", "source": "text_data\\graph.txt:1435", "target": "external"}, {"type": "contains", "source": "text_data\\graph.txt:1435", "target": "method"}, {"type": "contains", "source": "text_data\\graph.txt:1435", "target": "makes"}, {"type": "contains", "source": "text_data\\graph.txt:1435", "target": "request"}, {"type": "contains", "source": "text_data\\graph.txt:1436", "target": "parameters"}, {"type": "contains", "source": "text_data\\graph.txt:1436", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1436", "target": "default"}, {"type": "contains", "source": "text_data\\graph.txt:1436", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\graph.txt:1436", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\graph.txt:1438", "target": "image"}, {"type": "contains", "source": "text_data\\graph.txt:1438", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1438", "target": "kwargs"}, {"type": "contains", "source": "text_data\\graph.txt:1438", "target": "diagram"}, {"type": "contains", "source": "text_data\\graph.txt:1438", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1439", "target": "kwargs"}, {"type": "contains", "source": "text_data\\graph.txt:1439", "target": "selfname"}, {"type": "contains", "source": "text_data\\graph.txt:1439", "target": "infername"}, {"type": "contains", "source": "text_data\\graph.txt:1439", "target": "whether"}, {"type": "contains", "source": "text_data\\graph.txt:1439", "target": "infer"}, {"type": "contains", "source": "text_data\\graph.txt:1440", "target": "getnodes"}, {"type": "contains", "source": "text_data\\graph.txt:1440", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\graph.txt:1440", "target": "collectionsabcsequencetypehttpsdocspythonorg3libraryfunctionshtmltypebasenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1440", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1440", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1441", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1441", "target": "getnodesself"}, {"type": "contains", "source": "text_data\\graph.txt:1441", "target": "sequencetypebasenodestatet"}, {"type": "contains", "source": "text_data\\graph.txt:1441", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1441", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1442", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1442", "target": "graphrun"}, {"type": "contains", "source": "text_data\\graph.txt:1442", "target": "calling"}, {"type": "contains", "source": "text_data\\graph.txt:1442", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1442", "target": "stateful"}, {"type": "contains", "source": "text_data\\graph.txt:1443", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1443", "target": "graphrun"}, {"type": "contains", "source": "text_data\\graph.txt:1443", "target": "import"}, {"type": "contains", "source": "text_data\\graph.txt:1443", "target": "increment"}, {"type": "contains", "source": "text_data\\graph.txt:1443", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1444", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1444", "target": "graphrun"}, {"type": "contains", "source": "text_data\\graph.txt:1444", "target": "deepcopygraphrunstate"}, {"type": "contains", "source": "text_data\\graph.txt:1444", "target": "increment"}, {"type": "contains", "source": "text_data\\graph.txt:1444", "target": "check42"}, {"type": "contains", "source": "text_data\\graph.txt:1445", "target": "graphrunnext"}, {"type": "contains", "source": "text_data\\graph.txt:1445", "target": "documentation"}, {"type": "contains", "source": "text_data\\graph.txt:1445", "target": "example"}, {"type": "contains", "source": "text_data\\graph.txt:1445", "target": "manually"}, {"type": "contains", "source": "text_data\\graph.txt:1445", "target": "drive"}, {"type": "contains", "source": "text_data\\graph.txt:1450", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1450", "target": "graphrun"}, {"type": "contains", "source": "text_data\\graph.txt:1450", "target": "calling"}, {"type": "contains", "source": "text_data\\graph.txt:1450", "target": "import"}, {"type": "contains", "source": "text_data\\graph.txt:1450", "target": "class"}, {"type": "contains", "source": "text_data\\graph.txt:1451", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1451", "target": "graphrun"}, {"type": "contains", "source": "text_data\\graph.txt:1451", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1451", "target": "never42graphiterincrement"}, {"type": "contains", "source": "text_data\\graph.txt:1451", "target": "statestate"}, {"type": "contains", "source": "text_data\\graph.txt:1452", "target": "deepcopygraphrunstate"}, {"type": "contains", "source": "text_data\\graph.txt:1452", "target": "increment"}, {"type": "contains", "source": "text_data\\graph.txt:1452", "target": "check42"}, {"type": "contains", "source": "text_data\\graph.txt:1452", "target": "mystatenumber42"}, {"type": "contains", "source": "text_data\\graph.txt:1452", "target": "mystatenumber43"}, {"type": "contains", "source": "text_data\\graph.txt:1453", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1453", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1453", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1453", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1453", "target": "drive"}, {"type": "contains", "source": "text_data\\graph.txt:1454", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1454", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1454", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1454", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1454", "target": "where"}, {"type": "contains", "source": "text_data\\graph.txt:1455", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1455", "target": "selfnextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1455", "target": "basenodestatet"}, {"type": "contains", "source": "text_data\\graph.txt:1455", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1455", "target": "endrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1456", "target": "return"}, {"type": "contains", "source": "text_data\\graph.txt:1456", "target": "basenodestatet"}, {"type": "contains", "source": "text_data\\graph.txt:1456", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1456", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1456", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1457", "target": "import"}, {"type": "contains", "source": "text_data\\graph.txt:1457", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1457", "target": "nextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1457", "target": "heres"}, {"type": "contains", "source": "text_data\\graph.txt:1457", "target": "example"}, {"type": "contains", "source": "text_data\\graph.txt:1458", "target": "graphrunstatenumber"}, {"type": "contains", "source": "text_data\\graph.txt:1458", "target": "mystatenumber49"}, {"type": "contains", "source": "text_data\\graph.txt:1458", "target": "nextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1458", "target": "await"}, {"type": "contains", "source": "text_data\\graph.txt:1458", "target": "graphrunnextnextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1459", "target": "returned"}, {"type": "contains", "source": "text_data\\graph.txt:1459", "target": "selfnextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1459", "target": "would"}, {"type": "contains", "source": "text_data\\graph.txt:1459", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1459", "target": "updated"}, {"type": "contains", "source": "text_data\\graph.txt:1460", "target": "nodesnapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1460", "target": "nodegetsnapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1460", "target": "selfsnapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1460", "target": "basenode"}, {"type": "contains", "source": "text_data\\graph.txt:1460", "target": "await"}, {"type": "contains", "source": "text_data\\graph.txt:1461", "target": "nodeid"}, {"type": "contains", "source": "text_data\\graph.txt:1461", "target": "selfnextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1461", "target": "await"}, {"type": "contains", "source": "text_data\\graph.txt:1461", "target": "nodegetnodeid"}, {"type": "contains", "source": "text_data\\graph.txt:1461", "target": "selfgraphnodedefs"}, {"type": "contains", "source": "text_data\\graph.txt:1462", "target": "return"}, {"type": "contains", "source": "text_data\\graph.txt:1462", "target": "isinstanceselfnextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1462", "target": "basenode"}, {"type": "contains", "source": "text_data\\graph.txt:1462", "target": "selfnextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1462", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1463", "target": "return"}, {"type": "contains", "source": "text_data\\graph.txt:1463", "target": "isinstanceselfnextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1463", "target": "raise"}, {"type": "contains", "source": "text_data\\graph.txt:1463", "target": "stopasynciteration"}, {"type": "contains", "source": "text_data\\graph.txt:1463", "target": "await"}, {"type": "contains", "source": "text_data\\graph.txt:1464", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1464", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1464", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1464", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1464", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1465", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1465", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1465", "target": "basestatepersistencepersistencepydanticgraphpersistencebasestatepersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1465", "target": "pydanticgraphpersistencebasestatepersistencestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1465", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1466", "target": "create"}, {"type": "contains", "source": "text_data\\graph.txt:1466", "target": "given"}, {"type": "contains", "source": "text_data\\graph.txt:1466", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1466", "target": "starting"}, {"type": "contains", "source": "text_data\\graph.txt:1466", "target": "specified"}, {"type": "contains", "source": "text_data\\graph.txt:1467", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1467", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1467", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1467", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1467", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1468", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1468", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1468", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1468", "target": "required"}, {"type": "contains", "source": "text_data\\graph.txt:1468", "target": "basestatepersistencepersistencepydanticgraphpersistencebasestatepersistence"}, {"type": "contains", "source": "text_data\\graph.txt:1469", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1469", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1469", "target": "optional"}, {"type": "contains", "source": "text_data\\graph.txt:1469", "target": "dependencies"}, {"type": "contains", "source": "text_data\\graph.txt:1469", "target": "access"}, {"type": "contains", "source": "text_data\\graph.txt:1471", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1471", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1471", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1471", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1471", "target": "startnode"}, {"type": "contains", "source": "text_data\\graph.txt:1472", "target": "state"}, {"type": "contains", "source": "text_data\\graph.txt:1472", "target": "persistence"}, {"type": "contains", "source": "text_data\\graph.txt:1472", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1472", "target": "interface"}, {"type": "contains", "source": "text_data\\graph.txt:1472", "target": "shared"}, {"type": "contains", "source": "text_data\\graph.txt:1473", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1473", "target": "nextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1473", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1473", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1473", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1474", "target": "result"}, {"type": "contains", "source": "text_data\\graph.txt:1474", "target": "property"}, {"type": "contains", "source": "text_data\\graph.txt:1474", "target": "graphrunresultstatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1474", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1474", "target": "runendtnodespydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1475", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1475", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1475", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1475", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1475", "target": "pydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1476", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1476", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1476", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1476", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1476", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1477", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1477", "target": "drive"}, {"type": "contains", "source": "text_data\\graph.txt:1477", "target": "manually"}, {"type": "contains", "source": "text_data\\graph.txt:1477", "target": "passing"}, {"type": "contains", "source": "text_data\\graph.txt:1477", "target": "inspect"}, {"type": "contains", "source": "text_data\\graph.txt:1478", "target": "import"}, {"type": "contains", "source": "text_data\\graph.txt:1478", "target": "nextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1478", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1478", "target": "deepcopygraphrunstate"}, {"type": "contains", "source": "text_data\\graph.txt:1478", "target": "graphrunstatenumber"}, {"type": "contains", "source": "text_data\\graph.txt:1479", "target": "mystatenumber49"}, {"type": "contains", "source": "text_data\\graph.txt:1479", "target": "printnodestates"}, {"type": "contains", "source": "text_data\\graph.txt:1479", "target": "increment"}, {"type": "contains", "source": "text_data\\graph.txt:1479", "target": "mystatenumber48"}, {"type": "contains", "source": "text_data\\graph.txt:1479", "target": "check42"}, {"type": "contains", "source": "text_data\\graph.txt:1480", "target": "parameters"}, {"type": "contains", "source": "text_data\\graph.txt:1480", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1480", "target": "default"}, {"type": "contains", "source": "text_data\\graph.txt:1480", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1480", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1481", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1481", "target": "endnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\graph.txt:1481", "target": "description"}, {"type": "contains", "source": "text_data\\graph.txt:1481", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1481", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1482", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1482", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1482", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1482", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1482", "target": "depstnodespydanticgraphnodesdepst"}, {"type": "contains", "source": "text_data\\graph.txt:1484", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1484", "target": "import"}, {"type": "contains", "source": "text_data\\graph.txt:1484", "target": "basenodestatet"}, {"type": "contains", "source": "text_data\\graph.txt:1484", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1484", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1485", "target": "nextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1485", "target": "increment"}, {"type": "contains", "source": "text_data\\graph.txt:1485", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1485", "target": "deepcopygraphrunstate"}, {"type": "contains", "source": "text_data\\graph.txt:1485", "target": "graphrunstatenumber"}, {"type": "contains", "source": "text_data\\graph.txt:1486", "target": "mystatenumber49"}, {"type": "contains", "source": "text_data\\graph.txt:1486", "target": "graph"}, {"type": "contains", "source": "text_data\\graph.txt:1486", "target": "selfnextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1486", "target": "returned"}, {"type": "contains", "source": "text_data\\graph.txt:1486", "target": "increment"}, {"type": "contains", "source": "text_data\\graph.txt:1487", "target": "nodesnapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1487", "target": "would"}, {"type": "contains", "source": "text_data\\graph.txt:1487", "target": "nodegetsnapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1487", "target": "selfsnapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1487", "target": "there"}, {"type": "contains", "source": "text_data\\graph.txt:1488", "target": "nodeid"}, {"type": "contains", "source": "text_data\\graph.txt:1488", "target": "raise"}, {"type": "contains", "source": "text_data\\graph.txt:1488", "target": "should"}, {"type": "contains", "source": "text_data\\graph.txt:1488", "target": "eagerly"}, {"type": "contains", "source": "text_data\\graph.txt:1488", "target": "provide"}, {"type": "contains", "source": "text_data\\graph.txt:1489", "target": "selfnextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1489", "target": "await"}, {"type": "contains", "source": "text_data\\graph.txt:1489", "target": "isinstanceselfnextnode"}, {"type": "contains", "source": "text_data\\graph.txt:1489", "target": "selfsnapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1489", "target": "selfnextnodegetsnapshotid"}, {"type": "contains", "source": "text_data\\graph.txt:1490", "target": "pydanticgraphnodesrunendt"}, {"type": "contains", "source": "text_data\\graph.txt:1490", "target": "anext"}, {"type": "contains", "source": "text_data\\graph.txt:1490", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\graph.txt:1490", "target": "pydanticgraphnodesbasenodestatetnodespydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1490", "target": "pydanticgraphnodesstatet"}, {"type": "contains", "source": "text_data\\graph.txt:1491", "target": "async"}, {"type": "contains", "source": "text_data\\graph.txt:1491", "target": "anextself"}, {"type": "contains", "source": "text_data\\graph.txt:1491", "target": "basenodestatet"}, {"type": "contains", "source": "text_data\\graph.txt:1491", "target": "depst"}, {"type": "contains", "source": "text_data\\graph.txt:1491", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1492", "target": "runendt"}, {"type": "contains", "source": "text_data\\graph.txt:1492", "target": "source"}, {"type": "contains", "source": "text_data\\graph.txt:1492", "target": "pydanticgraphpydanticgraphgraphpy"}, {"type": "contains", "source": "text_data\\graph.txt:1492", "target": "dataclass"}, {"type": "contains", "source": "text_data\\graph.txt:1492", "target": "class"}, {"type": "contains", "source": "text_data\\groq.txt:1492", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\groq.txt:1492", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\groq.txt:1492", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\groq.txt:1492", "target": "v0050"}, {"type": "contains", "source": "text_data\\groq.txt:1492", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\groq.txt:1493", "target": "tools"}, {"type": "contains", "source": "text_data\\groq.txt:1493", "target": "contributing"}, {"type": "contains", "source": "text_data\\groq.txt:1493", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\groq.txt:1493", "target": "documentation"}, {"type": "contains", "source": "text_data\\groq.txt:1493", "target": "agents"}, {"type": "contains", "source": "text_data\\groq.txt:1494", "target": "evals"}, {"type": "contains", "source": "text_data\\groq.txt:1494", "target": "input"}, {"type": "contains", "source": "text_data\\groq.txt:1494", "target": "graphs"}, {"type": "contains", "source": "text_data\\groq.txt:1494", "target": "graph"}, {"type": "contains", "source": "text_data\\groq.txt:1494", "target": "image"}, {"type": "contains", "source": "text_data\\groq.txt:1495", "target": "examples"}, {"type": "contains", "source": "text_data\\groq.txt:1495", "target": "client"}, {"type": "contains", "source": "text_data\\groq.txt:1495", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\groq.txt:1495", "target": "server"}, {"type": "contains", "source": "text_data\\groq.txt:1495", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\groq.txt:1496", "target": "agent"}, {"type": "contains", "source": "text_data\\groq.txt:1496", "target": "stream"}, {"type": "contains", "source": "text_data\\groq.txt:1496", "target": "reference"}, {"type": "contains", "source": "text_data\\groq.txt:1496", "target": "pydantic"}, {"type": "contains", "source": "text_data\\groq.txt:1496", "target": "model"}, {"type": "contains", "source": "text_data\\groq.txt:1497", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\groq.txt:1497", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\groq.txt:1497", "target": "result"}, {"type": "contains", "source": "text_data\\groq.txt:1497", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\groq.txt:1497", "target": "messages"}, {"type": "contains", "source": "text_data\\groq.txt:1498", "target": "modelname"}, {"type": "contains", "source": "text_data\\groq.txt:1498", "target": "setup"}, {"type": "contains", "source": "text_data\\groq.txt:1498", "target": "productiongroqmodelnames"}, {"type": "contains", "source": "text_data\\groq.txt:1498", "target": "previewgroqmodelnames"}, {"type": "contains", "source": "text_data\\groq.txt:1498", "target": "groqmodelname"}, {"type": "contains", "source": "text_data\\groq.txt:1499", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\groq.txt:1499", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\groq.txt:1499", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\groq.txt:1499", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\groq.txt:1499", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\groq.txt:1500", "target": "setup"}, {"type": "contains", "source": "text_data\\groq.txt:1500", "target": "productiongroqmodelnames"}, {"type": "contains", "source": "text_data\\groq.txt:1500", "target": "modelname"}, {"type": "contains", "source": "text_data\\groq.txt:1500", "target": "model"}, {"type": "contains", "source": "text_data\\groq.txt:1500", "target": "table"}, {"type": "contains", "source": "text_data\\groq.txt:1501", "target": "productiongroqmodelnames"}, {"type": "contains", "source": "text_data\\groq.txt:1501", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\groq.txt:1501", "target": "models"}, {"type": "contains", "source": "text_data\\groq.txt:1501", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\groq.txt:1501", "target": "typingliteral"}, {"type": "contains", "source": "text_data\\groq.txt:1502", "target": "previewgroqmodelnames"}, {"type": "contains", "source": "text_data\\groq.txt:1502", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\groq.txt:1502", "target": "models"}, {"type": "contains", "source": "text_data\\groq.txt:1502", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\groq.txt:1502", "target": "typingliteral"}, {"type": "contains", "source": "text_data\\groq.txt:1503", "target": "models"}, {"type": "contains", "source": "text_data\\groq.txt:1503", "target": "groqmodelname"}, {"type": "contains", "source": "text_data\\groq.txt:1503", "target": "model"}, {"type": "contains", "source": "text_data\\groq.txt:1503", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\groq.txt:1503", "target": "unionhttpsdocspythonorg3librarytypinghtmltypingunion"}, {"type": "contains", "source": "text_data\\groq.txt:1504", "target": "model"}, {"type": "contains", "source": "text_data\\groq.txt:1504", "target": "settings"}, {"type": "contains", "source": "text_data\\groq.txt:1504", "target": "request"}, {"type": "contains", "source": "text_data\\groq.txt:1504", "target": "fields"}, {"type": "contains", "source": "text_data\\groq.txt:1504", "target": "prefixed"}, {"type": "contains", "source": "text_data\\groq.txt:1505", "target": "source"}, {"type": "contains", "source": "text_data\\groq.txt:1505", "target": "pydanticaislimpydanticaimodelsgroqpy"}, {"type": "contains", "source": "text_data\\groq.txt:1510", "target": "model"}, {"type": "contains", "source": "text_data\\groq.txt:1510", "target": "modelname"}, {"type": "contains", "source": "text_data\\groq.txt:1510", "target": "class"}, {"type": "contains", "source": "text_data\\groq.txt:1510", "target": "fieldreprfalse"}, {"type": "contains", "source": "text_data\\groq.txt:1510", "target": "groqmodelname"}, {"type": "contains", "source": "text_data\\groq.txt:1511", "target": "provider"}, {"type": "contains", "source": "text_data\\groq.txt:1511", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\groq.txt:1511", "target": "herehttpsconsolegroqcomdocsmodels"}, {"type": "contains", "source": "text_data\\groq.txt:1511", "target": "authentication"}, {"type": "contains", "source": "text_data\\groq.txt:1511", "target": "access"}, {"type": "contains", "source": "text_data\\groq.txt:1512", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\groq.txt:1512", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\groq.txt:1512", "target": "checkallowmodelrequests"}, {"type": "contains", "source": "text_data\\groq.txt:1512", "target": "messages"}, {"type": "contains", "source": "text_data\\groq.txt:1512", "target": "tuplemodelresponse"}, {"type": "contains", "source": "text_data\\groq.txt:1513", "target": "response"}, {"type": "contains", "source": "text_data\\groq.txt:1513", "target": "await"}, {"type": "contains", "source": "text_data\\groq.txt:1513", "target": "messages"}, {"type": "contains", "source": "text_data\\groq.txt:1513", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\groq.txt:1513", "target": "async"}, {"type": "contains", "source": "text_data\\groq.txt:1514", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\groq.txt:1514", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\groq.txt:1514", "target": "groqmodelsettings"}, {"type": "contains", "source": "text_data\\groq.txt:1514", "target": "async"}, {"type": "contains", "source": "text_data\\groq.txt:1514", "target": "completionscreate"}, {"type": "contains", "source": "text_data\\groq.txt:1515", "target": "toolchoice"}, {"type": "contains", "source": "text_data\\groq.txt:1515", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\groq.txt:1515", "target": "tools"}, {"type": "contains", "source": "text_data\\groq.txt:1515", "target": "required"}, {"type": "contains", "source": "text_data\\groq.txt:1515", "target": "chatchatcompletion"}, {"type": "contains", "source": "text_data\\groq.txt:1516", "target": "notgiven"}, {"type": "contains", "source": "text_data\\groq.txt:1516", "target": "messagesgroqmessages"}, {"type": "contains", "source": "text_data\\groq.txt:1516", "target": "paralleltoolcallsmodelsettingsgetparalleltoolcalls"}, {"type": "contains", "source": "text_data\\groq.txt:1516", "target": "toolstools"}, {"type": "contains", "source": "text_data\\groq.txt:1516", "target": "toolchoicetoolchoice"}, {"type": "contains", "source": "text_data\\groq.txt:1517", "target": "notgiven"}, {"type": "contains", "source": "text_data\\groq.txt:1517", "target": "raise"}, {"type": "contains", "source": "text_data\\groq.txt:1517", "target": "response"}, {"type": "contains", "source": "text_data\\groq.txt:1517", "target": "frequencypenaltymodelsettingsgetfrequencypenalty"}, {"type": "contains", "source": "text_data\\groq.txt:1517", "target": "logitbiasmodelsettingsgetlogitbias"}, {"type": "contains", "source": "text_data\\groq.txt:1518", "target": "response"}, {"type": "contains", "source": "text_data\\groq.txt:1518", "target": "choicemessagetoolcalls"}, {"type": "contains", "source": "text_data\\groq.txt:1518", "target": "return"}, {"type": "contains", "source": "text_data\\groq.txt:1518", "target": "items"}, {"type": "contains", "source": "text_data\\groq.txt:1518", "target": "listmodelresponsepart"}, {"type": "contains", "source": "text_data\\groq.txt:1519", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\groq.txt:1519", "target": "peekableresponse"}, {"type": "contains", "source": "text_data\\groq.txt:1519", "target": "utilspeekableasyncstreamresponse"}, {"type": "contains", "source": "text_data\\groq.txt:1519", "target": "firstchunk"}, {"type": "contains", "source": "text_data\\groq.txt:1519", "target": "await"}, {"type": "contains", "source": "text_data\\groq.txt:1520", "target": "modelrequestparametersresulttools"}, {"type": "contains", "source": "text_data\\groq.txt:1520", "target": "tools"}, {"type": "contains", "source": "text_data\\groq.txt:1520", "target": "isinstancemessage"}, {"type": "contains", "source": "text_data\\groq.txt:1520", "target": "selfmaptooldefinitionr"}, {"type": "contains", "source": "text_data\\groq.txt:1520", "target": "return"}, {"type": "contains", "source": "text_data\\groq.txt:1521", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\groq.txt:1521", "target": "texts"}, {"type": "contains", "source": "text_data\\groq.txt:1521", "target": "model"}, {"type": "contains", "source": "text_data\\groq.txt:1521", "target": "toolcalls"}, {"type": "contains", "source": "text_data\\groq.txt:1521", "target": "textpart"}, {"type": "contains", "source": "text_data\\groq.txt:1522", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\groq.txt:1522", "target": "chatchatcompletionmessagetoolcallparam"}, {"type": "contains", "source": "text_data\\groq.txt:1522", "target": "return"}, {"type": "contains", "source": "text_data\\groq.txt:1522", "target": "function"}, {"type": "contains", "source": "text_data\\groq.txt:1522", "target": "messageparamtoolcalls"}, {"type": "contains", "source": "text_data\\groq.txt:1523", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\groq.txt:1523", "target": "yield"}, {"type": "contains", "source": "text_data\\groq.txt:1523", "target": "description"}, {"type": "contains", "source": "text_data\\groq.txt:1523", "target": "fdescription"}, {"type": "contains", "source": "text_data\\groq.txt:1523", "target": "parameters"}, {"type": "contains", "source": "text_data\\groq.txt:1524", "target": "toolcallidguardtoolcallidtpart"}, {"type": "contains", "source": "text_data\\groq.txt:1524", "target": "yield"}, {"type": "contains", "source": "text_data\\groq.txt:1524", "target": "contentpartmodelresponse"}, {"type": "contains", "source": "text_data\\groq.txt:1524", "target": "contentpartmodelresponsestr"}, {"type": "contains", "source": "text_data\\groq.txt:1524", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\groq.txt:1525", "target": "content"}, {"type": "contains", "source": "text_data\\groq.txt:1525", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\groq.txt:1525", "target": "partcontent"}, {"type": "contains", "source": "text_data\\groq.txt:1525", "target": "imageurl"}, {"type": "contains", "source": "text_data\\groq.txt:1525", "target": "listchatchatcompletioncontentpartparam"}, {"type": "contains", "source": "text_data\\groq.txt:1526", "target": "raise"}, {"type": "contains", "source": "text_data\\groq.txt:1526", "target": "supported"}, {"type": "contains", "source": "text_data\\groq.txt:1526", "target": "content"}, {"type": "contains", "source": "text_data\\groq.txt:1526", "target": "pragma"}, {"type": "contains", "source": "text_data\\groq.txt:1526", "target": "cover"}, {"type": "contains", "source": "text_data\\groq.txt:1528", "target": "modelname"}, {"type": "contains", "source": "text_data\\groq.txt:1528", "target": "groqmodelname"}, {"type": "contains", "source": "text_data\\groq.txt:1528", "target": "provider"}, {"type": "contains", "source": "text_data\\groq.txt:1528", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\groq.txt:1528", "target": "typingliteralgroq"}, {"type": "contains", "source": "text_data\\groq.txt:1529", "target": "model"}, {"type": "contains", "source": "text_data\\groq.txt:1529", "target": "provider"}, {"type": "contains", "source": "text_data\\groq.txt:1529", "target": "parameters"}, {"type": "contains", "source": "text_data\\groq.txt:1529", "target": "initialize"}, {"type": "contains", "source": "text_data\\groq.txt:1529", "target": "description"}, {"type": "contains", "source": "text_data\\groq.txt:1531", "target": "provider"}, {"type": "contains", "source": "text_data\\groq.txt:1531", "target": "modelname"}, {"type": "contains", "source": "text_data\\groq.txt:1531", "target": "model"}, {"type": "contains", "source": "text_data\\groq.txt:1531", "target": "providerasyncgroq"}, {"type": "contains", "source": "text_data\\groq.txt:1531", "target": "initself"}, {"type": "contains", "source": "text_data\\groq.txt:1532", "target": "selfclient"}, {"type": "contains", "source": "text_data\\groq.txt:1532", "target": "providerclient"}, {"type": "contains", "source": "text_data\\groq.txt:1532", "target": "modelname"}, {"type": "contains", "source": "text_data\\groq.txt:1532", "target": "property"}, {"type": "contains", "source": "text_data\\groq.txt:1533", "target": "system"}, {"type": "contains", "source": "text_data\\groq.txt:1533", "target": "model"}, {"type": "contains", "source": "text_data\\groq.txt:1533", "target": "modelname"}, {"type": "contains", "source": "text_data\\groq.txt:1533", "target": "groqmodelname"}, {"type": "contains", "source": "text_data\\groq.txt:1533", "target": "property"}, {"type": "contains", "source": "text_data\\groq.txt:1534", "target": "source"}, {"type": "contains", "source": "text_data\\groq.txt:1534", "target": "pydanticaislimpydanticaimodelsgroqpy"}, {"type": "contains", "source": "text_data\\groq.txt:1535", "target": "response"}, {"type": "contains", "source": "text_data\\groq.txt:1535", "target": "async"}, {"type": "contains", "source": "text_data\\groq.txt:1535", "target": "content"}, {"type": "contains", "source": "text_data\\groq.txt:1535", "target": "dataclass"}, {"type": "contains", "source": "text_data\\groq.txt:1535", "target": "class"}, {"type": "contains", "source": "text_data\\groq.txt:1536", "target": "maybeevent"}, {"type": "contains", "source": "text_data\\groq.txt:1536", "target": "yield"}, {"type": "contains", "source": "text_data\\groq.txt:1536", "target": "content"}, {"type": "contains", "source": "text_data\\groq.txt:1536", "target": "selfpartsmanagerhandletextdeltavendorpartidcontent"}, {"type": "contains", "source": "text_data\\groq.txt:1536", "target": "contentcontent"}, {"type": "contains", "source": "text_data\\groq.txt:1537", "target": "response"}, {"type": "contains", "source": "text_data\\groq.txt:1537", "target": "return"}, {"type": "contains", "source": "text_data\\groq.txt:1537", "target": "property"}, {"type": "contains", "source": "text_data\\groq.txt:1537", "target": "model"}, {"type": "contains", "source": "text_data\\groq.txt:1537", "target": "selfmodelname"}, {"type": "contains", "source": "text_data\\groq.txt:1538", "target": "timestamp"}, {"type": "contains", "source": "text_data\\groq.txt:1538", "target": "response"}, {"type": "contains", "source": "text_data\\groq.txt:1538", "target": "modelname"}, {"type": "contains", "source": "text_data\\groq.txt:1538", "target": "groqmodelname"}, {"type": "contains", "source": "text_data\\groq.txt:1538", "target": "model"}, {"type": "contains", "source": "text_data\\help.txt:1538", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\help.txt:1538", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\help.txt:1538", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\help.txt:1538", "target": "v0050"}, {"type": "contains", "source": "text_data\\help.txt:1538", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\help.txt:1539", "target": "tools"}, {"type": "contains", "source": "text_data\\help.txt:1539", "target": "getting"}, {"type": "contains", "source": "text_data\\help.txt:1539", "target": "contributing"}, {"type": "contains", "source": "text_data\\help.txt:1539", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\help.txt:1539", "target": "documentation"}, {"type": "contains", "source": "text_data\\help.txt:1540", "target": "evals"}, {"type": "contains", "source": "text_data\\help.txt:1540", "target": "input"}, {"type": "contains", "source": "text_data\\help.txt:1540", "target": "graphs"}, {"type": "contains", "source": "text_data\\help.txt:1540", "target": "graph"}, {"type": "contains", "source": "text_data\\help.txt:1540", "target": "image"}, {"type": "contains", "source": "text_data\\help.txt:1541", "target": "examples"}, {"type": "contains", "source": "text_data\\help.txt:1541", "target": "client"}, {"type": "contains", "source": "text_data\\help.txt:1541", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\help.txt:1541", "target": "server"}, {"type": "contains", "source": "text_data\\help.txt:1541", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\help.txt:1542", "target": "stream"}, {"type": "contains", "source": "text_data\\help.txt:1542", "target": "reference"}, {"type": "contains", "source": "text_data\\help.txt:1542", "target": "pydantic"}, {"type": "contains", "source": "text_data\\help.txt:1542", "target": "model"}, {"type": "contains", "source": "text_data\\help.txt:1542", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\help.txt:1543", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\help.txt:1543", "target": "apimessages"}, {"type": "contains", "source": "text_data\\help.txt:1543", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\help.txt:1543", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\help.txt:1543", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\help.txt:1544", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\help.txt:1544", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\help.txt:1544", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\help.txt:1544", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\help.txt:1544", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\help.txt:1545", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\help.txt:1545", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\help.txt:1545", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\help.txt:1545", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\help.txt:1545", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\help.txt:1546", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\help.txt:1546", "target": "slack"}, {"type": "contains", "source": "text_data\\help.txt:1546", "target": "github"}, {"type": "contains", "source": "text_data\\help.txt:1546", "target": "pydantic"}, {"type": "contains", "source": "text_data\\help.txt:1546", "target": "issues"}, {"type": "contains", "source": "text_data\\input.txt:1546", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\input.txt:1546", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\input.txt:1546", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\input.txt:1546", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\input.txt:1546", "target": "repository"}, {"type": "contains", "source": "text_data\\input.txt:1547", "target": "tools"}, {"type": "contains", "source": "text_data\\input.txt:1547", "target": "contributing"}, {"type": "contains", "source": "text_data\\input.txt:1547", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\input.txt:1547", "target": "documentation"}, {"type": "contains", "source": "text_data\\input.txt:1547", "target": "agents"}, {"type": "contains", "source": "text_data\\input.txt:1548", "target": "input"}, {"type": "contains", "source": "text_data\\input.txt:1548", "target": "image"}, {"type": "contains", "source": "text_data\\input.txt:1548", "target": "audio"}, {"type": "contains", "source": "text_data\\input.txt:1548", "target": "document"}, {"type": "contains", "source": "text_data\\input.txt:1549", "target": "examples"}, {"type": "contains", "source": "text_data\\input.txt:1549", "target": "client"}, {"type": "contains", "source": "text_data\\input.txt:1549", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\input.txt:1549", "target": "server"}, {"type": "contains", "source": "text_data\\input.txt:1549", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\input.txt:1550", "target": "stream"}, {"type": "contains", "source": "text_data\\input.txt:1550", "target": "reference"}, {"type": "contains", "source": "text_data\\input.txt:1550", "target": "pydantic"}, {"type": "contains", "source": "text_data\\input.txt:1550", "target": "model"}, {"type": "contains", "source": "text_data\\input.txt:1550", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\input.txt:1551", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\input.txt:1551", "target": "apimessages"}, {"type": "contains", "source": "text_data\\input.txt:1551", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\input.txt:1551", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\input.txt:1551", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\input.txt:1552", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\input.txt:1552", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\input.txt:1552", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\input.txt:1552", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\input.txt:1552", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\input.txt:1553", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\input.txt:1553", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\input.txt:1553", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\input.txt:1553", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\input.txt:1553", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\input.txt:1554", "target": "image"}, {"type": "contains", "source": "text_data\\input.txt:1554", "target": "input"}, {"type": "contains", "source": "text_data\\input.txt:1554", "target": "audio"}, {"type": "contains", "source": "text_data\\input.txt:1554", "target": "document"}, {"type": "contains", "source": "text_data\\input.txt:1554", "target": "models"}, {"type": "contains", "source": "text_data\\input.txt:1555", "target": "mainpy"}, {"type": "contains", "source": "text_data\\input.txt:1555", "target": "agent"}, {"type": "contains", "source": "text_data\\input.txt:1555", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\input.txt:1555", "target": "import"}, {"type": "contains", "source": "text_data\\input.txt:1555", "target": "imageurl"}, {"type": "contains", "source": "text_data\\input.txt:1556", "target": "audio"}, {"type": "contains", "source": "text_data\\input.txt:1556", "target": "input"}, {"type": "contains", "source": "text_data\\input.txt:1556", "target": "import"}, {"type": "contains", "source": "text_data\\input.txt:1556", "target": "agent"}, {"type": "contains", "source": "text_data\\input.txt:1556", "target": "pydantic"}, {"type": "contains", "source": "text_data\\input.txt:1557", "target": "document"}, {"type": "contains", "source": "text_data\\input.txt:1557", "target": "input"}, {"type": "contains", "source": "text_data\\input.txt:1557", "target": "models"}, {"type": "contains", "source": "text_data\\input.txt:1557", "target": "using"}, {"type": "contains", "source": "text_data\\input.txt:1557", "target": "whether"}, {"type": "contains", "source": "text_data\\input.txt:1558", "target": "document"}, {"type": "contains", "source": "text_data\\input.txt:1558", "target": "documenturlapimessagespydanticaimessagesdocumenturl"}, {"type": "contains", "source": "text_data\\input.txt:1558", "target": "unsatisfied"}, {"type": "contains", "source": "text_data\\input.txt:1558", "target": "behavior"}, {"type": "contains", "source": "text_data\\input.txt:1558", "target": "please"}, {"type": "contains", "source": "text_data\\input.txt:1559", "target": "document"}, {"type": "contains", "source": "text_data\\input.txt:1559", "target": "mainpy"}, {"type": "contains", "source": "text_data\\input.txt:1559", "target": "agent"}, {"type": "contains", "source": "text_data\\input.txt:1559", "target": "model"}, {"type": "contains", "source": "text_data\\input.txt:1559", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\input.txt:1560", "target": "import"}, {"type": "contains", "source": "text_data\\input.txt:1560", "target": "agent"}, {"type": "contains", "source": "text_data\\input.txt:1560", "target": "document"}, {"type": "contains", "source": "text_data\\input.txt:1560", "target": "mainpy"}, {"type": "contains", "source": "text_data\\input.txt:1560", "target": "pathlib"}, {"type": "contains", "source": "text_data\\install.txt:1560", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\install.txt:1560", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\install.txt:1560", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\install.txt:1560", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\install.txt:1560", "target": "repository"}, {"type": "contains", "source": "text_data\\install.txt:1561", "target": "tools"}, {"type": "contains", "source": "text_data\\install.txt:1561", "target": "installation"}, {"type": "contains", "source": "text_data\\install.txt:1561", "target": "logfire"}, {"type": "contains", "source": "text_data\\install.txt:1561", "target": "contributing"}, {"type": "contains", "source": "text_data\\install.txt:1561", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\install.txt:1562", "target": "evals"}, {"type": "contains", "source": "text_data\\install.txt:1562", "target": "input"}, {"type": "contains", "source": "text_data\\install.txt:1562", "target": "graphs"}, {"type": "contains", "source": "text_data\\install.txt:1562", "target": "graph"}, {"type": "contains", "source": "text_data\\install.txt:1562", "target": "image"}, {"type": "contains", "source": "text_data\\install.txt:1563", "target": "examples"}, {"type": "contains", "source": "text_data\\install.txt:1563", "target": "client"}, {"type": "contains", "source": "text_data\\install.txt:1563", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\install.txt:1563", "target": "server"}, {"type": "contains", "source": "text_data\\install.txt:1563", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\install.txt:1564", "target": "stream"}, {"type": "contains", "source": "text_data\\install.txt:1564", "target": "reference"}, {"type": "contains", "source": "text_data\\install.txt:1564", "target": "pydantic"}, {"type": "contains", "source": "text_data\\install.txt:1564", "target": "model"}, {"type": "contains", "source": "text_data\\install.txt:1564", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\install.txt:1565", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\install.txt:1565", "target": "apimessages"}, {"type": "contains", "source": "text_data\\install.txt:1565", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\install.txt:1565", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\install.txt:1565", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\install.txt:1566", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\install.txt:1566", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\install.txt:1566", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\install.txt:1566", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\install.txt:1566", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\install.txt:1567", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\install.txt:1567", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\install.txt:1567", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\install.txt:1567", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\install.txt:1567", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\install.txt:1568", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\install.txt:1568", "target": "pydantic"}, {"type": "contains", "source": "text_data\\install.txt:1568", "target": "install"}, {"type": "contains", "source": "text_data\\install.txt:1568", "target": "logfire"}, {"type": "contains", "source": "text_data\\install.txt:1568", "target": "installation"}, {"type": "contains", "source": "text_data\\install.txt:1569", "target": "examples"}, {"type": "contains", "source": "text_data\\install.txt:1569", "target": "logfire"}, {"type": "contains", "source": "text_data\\install.txt:1569", "target": "install"}, {"type": "contains", "source": "text_data\\install.txt:1569", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\install.txt:1569", "target": "optional"}, {"type": "contains", "source": "text_data\\install.txt:1570", "target": "install"}, {"type": "contains", "source": "text_data\\install.txt:1570", "target": "examples"}, {"type": "contains", "source": "text_data\\install.txt:1570", "target": "optional"}, {"type": "contains", "source": "text_data\\install.txt:1570", "target": "pipuv"}, {"type": "contains", "source": "text_data\\install.txt:1570", "target": "pydanticaiexamples"}, {"type": "contains", "source": "text_data\\install.txt:1571", "target": "installs"}, {"type": "contains", "source": "text_data\\install.txt:1571", "target": "openai"}, {"type": "contains", "source": "text_data\\install.txt:1571", "target": "anthropic"}, {"type": "contains", "source": "text_data\\install.txt:1571", "target": "cohere"}, {"type": "contains", "source": "text_data\\install.txt:1571", "target": "logfire"}, {"type": "contains", "source": "text_data\\install.txt:1572", "target": "installs"}, {"type": "contains", "source": "text_data\\install.txt:1572", "target": "cohere"}, {"type": "contains", "source": "text_data\\install.txt:1572", "target": "httpspypiorgprojectcohere"}, {"type": "contains", "source": "text_data\\install.txt:1572", "target": "duckduckgo"}, {"type": "contains", "source": "text_data\\install.txt:1572", "target": "duckduckgosearch"}, {"type": "contains", "source": "text_data\\install.txt:1573", "target": "dependencies"}, {"type": "contains", "source": "text_data\\install.txt:1573", "target": "install"}, {"type": "contains", "source": "text_data\\install.txt:1573", "target": "pydanticaislimopenaivertexailogfire"}, {"type": "contains", "source": "text_data\\install.txt:1573", "target": "modelsmodels"}, {"type": "contains", "source": "text_data\\install.txt:1573", "target": "documentation"}, {"type": "contains", "source": "text_data\\instrumented.txt:1573", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\instrumented.txt:1573", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\instrumented.txt:1573", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\instrumented.txt:1573", "target": "v0050"}, {"type": "contains", "source": "text_data\\instrumented.txt:1573", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\instrumented.txt:1574", "target": "tools"}, {"type": "contains", "source": "text_data\\instrumented.txt:1574", "target": "contributing"}, {"type": "contains", "source": "text_data\\instrumented.txt:1574", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\instrumented.txt:1574", "target": "documentation"}, {"type": "contains", "source": "text_data\\instrumented.txt:1574", "target": "agents"}, {"type": "contains", "source": "text_data\\instrumented.txt:1575", "target": "evals"}, {"type": "contains", "source": "text_data\\instrumented.txt:1575", "target": "input"}, {"type": "contains", "source": "text_data\\instrumented.txt:1575", "target": "graphs"}, {"type": "contains", "source": "text_data\\instrumented.txt:1575", "target": "graph"}, {"type": "contains", "source": "text_data\\instrumented.txt:1575", "target": "image"}, {"type": "contains", "source": "text_data\\instrumented.txt:1576", "target": "examples"}, {"type": "contains", "source": "text_data\\instrumented.txt:1576", "target": "client"}, {"type": "contains", "source": "text_data\\instrumented.txt:1576", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\instrumented.txt:1576", "target": "server"}, {"type": "contains", "source": "text_data\\instrumented.txt:1576", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\instrumented.txt:1577", "target": "agent"}, {"type": "contains", "source": "text_data\\instrumented.txt:1577", "target": "stream"}, {"type": "contains", "source": "text_data\\instrumented.txt:1577", "target": "reference"}, {"type": "contains", "source": "text_data\\instrumented.txt:1577", "target": "pydantic"}, {"type": "contains", "source": "text_data\\instrumented.txt:1577", "target": "model"}, {"type": "contains", "source": "text_data\\instrumented.txt:1578", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\instrumented.txt:1578", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\instrumented.txt:1578", "target": "result"}, {"type": "contains", "source": "text_data\\instrumented.txt:1578", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\instrumented.txt:1578", "target": "messages"}, {"type": "contains", "source": "text_data\\instrumented.txt:1579", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1579", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\instrumented.txt:1579", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\instrumented.txt:1579", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\instrumented.txt:1579", "target": "instrumented"}, {"type": "contains", "source": "text_data\\instrumented.txt:1580", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\instrumented.txt:1580", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\instrumented.txt:1580", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\instrumented.txt:1580", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\instrumented.txt:1580", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\instrumented.txt:1581", "target": "instrumentationsettings"}, {"type": "contains", "source": "text_data\\instrumented.txt:1581", "target": "instrumentedmodel"}, {"type": "contains", "source": "text_data\\instrumented.txt:1581", "target": "table"}, {"type": "contains", "source": "text_data\\instrumented.txt:1581", "target": "contents"}, {"type": "contains", "source": "text_data\\instrumented.txt:1581", "target": "instrumented"}, {"type": "contains", "source": "text_data\\instrumented.txt:1582", "target": "source"}, {"type": "contains", "source": "text_data\\instrumented.txt:1582", "target": "pydanticaislimpydanticaimodelsinstrumentedpy"}, {"type": "contains", "source": "text_data\\instrumented.txt:1583", "target": "tracer"}, {"type": "contains", "source": "text_data\\instrumented.txt:1583", "target": "fieldreprfalse"}, {"type": "contains", "source": "text_data\\instrumented.txt:1583", "target": "eventlogger"}, {"type": "contains", "source": "text_data\\instrumented.txt:1583", "target": "eventmode"}, {"type": "contains", "source": "text_data\\instrumented.txt:1583", "target": "literalattributes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1584", "target": "events"}, {"type": "contains", "source": "text_data\\instrumented.txt:1584", "target": "attributes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1584", "target": "tracerprovider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1584", "target": "tracer"}, {"type": "contains", "source": "text_data\\instrumented.txt:1584", "target": "provider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1585", "target": "eventloggerprovider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1585", "target": "event"}, {"type": "contains", "source": "text_data\\instrumented.txt:1585", "target": "logger"}, {"type": "contains", "source": "text_data\\instrumented.txt:1585", "target": "provider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1585", "target": "version"}, {"type": "contains", "source": "text_data\\instrumented.txt:1586", "target": "selfeventmode"}, {"type": "contains", "source": "text_data\\instrumented.txt:1586", "target": "eventmode"}, {"type": "contains", "source": "text_data\\instrumented.txt:1587", "target": "attributes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1587", "target": "tracerprovider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1587", "target": "eventloggerprovider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1587", "target": "eventmode"}, {"type": "contains", "source": "text_data\\instrumented.txt:1587", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\instrumented.txt:1588", "target": "events"}, {"type": "contains", "source": "text_data\\instrumented.txt:1588", "target": "attributes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1588", "target": "tracer"}, {"type": "contains", "source": "text_data\\instrumented.txt:1588", "target": "provider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1588", "target": "opentelemetry"}, {"type": "contains", "source": "text_data\\instrumented.txt:1589", "target": "event"}, {"type": "contains", "source": "text_data\\instrumented.txt:1589", "target": "logger"}, {"type": "contains", "source": "text_data\\instrumented.txt:1589", "target": "provider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1589", "target": "eventloggerprovider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1589", "target": "global"}, {"type": "contains", "source": "text_data\\instrumented.txt:1591", "target": "events"}, {"type": "contains", "source": "text_data\\instrumented.txt:1591", "target": "attributes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1591", "target": "tracerprovider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1591", "target": "tracer"}, {"type": "contains", "source": "text_data\\instrumented.txt:1591", "target": "provider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1592", "target": "eventloggerprovider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1592", "target": "event"}, {"type": "contains", "source": "text_data\\instrumented.txt:1592", "target": "logger"}, {"type": "contains", "source": "text_data\\instrumented.txt:1592", "target": "provider"}, {"type": "contains", "source": "text_data\\instrumented.txt:1592", "target": "version"}, {"type": "contains", "source": "text_data\\instrumented.txt:1593", "target": "selfeventmode"}, {"type": "contains", "source": "text_data\\instrumented.txt:1593", "target": "eventmode"}, {"type": "contains", "source": "text_data\\instrumented.txt:1593", "target": "instrumentedmodel"}, {"type": "contains", "source": "text_data\\instrumented.txt:1593", "target": "dataclass"}, {"type": "contains", "source": "text_data\\instrumented.txt:1594", "target": "model"}, {"type": "contains", "source": "text_data\\instrumented.txt:1594", "target": "bases"}, {"type": "contains", "source": "text_data\\instrumented.txt:1594", "target": "wrappermodelwrapperpydanticaimodelswrapperwrappermodel"}, {"type": "contains", "source": "text_data\\instrumented.txt:1594", "target": "pydanticaimodelswrapperwrappermodel"}, {"type": "contains", "source": "text_data\\instrumented.txt:1594", "target": "which"}, {"type": "contains", "source": "text_data\\instrumented.txt:1599", "target": "model"}, {"type": "contains", "source": "text_data\\instrumented.txt:1599", "target": "instrumentationsettings"}, {"type": "contains", "source": "text_data\\instrumented.txt:1599", "target": "requests"}, {"type": "contains", "source": "text_data\\instrumented.txt:1599", "target": "options"}, {"type": "contains", "source": "text_data\\instrumented.txt:1599", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\instrumented.txt:1600", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\instrumented.txt:1600", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\instrumented.txt:1600", "target": "usage"}, {"type": "contains", "source": "text_data\\instrumented.txt:1600", "target": "response"}, {"type": "contains", "source": "text_data\\instrumented.txt:1600", "target": "tuplemodelresponse"}, {"type": "contains", "source": "text_data\\instrumented.txt:1601", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\instrumented.txt:1601", "target": "responsestream"}, {"type": "contains", "source": "text_data\\instrumented.txt:1601", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\instrumented.txt:1601", "target": "messages"}, {"type": "contains", "source": "text_data\\instrumented.txt:1601", "target": "asynciteratorstreamedresponse"}, {"type": "contains", "source": "text_data\\instrumented.txt:1602", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\instrumented.txt:1602", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\instrumented.txt:1602", "target": "operation"}, {"type": "contains", "source": "text_data\\instrumented.txt:1602", "target": "attributes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1602", "target": "iteratorcallablemodelresponse"}, {"type": "contains", "source": "text_data\\instrumented.txt:1603", "target": "object"}, {"type": "contains", "source": "text_data\\instrumented.txt:1603", "target": "usage"}, {"type": "contains", "source": "text_data\\instrumented.txt:1603", "target": "logfirejsonschema"}, {"type": "contains", "source": "text_data\\instrumented.txt:1603", "target": "jsondumps"}, {"type": "contains", "source": "text_data\\instrumented.txt:1603", "target": "properties"}, {"type": "contains", "source": "text_data\\instrumented.txt:1604", "target": "event"}, {"type": "contains", "source": "text_data\\instrumented.txt:1604", "target": "return"}, {"type": "contains", "source": "text_data\\instrumented.txt:1604", "target": "events"}, {"type": "contains", "source": "text_data\\instrumented.txt:1604", "target": "selfmessagestooteleventsmessages"}, {"type": "contains", "source": "text_data\\instrumented.txt:1604", "target": "selfmessagestooteleventsresponse"}, {"type": "contains", "source": "text_data\\instrumented.txt:1605", "target": "requestmodel"}, {"type": "contains", "source": "text_data\\instrumented.txt:1605", "target": "events"}, {"type": "contains", "source": "text_data\\instrumented.txt:1605", "target": "eventattributes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1605", "target": "attributesupdategetattrspan"}, {"type": "contains", "source": "text_data\\instrumented.txt:1605", "target": "attributes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1606", "target": "events"}, {"type": "contains", "source": "text_data\\instrumented.txt:1606", "target": "attrname"}, {"type": "contains", "source": "text_data\\instrumented.txt:1606", "target": "event"}, {"type": "contains", "source": "text_data\\instrumented.txt:1606", "target": "object"}, {"type": "contains", "source": "text_data\\instrumented.txt:1606", "target": "emiteventsself"}, {"type": "contains", "source": "text_data\\instrumented.txt:1607", "target": "parsedhostname"}, {"type": "contains", "source": "text_data\\instrumented.txt:1607", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\instrumented.txt:1607", "target": "modelattributesmodel"}, {"type": "contains", "source": "text_data\\instrumented.txt:1607", "target": "model"}, {"type": "contains", "source": "text_data\\instrumented.txt:1607", "target": "attributes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1608", "target": "eventbody"}, {"type": "contains", "source": "text_data\\instrumented.txt:1608", "target": "listevent"}, {"type": "contains", "source": "text_data\\instrumented.txt:1608", "target": "parsedport"}, {"type": "contains", "source": "text_data\\instrumented.txt:1608", "target": "return"}, {"type": "contains", "source": "text_data\\instrumented.txt:1608", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\instrumented.txt:1609", "target": "messageevents"}, {"type": "contains", "source": "text_data\\instrumented.txt:1609", "target": "isinstancemessage"}, {"type": "contains", "source": "text_data\\instrumented.txt:1609", "target": "event"}, {"type": "contains", "source": "text_data\\instrumented.txt:1609", "target": "eventattributes"}, {"type": "contains", "source": "text_data\\instrumented.txt:1609", "target": "result"}, {"type": "contains", "source": "text_data\\instrumented.txt:1610", "target": "return"}, {"type": "contains", "source": "text_data\\instrumented.txt:1610", "target": "except"}, {"type": "contains", "source": "text_data\\instrumented.txt:1610", "target": "exception"}, {"type": "contains", "source": "text_data\\instrumented.txt:1610", "target": "result"}, {"type": "contains", "source": "text_data\\instrumented.txt:1610", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\instrumented.txt:1611", "target": "instrumentationsettings"}, {"type": "contains", "source": "text_data\\instrumented.txt:1611", "target": "settings"}, {"type": "contains", "source": "text_data\\instrumented.txt:1611", "target": "options"}, {"type": "contains", "source": "text_data\\instrumented.txt:1611", "target": "configuration"}, {"type": "contains", "source": "text_data\\instrumented.txt:1611", "target": "instrumenting"}, {"type": "contains", "source": "text_data\\logfire.txt:1611", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\logfire.txt:1611", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\logfire.txt:1611", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\logfire.txt:1611", "target": "v0050"}, {"type": "contains", "source": "text_data\\logfire.txt:1611", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\logfire.txt:1612", "target": "monitoring"}, {"type": "contains", "source": "text_data\\logfire.txt:1612", "target": "tools"}, {"type": "contains", "source": "text_data\\logfire.txt:1612", "target": "debugging"}, {"type": "contains", "source": "text_data\\logfire.txt:1612", "target": "contributing"}, {"type": "contains", "source": "text_data\\logfire.txt:1612", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\logfire.txt:1613", "target": "opentelemetry"}, {"type": "contains", "source": "text_data\\logfire.txt:1613", "target": "evals"}, {"type": "contains", "source": "text_data\\logfire.txt:1613", "target": "input"}, {"type": "contains", "source": "text_data\\logfire.txt:1613", "target": "using"}, {"type": "contains", "source": "text_data\\logfire.txt:1613", "target": "format"}, {"type": "contains", "source": "text_data\\logfire.txt:1614", "target": "examples"}, {"type": "contains", "source": "text_data\\logfire.txt:1614", "target": "client"}, {"type": "contains", "source": "text_data\\logfire.txt:1614", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\logfire.txt:1614", "target": "server"}, {"type": "contains", "source": "text_data\\logfire.txt:1614", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\logfire.txt:1615", "target": "stream"}, {"type": "contains", "source": "text_data\\logfire.txt:1615", "target": "reference"}, {"type": "contains", "source": "text_data\\logfire.txt:1615", "target": "pydantic"}, {"type": "contains", "source": "text_data\\logfire.txt:1615", "target": "model"}, {"type": "contains", "source": "text_data\\logfire.txt:1615", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\logfire.txt:1616", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\logfire.txt:1616", "target": "apimessages"}, {"type": "contains", "source": "text_data\\logfire.txt:1616", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\logfire.txt:1616", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\logfire.txt:1616", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\logfire.txt:1617", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\logfire.txt:1617", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\logfire.txt:1617", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\logfire.txt:1617", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\logfire.txt:1617", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\logfire.txt:1618", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\logfire.txt:1618", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\logfire.txt:1618", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\logfire.txt:1618", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\logfire.txt:1618", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\logfire.txt:1619", "target": "monitoring"}, {"type": "contains", "source": "text_data\\logfire.txt:1619", "target": "logfire"}, {"type": "contains", "source": "text_data\\logfire.txt:1619", "target": "using"}, {"type": "contains", "source": "text_data\\logfire.txt:1619", "target": "debugging"}, {"type": "contains", "source": "text_data\\logfire.txt:1619", "target": "performance"}, {"type": "contains", "source": "text_data\\logfire.txt:1620", "target": "applications"}, {"type": "contains", "source": "text_data\\logfire.txt:1620", "target": "tools"}, {"type": "contains", "source": "text_data\\logfire.txt:1620", "target": "understand"}, {"type": "contains", "source": "text_data\\logfire.txt:1620", "target": "model"}, {"type": "contains", "source": "text_data\\logfire.txt:1620", "target": "warning"}, {"type": "contains", "source": "text_data\\logfire.txt:1621", "target": "logfire"}, {"type": "contains", "source": "text_data\\logfire.txt:1621", "target": "pydantic"}, {"type": "contains", "source": "text_data\\logfire.txt:1621", "target": "platform"}, {"type": "contains", "source": "text_data\\logfire.txt:1621", "target": "application"}, {"type": "contains", "source": "text_data\\logfire.txt:1621", "target": "logfirehttpspydanticdevlogfire"}, {"type": "contains", "source": "text_data\\logfire.txt:1622", "target": "logfire"}, {"type": "contains", "source": "text_data\\logfire.txt:1622", "target": "agent"}, {"type": "contains", "source": "text_data\\logfire.txt:1622", "target": "installed"}, {"type": "contains", "source": "text_data\\logfire.txt:1622", "target": "weather"}, {"type": "contains", "source": "text_data\\logfire.txt:1622", "target": "pipuv"}, {"type": "contains", "source": "text_data\\logfire.txt:1623", "target": "logfire"}, {"type": "contains", "source": "text_data\\logfire.txt:1623", "target": "agent"}, {"type": "contains", "source": "text_data\\logfire.txt:1623", "target": "projects"}, {"type": "contains", "source": "text_data\\logfire.txt:1623", "target": "pipuv"}, {"type": "contains", "source": "text_data\\logfire.txt:1623", "target": "project"}, {"type": "contains", "source": "text_data\\logfire.txt:1624", "target": "logfire"}, {"type": "contains", "source": "text_data\\logfire.txt:1624", "target": "documentationhttpslogfirepydanticdevdocs"}, {"type": "contains", "source": "text_data\\logfire.txt:1624", "target": "details"}, {"type": "contains", "source": "text_data\\logfire.txt:1624", "target": "including"}, {"type": "contains", "source": "text_data\\logfire.txt:1624", "target": "instrument"}, {"type": "contains", "source": "text_data\\logfire.txt:1625", "target": "logfire"}, {"type": "contains", "source": "text_data\\logfire.txt:1625", "target": "application"}, {"type": "contains", "source": "text_data\\logfire.txt:1625", "target": "using"}, {"type": "contains", "source": "text_data\\logfire.txt:1625", "target": "debugging"}, {"type": "contains", "source": "text_data\\logfire.txt:1625", "target": "monitoring"}, {"type": "contains", "source": "text_data\\logfire.txt:1626", "target": "requests"}, {"type": "contains", "source": "text_data\\logfire.txt:1626", "target": "logfire"}, {"type": "contains", "source": "text_data\\logfire.txt:1626", "target": "monitoring"}, {"type": "contains", "source": "text_data\\logfire.txt:1626", "target": "httpx"}, {"type": "contains", "source": "text_data\\logfire.txt:1626", "target": "pydanticaiimglogfiremonitoring"}, {"type": "contains", "source": "text_data\\logfire.txt:1627", "target": "httpx"}, {"type": "contains", "source": "text_data\\logfire.txt:1627", "target": "logfire"}, {"type": "contains", "source": "text_data\\logfire.txt:1627", "target": "import"}, {"type": "contains", "source": "text_data\\logfire.txt:1627", "target": "agent"}, {"type": "contains", "source": "text_data\\logfire.txt:1627", "target": "capital"}, {"type": "contains", "source": "text_data\\logfire.txt:1628", "target": "opentelemetry"}, {"type": "contains", "source": "text_data\\logfire.txt:1628", "target": "logfire"}, {"type": "contains", "source": "text_data\\logfire.txt:1628", "target": "httpx"}, {"type": "contains", "source": "text_data\\logfire.txt:1628", "target": "instrumentation"}, {"type": "contains", "source": "text_data\\logfire.txt:1628", "target": "using"}, {"type": "contains", "source": "text_data\\logfire.txt:1629", "target": "events"}, {"type": "contains", "source": "text_data\\logfire.txt:1629", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\logfire.txt:1629", "target": "semantic"}, {"type": "contains", "source": "text_data\\logfire.txt:1629", "target": "conventions"}, {"type": "contains", "source": "text_data\\logfire.txt:1629", "target": "request"}, {"type": "contains", "source": "text_data\\logfire.txt:1630", "target": "import"}, {"type": "contains", "source": "text_data\\logfire.txt:1630", "target": "agent"}, {"type": "contains", "source": "text_data\\logfire.txt:1630", "target": "instrumentationsettings"}, {"type": "contains", "source": "text_data\\logfire.txt:1630", "target": "opentelemetry"}, {"type": "contains", "source": "text_data\\logfire.txt:1630", "target": "instrumentationsettingseventmodepy"}, {"type": "contains", "source": "text_data\\logfire.txt:1631", "target": "opentelemetry"}, {"type": "contains", "source": "text_data\\logfire.txt:1631", "target": "providers"}, {"type": "contains", "source": "text_data\\logfire.txt:1631", "target": "setting"}, {"type": "contains", "source": "text_data\\logfire.txt:1631", "target": "default"}, {"type": "contains", "source": "text_data\\logfire.txt:1631", "target": "global"}, {"type": "contains", "source": "text_data\\logfire.txt:1632", "target": "import"}, {"type": "contains", "source": "text_data\\logfire.txt:1632", "target": "instrumentationsettings"}, {"type": "contains", "source": "text_data\\logfire.txt:1632", "target": "model"}, {"type": "contains", "source": "text_data\\logfire.txt:1632", "target": "agent"}, {"type": "contains", "source": "text_data\\logfire.txt:1632", "target": "settings"}, {"type": "contains", "source": "text_data\\mcp.txt:1632", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\mcp.txt:1632", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\mcp.txt:1632", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\mcp.txt:1632", "target": "v0050"}, {"type": "contains", "source": "text_data\\mcp.txt:1632", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\mcp.txt:1633", "target": "tools"}, {"type": "contains", "source": "text_data\\mcp.txt:1633", "target": "contributing"}, {"type": "contains", "source": "text_data\\mcp.txt:1633", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\mcp.txt:1633", "target": "documentation"}, {"type": "contains", "source": "text_data\\mcp.txt:1633", "target": "agents"}, {"type": "contains", "source": "text_data\\mcp.txt:1634", "target": "examples"}, {"type": "contains", "source": "text_data\\mcp.txt:1634", "target": "client"}, {"type": "contains", "source": "text_data\\mcp.txt:1634", "target": "server"}, {"type": "contains", "source": "text_data\\mcp.txt:1634", "target": "python"}, {"type": "contains", "source": "text_data\\mcp.txt:1634", "target": "runpython"}, {"type": "contains", "source": "text_data\\mcp.txt:1635", "target": "stream"}, {"type": "contains", "source": "text_data\\mcp.txt:1635", "target": "reference"}, {"type": "contains", "source": "text_data\\mcp.txt:1635", "target": "pydantic"}, {"type": "contains", "source": "text_data\\mcp.txt:1635", "target": "model"}, {"type": "contains", "source": "text_data\\mcp.txt:1635", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\mcp.txt:1636", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\mcp.txt:1636", "target": "apimessages"}, {"type": "contains", "source": "text_data\\mcp.txt:1636", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\mcp.txt:1636", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\mcp.txt:1636", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\mcp.txt:1637", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\mcp.txt:1637", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\mcp.txt:1637", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\mcp.txt:1637", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\mcp.txt:1637", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\mcp.txt:1638", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\mcp.txt:1638", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\mcp.txt:1638", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\mcp.txt:1638", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\mcp.txt:1638", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\mcp.txt:1639", "target": "servers"}, {"type": "contains", "source": "text_data\\mcp.txt:1639", "target": "protocol"}, {"type": "contains", "source": "text_data\\mcp.txt:1639", "target": "model"}, {"type": "contains", "source": "text_data\\mcp.txt:1639", "target": "context"}, {"type": "contains", "source": "text_data\\mcp.txt:1639", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\mcp.txt:1640", "target": "other"}, {"type": "contains", "source": "text_data\\mcp.txt:1640", "target": "could"}, {"type": "contains", "source": "text_data\\mcp.txt:1640", "target": "server"}, {"type": "contains", "source": "text_data\\mcp.txt:1640", "target": "servers"}, {"type": "contains", "source": "text_data\\mcp.txt:1640", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\mcp.txt:1641", "target": "servers"}, {"type": "contains", "source": "text_data\\mcp.txt:1641", "target": "functionality"}, {"type": "contains", "source": "text_data\\mcp.txt:1641", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\mcp.txt:1641", "target": "while"}, {"type": "contains", "source": "text_data\\mcp.txt:1641", "target": "making"}, {"type": "contains", "source": "text_data\\mermaid.txt:1641", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\mermaid.txt:1641", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\mermaid.txt:1641", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\mermaid.txt:1641", "target": "v0050"}, {"type": "contains", "source": "text_data\\mermaid.txt:1641", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\mermaid.txt:1642", "target": "tools"}, {"type": "contains", "source": "text_data\\mermaid.txt:1642", "target": "contributing"}, {"type": "contains", "source": "text_data\\mermaid.txt:1642", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\mermaid.txt:1642", "target": "documentation"}, {"type": "contains", "source": "text_data\\mermaid.txt:1642", "target": "agents"}, {"type": "contains", "source": "text_data\\mermaid.txt:1643", "target": "evals"}, {"type": "contains", "source": "text_data\\mermaid.txt:1643", "target": "input"}, {"type": "contains", "source": "text_data\\mermaid.txt:1643", "target": "graphs"}, {"type": "contains", "source": "text_data\\mermaid.txt:1643", "target": "graph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1643", "target": "image"}, {"type": "contains", "source": "text_data\\mermaid.txt:1644", "target": "examples"}, {"type": "contains", "source": "text_data\\mermaid.txt:1644", "target": "client"}, {"type": "contains", "source": "text_data\\mermaid.txt:1644", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\mermaid.txt:1644", "target": "server"}, {"type": "contains", "source": "text_data\\mermaid.txt:1644", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\mermaid.txt:1645", "target": "agent"}, {"type": "contains", "source": "text_data\\mermaid.txt:1645", "target": "stream"}, {"type": "contains", "source": "text_data\\mermaid.txt:1645", "target": "reference"}, {"type": "contains", "source": "text_data\\mermaid.txt:1645", "target": "pydantic"}, {"type": "contains", "source": "text_data\\mermaid.txt:1645", "target": "model"}, {"type": "contains", "source": "text_data\\mermaid.txt:1646", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\mermaid.txt:1646", "target": "result"}, {"type": "contains", "source": "text_data\\mermaid.txt:1646", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\mermaid.txt:1646", "target": "messages"}, {"type": "contains", "source": "text_data\\mermaid.txt:1646", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\mermaid.txt:1647", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1647", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\mermaid.txt:1647", "target": "modelsgroq"}, {"type": "contains", "source": "text_data\\mermaid.txt:1647", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\mermaid.txt:1647", "target": "modelsinstrumented"}, {"type": "contains", "source": "text_data\\mermaid.txt:1648", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\mermaid.txt:1648", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\mermaid.txt:1648", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\mermaid.txt:1648", "target": "statediagramdirection"}, {"type": "contains", "source": "text_data\\mermaid.txt:1648", "target": "generatecode"}, {"type": "contains", "source": "text_data\\mermaid.txt:1649", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\mermaid.txt:1649", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\mermaid.txt:1649", "target": "pydanticevalsgeneration"}, {"type": "contains", "source": "text_data\\mermaid.txt:1650", "target": "defaulthighlightcss"}, {"type": "contains", "source": "text_data\\mermaid.txt:1650", "target": "statediagramdirection"}, {"type": "contains", "source": "text_data\\mermaid.txt:1650", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\mermaid.txt:1650", "target": "table"}, {"type": "contains", "source": "text_data\\mermaid.txt:1650", "target": "contents"}, {"type": "contains", "source": "text_data\\mermaid.txt:1651", "target": "statediagramdirection"}, {"type": "contains", "source": "text_data\\mermaid.txt:1651", "target": "mermaid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1651", "target": "bottom"}, {"type": "contains", "source": "text_data\\mermaid.txt:1651", "target": "right"}, {"type": "contains", "source": "text_data\\mermaid.txt:1651", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\mermaid.txt:1652", "target": "typingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1652", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1652", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\mermaid.txt:1652", "target": "collectionsabcsequencenodeident"}, {"type": "contains", "source": "text_data\\mermaid.txt:1652", "target": "nodeident"}, {"type": "contains", "source": "text_data\\mermaid.txt:1653", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\mermaid.txt:1653", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\mermaid.txt:1653", "target": "highlightcss"}, {"type": "contains", "source": "text_data\\mermaid.txt:1653", "target": "defaulthighlightcss"}, {"type": "contains", "source": "text_data\\mermaid.txt:1653", "target": "title"}, {"type": "contains", "source": "text_data\\mermaid.txt:1654", "target": "generate"}, {"type": "contains", "source": "text_data\\mermaid.txt:1654", "target": "mermaid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1654", "target": "state"}, {"type": "contains", "source": "text_data\\mermaid.txt:1654", "target": "diagramhttpsmermaidjsorgsyntaxstatediagramhtml"}, {"type": "contains", "source": "text_data\\mermaid.txt:1654", "target": "graph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1655", "target": "graph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1655", "target": "typingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1655", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1655", "target": "description"}, {"type": "contains", "source": "text_data\\mermaid.txt:1655", "target": "default"}, {"type": "contains", "source": "text_data\\mermaid.txt:1656", "target": "diagram"}, {"type": "contains", "source": "text_data\\mermaid.txt:1656", "target": "nodes"}, {"type": "contains", "source": "text_data\\mermaid.txt:1656", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\mermaid.txt:1656", "target": "title"}, {"type": "contains", "source": "text_data\\mermaid.txt:1656", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\mermaid.txt:1657", "target": "direction"}, {"type": "contains", "source": "text_data\\mermaid.txt:1657", "target": "statediagramdirection"}, {"type": "contains", "source": "text_data\\mermaid.txt:1657", "target": "required"}, {"type": "contains", "source": "text_data\\mermaid.txt:1657", "target": "returns"}, {"type": "contains", "source": "text_data\\mermaid.txt:1658", "target": "description"}, {"type": "contains", "source": "text_data\\mermaid.txt:1658", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\mermaid.txt:1658", "target": "mermaid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1658", "target": "graph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1658", "target": "source"}, {"type": "contains", "source": "text_data\\mermaid.txt:1659", "target": "graph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1659", "target": "startnode"}, {"type": "contains", "source": "text_data\\mermaid.txt:1659", "target": "sequencenodeident"}, {"type": "contains", "source": "text_data\\mermaid.txt:1659", "target": "nodeident"}, {"type": "contains", "source": "text_data\\mermaid.txt:1659", "target": "highlightednodes"}, {"type": "contains", "source": "text_data\\mermaid.txt:1660", "target": "title"}, {"type": "contains", "source": "text_data\\mermaid.txt:1660", "target": "diagram"}, {"type": "contains", "source": "text_data\\mermaid.txt:1660", "target": "nodeid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1660", "target": "nodes"}, {"type": "contains", "source": "text_data\\mermaid.txt:1660", "target": "whether"}, {"type": "contains", "source": "text_data\\mermaid.txt:1661", "target": "nodeid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1661", "target": "nextnodeid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1661", "target": "direction"}, {"type": "contains", "source": "text_data\\mermaid.txt:1661", "target": "linesappendf"}, {"type": "contains", "source": "text_data\\mermaid.txt:1661", "target": "title"}, {"type": "contains", "source": "text_data\\mermaid.txt:1662", "target": "nodeid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1662", "target": "edgelabels"}, {"type": "contains", "source": "text_data\\mermaid.txt:1662", "target": "edgelabel"}, {"type": "contains", "source": "text_data\\mermaid.txt:1662", "target": "linesappendline"}, {"type": "contains", "source": "text_data\\mermaid.txt:1662", "target": "endedgelabel"}, {"type": "contains", "source": "text_data\\mermaid.txt:1663", "target": "nodeid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1663", "target": "linesappend"}, {"type": "contains", "source": "text_data\\mermaid.txt:1663", "target": "highlighted"}, {"type": "contains", "source": "text_data\\mermaid.txt:1663", "target": "highlightednodes"}, {"type": "contains", "source": "text_data\\mermaid.txt:1663", "target": "linesappendfclassdef"}, {"type": "contains", "source": "text_data\\mermaid.txt:1664", "target": "typingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1664", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1664", "target": "requestimage"}, {"type": "contains", "source": "text_data\\mermaid.txt:1664", "target": "graph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1664", "target": "graphgraphpydanticgraphgraphgraph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1665", "target": "typingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1665", "target": "parameters"}, {"type": "contains", "source": "text_data\\mermaid.txt:1665", "target": "graph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1665", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1665", "target": "description"}, {"type": "contains", "source": "text_data\\mermaid.txt:1666", "target": "description"}, {"type": "contains", "source": "text_data\\mermaid.txt:1666", "target": "byteshttpsdocspythonorg3librarystdtypeshtmlbytes"}, {"type": "contains", "source": "text_data\\mermaid.txt:1666", "target": "image"}, {"type": "contains", "source": "text_data\\mermaid.txt:1666", "target": "source"}, {"type": "contains", "source": "text_data\\mermaid.txt:1666", "target": "pydanticgraphpydanticgraphmermaidpy"}, {"type": "contains", "source": "text_data\\mermaid.txt:1667", "target": "graph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1667", "target": "image"}, {"type": "contains", "source": "text_data\\mermaid.txt:1667", "target": "kwargs"}, {"type": "contains", "source": "text_data\\mermaid.txt:1667", "target": "generate"}, {"type": "contains", "source": "text_data\\mermaid.txt:1667", "target": "mermaid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1668", "target": "kwargsgetimagetype"}, {"type": "contains", "source": "text_data\\mermaid.txt:1668", "target": "pdfpaper"}, {"type": "contains", "source": "text_data\\mermaid.txt:1668", "target": "edgelabelskwargsgetedgelabels"}, {"type": "contains", "source": "text_data\\mermaid.txt:1668", "target": "noteskwargsgetnotes"}, {"type": "contains", "source": "text_data\\mermaid.txt:1668", "target": "directionkwargsgetdirection"}, {"type": "contains", "source": "text_data\\mermaid.txt:1669", "target": "imagetype"}, {"type": "contains", "source": "text_data\\mermaid.txt:1669", "target": "backgroundcolor"}, {"type": "contains", "source": "text_data\\mermaid.txt:1669", "target": "theme"}, {"type": "contains", "source": "text_data\\mermaid.txt:1669", "target": "width"}, {"type": "contains", "source": "text_data\\mermaid.txt:1669", "target": "height"}, {"type": "contains", "source": "text_data\\mermaid.txt:1670", "target": "response"}, {"type": "contains", "source": "text_data\\mermaid.txt:1670", "target": "httpxclientgeturl"}, {"type": "contains", "source": "text_data\\mermaid.txt:1670", "target": "paramsparams"}, {"type": "contains", "source": "text_data\\mermaid.txt:1670", "target": "responseissuccess"}, {"type": "contains", "source": "text_data\\mermaid.txt:1670", "target": "raise"}, {"type": "contains", "source": "text_data\\mermaid.txt:1671", "target": "typingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1671", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1671", "target": "saveimage"}, {"type": "contains", "source": "text_data\\mermaid.txt:1671", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\mermaid.txt:1671", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\mermaid.txt:1672", "target": "generate"}, {"type": "contains", "source": "text_data\\mermaid.txt:1672", "target": "image"}, {"type": "contains", "source": "text_data\\mermaid.txt:1672", "target": "mermaid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1672", "target": "diagram"}, {"type": "contains", "source": "text_data\\mermaid.txt:1672", "target": "using"}, {"type": "contains", "source": "text_data\\mermaid.txt:1673", "target": "typingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1673", "target": "image"}, {"type": "contains", "source": "text_data\\mermaid.txt:1673", "target": "required"}, {"type": "contains", "source": "text_data\\mermaid.txt:1673", "target": "graph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1673", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\mermaid.txt:1674", "target": "kwargs"}, {"type": "contains", "source": "text_data\\mermaid.txt:1674", "target": "unpackhttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionsunpack"}, {"type": "contains", "source": "text_data\\mermaid.txt:1674", "target": "typingextensionsunpackmermaidconfig"}, {"type": "contains", "source": "text_data\\mermaid.txt:1674", "target": "additional"}, {"type": "contains", "source": "text_data\\mermaid.txt:1674", "target": "parameters"}, {"type": "contains", "source": "text_data\\mermaid.txt:1676", "target": "graph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1676", "target": "kwargs"}, {"type": "contains", "source": "text_data\\mermaid.txt:1676", "target": "image"}, {"type": "contains", "source": "text_data\\mermaid.txt:1676", "target": "generate"}, {"type": "contains", "source": "text_data\\mermaid.txt:1676", "target": "mermaid"}, {"type": "contains", "source": "text_data\\mermaid.txt:1677", "target": "kwargsimagetype"}, {"type": "contains", "source": "text_data\\mermaid.txt:1677", "target": "imagedata"}, {"type": "contains", "source": "text_data\\mermaid.txt:1677", "target": "requestimagegraph"}, {"type": "contains", "source": "text_data\\mermaid.txt:1677", "target": "kwargs"}, {"type": "contains", "source": "text_data\\mermaid.txt:1677", "target": "pathwritebytesimagedata"}, {"type": "contains", "source": "text_data\\mermaid.txt:1678", "target": "bases"}, {"type": "contains", "source": "text_data\\mermaid.txt:1678", "target": "typeddicthttpstyping"}, {"type": "contains", "source": "text_data\\mermaid.txt:1678", "target": "extensionsreadthedocsioenlatestindexhtmltypingextensionstypeddict"}, {"type": "contains", "source": "text_data\\mermaid.txt:1678", "target": "typingextensionstypeddict"}, {"type": "contains", "source": "text_data\\mermaid.txt:1678", "target": "parameters"}, {"type": "contains", "source": "text_data\\mermaid.txt:1679", "target": "nodes"}, {"type": "contains", "source": "text_data\\mermaid.txt:1679", "target": "diagram"}, {"type": "contains", "source": "text_data\\mermaid.txt:1679", "target": "sequencenodeident"}, {"type": "contains", "source": "text_data\\mermaid.txt:1679", "target": "nodeident"}, {"type": "contains", "source": "text_data\\mermaid.txt:1679", "target": "identifiers"}, {"type": "contains", "source": "text_data\\mermaid.txt:1680", "target": "using"}, {"type": "contains", "source": "text_data\\mermaid.txt:1680", "target": "imagetypepdf"}, {"type": "contains", "source": "text_data\\mermaid.txt:1680", "target": "pdffit"}, {"type": "contains", "source": "text_data\\mermaid.txt:1680", "target": "whether"}, {"type": "contains", "source": "text_data\\mermaid.txt:1680", "target": "diagram"}, {"type": "contains", "source": "text_data\\mermaid.txt:1681", "target": "diagram"}, {"type": "contains", "source": "text_data\\mermaid.txt:1681", "target": "color"}, {"type": "contains", "source": "text_data\\mermaid.txt:1681", "target": "default"}, {"type": "contains", "source": "text_data\\mermaid.txt:1681", "target": "background"}, {"type": "contains", "source": "text_data\\mermaid.txt:1681", "target": "value"}, {"type": "contains", "source": "text_data\\mermaid.txt:1682", "target": "scale"}, {"type": "contains", "source": "text_data\\mermaid.txt:1682", "target": "diagram"}, {"type": "contains", "source": "text_data\\mermaid.txt:1682", "target": "httpxclient"}, {"type": "contains", "source": "text_data\\mermaid.txt:1682", "target": "direction"}, {"type": "contains", "source": "text_data\\mermaid.txt:1682", "target": "number"}, {"type": "contains", "source": "text_data\\mermaid.txt:1683", "target": "nodes"}, {"type": "contains", "source": "text_data\\mermaid.txt:1683", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\mermaid.txt:1683", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\mermaid.txt:1683", "target": "collectionsabcsequencenodeident"}, {"type": "contains", "source": "text_data\\mermaid.txt:1683", "target": "nodeident"}, {"type": "contains", "source": "text_data\\mermaid.txt:1684", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\mermaid.txt:1684", "target": "diagram"}, {"type": "contains", "source": "text_data\\mermaid.txt:1684", "target": "notes"}, {"type": "contains", "source": "text_data\\mermaid.txt:1684", "target": "edgelabels"}, {"type": "contains", "source": "text_data\\mermaid.txt:1684", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\mermaid.txt:1685", "target": "pdffit"}, {"type": "contains", "source": "text_data\\mermaid.txt:1685", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\mermaid.txt:1685", "target": "using"}, {"type": "contains", "source": "text_data\\mermaid.txt:1685", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\mermaid.txt:1685", "target": "imagetypepdf"}, {"type": "contains", "source": "text_data\\mermaid.txt:1686", "target": "color"}, {"type": "contains", "source": "text_data\\mermaid.txt:1686", "target": "backgroundcolor"}, {"type": "contains", "source": "text_data\\mermaid.txt:1686", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\mermaid.txt:1686", "target": "background"}, {"type": "contains", "source": "text_data\\mermaid.txt:1686", "target": "default"}, {"type": "contains", "source": "text_data\\mermaid.txt:1687", "target": "scale"}, {"type": "contains", "source": "text_data\\mermaid.txt:1687", "target": "diagram"}, {"type": "contains", "source": "text_data\\mermaid.txt:1687", "target": "width"}, {"type": "contains", "source": "text_data\\mermaid.txt:1687", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\mermaid.txt:1687", "target": "height"}, {"type": "contains", "source": "text_data\\mermaid.txt:1688", "target": "direction"}, {"type": "contains", "source": "text_data\\mermaid.txt:1688", "target": "httpxclient"}, {"type": "contains", "source": "text_data\\mermaid.txt:1688", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\mermaid.txt:1688", "target": "client"}, {"type": "contains", "source": "text_data\\mermaid.txt:1688", "target": "nodeident"}, {"type": "contains", "source": "text_data\\mermaid.txt:1689", "target": "instance"}, {"type": "contains", "source": "text_data\\mermaid.txt:1689", "target": "subclass"}, {"type": "contains", "source": "text_data\\mermaid.txt:1689", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\mermaid.txt:1689", "target": "alias"}, {"type": "contains", "source": "text_data\\mermaid.txt:1689", "target": "identifier"}, {"type": "contains", "source": "text_data\\message-history.txt:1689", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\message-history.txt:1689", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\message-history.txt:1689", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\message-history.txt:1689", "target": "v0050"}, {"type": "contains", "source": "text_data\\message-history.txt:1689", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\message-history.txt:1690", "target": "messages"}, {"type": "contains", "source": "text_data\\message-history.txt:1690", "target": "tools"}, {"type": "contains", "source": "text_data\\message-history.txt:1690", "target": "results"}, {"type": "contains", "source": "text_data\\message-history.txt:1690", "target": "contributing"}, {"type": "contains", "source": "text_data\\message-history.txt:1690", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\message-history.txt:1691", "target": "testing"}, {"type": "contains", "source": "text_data\\message-history.txt:1691", "target": "evals"}, {"type": "contains", "source": "text_data\\message-history.txt:1691", "target": "input"}, {"type": "contains", "source": "text_data\\message-history.txt:1691", "target": "examples"}, {"type": "contains", "source": "text_data\\message-history.txt:1691", "target": "debugging"}, {"type": "contains", "source": "text_data\\message-history.txt:1692", "target": "examples"}, {"type": "contains", "source": "text_data\\message-history.txt:1692", "target": "client"}, {"type": "contains", "source": "text_data\\message-history.txt:1692", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\message-history.txt:1692", "target": "server"}, {"type": "contains", "source": "text_data\\message-history.txt:1692", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\message-history.txt:1693", "target": "stream"}, {"type": "contains", "source": "text_data\\message-history.txt:1693", "target": "reference"}, {"type": "contains", "source": "text_data\\message-history.txt:1693", "target": "pydantic"}, {"type": "contains", "source": "text_data\\message-history.txt:1693", "target": "model"}, {"type": "contains", "source": "text_data\\message-history.txt:1693", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\message-history.txt:1694", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\message-history.txt:1694", "target": "apimessages"}, {"type": "contains", "source": "text_data\\message-history.txt:1694", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\message-history.txt:1694", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\message-history.txt:1694", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\message-history.txt:1695", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\message-history.txt:1695", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\message-history.txt:1695", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\message-history.txt:1695", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\message-history.txt:1695", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\message-history.txt:1696", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\message-history.txt:1696", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\message-history.txt:1696", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\message-history.txt:1696", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\message-history.txt:1696", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\message-history.txt:1697", "target": "messages"}, {"type": "contains", "source": "text_data\\message-history.txt:1697", "target": "agent"}, {"type": "contains", "source": "text_data\\message-history.txt:1697", "target": "accessing"}, {"type": "contains", "source": "text_data\\message-history.txt:1697", "target": "results"}, {"type": "contains", "source": "text_data\\message-history.txt:1697", "target": "using"}, {"type": "contains", "source": "text_data\\message-history.txt:1698", "target": "returned"}, {"type": "contains", "source": "text_data\\message-history.txt:1698", "target": "runresultapiagentpydanticaiagentagentrunresult"}, {"type": "contains", "source": "text_data\\message-history.txt:1698", "target": "agentrunapiagentpydanticaiagentagentrun"}, {"type": "contains", "source": "text_data\\message-history.txt:1698", "target": "agentrunsyncapiagentpydanticaiagentagentrunsync"}, {"type": "contains", "source": "text_data\\message-history.txt:1698", "target": "streamedrunresultapiresultpydanticairesultstreamedrunresult"}, {"type": "contains", "source": "text_data\\message-history.txt:1699", "target": "messages"}, {"type": "contains", "source": "text_data\\message-history.txt:1699", "target": "returns"}, {"type": "contains", "source": "text_data\\message-history.txt:1699", "target": "theres"}, {"type": "contains", "source": "text_data\\message-history.txt:1699", "target": "variant"}, {"type": "contains", "source": "text_data\\message-history.txt:1699", "target": "bytes"}, {"type": "contains", "source": "text_data\\message-history.txt:1700", "target": "result"}, {"type": "contains", "source": "text_data\\message-history.txt:1700", "target": "youve"}, {"type": "contains", "source": "text_data\\message-history.txt:1700", "target": "awaited"}, {"type": "contains", "source": "text_data\\message-history.txt:1700", "target": "following"}, {"type": "contains", "source": "text_data\\message-history.txt:1700", "target": "coroutines"}, {"type": "contains", "source": "text_data\\message-history.txt:1701", "target": "example"}, {"type": "contains", "source": "text_data\\message-history.txt:1701", "target": "accessing"}, {"type": "contains", "source": "text_data\\message-history.txt:1701", "target": "methods"}, {"type": "contains", "source": "text_data\\message-history.txt:1701", "target": "runresultapiagentpydanticaiagentagentrunresult"}, {"type": "contains", "source": "text_data\\message-history.txt:1701", "target": "runresultmessagespy"}, {"type": "contains", "source": "text_data\\message-history.txt:1702", "target": "agent"}, {"type": "contains", "source": "text_data\\message-history.txt:1702", "target": "helpful"}, {"type": "contains", "source": "text_data\\message-history.txt:1702", "target": "assistant"}, {"type": "contains", "source": "text_data\\message-history.txt:1702", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\message-history.txt:1702", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\message-history.txt:1703", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\message-history.txt:1703", "target": "partkinduserprompt"}, {"type": "contains", "source": "text_data\\message-history.txt:1703", "target": "kindrequest"}, {"type": "contains", "source": "text_data\\message-history.txt:1703", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\message-history.txt:1703", "target": "parts"}, {"type": "contains", "source": "text_data\\message-history.txt:1704", "target": "example"}, {"type": "contains", "source": "text_data\\message-history.txt:1704", "target": "complete"}, {"type": "contains", "source": "text_data\\message-history.txt:1704", "target": "accessing"}, {"type": "contains", "source": "text_data\\message-history.txt:1704", "target": "methods"}, {"type": "contains", "source": "text_data\\message-history.txt:1704", "target": "streamedrunresultapiresultpydanticairesultstreamedrunresult"}, {"type": "contains", "source": "text_data\\message-history.txt:1705", "target": "agent"}, {"type": "contains", "source": "text_data\\message-history.txt:1705", "target": "helpful"}, {"type": "contains", "source": "text_data\\message-history.txt:1705", "target": "assistant"}, {"type": "contains", "source": "text_data\\message-history.txt:1705", "target": "async"}, {"type": "contains", "source": "text_data\\message-history.txt:1705", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\message-history.txt:1706", "target": "about"}, {"type": "contains", "source": "text_data\\message-history.txt:1706", "target": "toothpaste"}, {"type": "contains", "source": "text_data\\message-history.txt:1706", "target": "scandal"}, {"type": "contains", "source": "text_data\\message-history.txt:1706", "target": "called"}, {"type": "contains", "source": "text_data\\message-history.txt:1706", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\message-history.txt:1707", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\message-history.txt:1707", "target": "complete"}, {"type": "contains", "source": "text_data\\message-history.txt:1707", "target": "messages"}, {"type": "contains", "source": "text_data\\message-history.txt:1707", "target": "stream"}, {"type": "contains", "source": "text_data\\message-history.txt:1707", "target": "finishes"}, {"type": "contains", "source": "text_data\\message-history.txt:1708", "target": "kindrequest"}, {"type": "contains", "source": "text_data\\message-history.txt:1708", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\message-history.txt:1708", "target": "parts"}, {"type": "contains", "source": "text_data\\message-history.txt:1708", "target": "textpart"}, {"type": "contains", "source": "text_data\\message-history.txt:1708", "target": "contentdid"}, {"type": "contains", "source": "text_data\\message-history.txt:1709", "target": "messages"}, {"type": "contains", "source": "text_data\\message-history.txt:1709", "target": "agent"}, {"type": "contains", "source": "text_data\\message-history.txt:1709", "target": "message"}, {"type": "contains", "source": "text_data\\message-history.txt:1709", "target": "existing"}, {"type": "contains", "source": "text_data\\message-history.txt:1709", "target": "messagehistory"}, {"type": "contains", "source": "text_data\\message-history.txt:1710", "target": "agent"}, {"type": "contains", "source": "text_data\\message-history.txt:1710", "target": "helpful"}, {"type": "contains", "source": "text_data\\message-history.txt:1710", "target": "assistant"}, {"type": "contains", "source": "text_data\\message-history.txt:1710", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\message-history.txt:1710", "target": "import"}, {"type": "contains", "source": "text_data\\message-history.txt:1711", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\message-history.txt:1711", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\message-history.txt:1711", "target": "parts"}, {"type": "contains", "source": "text_data\\message-history.txt:1711", "target": "partkindsystemprompt"}, {"type": "contains", "source": "text_data\\message-history.txt:1711", "target": "contenttell"}, {"type": "contains", "source": "text_data\\message-history.txt:1712", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\message-history.txt:1712", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\message-history.txt:1712", "target": "contentexplain"}, {"type": "contains", "source": "text_data\\message-history.txt:1712", "target": "partkinduserprompt"}, {"type": "contains", "source": "text_data\\message-history.txt:1712", "target": "kindrequest"}, {"type": "contains", "source": "text_data\\message-history.txt:1713", "target": "messages"}, {"type": "contains", "source": "text_data\\message-history.txt:1713", "target": "example"}, {"type": "contains", "source": "text_data\\message-history.txt:1713", "target": "complete"}, {"type": "contains", "source": "text_data\\message-history.txt:1713", "target": "storing"}, {"type": "contains", "source": "text_data\\message-history.txt:1713", "target": "loading"}, {"type": "contains", "source": "text_data\\message-history.txt:1714", "target": "import"}, {"type": "contains", "source": "text_data\\message-history.txt:1714", "target": "example"}, {"type": "contains", "source": "text_data\\message-history.txt:1714", "target": "messages"}, {"type": "contains", "source": "text_data\\message-history.txt:1714", "target": "agent"}, {"type": "contains", "source": "text_data\\message-history.txt:1714", "target": "heres"}, {"type": "contains", "source": "text_data\\message-history.txt:1715", "target": "messages"}, {"type": "contains", "source": "text_data\\message-history.txt:1715", "target": "model"}, {"type": "contains", "source": "text_data\\message-history.txt:1715", "target": "different"}, {"type": "contains", "source": "text_data\\message-history.txt:1715", "target": "agent"}, {"type": "contains", "source": "text_data\\message-history.txt:1715", "target": "using"}, {"type": "contains", "source": "text_data\\message-history.txt:1716", "target": "agent"}, {"type": "contains", "source": "text_data\\message-history.txt:1716", "target": "helpful"}, {"type": "contains", "source": "text_data\\message-history.txt:1716", "target": "assistant"}, {"type": "contains", "source": "text_data\\message-history.txt:1716", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\message-history.txt:1716", "target": "import"}, {"type": "contains", "source": "text_data\\message-history.txt:1717", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\message-history.txt:1717", "target": "dynamicrefnone"}, {"type": "contains", "source": "text_data\\message-history.txt:1717", "target": "partkindsystemprompt"}, {"type": "contains", "source": "text_data\\message-history.txt:1717", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\message-history.txt:1717", "target": "contenttell"}, {"type": "contains", "source": "text_data\\message-history.txt:1718", "target": "kindresponse"}, {"type": "contains", "source": "text_data\\message-history.txt:1718", "target": "parts"}, {"type": "contains", "source": "text_data\\message-history.txt:1718", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\message-history.txt:1718", "target": "modelrequest"}, {"type": "contains", "source": "text_data\\message-history.txt:1718", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\message-history.txt:1719", "target": "example"}, {"type": "contains", "source": "text_data\\message-history.txt:1719", "target": "examples"}, {"type": "contains", "source": "text_data\\message-history.txt:1719", "target": "complete"}, {"type": "contains", "source": "text_data\\message-history.txt:1719", "target": "using"}, {"type": "contains", "source": "text_data\\message-history.txt:1719", "target": "messages"}, {"type": "contains", "source": "text_data\\messages.txt:1719", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\messages.txt:1719", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\messages.txt:1719", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\messages.txt:1719", "target": "v0050"}, {"type": "contains", "source": "text_data\\messages.txt:1719", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\messages.txt:1720", "target": "tools"}, {"type": "contains", "source": "text_data\\messages.txt:1720", "target": "contributing"}, {"type": "contains", "source": "text_data\\messages.txt:1720", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\messages.txt:1720", "target": "documentation"}, {"type": "contains", "source": "text_data\\messages.txt:1720", "target": "agents"}, {"type": "contains", "source": "text_data\\messages.txt:1721", "target": "input"}, {"type": "contains", "source": "text_data\\messages.txt:1721", "target": "image"}, {"type": "contains", "source": "text_data\\messages.txt:1721", "target": "audio"}, {"type": "contains", "source": "text_data\\messages.txt:1721", "target": "document"}, {"type": "contains", "source": "text_data\\messages.txt:1722", "target": "examples"}, {"type": "contains", "source": "text_data\\messages.txt:1722", "target": "client"}, {"type": "contains", "source": "text_data\\messages.txt:1722", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\messages.txt:1722", "target": "server"}, {"type": "contains", "source": "text_data\\messages.txt:1722", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\messages.txt:1723", "target": "agent"}, {"type": "contains", "source": "text_data\\messages.txt:1723", "target": "stream"}, {"type": "contains", "source": "text_data\\messages.txt:1723", "target": "reference"}, {"type": "contains", "source": "text_data\\messages.txt:1723", "target": "pydantic"}, {"type": "contains", "source": "text_data\\messages.txt:1723", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1724", "target": "mediatype"}, {"type": "contains", "source": "text_data\\messages.txt:1724", "target": "format"}, {"type": "contains", "source": "text_data\\messages.txt:1724", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\messages.txt:1724", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1724", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1725", "target": "partkind"}, {"type": "contains", "source": "text_data\\messages.txt:1725", "target": "toolname"}, {"type": "contains", "source": "text_data\\messages.txt:1725", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1725", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1725", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1726", "target": "eventkind"}, {"type": "contains", "source": "text_data\\messages.txt:1726", "target": "partdeltakind"}, {"type": "contains", "source": "text_data\\messages.txt:1726", "target": "apply"}, {"type": "contains", "source": "text_data\\messages.txt:1726", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1726", "target": "index"}, {"type": "contains", "source": "text_data\\messages.txt:1727", "target": "eventkind"}, {"type": "contains", "source": "text_data\\messages.txt:1727", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1727", "target": "modelresponsestreamevent"}, {"type": "contains", "source": "text_data\\messages.txt:1727", "target": "agentstreamevent"}, {"type": "contains", "source": "text_data\\messages.txt:1727", "target": "functiontoolcallevent"}, {"type": "contains", "source": "text_data\\messages.txt:1728", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\messages.txt:1728", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\messages.txt:1728", "target": "pydanticaimodelscohere"}, {"type": "contains", "source": "text_data\\messages.txt:1728", "target": "modelscohere"}, {"type": "contains", "source": "text_data\\messages.txt:1728", "target": "pydanticaimodelsgemini"}, {"type": "contains", "source": "text_data\\messages.txt:1729", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\messages.txt:1729", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\messages.txt:1729", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\messages.txt:1729", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\messages.txt:1729", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\messages.txt:1730", "target": "table"}, {"type": "contains", "source": "text_data\\messages.txt:1730", "target": "contents"}, {"type": "contains", "source": "text_data\\messages.txt:1731", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1731", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1731", "target": "partkind"}, {"type": "contains", "source": "text_data\\messages.txt:1731", "target": "mediatype"}, {"type": "contains", "source": "text_data\\messages.txt:1731", "target": "format"}, {"type": "contains", "source": "text_data\\messages.txt:1732", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1732", "target": "partkind"}, {"type": "contains", "source": "text_data\\messages.txt:1732", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1732", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\messages.txt:1732", "target": "parts"}, {"type": "contains", "source": "text_data\\messages.txt:1733", "target": "eventkind"}, {"type": "contains", "source": "text_data\\messages.txt:1733", "target": "index"}, {"type": "contains", "source": "text_data\\messages.txt:1733", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1733", "target": "apply"}, {"type": "contains", "source": "text_data\\messages.txt:1733", "target": "modelresponsepartdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1734", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\messages.txt:1734", "target": "structure"}, {"type": "contains", "source": "text_data\\messages.txt:1734", "target": "modelmessage"}, {"type": "contains", "source": "text_data\\messages.txt:1734", "target": "shown"}, {"type": "contains", "source": "text_data\\messages.txt:1734", "target": "graph"}, {"type": "contains", "source": "text_data\\messages.txt:1735", "target": "prompt"}, {"type": "contains", "source": "text_data\\messages.txt:1735", "target": "system"}, {"type": "contains", "source": "text_data\\messages.txt:1735", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1735", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1735", "target": "dynamic"}, {"type": "contains", "source": "text_data\\messages.txt:1736", "target": "partkind"}, {"type": "contains", "source": "text_data\\messages.txt:1736", "target": "literalsystemprompt"}, {"type": "contains", "source": "text_data\\messages.txt:1736", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\messages.txt:1736", "target": "identifier"}, {"type": "contains", "source": "text_data\\messages.txt:1736", "target": "available"}, {"type": "contains", "source": "text_data\\messages.txt:1737", "target": "prompt"}, {"type": "contains", "source": "text_data\\messages.txt:1737", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1737", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1737", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\messages.txt:1737", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1738", "target": "dynamic"}, {"type": "contains", "source": "text_data\\messages.txt:1738", "target": "system"}, {"type": "contains", "source": "text_data\\messages.txt:1738", "target": "prompt"}, {"type": "contains", "source": "text_data\\messages.txt:1738", "target": "partkind"}, {"type": "contains", "source": "text_data\\messages.txt:1738", "target": "function"}, {"type": "contains", "source": "text_data\\messages.txt:1739", "target": "audio"}, {"type": "contains", "source": "text_data\\messages.txt:1739", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1739", "target": "audiourl"}, {"type": "contains", "source": "text_data\\messages.txt:1739", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1739", "target": "class"}, {"type": "contains", "source": "text_data\\messages.txt:1740", "target": "audio"}, {"type": "contains", "source": "text_data\\messages.txt:1740", "target": "mediatype"}, {"type": "contains", "source": "text_data\\messages.txt:1740", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\messages.txt:1740", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1740", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1741", "target": "image"}, {"type": "contains", "source": "text_data\\messages.txt:1741", "target": "source"}, {"type": "contains", "source": "text_data\\messages.txt:1741", "target": "pydanticaislimpydanticaimessagespy"}, {"type": "contains", "source": "text_data\\messages.txt:1742", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1742", "target": "image"}, {"type": "contains", "source": "text_data\\messages.txt:1742", "target": "imageurl"}, {"type": "contains", "source": "text_data\\messages.txt:1742", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1742", "target": "class"}, {"type": "contains", "source": "text_data\\messages.txt:1743", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1743", "target": "image"}, {"type": "contains", "source": "text_data\\messages.txt:1743", "target": "format"}, {"type": "contains", "source": "text_data\\messages.txt:1743", "target": "imagewebp"}, {"type": "contains", "source": "text_data\\messages.txt:1743", "target": "raise"}, {"type": "contains", "source": "text_data\\messages.txt:1744", "target": "format"}, {"type": "contains", "source": "text_data\\messages.txt:1744", "target": "image"}, {"type": "contains", "source": "text_data\\messages.txt:1744", "target": "mediatype"}, {"type": "contains", "source": "text_data\\messages.txt:1744", "target": "property"}, {"type": "contains", "source": "text_data\\messages.txt:1744", "target": "based"}, {"type": "contains", "source": "text_data\\messages.txt:1745", "target": "documenturl"}, {"type": "contains", "source": "text_data\\messages.txt:1745", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1745", "target": "document"}, {"type": "contains", "source": "text_data\\messages.txt:1745", "target": "source"}, {"type": "contains", "source": "text_data\\messages.txt:1745", "target": "pydanticaislimpydanticaimessagespy"}, {"type": "contains", "source": "text_data\\messages.txt:1746", "target": "document"}, {"type": "contains", "source": "text_data\\messages.txt:1746", "target": "documenturl"}, {"type": "contains", "source": "text_data\\messages.txt:1746", "target": "property"}, {"type": "contains", "source": "text_data\\messages.txt:1746", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1746", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1747", "target": "format"}, {"type": "contains", "source": "text_data\\messages.txt:1747", "target": "document"}, {"type": "contains", "source": "text_data\\messages.txt:1747", "target": "choice"}, {"type": "contains", "source": "text_data\\messages.txt:1747", "target": "supported"}, {"type": "contains", "source": "text_data\\messages.txt:1747", "target": "formats"}, {"type": "contains", "source": "text_data\\messages.txt:1748", "target": "format"}, {"type": "contains", "source": "text_data\\messages.txt:1748", "target": "document"}, {"type": "contains", "source": "text_data\\messages.txt:1748", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\messages.txt:1748", "target": "mediatype"}, {"type": "contains", "source": "text_data\\messages.txt:1748", "target": "property"}, {"type": "contains", "source": "text_data\\messages.txt:1749", "target": "binarycontent"}, {"type": "contains", "source": "text_data\\messages.txt:1749", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1749", "target": "binary"}, {"type": "contains", "source": "text_data\\messages.txt:1749", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1749", "target": "audio"}, {"type": "contains", "source": "text_data\\messages.txt:1750", "target": "binary"}, {"type": "contains", "source": "text_data\\messages.txt:1750", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1750", "target": "media"}, {"type": "contains", "source": "text_data\\messages.txt:1750", "target": "audio"}, {"type": "contains", "source": "text_data\\messages.txt:1750", "target": "image"}, {"type": "contains", "source": "text_data\\messages.txt:1751", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1751", "target": "property"}, {"type": "contains", "source": "text_data\\messages.txt:1751", "target": "selfmediatypestartswithimage"}, {"type": "contains", "source": "text_data\\messages.txt:1751", "target": "isdocumentself"}, {"type": "contains", "source": "text_data\\messages.txt:1751", "target": "media"}, {"type": "contains", "source": "text_data\\messages.txt:1752", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1752", "target": "selfmediatype"}, {"type": "contains", "source": "text_data\\messages.txt:1752", "target": "selfisaudio"}, {"type": "contains", "source": "text_data\\messages.txt:1752", "target": "audiompeg"}, {"type": "contains", "source": "text_data\\messages.txt:1752", "target": "audiowav"}, {"type": "contains", "source": "text_data\\messages.txt:1753", "target": "binary"}, {"type": "contains", "source": "text_data\\messages.txt:1753", "target": "mediatype"}, {"type": "contains", "source": "text_data\\messages.txt:1753", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1753", "target": "media"}, {"type": "contains", "source": "text_data\\messages.txt:1753", "target": "isaudio"}, {"type": "contains", "source": "text_data\\messages.txt:1754", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1754", "target": "media"}, {"type": "contains", "source": "text_data\\messages.txt:1754", "target": "property"}, {"type": "contains", "source": "text_data\\messages.txt:1754", "target": "format"}, {"type": "contains", "source": "text_data\\messages.txt:1754", "target": "isimage"}, {"type": "contains", "source": "text_data\\messages.txt:1755", "target": "prompt"}, {"type": "contains", "source": "text_data\\messages.txt:1755", "target": "generally"}, {"type": "contains", "source": "text_data\\messages.txt:1755", "target": "written"}, {"type": "contains", "source": "text_data\\messages.txt:1755", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1755", "target": "comes"}, {"type": "contains", "source": "text_data\\messages.txt:1756", "target": "prompt"}, {"type": "contains", "source": "text_data\\messages.txt:1756", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1756", "target": "userprompt"}, {"type": "contains", "source": "text_data\\messages.txt:1756", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1756", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1757", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1757", "target": "selfcontent"}, {"type": "contains", "source": "text_data\\messages.txt:1757", "target": "isinstanceselfcontent"}, {"type": "contains", "source": "text_data\\messages.txt:1757", "target": "figure"}, {"type": "contains", "source": "text_data\\messages.txt:1757", "target": "record"}, {"type": "contains", "source": "text_data\\messages.txt:1758", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1758", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1758", "target": "prompt"}, {"type": "contains", "source": "text_data\\messages.txt:1758", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1758", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1759", "target": "identifier"}, {"type": "contains", "source": "text_data\\messages.txt:1759", "target": "available"}, {"type": "contains", "source": "text_data\\messages.txt:1759", "target": "parts"}, {"type": "contains", "source": "text_data\\messages.txt:1759", "target": "discriminator"}, {"type": "contains", "source": "text_data\\messages.txt:1759", "target": "toolreturnpart"}, {"type": "contains", "source": "text_data\\messages.txt:1760", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1760", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1760", "target": "identifier"}, {"type": "contains", "source": "text_data\\messages.txt:1760", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1760", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1761", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1761", "target": "representation"}, {"type": "contains", "source": "text_data\\messages.txt:1761", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1761", "target": "isinstanceselfcontent"}, {"type": "contains", "source": "text_data\\messages.txt:1761", "target": "types"}, {"type": "contains", "source": "text_data\\messages.txt:1762", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1762", "target": "event"}, {"type": "contains", "source": "text_data\\messages.txt:1762", "target": "returnvalue"}, {"type": "contains", "source": "text_data\\messages.txt:1762", "target": "toolreturntadumppythonselfcontent"}, {"type": "contains", "source": "text_data\\messages.txt:1762", "target": "modejson"}, {"type": "contains", "source": "text_data\\messages.txt:1763", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1763", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\messages.txt:1763", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1763", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1763", "target": "toolname"}, {"type": "contains", "source": "text_data\\messages.txt:1764", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1764", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1764", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1764", "target": "partkind"}, {"type": "contains", "source": "text_data\\messages.txt:1764", "target": "modelresponsestr"}, {"type": "contains", "source": "text_data\\messages.txt:1765", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1765", "target": "string"}, {"type": "contains", "source": "text_data\\messages.txt:1765", "target": "representation"}, {"type": "contains", "source": "text_data\\messages.txt:1765", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1765", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1766", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1766", "target": "dictionary"}, {"type": "contains", "source": "text_data\\messages.txt:1766", "target": "representation"}, {"type": "contains", "source": "text_data\\messages.txt:1766", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1766", "target": "wrapping"}, {"type": "contains", "source": "text_data\\messages.txt:1767", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1767", "target": "types"}, {"type": "contains", "source": "text_data\\messages.txt:1767", "target": "toolreturntadumppythonselfcontent"}, {"type": "contains", "source": "text_data\\messages.txt:1767", "target": "modejson"}, {"type": "contains", "source": "text_data\\messages.txt:1767", "target": "modelresponseobjectself"}, {"type": "contains", "source": "text_data\\messages.txt:1768", "target": "pydantic"}, {"type": "contains", "source": "text_data\\messages.txt:1768", "target": "validation"}, {"type": "contains", "source": "text_data\\messages.txt:1768", "target": "failed"}, {"type": "contains", "source": "text_data\\messages.txt:1768", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1768", "target": "derived"}, {"type": "contains", "source": "text_data\\messages.txt:1769", "target": "source"}, {"type": "contains", "source": "text_data\\messages.txt:1769", "target": "pydanticaislimpydanticaimessagespy"}, {"type": "contains", "source": "text_data\\messages.txt:1770", "target": "pydantic"}, {"type": "contains", "source": "text_data\\messages.txt:1770", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1770", "target": "validation"}, {"type": "contains", "source": "text_data\\messages.txt:1770", "target": "failed"}, {"type": "contains", "source": "text_data\\messages.txt:1770", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1771", "target": "validationerrorpydanticcorevalidationerror"}, {"type": "contains", "source": "text_data\\messages.txt:1771", "target": "details"}, {"type": "contains", "source": "text_data\\messages.txt:1771", "target": "retry"}, {"type": "contains", "source": "text_data\\messages.txt:1771", "target": "result"}, {"type": "contains", "source": "text_data\\messages.txt:1771", "target": "validator"}, {"type": "contains", "source": "text_data\\messages.txt:1772", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1772", "target": "retry"}, {"type": "contains", "source": "text_data\\messages.txt:1772", "target": "provided"}, {"type": "contains", "source": "text_data\\messages.txt:1772", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1772", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\messages.txt:1773", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1773", "target": "errors"}, {"type": "contains", "source": "text_data\\messages.txt:1773", "target": "event"}, {"type": "contains", "source": "text_data\\messages.txt:1773", "target": "selftoolname"}, {"type": "contains", "source": "text_data\\messages.txt:1773", "target": "selfmodelresponse"}, {"type": "contains", "source": "text_data\\messages.txt:1774", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\messages.txt:1774", "target": "details"}, {"type": "contains", "source": "text_data\\messages.txt:1774", "target": "retry"}, {"type": "contains", "source": "text_data\\messages.txt:1774", "target": "toolname"}, {"type": "contains", "source": "text_data\\messages.txt:1774", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1775", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1775", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1775", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1775", "target": "fieldhttpsdocspythonorg3librarydataclasseshtmldataclassesfield"}, {"type": "contains", "source": "text_data\\messages.txt:1775", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1776", "target": "retry"}, {"type": "contains", "source": "text_data\\messages.txt:1776", "target": "partkind"}, {"type": "contains", "source": "text_data\\messages.txt:1776", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\messages.txt:1776", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1776", "target": "triggered"}, {"type": "contains", "source": "text_data\\messages.txt:1777", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1777", "target": "description"}, {"type": "contains", "source": "text_data\\messages.txt:1777", "target": "errors"}, {"type": "contains", "source": "text_data\\messages.txt:1777", "target": "modelresponseself"}, {"type": "contains", "source": "text_data\\messages.txt:1777", "target": "string"}, {"type": "contains", "source": "text_data\\messages.txt:1778", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\messages.txt:1778", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1778", "target": "message"}, {"type": "contains", "source": "text_data\\messages.txt:1778", "target": "modelrequestpart"}, {"type": "contains", "source": "text_data\\messages.txt:1778", "target": "annotatedhttpsdocspythonorg3librarytypinghtmltypingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1779", "target": "parts"}, {"type": "contains", "source": "text_data\\messages.txt:1779", "target": "message"}, {"type": "contains", "source": "text_data\\messages.txt:1779", "target": "request"}, {"type": "contains", "source": "text_data\\messages.txt:1779", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\messages.txt:1779", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1780", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1780", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1780", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\messages.txt:1780", "target": "typingliteralrequest"}, {"type": "contains", "source": "text_data\\messages.txt:1780", "target": "request"}, {"type": "contains", "source": "text_data\\messages.txt:1781", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1781", "target": "response"}, {"type": "contains", "source": "text_data\\messages.txt:1781", "target": "partkind"}, {"type": "contains", "source": "text_data\\messages.txt:1781", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1781", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1782", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1782", "target": "partkind"}, {"type": "contains", "source": "text_data\\messages.txt:1782", "target": "hascontent"}, {"type": "contains", "source": "text_data\\messages.txt:1782", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1782", "target": "nonempty"}, {"type": "contains", "source": "text_data\\messages.txt:1783", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1783", "target": "source"}, {"type": "contains", "source": "text_data\\messages.txt:1783", "target": "pydanticaislimpydanticaimessagespy"}, {"type": "contains", "source": "text_data\\messages.txt:1784", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1784", "target": "identifier"}, {"type": "contains", "source": "text_data\\messages.txt:1784", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1784", "target": "class"}, {"type": "contains", "source": "text_data\\messages.txt:1784", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1785", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1785", "target": "arguments"}, {"type": "contains", "source": "text_data\\messages.txt:1785", "target": "convenience"}, {"type": "contains", "source": "text_data\\messages.txt:1785", "target": "models"}, {"type": "contains", "source": "text_data\\messages.txt:1785", "target": "require"}, {"type": "contains", "source": "text_data\\messages.txt:1786", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1786", "target": "isinstanceselfargs"}, {"type": "contains", "source": "text_data\\messages.txt:1786", "target": "empty"}, {"type": "contains", "source": "text_data\\messages.txt:1786", "target": "selfargs"}, {"type": "contains", "source": "text_data\\messages.txt:1786", "target": "pydanticcoretojsonselfargsdecode"}, {"type": "contains", "source": "text_data\\messages.txt:1787", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\messages.txt:1787", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1787", "target": "toolname"}, {"type": "contains", "source": "text_data\\messages.txt:1787", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\messages.txt:1787", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\messages.txt:1788", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1788", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1788", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1788", "target": "identifier"}, {"type": "contains", "source": "text_data\\messages.txt:1788", "target": "partkind"}, {"type": "contains", "source": "text_data\\messages.txt:1789", "target": "argsasdict"}, {"type": "contains", "source": "text_data\\messages.txt:1789", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\messages.txt:1789", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\messages.txt:1789", "target": "typingany"}, {"type": "contains", "source": "text_data\\messages.txt:1789", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1790", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1790", "target": "arguments"}, {"type": "contains", "source": "text_data\\messages.txt:1790", "target": "convenience"}, {"type": "contains", "source": "text_data\\messages.txt:1790", "target": "models"}, {"type": "contains", "source": "text_data\\messages.txt:1790", "target": "require"}, {"type": "contains", "source": "text_data\\messages.txt:1791", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1791", "target": "source"}, {"type": "contains", "source": "text_data\\messages.txt:1791", "target": "pydanticaislimpydanticaimessagespy"}, {"type": "contains", "source": "text_data\\messages.txt:1791", "target": "arguments"}, {"type": "contains", "source": "text_data\\messages.txt:1791", "target": "hascontent"}, {"type": "contains", "source": "text_data\\messages.txt:1792", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1792", "target": "empty"}, {"type": "contains", "source": "text_data\\messages.txt:1792", "target": "hascontentself"}, {"type": "contains", "source": "text_data\\messages.txt:1792", "target": "arguments"}, {"type": "contains", "source": "text_data\\messages.txt:1792", "target": "contain"}, {"type": "contains", "source": "text_data\\messages.txt:1793", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1793", "target": "message"}, {"type": "contains", "source": "text_data\\messages.txt:1793", "target": "modelresponsepart"}, {"type": "contains", "source": "text_data\\messages.txt:1793", "target": "annotatedhttpsdocspythonorg3librarytypinghtmltypingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1793", "target": "typingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1794", "target": "source"}, {"type": "contains", "source": "text_data\\messages.txt:1794", "target": "pydanticaislimpydanticaimessagespy"}, {"type": "contains", "source": "text_data\\messages.txt:1795", "target": "response"}, {"type": "contains", "source": "text_data\\messages.txt:1795", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1795", "target": "message"}, {"type": "contains", "source": "text_data\\messages.txt:1795", "target": "parts"}, {"type": "contains", "source": "text_data\\messages.txt:1795", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1796", "target": "listevent"}, {"type": "contains", "source": "text_data\\messages.txt:1796", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1796", "target": "neweventbody"}, {"type": "contains", "source": "text_data\\messages.txt:1796", "target": "newbody"}, {"type": "contains", "source": "text_data\\messages.txt:1796", "target": "oteleventsself"}, {"type": "contains", "source": "text_data\\messages.txt:1797", "target": "function"}, {"type": "contains", "source": "text_data\\messages.txt:1797", "target": "parttoolname"}, {"type": "contains", "source": "text_data\\messages.txt:1797", "target": "arguments"}, {"type": "contains", "source": "text_data\\messages.txt:1797", "target": "partargs"}, {"type": "contains", "source": "text_data\\messages.txt:1797", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\messages.txt:1798", "target": "timestamp"}, {"type": "contains", "source": "text_data\\messages.txt:1798", "target": "model"}, {"type": "contains", "source": "text_data\\messages.txt:1798", "target": "response"}, {"type": "contains", "source": "text_data\\messages.txt:1798", "target": "parts"}, {"type": "contains", "source": "text_data\\messages.txt:1798", "target": "modelname"}, {"type": "contains", "source": "text_data\\messages.txt:1799", "target": "response"}, {"type": "contains", "source": "text_data\\messages.txt:1799", "target": "otelevents"}, {"type": "contains", "source": "text_data\\messages.txt:1799", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1799", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1799", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\messages.txt:1800", "target": "listevent"}, {"type": "contains", "source": "text_data\\messages.txt:1800", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1800", "target": "neweventbody"}, {"type": "contains", "source": "text_data\\messages.txt:1800", "target": "newbody"}, {"type": "contains", "source": "text_data\\messages.txt:1800", "target": "function"}, {"type": "contains", "source": "text_data\\messages.txt:1801", "target": "function"}, {"type": "contains", "source": "text_data\\messages.txt:1801", "target": "parttoolname"}, {"type": "contains", "source": "text_data\\messages.txt:1801", "target": "arguments"}, {"type": "contains", "source": "text_data\\messages.txt:1801", "target": "partargs"}, {"type": "contains", "source": "text_data\\messages.txt:1801", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\messages.txt:1802", "target": "modelmessage"}, {"type": "contains", "source": "text_data\\messages.txt:1802", "target": "annotatedhttpsdocspythonorg3librarytypinghtmltypingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1802", "target": "typingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1802", "target": "unionhttpsdocspythonorg3librarytypinghtmltypingunion"}, {"type": "contains", "source": "text_data\\messages.txt:1802", "target": "typingunionmodelrequest"}, {"type": "contains", "source": "text_data\\messages.txt:1803", "target": "modelmessagestypeadapter"}, {"type": "contains", "source": "text_data\\messages.txt:1803", "target": "typeadapterhttpsdocspydanticdevlatestapitypeadapterpydantictypeadaptertypeadapter"}, {"type": "contains", "source": "text_data\\messages.txt:1803", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1803", "target": "pydantictypeadapter"}, {"type": "contains", "source": "text_data\\messages.txt:1803", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessage"}, {"type": "contains", "source": "text_data\\messages.txt:1804", "target": "partial"}, {"type": "contains", "source": "text_data\\messages.txt:1804", "target": "update"}, {"type": "contains", "source": "text_data\\messages.txt:1804", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1804", "target": "textpart"}, {"type": "contains", "source": "text_data\\messages.txt:1804", "target": "append"}, {"type": "contains", "source": "text_data\\messages.txt:1805", "target": "textpart"}, {"type": "contains", "source": "text_data\\messages.txt:1805", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1805", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1805", "target": "existing"}, {"type": "contains", "source": "text_data\\messages.txt:1805", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1806", "target": "textpart"}, {"type": "contains", "source": "text_data\\messages.txt:1806", "target": "valueerror"}, {"type": "contains", "source": "text_data\\messages.txt:1806", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\messages.txt:1806", "target": "raise"}, {"type": "contains", "source": "text_data\\messages.txt:1806", "target": "valueerrorcannot"}, {"type": "contains", "source": "text_data\\messages.txt:1807", "target": "textpart"}, {"type": "contains", "source": "text_data\\messages.txt:1807", "target": "existing"}, {"type": "contains", "source": "text_data\\messages.txt:1807", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1807", "target": "partdeltakind"}, {"type": "contains", "source": "text_data\\messages.txt:1807", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1808", "target": "textpart"}, {"type": "contains", "source": "text_data\\messages.txt:1808", "target": "description"}, {"type": "contains", "source": "text_data\\messages.txt:1808", "target": "updated"}, {"type": "contains", "source": "text_data\\messages.txt:1808", "target": "content"}, {"type": "contains", "source": "text_data\\messages.txt:1808", "target": "raises"}, {"type": "contains", "source": "text_data\\messages.txt:1809", "target": "textpart"}, {"type": "contains", "source": "text_data\\messages.txt:1809", "target": "apply"}, {"type": "contains", "source": "text_data\\messages.txt:1809", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1809", "target": "existing"}, {"type": "contains", "source": "text_data\\messages.txt:1809", "target": "applyself"}, {"type": "contains", "source": "text_data\\messages.txt:1810", "target": "source"}, {"type": "contains", "source": "text_data\\messages.txt:1810", "target": "pydanticaislimpydanticaimessagespy"}, {"type": "contains", "source": "text_data\\messages.txt:1814", "target": "arguments"}, {"type": "contains", "source": "text_data\\messages.txt:1814", "target": "existing"}, {"type": "contains", "source": "text_data\\messages.txt:1814", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1814", "target": "incremental"}, {"type": "contains", "source": "text_data\\messages.txt:1814", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1815", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1815", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1815", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1815", "target": "otherwise"}, {"type": "contains", "source": "text_data\\messages.txt:1815", "target": "selfargsdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1816", "target": "toolcallpartdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1816", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1816", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1816", "target": "applyself"}, {"type": "contains", "source": "text_data\\messages.txt:1816", "target": "modelresponsepart"}, {"type": "contains", "source": "text_data\\messages.txt:1817", "target": "toolcallpartdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1817", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1817", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\messages.txt:1817", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1817", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1818", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1818", "target": "replacedelta"}, {"type": "contains", "source": "text_data\\messages.txt:1818", "target": "isinstanceselfargsdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1818", "target": "isinstancedeltaargsdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1818", "target": "append"}, {"type": "contains", "source": "text_data\\messages.txt:1819", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1819", "target": "deltaargsdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1819", "target": "replacedelta"}, {"type": "contains", "source": "text_data\\messages.txt:1819", "target": "isinstancedeltaargsdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1819", "target": "raise"}, {"type": "contains", "source": "text_data\\messages.txt:1820", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1820", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1820", "target": "apply"}, {"type": "contains", "source": "text_data\\messages.txt:1820", "target": "selftoolnamedelta"}, {"type": "contains", "source": "text_data\\messages.txt:1820", "target": "toolname"}, {"type": "contains", "source": "text_data\\messages.txt:1821", "target": "replacepart"}, {"type": "contains", "source": "text_data\\messages.txt:1821", "target": "argsupdatedjson"}, {"type": "contains", "source": "text_data\\messages.txt:1821", "target": "isinstanceselfargsdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1821", "target": "isinstancepartargs"}, {"type": "contains", "source": "text_data\\messages.txt:1821", "target": "raise"}, {"type": "contains", "source": "text_data\\messages.txt:1822", "target": "existing"}, {"type": "contains", "source": "text_data\\messages.txt:1822", "target": "arguments"}, {"type": "contains", "source": "text_data\\messages.txt:1822", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\messages.txt:1822", "target": "incremental"}, {"type": "contains", "source": "text_data\\messages.txt:1822", "target": "argsdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1823", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1823", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1823", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1823", "target": "identifier"}, {"type": "contains", "source": "text_data\\messages.txt:1823", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1824", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1824", "target": "aspart"}, {"type": "contains", "source": "text_data\\messages.txt:1824", "target": "otherwise"}, {"type": "contains", "source": "text_data\\messages.txt:1824", "target": "convert"}, {"type": "contains", "source": "text_data\\messages.txt:1824", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1825", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1825", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1825", "target": "otherwise"}, {"type": "contains", "source": "text_data\\messages.txt:1825", "target": "selfargsdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1825", "target": "aspartself"}, {"type": "contains", "source": "text_data\\messages.txt:1826", "target": "toolcallpartdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1826", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1826", "target": "modelresponsepart"}, {"type": "contains", "source": "text_data\\messages.txt:1826", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1826", "target": "apply"}, {"type": "contains", "source": "text_data\\messages.txt:1827", "target": "description"}, {"type": "contains", "source": "text_data\\messages.txt:1827", "target": "valueerrorhttpsdocspythonorg3libraryexceptionshtmlvalueerror"}, {"type": "contains", "source": "text_data\\messages.txt:1827", "target": "neither"}, {"type": "contains", "source": "text_data\\messages.txt:1827", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1827", "target": "toolcallpartdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1828", "target": "toolcallpartdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1828", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1828", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1828", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\messages.txt:1828", "target": "applyself"}, {"type": "contains", "source": "text_data\\messages.txt:1829", "target": "toolcallpartdeltas"}, {"type": "contains", "source": "text_data\\messages.txt:1829", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\messages.txt:1829", "target": "toolcallpartdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1829", "target": "return"}, {"type": "contains", "source": "text_data\\messages.txt:1829", "target": "selfapplytodeltapart"}, {"type": "contains", "source": "text_data\\messages.txt:1830", "target": "modelresponsepartdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1830", "target": "annotatedhttpsdocspythonorg3librarytypinghtmltypingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1830", "target": "typingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1830", "target": "unionhttpsdocspythonorg3librarytypinghtmltypingunion"}, {"type": "contains", "source": "text_data\\messages.txt:1830", "target": "typinguniontextpartdelta"}, {"type": "contains", "source": "text_data\\messages.txt:1831", "target": "source"}, {"type": "contains", "source": "text_data\\messages.txt:1831", "target": "pydanticaislimpydanticaimessagespy"}, {"type": "contains", "source": "text_data\\messages.txt:1832", "target": "index"}, {"type": "contains", "source": "text_data\\messages.txt:1832", "target": "event"}, {"type": "contains", "source": "text_data\\messages.txt:1832", "target": "started"}, {"type": "contains", "source": "text_data\\messages.txt:1832", "target": "within"}, {"type": "contains", "source": "text_data\\messages.txt:1832", "target": "overall"}, {"type": "contains", "source": "text_data\\messages.txt:1833", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1833", "target": "modelresponsepart"}, {"type": "contains", "source": "text_data\\messages.txt:1833", "target": "eventkind"}, {"type": "contains", "source": "text_data\\messages.txt:1833", "target": "event"}, {"type": "contains", "source": "text_data\\messages.txt:1833", "target": "index"}, {"type": "contains", "source": "text_data\\messages.txt:1834", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1834", "target": "index"}, {"type": "contains", "source": "text_data\\messages.txt:1834", "target": "event"}, {"type": "contains", "source": "text_data\\messages.txt:1834", "target": "within"}, {"type": "contains", "source": "text_data\\messages.txt:1834", "target": "overall"}, {"type": "contains", "source": "text_data\\messages.txt:1835", "target": "eventkind"}, {"type": "contains", "source": "text_data\\messages.txt:1835", "target": "event"}, {"type": "contains", "source": "text_data\\messages.txt:1835", "target": "delta"}, {"type": "contains", "source": "text_data\\messages.txt:1835", "target": "apply"}, {"type": "contains", "source": "text_data\\messages.txt:1835", "target": "specified"}, {"type": "contains", "source": "text_data\\messages.txt:1836", "target": "result"}, {"type": "contains", "source": "text_data\\messages.txt:1836", "target": "toolname"}, {"type": "contains", "source": "text_data\\messages.txt:1836", "target": "event"}, {"type": "contains", "source": "text_data\\messages.txt:1836", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1836", "target": "class"}, {"type": "contains", "source": "text_data\\messages.txt:1837", "target": "result"}, {"type": "contains", "source": "text_data\\messages.txt:1837", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1837", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1837", "target": "eventkind"}, {"type": "contains", "source": "text_data\\messages.txt:1837", "target": "called"}, {"type": "contains", "source": "text_data\\messages.txt:1838", "target": "modelresponsestreamevent"}, {"type": "contains", "source": "text_data\\messages.txt:1838", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1838", "target": "annotatedhttpsdocspythonorg3librarytypinghtmltypingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1838", "target": "typingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1838", "target": "unionhttpsdocspythonorg3librarytypinghtmltypingunion"}, {"type": "contains", "source": "text_data\\messages.txt:1839", "target": "agentstreamevent"}, {"type": "contains", "source": "text_data\\messages.txt:1839", "target": "event"}, {"type": "contains", "source": "text_data\\messages.txt:1839", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1839", "target": "annotatedhttpsdocspythonorg3librarytypinghtmltypingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1839", "target": "typingannotated"}, {"type": "contains", "source": "text_data\\messages.txt:1840", "target": "function"}, {"type": "contains", "source": "text_data\\messages.txt:1840", "target": "event"}, {"type": "contains", "source": "text_data\\messages.txt:1840", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1840", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1840", "target": "class"}, {"type": "contains", "source": "text_data\\messages.txt:1841", "target": "callid"}, {"type": "contains", "source": "text_data\\messages.txt:1841", "target": "classattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1841", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1841", "target": "eventkind"}, {"type": "contains", "source": "text_data\\messages.txt:1841", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\messages.txt:1842", "target": "result"}, {"type": "contains", "source": "text_data\\messages.txt:1842", "target": "event"}, {"type": "contains", "source": "text_data\\messages.txt:1842", "target": "function"}, {"type": "contains", "source": "text_data\\messages.txt:1842", "target": "functiontoolresultevent"}, {"type": "contains", "source": "text_data\\messages.txt:1842", "target": "dataclass"}, {"type": "contains", "source": "text_data\\messages.txt:1843", "target": "result"}, {"type": "contains", "source": "text_data\\messages.txt:1843", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\messages.txt:1843", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\messages.txt:1843", "target": "eventkind"}, {"type": "contains", "source": "text_data\\messages.txt:1843", "target": "toolreturnpart"}, {"type": "contains", "source": "text_data\\mistral.txt:1843", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\mistral.txt:1843", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\mistral.txt:1843", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\mistral.txt:1843", "target": "v0050"}, {"type": "contains", "source": "text_data\\mistral.txt:1843", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\mistral.txt:1844", "target": "tools"}, {"type": "contains", "source": "text_data\\mistral.txt:1844", "target": "contributing"}, {"type": "contains", "source": "text_data\\mistral.txt:1844", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\mistral.txt:1844", "target": "documentation"}, {"type": "contains", "source": "text_data\\mistral.txt:1844", "target": "agents"}, {"type": "contains", "source": "text_data\\mistral.txt:1845", "target": "evals"}, {"type": "contains", "source": "text_data\\mistral.txt:1845", "target": "input"}, {"type": "contains", "source": "text_data\\mistral.txt:1845", "target": "graphs"}, {"type": "contains", "source": "text_data\\mistral.txt:1845", "target": "graph"}, {"type": "contains", "source": "text_data\\mistral.txt:1845", "target": "image"}, {"type": "contains", "source": "text_data\\mistral.txt:1846", "target": "examples"}, {"type": "contains", "source": "text_data\\mistral.txt:1846", "target": "client"}, {"type": "contains", "source": "text_data\\mistral.txt:1846", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\mistral.txt:1846", "target": "server"}, {"type": "contains", "source": "text_data\\mistral.txt:1846", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\mistral.txt:1847", "target": "agent"}, {"type": "contains", "source": "text_data\\mistral.txt:1847", "target": "stream"}, {"type": "contains", "source": "text_data\\mistral.txt:1847", "target": "reference"}, {"type": "contains", "source": "text_data\\mistral.txt:1847", "target": "pydantic"}, {"type": "contains", "source": "text_data\\mistral.txt:1847", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1848", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\mistral.txt:1848", "target": "result"}, {"type": "contains", "source": "text_data\\mistral.txt:1848", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\mistral.txt:1848", "target": "messages"}, {"type": "contains", "source": "text_data\\mistral.txt:1848", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\mistral.txt:1849", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1849", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1849", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\mistral.txt:1849", "target": "instrumented"}, {"type": "contains", "source": "text_data\\mistral.txt:1849", "target": "table"}, {"type": "contains", "source": "text_data\\mistral.txt:1850", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\mistral.txt:1850", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\mistral.txt:1850", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\mistral.txt:1850", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\mistral.txt:1850", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\mistral.txt:1851", "target": "setup"}, {"type": "contains", "source": "text_data\\mistral.txt:1851", "target": "latestmistralmodelnames"}, {"type": "contains", "source": "text_data\\mistral.txt:1851", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1851", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1851", "target": "table"}, {"type": "contains", "source": "text_data\\mistral.txt:1852", "target": "latestmistralmodelnames"}, {"type": "contains", "source": "text_data\\mistral.txt:1852", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\mistral.txt:1852", "target": "mistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1852", "target": "mistralmodelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1852", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\mistral.txt:1853", "target": "mistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1853", "target": "models"}, {"type": "contains", "source": "text_data\\mistral.txt:1853", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1853", "target": "since"}, {"type": "contains", "source": "text_data\\mistral.txt:1853", "target": "possible"}, {"type": "contains", "source": "text_data\\mistral.txt:1854", "target": "mistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1854", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1854", "target": "class"}, {"type": "contains", "source": "text_data\\mistral.txt:1854", "target": "mistralmodelsettingsmodelsettings"}, {"type": "contains", "source": "text_data\\mistral.txt:1854", "target": "settings"}, {"type": "contains", "source": "text_data\\mistral.txt:1861", "target": "mistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1861", "target": "fieldreprfalse"}, {"type": "contains", "source": "text_data\\mistral.txt:1861", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1861", "target": "mistralmodelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1861", "target": "dataclassinitfalse"}, {"type": "contains", "source": "text_data\\mistral.txt:1862", "target": "provider"}, {"type": "contains", "source": "text_data\\mistral.txt:1862", "target": "mistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1862", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1862", "target": "providermistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1862", "target": "jsonmodeschemaprompt"}, {"type": "contains", "source": "text_data\\mistral.txt:1863", "target": "request"}, {"type": "contains", "source": "text_data\\mistral.txt:1863", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\mistral.txt:1863", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\mistral.txt:1863", "target": "selfmodelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1863", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1864", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\mistral.txt:1864", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\mistral.txt:1864", "target": "checkallowmodelrequests"}, {"type": "contains", "source": "text_data\\mistral.txt:1864", "target": "response"}, {"type": "contains", "source": "text_data\\mistral.txt:1864", "target": "await"}, {"type": "contains", "source": "text_data\\mistral.txt:1865", "target": "response"}, {"type": "contains", "source": "text_data\\mistral.txt:1865", "target": "await"}, {"type": "contains", "source": "text_data\\mistral.txt:1865", "target": "messages"}, {"type": "contains", "source": "text_data\\mistral.txt:1865", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\mistral.txt:1865", "target": "async"}, {"type": "contains", "source": "text_data\\mistral.txt:1866", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\mistral.txt:1866", "target": "unset"}, {"type": "contains", "source": "text_data\\mistral.txt:1866", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\mistral.txt:1866", "target": "mistralmodelsettings"}, {"type": "contains", "source": "text_data\\mistral.txt:1866", "target": "mistralchatcompletionresponse"}, {"type": "contains", "source": "text_data\\mistral.txt:1867", "target": "unset"}, {"type": "contains", "source": "text_data\\mistral.txt:1867", "target": "response"}, {"type": "contains", "source": "text_data\\mistral.txt:1867", "target": "raise"}, {"type": "contains", "source": "text_data\\mistral.txt:1867", "target": "maxtokensmodelsettingsgetmaxtokens"}, {"type": "contains", "source": "text_data\\mistral.txt:1867", "target": "temperaturemodelsettingsgettemperature"}, {"type": "contains", "source": "text_data\\mistral.txt:1868", "target": "messages"}, {"type": "contains", "source": "text_data\\mistral.txt:1868", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\mistral.txt:1868", "target": "mistraleventstreamasyncmistralcompletionevent"}, {"type": "contains", "source": "text_data\\mistral.txt:1868", "target": "modelrequestparametersfunctiontools"}, {"type": "contains", "source": "text_data\\mistral.txt:1868", "target": "async"}, {"type": "contains", "source": "text_data\\mistral.txt:1869", "target": "unset"}, {"type": "contains", "source": "text_data\\mistral.txt:1869", "target": "function"}, {"type": "contains", "source": "text_data\\mistral.txt:1869", "target": "calling"}, {"type": "contains", "source": "text_data\\mistral.txt:1869", "target": "response"}, {"type": "contains", "source": "text_data\\mistral.txt:1869", "target": "await"}, {"type": "contains", "source": "text_data\\mistral.txt:1870", "target": "modelrequestparametersresulttools"}, {"type": "contains", "source": "text_data\\mistral.txt:1870", "target": "presencepenaltymodelsettingsgetpresencepenalty"}, {"type": "contains", "source": "text_data\\mistral.txt:1870", "target": "frequencypenaltymodelsettingsgetfrequencypenalty"}, {"type": "contains", "source": "text_data\\mistral.txt:1870", "target": "parametersjsonschemas"}, {"type": "contains", "source": "text_data\\mistral.txt:1870", "target": "toolparametersjsonschema"}, {"type": "contains", "source": "text_data\\mistral.txt:1871", "target": "response"}, {"type": "contains", "source": "text_data\\mistral.txt:1871", "target": "streamtrue"}, {"type": "contains", "source": "text_data\\mistral.txt:1871", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\mistral.txt:1871", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1871", "target": "responseformattype"}, {"type": "contains", "source": "text_data\\mistral.txt:1872", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1872", "target": "required"}, {"type": "contains", "source": "text_data\\mistral.txt:1872", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\mistral.txt:1872", "target": "select"}, {"type": "contains", "source": "text_data\\mistral.txt:1872", "target": "prevents"}, {"type": "contains", "source": "text_data\\mistral.txt:1873", "target": "tools"}, {"type": "contains", "source": "text_data\\mistral.txt:1873", "target": "response"}, {"type": "contains", "source": "text_data\\mistral.txt:1873", "target": "alltools"}, {"type": "contains", "source": "text_data\\mistral.txt:1873", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1873", "target": "listtooldefinition"}, {"type": "contains", "source": "text_data\\mistral.txt:1874", "target": "timestamp"}, {"type": "contains", "source": "text_data\\mistral.txt:1874", "target": "toolcalls"}, {"type": "contains", "source": "text_data\\mistral.txt:1874", "target": "responsecreated"}, {"type": "contains", "source": "text_data\\mistral.txt:1874", "target": "datetimefromtimestampresponsecreated"}, {"type": "contains", "source": "text_data\\mistral.txt:1874", "target": "tztimezoneutc"}, {"type": "contains", "source": "text_data\\mistral.txt:1875", "target": "response"}, {"type": "contains", "source": "text_data\\mistral.txt:1875", "target": "async"}, {"type": "contains", "source": "text_data\\mistral.txt:1875", "target": "processstreamedresponse"}, {"type": "contains", "source": "text_data\\mistral.txt:1875", "target": "resulttools"}, {"type": "contains", "source": "text_data\\mistral.txt:1875", "target": "listtooldefinition"}, {"type": "contains", "source": "text_data\\mistral.txt:1876", "target": "mistraltoolcall"}, {"type": "contains", "source": "text_data\\mistral.txt:1876", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\mistral.txt:1876", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1876", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\mistral.txt:1876", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\mistral.txt:1877", "target": "mistraltoolcall"}, {"type": "contains", "source": "text_data\\mistral.txt:1877", "target": "schemas"}, {"type": "contains", "source": "text_data\\mistral.txt:1877", "target": "listdictstr"}, {"type": "contains", "source": "text_data\\mistral.txt:1877", "target": "maptoolcallt"}, {"type": "contains", "source": "text_data\\mistral.txt:1877", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\mistral.txt:1878", "target": "value"}, {"type": "contains", "source": "text_data\\mistral.txt:1878", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1878", "target": "schema"}, {"type": "contains", "source": "text_data\\mistral.txt:1878", "target": "anyof"}, {"type": "contains", "source": "text_data\\mistral.txt:1878", "target": "schemagetproperties"}, {"type": "contains", "source": "text_data\\mistral.txt:1879", "target": "valuetype"}, {"type": "contains", "source": "text_data\\mistral.txt:1879", "target": "anyof"}, {"type": "contains", "source": "text_data\\mistral.txt:1879", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1879", "target": "first"}, {"type": "contains", "source": "text_data\\mistral.txt:1879", "target": "handle"}, {"type": "contains", "source": "text_data\\mistral.txt:1880", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1880", "target": "array"}, {"type": "contains", "source": "text_data\\mistral.txt:1880", "target": "additionalpropertiestype"}, {"type": "contains", "source": "text_data\\mistral.txt:1880", "target": "valuetype"}, {"type": "contains", "source": "text_data\\mistral.txt:1880", "target": "object"}, {"type": "contains", "source": "text_data\\mistral.txt:1881", "target": "additionalpropertiestype"}, {"type": "contains", "source": "text_data\\mistral.txt:1881", "target": "dictstr"}, {"type": "contains", "source": "text_data\\mistral.txt:1881", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1881", "target": "array"}, {"type": "contains", "source": "text_data\\mistral.txt:1881", "target": "object"}, {"type": "contains", "source": "text_data\\mistral.txt:1882", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1882", "target": "timeout"}, {"type": "contains", "source": "text_data\\mistral.txt:1882", "target": "dictstr"}, {"type": "contains", "source": "text_data\\mistral.txt:1882", "target": "float"}, {"type": "contains", "source": "text_data\\mistral.txt:1882", "target": "additionalproperties"}, {"type": "contains", "source": "text_data\\mistral.txt:1883", "target": "yield"}, {"type": "contains", "source": "text_data\\mistral.txt:1883", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\mistral.txt:1883", "target": "mistraltoolmessage"}, {"type": "contains", "source": "text_data\\mistral.txt:1883", "target": "messageparts"}, {"type": "contains", "source": "text_data\\mistral.txt:1883", "target": "systempromptpart"}, {"type": "contains", "source": "text_data\\mistral.txt:1884", "target": "yield"}, {"type": "contains", "source": "text_data\\mistral.txt:1884", "target": "isinstancemessage"}, {"type": "contains", "source": "text_data\\mistral.txt:1884", "target": "mistraltoolmessage"}, {"type": "contains", "source": "text_data\\mistral.txt:1884", "target": "toolcallidparttoolcallid"}, {"type": "contains", "source": "text_data\\mistral.txt:1884", "target": "contentpartmodelresponse"}, {"type": "contains", "source": "text_data\\mistral.txt:1885", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\mistral.txt:1885", "target": "content"}, {"type": "contains", "source": "text_data\\mistral.txt:1885", "target": "messageparts"}, {"type": "contains", "source": "text_data\\mistral.txt:1885", "target": "textpart"}, {"type": "contains", "source": "text_data\\mistral.txt:1885", "target": "contentchunksappendmistraltextchunktextpartcontent"}, {"type": "contains", "source": "text_data\\mistral.txt:1886", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\mistral.txt:1886", "target": "content"}, {"type": "contains", "source": "text_data\\mistral.txt:1886", "target": "partcontent"}, {"type": "contains", "source": "text_data\\mistral.txt:1886", "target": "imageurl"}, {"type": "contains", "source": "text_data\\mistral.txt:1886", "target": "contentappendmistraltextchunktextitem"}, {"type": "contains", "source": "text_data\\mistral.txt:1887", "target": "raise"}, {"type": "contains", "source": "text_data\\mistral.txt:1887", "target": "content"}, {"type": "contains", "source": "text_data\\mistral.txt:1887", "target": "supported"}, {"type": "contains", "source": "text_data\\mistral.txt:1887", "target": "mistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1887", "target": "runtimeerroronly"}, {"type": "contains", "source": "text_data\\mistral.txt:1888", "target": "mistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1888", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1888", "target": "mistralmodelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1888", "target": "provider"}, {"type": "contains", "source": "text_data\\mistral.txt:1888", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\mistral.txt:1889", "target": "provider"}, {"type": "contains", "source": "text_data\\mistral.txt:1889", "target": "mistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1889", "target": "description"}, {"type": "contains", "source": "text_data\\mistral.txt:1889", "target": "default"}, {"type": "contains", "source": "text_data\\mistral.txt:1889", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1890", "target": "object"}, {"type": "contains", "source": "text_data\\mistral.txt:1890", "target": "jsonmodeschemaprompt"}, {"type": "contains", "source": "text_data\\mistral.txt:1890", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\mistral.txt:1890", "target": "prompt"}, {"type": "contains", "source": "text_data\\mistral.txt:1890", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1892", "target": "provider"}, {"type": "contains", "source": "text_data\\mistral.txt:1892", "target": "mistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1892", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1892", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1892", "target": "providermistral"}, {"type": "contains", "source": "text_data\\mistral.txt:1893", "target": "selfmodelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1893", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1893", "target": "selfjsonmodeschemaprompt"}, {"type": "contains", "source": "text_data\\mistral.txt:1893", "target": "jsonmodeschemaprompt"}, {"type": "contains", "source": "text_data\\mistral.txt:1893", "target": "isinstanceprovider"}, {"type": "contains", "source": "text_data\\mistral.txt:1894", "target": "request"}, {"type": "contains", "source": "text_data\\mistral.txt:1894", "target": "messages"}, {"type": "contains", "source": "text_data\\mistral.txt:1894", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\mistral.txt:1894", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\mistral.txt:1894", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\mistral.txt:1895", "target": "nonstreaming"}, {"type": "contains", "source": "text_data\\mistral.txt:1895", "target": "request"}, {"type": "contains", "source": "text_data\\mistral.txt:1895", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1895", "target": "pydantic"}, {"type": "contains", "source": "text_data\\mistral.txt:1895", "target": "source"}, {"type": "contains", "source": "text_data\\mistral.txt:1896", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\mistral.txt:1896", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\mistral.txt:1896", "target": "async"}, {"type": "contains", "source": "text_data\\mistral.txt:1896", "target": "request"}, {"type": "contains", "source": "text_data\\mistral.txt:1896", "target": "messages"}, {"type": "contains", "source": "text_data\\mistral.txt:1897", "target": "requeststream"}, {"type": "contains", "source": "text_data\\mistral.txt:1897", "target": "messages"}, {"type": "contains", "source": "text_data\\mistral.txt:1897", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\mistral.txt:1897", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\mistral.txt:1897", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\mistral.txt:1898", "target": "streaming"}, {"type": "contains", "source": "text_data\\mistral.txt:1898", "target": "request"}, {"type": "contains", "source": "text_data\\mistral.txt:1898", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1898", "target": "pydantic"}, {"type": "contains", "source": "text_data\\mistral.txt:1898", "target": "source"}, {"type": "contains", "source": "text_data\\mistral.txt:1899", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\mistral.txt:1899", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\mistral.txt:1899", "target": "response"}, {"type": "contains", "source": "text_data\\mistral.txt:1899", "target": "async"}, {"type": "contains", "source": "text_data\\mistral.txt:1899", "target": "messages"}, {"type": "contains", "source": "text_data\\mistral.txt:1900", "target": "system"}, {"type": "contains", "source": "text_data\\mistral.txt:1900", "target": "model"}, {"type": "contains", "source": "text_data\\mistral.txt:1900", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1900", "target": "mistralmodelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1900", "target": "property"}, {"type": "contains", "source": "text_data\\mistral.txt:1904", "target": "async"}, {"type": "contains", "source": "text_data\\mistral.txt:1904", "target": "chunk"}, {"type": "contains", "source": "text_data\\mistral.txt:1904", "target": "dataclass"}, {"type": "contains", "source": "text_data\\mistral.txt:1904", "target": "class"}, {"type": "contains", "source": "text_data\\mistral.txt:1904", "target": "mistralstreamedresponsestreamedresponse"}, {"type": "contains", "source": "text_data\\mistral.txt:1905", "target": "selfresulttools"}, {"type": "contains", "source": "text_data\\mistral.txt:1905", "target": "maybetoolcallpart"}, {"type": "contains", "source": "text_data\\mistral.txt:1905", "target": "except"}, {"type": "contains", "source": "text_data\\mistral.txt:1905", "target": "indexerror"}, {"type": "contains", "source": "text_data\\mistral.txt:1905", "target": "continue"}, {"type": "contains", "source": "text_data\\mistral.txt:1906", "target": "yield"}, {"type": "contains", "source": "text_data\\mistral.txt:1906", "target": "calls"}, {"type": "contains", "source": "text_data\\mistral.txt:1906", "target": "toolnamemaybetoolcallparttoolname"}, {"type": "contains", "source": "text_data\\mistral.txt:1906", "target": "argsmaybetoolcallpartargsasdict"}, {"type": "contains", "source": "text_data\\mistral.txt:1906", "target": "toolcallidmaybetoolcallparttoolcallid"}, {"type": "contains", "source": "text_data\\mistral.txt:1907", "target": "property"}, {"type": "contains", "source": "text_data\\mistral.txt:1907", "target": "response"}, {"type": "contains", "source": "text_data\\mistral.txt:1907", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1907", "target": "dictstr"}, {"type": "contains", "source": "text_data\\mistral.txt:1907", "target": "yield"}, {"type": "contains", "source": "text_data\\mistral.txt:1908", "target": "outputjson"}, {"type": "contains", "source": "text_data\\mistral.txt:1908", "target": "required"}, {"type": "contains", "source": "text_data\\mistral.txt:1908", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1908", "target": "resulttool"}, {"type": "contains", "source": "text_data\\mistral.txt:1908", "target": "resulttoolsvalues"}, {"type": "contains", "source": "text_data\\mistral.txt:1909", "target": "dictstr"}, {"type": "contains", "source": "text_data\\mistral.txt:1909", "target": "requiredparams"}, {"type": "contains", "source": "text_data\\mistral.txt:1909", "target": "param"}, {"type": "contains", "source": "text_data\\mistral.txt:1909", "target": "paramtype"}, {"type": "contains", "source": "text_data\\mistral.txt:1909", "target": "paramitemstype"}, {"type": "contains", "source": "text_data\\mistral.txt:1910", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1910", "target": "false"}, {"type": "contains", "source": "text_data\\mistral.txt:1910", "target": "isinstancejsondictparam"}, {"type": "contains", "source": "text_data\\mistral.txt:1910", "target": "paramtype"}, {"type": "contains", "source": "text_data\\mistral.txt:1910", "target": "paramschema"}, {"type": "contains", "source": "text_data\\mistral.txt:1911", "target": "return"}, {"type": "contains", "source": "text_data\\mistral.txt:1911", "target": "false"}, {"type": "contains", "source": "text_data\\mistral.txt:1911", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1911", "target": "property"}, {"type": "contains", "source": "text_data\\mistral.txt:1912", "target": "timestamp"}, {"type": "contains", "source": "text_data\\mistral.txt:1912", "target": "response"}, {"type": "contains", "source": "text_data\\mistral.txt:1912", "target": "modelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1912", "target": "mistralmodelname"}, {"type": "contains", "source": "text_data\\mistral.txt:1912", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1912", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1912", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\models.txt:1912", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1912", "target": "v0050"}, {"type": "contains", "source": "text_data\\models.txt:1912", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1913", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1913", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1913", "target": "openai"}, {"type": "contains", "source": "text_data\\models.txt:1913", "target": "configuration"}, {"type": "contains", "source": "text_data\\models.txt:1913", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1914", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1914", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1914", "target": "argument"}, {"type": "contains", "source": "text_data\\models.txt:1914", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1914", "target": "configuration"}, {"type": "contains", "source": "text_data\\models.txt:1915", "target": "tools"}, {"type": "contains", "source": "text_data\\models.txt:1915", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1915", "target": "example"}, {"type": "contains", "source": "text_data\\models.txt:1915", "target": "dependencies"}, {"type": "contains", "source": "text_data\\models.txt:1915", "target": "results"}, {"type": "contains", "source": "text_data\\models.txt:1916", "target": "evals"}, {"type": "contains", "source": "text_data\\models.txt:1916", "target": "input"}, {"type": "contains", "source": "text_data\\models.txt:1916", "target": "image"}, {"type": "contains", "source": "text_data\\models.txt:1916", "target": "audio"}, {"type": "contains", "source": "text_data\\models.txt:1916", "target": "document"}, {"type": "contains", "source": "text_data\\models.txt:1917", "target": "examples"}, {"type": "contains", "source": "text_data\\models.txt:1917", "target": "client"}, {"type": "contains", "source": "text_data\\models.txt:1917", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\models.txt:1917", "target": "server"}, {"type": "contains", "source": "text_data\\models.txt:1917", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\models.txt:1918", "target": "stream"}, {"type": "contains", "source": "text_data\\models.txt:1918", "target": "reference"}, {"type": "contains", "source": "text_data\\models.txt:1918", "target": "pydantic"}, {"type": "contains", "source": "text_data\\models.txt:1918", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1918", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\models.txt:1919", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\models.txt:1919", "target": "apimessages"}, {"type": "contains", "source": "text_data\\models.txt:1919", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\models.txt:1919", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\models.txt:1919", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\models.txt:1920", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\models.txt:1920", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\models.txt:1920", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\models.txt:1920", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\models.txt:1920", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\models.txt:1921", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\models.txt:1921", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\models.txt:1921", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\models.txt:1921", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\models.txt:1921", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\models.txt:1922", "target": "table"}, {"type": "contains", "source": "text_data\\models.txt:1922", "target": "contents"}, {"type": "contains", "source": "text_data\\models.txt:1923", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1923", "target": "configuration"}, {"type": "contains", "source": "text_data\\models.txt:1923", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1923", "target": "variable"}, {"type": "contains", "source": "text_data\\models.txt:1923", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1924", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1924", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1924", "target": "argument"}, {"type": "contains", "source": "text_data\\models.txt:1924", "target": "variable"}, {"type": "contains", "source": "text_data\\models.txt:1924", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1925", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1925", "target": "support"}, {"type": "contains", "source": "text_data\\models.txt:1925", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1925", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1925", "target": "providers"}, {"type": "contains", "source": "text_data\\models.txt:1926", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1926", "target": "interfaces"}, {"type": "contains", "source": "text_data\\models.txt:1926", "target": "providers"}, {"type": "contains", "source": "text_data\\models.txt:1926", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1926", "target": "terms"}, {"type": "contains", "source": "text_data\\models.txt:1927", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1927", "target": "refers"}, {"type": "contains", "source": "text_data\\models.txt:1927", "target": "specific"}, {"type": "contains", "source": "text_data\\models.txt:1927", "target": "handle"}, {"type": "contains", "source": "text_data\\models.txt:1927", "target": "requests"}, {"type": "contains", "source": "text_data\\models.txt:1928", "target": "interface"}, {"type": "contains", "source": "text_data\\models.txt:1928", "target": "classes"}, {"type": "contains", "source": "text_data\\models.txt:1928", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1928", "target": "these"}, {"type": "contains", "source": "text_data\\models.txt:1928", "target": "refers"}, {"type": "contains", "source": "text_data\\models.txt:1929", "target": "interface"}, {"type": "contains", "source": "text_data\\models.txt:1929", "target": "specific"}, {"type": "contains", "source": "text_data\\models.txt:1929", "target": "vendor"}, {"type": "contains", "source": "text_data\\models.txt:1929", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1929", "target": "authentication"}, {"type": "contains", "source": "text_data\\models.txt:1930", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1930", "target": "openai"}, {"type": "contains", "source": "text_data\\models.txt:1930", "target": "pydanticaislimopenai"}, {"type": "contains", "source": "text_data\\models.txt:1930", "target": "short"}, {"type": "contains", "source": "text_data\\models.txt:1930", "target": "select"}, {"type": "contains", "source": "text_data\\models.txt:1931", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1931", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1931", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1931", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1931", "target": "variable"}, {"type": "contains", "source": "text_data\\models.txt:1932", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1932", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1932", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1932", "target": "custom"}, {"type": "contains", "source": "text_data\\models.txt:1932", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1933", "target": "openai"}, {"type": "contains", "source": "text_data\\models.txt:1933", "target": "client"}, {"type": "contains", "source": "text_data\\models.txt:1933", "target": "custom"}, {"type": "contains", "source": "text_data\\models.txt:1933", "target": "openaiprovider"}, {"type": "contains", "source": "text_data\\models.txt:1933", "target": "accepts"}, {"type": "contains", "source": "text_data\\models.txt:1934", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1934", "target": "openai"}, {"type": "contains", "source": "text_data\\models.txt:1934", "target": "asyncazureopenai"}, {"type": "contains", "source": "text_data\\models.txt:1934", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1934", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1935", "target": "allow"}, {"type": "contains", "source": "text_data\\models.txt:1935", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1935", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1935", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1935", "target": "search"}, {"type": "contains", "source": "text_data\\models.txt:1936", "target": "openairesponsesmodelsettingsapimodelsopenaipydanticaimodelsopenaiopenairesponsesmodelsettings"}, {"type": "contains", "source": "text_data\\models.txt:1936", "target": "class"}, {"type": "contains", "source": "text_data\\models.txt:1936", "target": "those"}, {"type": "contains", "source": "text_data\\models.txt:1936", "target": "builtin"}, {"type": "contains", "source": "text_data\\models.txt:1936", "target": "tools"}, {"type": "contains", "source": "text_data\\models.txt:1937", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1937", "target": "openaitypesresponses"}, {"type": "contains", "source": "text_data\\models.txt:1937", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1937", "target": "openairesponsesmodelsettings"}, {"type": "contains", "source": "text_data\\models.txt:1937", "target": "weather"}, {"type": "contains", "source": "text_data\\models.txt:1938", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1938", "target": "anthropic"}, {"type": "contains", "source": "text_data\\models.txt:1938", "target": "pydanticaislimanthropic"}, {"type": "contains", "source": "text_data\\models.txt:1938", "target": "learn"}, {"type": "contains", "source": "text_data\\models.txt:1938", "target": "about"}, {"type": "contains", "source": "text_data\\models.txt:1939", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1939", "target": "variable"}, {"type": "contains", "source": "text_data\\models.txt:1939", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1939", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1939", "target": "anthropicmodelnameapimodelsanthropicpydanticaimodelsanthropicanthropicmodelname"}, {"type": "contains", "source": "text_data\\models.txt:1940", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1940", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1940", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1940", "target": "anthropicmodelinitpy"}, {"type": "contains", "source": "text_data\\models.txt:1940", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1941", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1941", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1941", "target": "anthropicmodel"}, {"type": "contains", "source": "text_data\\models.txt:1941", "target": "anthropicprovider"}, {"type": "contains", "source": "text_data\\models.txt:1941", "target": "custom"}, {"type": "contains", "source": "text_data\\models.txt:1942", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1942", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1942", "target": "anthropicmodel"}, {"type": "contains", "source": "text_data\\models.txt:1942", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1942", "target": "anthropicmodelcustomproviderpy"}, {"type": "contains", "source": "text_data\\models.txt:1943", "target": "geminimodelapimodelsgeminipydanticaimodelsgeminigeminimodel"}, {"type": "contains", "source": "text_data\\models.txt:1943", "target": "gemini"}, {"type": "contains", "source": "text_data\\models.txt:1943", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1943", "target": "through"}, {"type": "contains", "source": "text_data\\models.txt:1943", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1944", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1944", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1944", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1944", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1944", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1945", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1945", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1945", "target": "custom"}, {"type": "contains", "source": "text_data\\models.txt:1945", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1945", "target": "geminimodel"}, {"type": "contains", "source": "text_data\\models.txt:1946", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1946", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1946", "target": "geminimodel"}, {"type": "contains", "source": "text_data\\models.txt:1946", "target": "geminimodelcustomproviderpy"}, {"type": "contains", "source": "text_data\\models.txt:1946", "target": "httpx"}, {"type": "contains", "source": "text_data\\models.txt:1947", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1947", "target": "interface"}, {"type": "contains", "source": "text_data\\models.txt:1947", "target": "pydanticaislimvertexai"}, {"type": "contains", "source": "text_data\\models.txt:1947", "target": "geminimodelnameapimodelsgeminipydanticaimodelsgeminigeminimodelname"}, {"type": "contains", "source": "text_data\\models.txt:1947", "target": "contains"}, {"type": "contains", "source": "text_data\\models.txt:1948", "target": "vertexai"}, {"type": "contains", "source": "text_data\\models.txt:1948", "target": "which"}, {"type": "contains", "source": "text_data\\models.txt:1948", "target": "might"}, {"type": "contains", "source": "text_data\\models.txt:1948", "target": "account"}, {"type": "contains", "source": "text_data\\models.txt:1948", "target": "comes"}, {"type": "contains", "source": "text_data\\models.txt:1949", "target": "application"}, {"type": "contains", "source": "text_data\\models.txt:1949", "target": "default"}, {"type": "contains", "source": "text_data\\models.txt:1949", "target": "credentials"}, {"type": "contains", "source": "text_data\\models.txt:1949", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1949", "target": "gcloud"}, {"type": "contains", "source": "text_data\\models.txt:1950", "target": "credentials"}, {"type": "contains", "source": "text_data\\models.txt:1950", "target": "until"}, {"type": "contains", "source": "text_data\\models.txt:1950", "target": "agentrun"}, {"type": "contains", "source": "text_data\\models.txt:1950", "target": "projectid"}, {"type": "contains", "source": "text_data\\models.txt:1950", "target": "application"}, {"type": "contains", "source": "text_data\\models.txt:1951", "target": "service"}, {"type": "contains", "source": "text_data\\models.txt:1951", "target": "account"}, {"type": "contains", "source": "text_data\\models.txt:1951", "target": "project"}, {"type": "contains", "source": "text_data\\models.txt:1951", "target": "instead"}, {"type": "contains", "source": "text_data\\models.txt:1951", "target": "application"}, {"type": "contains", "source": "text_data\\models.txt:1952", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1952", "target": "vertexaiserviceaccountpy"}, {"type": "contains", "source": "text_data\\models.txt:1952", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1952", "target": "geminimodel"}, {"type": "contains", "source": "text_data\\models.txt:1952", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1953", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1953", "target": "region"}, {"type": "contains", "source": "text_data\\models.txt:1953", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1953", "target": "geminimodel"}, {"type": "contains", "source": "text_data\\models.txt:1953", "target": "vertexaiserviceaccountpy"}, {"type": "contains", "source": "text_data\\models.txt:1954", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1954", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1954", "target": "geminimodel"}, {"type": "contains", "source": "text_data\\models.txt:1954", "target": "googlevertexprovider"}, {"type": "contains", "source": "text_data\\models.txt:1954", "target": "using"}, {"type": "contains", "source": "text_data\\models.txt:1955", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1955", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1955", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1955", "target": "geminimodel"}, {"type": "contains", "source": "text_data\\models.txt:1955", "target": "vertexaicustomproviderpy"}, {"type": "contains", "source": "text_data\\models.txt:1956", "target": "pydanticaislimgroq"}, {"type": "contains", "source": "text_data\\models.txt:1956", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1956", "target": "variable"}, {"type": "contains", "source": "text_data\\models.txt:1956", "target": "pipuv"}, {"type": "contains", "source": "text_data\\models.txt:1956", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1957", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1957", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1957", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1957", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1957", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1958", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1958", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1958", "target": "groqmodel"}, {"type": "contains", "source": "text_data\\models.txt:1958", "target": "groqmodelproviderpy"}, {"type": "contains", "source": "text_data\\models.txt:1958", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1959", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1959", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1959", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1959", "target": "groqmodel"}, {"type": "contains", "source": "text_data\\models.txt:1959", "target": "mistral"}, {"type": "contains", "source": "text_data\\models.txt:1960", "target": "pydanticaislimmistral"}, {"type": "contains", "source": "text_data\\models.txt:1960", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1960", "target": "variable"}, {"type": "contains", "source": "text_data\\models.txt:1960", "target": "pipuv"}, {"type": "contains", "source": "text_data\\models.txt:1960", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1961", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1961", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1961", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1961", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1961", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1962", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1962", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1962", "target": "mistralmodel"}, {"type": "contains", "source": "text_data\\models.txt:1962", "target": "groqmodelproviderpy"}, {"type": "contains", "source": "text_data\\models.txt:1962", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1963", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1963", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1963", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1963", "target": "mistralmodel"}, {"type": "contains", "source": "text_data\\models.txt:1963", "target": "cohere"}, {"type": "contains", "source": "text_data\\models.txt:1964", "target": "pydanticaislimcohere"}, {"type": "contains", "source": "text_data\\models.txt:1964", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1964", "target": "variable"}, {"type": "contains", "source": "text_data\\models.txt:1964", "target": "pipuv"}, {"type": "contains", "source": "text_data\\models.txt:1964", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1965", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1965", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1965", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1965", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1965", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1966", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1966", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1966", "target": "cohereprovider"}, {"type": "contains", "source": "text_data\\models.txt:1966", "target": "coheremodelproviderpy"}, {"type": "contains", "source": "text_data\\models.txt:1966", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1967", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1967", "target": "install"}, {"type": "contains", "source": "text_data\\models.txt:1967", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1967", "target": "coheremodel"}, {"type": "contains", "source": "text_data\\models.txt:1967", "target": "bedrock"}, {"type": "contains", "source": "text_data\\models.txt:1968", "target": "credentials"}, {"type": "contains", "source": "text_data\\models.txt:1968", "target": "pydanticaislimbedrock"}, {"type": "contains", "source": "text_data\\models.txt:1968", "target": "bedrock"}, {"type": "contains", "source": "text_data\\models.txt:1968", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1968", "target": "environment"}, {"type": "contains", "source": "text_data\\models.txt:1969", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1969", "target": "export"}, {"type": "contains", "source": "text_data\\models.txt:1969", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1969", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1969", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1970", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1970", "target": "custom"}, {"type": "contains", "source": "text_data\\models.txt:1970", "target": "argument"}, {"type": "contains", "source": "text_data\\models.txt:1970", "target": "provide"}, {"type": "contains", "source": "text_data\\models.txt:1970", "target": "bedrockproviderapiproviderspydanticaiprovidersbedrockbedrockprovider"}, {"type": "contains", "source": "text_data\\models.txt:1971", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1971", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1971", "target": "bedrockconversemodel"}, {"type": "contains", "source": "text_data\\models.txt:1971", "target": "bedrockmodelproviderpy"}, {"type": "contains", "source": "text_data\\models.txt:1971", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1972", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1972", "target": "boto3"}, {"type": "contains", "source": "text_data\\models.txt:1972", "target": "preconfigured"}, {"type": "contains", "source": "text_data\\models.txt:1972", "target": "client"}, {"type": "contains", "source": "text_data\\models.txt:1972", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1973", "target": "openaicompatible"}, {"type": "contains", "source": "text_data\\models.txt:1973", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1973", "target": "openai"}, {"type": "contains", "source": "text_data\\models.txt:1973", "target": "compatible"}, {"type": "contains", "source": "text_data\\models.txt:1973", "target": "openaimodelapimodelsopenaipydanticaimodelsopenaiopenaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1974", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1974", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1974", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1974", "target": "provider"}, {"type": "contains", "source": "text_data\\models.txt:1974", "target": "deepseekmodelinitpy"}, {"type": "contains", "source": "text_data\\models.txt:1975", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1975", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1975", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1975", "target": "deepseekmodelinitproviderclasspy"}, {"type": "contains", "source": "text_data\\models.txt:1975", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1976", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1976", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1976", "target": "ollama"}, {"type": "contains", "source": "text_data\\models.txt:1976", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1976", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1977", "target": "ollama"}, {"type": "contains", "source": "text_data\\models.txt:1977", "target": "server"}, {"type": "contains", "source": "text_data\\models.txt:1977", "target": "example"}, {"type": "contains", "source": "text_data\\models.txt:1977", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1977", "target": "llama32"}, {"type": "contains", "source": "text_data\\models.txt:1978", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1978", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1978", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1978", "target": "ollamaexamplepy"}, {"type": "contains", "source": "text_data\\models.txt:1978", "target": "pydantic"}, {"type": "contains", "source": "text_data\\models.txt:1979", "target": "example"}, {"type": "contains", "source": "text_data\\models.txt:1979", "target": "using"}, {"type": "contains", "source": "text_data\\models.txt:1979", "target": "remote"}, {"type": "contains", "source": "text_data\\models.txt:1979", "target": "server"}, {"type": "contains", "source": "text_data\\models.txt:1979", "target": "ollamaexamplewithremoteserverpy"}, {"type": "contains", "source": "text_data\\models.txt:1980", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1980", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1980", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1980", "target": "remote"}, {"type": "contains", "source": "text_data\\models.txt:1980", "target": "server"}, {"type": "contains", "source": "text_data\\models.txt:1981", "target": "printresultdata"}, {"type": "contains", "source": "text_data\\models.txt:1981", "target": "citylondon"}, {"type": "contains", "source": "text_data\\models.txt:1981", "target": "countryunited"}, {"type": "contains", "source": "text_data\\models.txt:1981", "target": "kingdom"}, {"type": "contains", "source": "text_data\\models.txt:1981", "target": "printresultusage"}, {"type": "contains", "source": "text_data\\models.txt:1982", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1982", "target": "azure"}, {"type": "contains", "source": "text_data\\models.txt:1982", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1982", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1982", "target": "foundry"}, {"type": "contains", "source": "text_data\\models.txt:1983", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1983", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1983", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1983", "target": "openrouter"}, {"type": "contains", "source": "text_data\\models.txt:1983", "target": "openrouterhttpsopenrouterai"}, {"type": "contains", "source": "text_data\\models.txt:1984", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1984", "target": "perplexity"}, {"type": "contains", "source": "text_data\\models.txt:1984", "target": "create"}, {"type": "contains", "source": "text_data\\models.txt:1984", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1984", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1985", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1985", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1985", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1985", "target": "perplexitymodelinitpy"}, {"type": "contains", "source": "text_data\\models.txt:1985", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1986", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1986", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1986", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1986", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1986", "target": "fireworksmodelinitpy"}, {"type": "contains", "source": "text_data\\models.txt:1987", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1987", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1987", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1987", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1987", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1988", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1988", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\models.txt:1988", "target": "returns"}, {"type": "contains", "source": "text_data\\models.txt:1988", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1988", "target": "streamedresponseapimodelsbasepydanticaimodelsstreamedresponse"}, {"type": "contains", "source": "text_data\\models.txt:1989", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1989", "target": "following"}, {"type": "contains", "source": "text_data\\models.txt:1989", "target": "example"}, {"type": "contains", "source": "text_data\\models.txt:1989", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1989", "target": "first"}, {"type": "contains", "source": "text_data\\models.txt:1990", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1990", "target": "anthropicmodel"}, {"type": "contains", "source": "text_data\\models.txt:1990", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1990", "target": "fallbackmodel"}, {"type": "contains", "source": "text_data\\models.txt:1990", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1991", "target": "timestampdatetimedatetime"}, {"type": "contains", "source": "text_data\\models.txt:1991", "target": "partkinduserprompt"}, {"type": "contains", "source": "text_data\\models.txt:1991", "target": "kindrequest"}, {"type": "contains", "source": "text_data\\models.txt:1991", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\models.txt:1991", "target": "partstextpartcontentparis"}, {"type": "contains", "source": "text_data\\models.txt:1992", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1992", "target": "fallbackmodel"}, {"type": "contains", "source": "text_data\\models.txt:1992", "target": "which"}, {"type": "contains", "source": "text_data\\models.txt:1992", "target": "models"}, {"type": "contains", "source": "text_data\\models.txt:1992", "target": "should"}, {"type": "contains", "source": "text_data\\models.txt:1993", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1993", "target": "anthropicmodel"}, {"type": "contains", "source": "text_data\\models.txt:1993", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1993", "target": "modelhttperror"}, {"type": "contains", "source": "text_data\\models.txt:1993", "target": "fallbackmodel"}, {"type": "contains", "source": "text_data\\models.txt:1994", "target": "python"}, {"type": "contains", "source": "text_data\\models.txt:1994", "target": "since"}, {"type": "contains", "source": "text_data\\models.txt:1994", "target": "excepthttpsdocspythonorg3referencecompoundstmtshtmlexcept"}, {"type": "contains", "source": "text_data\\models.txt:1994", "target": "supported"}, {"type": "contains", "source": "text_data\\models.txt:1994", "target": "exceptiongrouphttpsgithubcomagronholmexceptiongroup"}, {"type": "contains", "source": "text_data\\models.txt:1995", "target": "import"}, {"type": "contains", "source": "text_data\\models.txt:1995", "target": "anthropicmodel"}, {"type": "contains", "source": "text_data\\models.txt:1995", "target": "agent"}, {"type": "contains", "source": "text_data\\models.txt:1995", "target": "fallbackmodel"}, {"type": "contains", "source": "text_data\\models.txt:1995", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\models.txt:1996", "target": "catchmodelhttperror"}, {"type": "contains", "source": "text_data\\models.txt:1996", "target": "modelstatuserrorhandler"}, {"type": "contains", "source": "text_data\\models.txt:1996", "target": "response"}, {"type": "contains", "source": "text_data\\models.txt:1996", "target": "agentrunsyncwhat"}, {"type": "contains", "source": "text_data\\models.txt:1996", "target": "capital"}, {"type": "contains", "source": "text_data\\models.txt:1997", "target": "fallbackmodel"}, {"type": "contains", "source": "text_data\\models.txt:1997", "target": "model"}, {"type": "contains", "source": "text_data\\models.txt:1997", "target": "default"}, {"type": "contains", "source": "text_data\\models.txt:1997", "target": "moves"}, {"type": "contains", "source": "text_data\\models.txt:1997", "target": "current"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1997", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1997", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1997", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1997", "target": "v0050"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1997", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1998", "target": "dependencies"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1998", "target": "tools"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1998", "target": "agent"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1998", "target": "contributing"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1998", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1999", "target": "graphs"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1999", "target": "evals"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1999", "target": "input"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1999", "target": "programmatic"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:1999", "target": "agent"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2000", "target": "examples"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2000", "target": "client"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2000", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2000", "target": "server"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2000", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2001", "target": "stream"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2001", "target": "reference"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2001", "target": "pydantic"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2001", "target": "model"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2001", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2002", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2002", "target": "apimessages"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2002", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2002", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2002", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2003", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2003", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2003", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2003", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2003", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2004", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2004", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2004", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2004", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2004", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2005", "target": "agent"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2005", "target": "delegation"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2005", "target": "programmatic"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2005", "target": "handoff"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2005", "target": "applications"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2006", "target": "agent"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2006", "target": "delegation"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2006", "target": "delegate"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2006", "target": "within"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2006", "target": "usage"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2007", "target": "models"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2007", "target": "agent"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2007", "target": "multiple"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2007", "target": "delegation"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2007", "target": "doesnt"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2008", "target": "agent"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2008", "target": "import"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2008", "target": "generate"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2008", "target": "jokes"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2008", "target": "return"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2009", "target": "return"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2009", "target": "rdata"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2009", "target": "result"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2009", "target": "jokeselectionagentrunsync"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2009", "target": "usagelimitsusagelimitsrequestlimit5"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2010", "target": "agent"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2010", "target": "dependencies"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2010", "target": "example"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2010", "target": "generally"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2010", "target": "delegate"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2011", "target": "import"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2011", "target": "agent"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2011", "target": "dataclass"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2011", "target": "depstypeclientandkey"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2011", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2012", "target": "count"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2012", "target": "jokes"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2012", "target": "async"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2012", "target": "runcontextclientandkey"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2012", "target": "await"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2013", "target": "async"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2013", "target": "headersauthorization"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2013", "target": "fbearer"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2013", "target": "ctxdepsapikey"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2013", "target": "responseraiseforstatus"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2014", "target": "agent"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2014", "target": "agents"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2014", "target": "example"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2014", "target": "programmatic"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2014", "target": "handoff"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2015", "target": "import"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2015", "target": "class"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2015", "target": "failed"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2015", "target": "given"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2015", "target": "typing"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2016", "target": "async"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2016", "target": "unionflightdetails"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2016", "target": "would"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2016", "target": "flight"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2016", "target": "search"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2017", "target": "result"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2017", "target": "await"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2017", "target": "flightsearchagentrun"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2017", "target": "prompt"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2017", "target": "messagehistorymessagehistory"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2018", "target": "seats"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2018", "target": "extra"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2018", "target": "answer"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2018", "target": "openaigpt4o"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2018", "target": "resulttypeunionseatpreference"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2019", "target": "seatpreference"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2019", "target": "preference"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2019", "target": "usage"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2019", "target": "optflightdetails"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2019", "target": "await"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2020", "target": "example"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2020", "target": "pydantic"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2020", "target": "graphs"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2020", "target": "examples"}, {"type": "contains", "source": "text_data\\multi-agent-applications.txt:2020", "target": "complete"}, {"type": "contains", "source": "text_data\\nodes.txt:2020", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\nodes.txt:2020", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\nodes.txt:2020", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\nodes.txt:2020", "target": "v0050"}, {"type": "contains", "source": "text_data\\nodes.txt:2020", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\nodes.txt:2021", "target": "tools"}, {"type": "contains", "source": "text_data\\nodes.txt:2021", "target": "contributing"}, {"type": "contains", "source": "text_data\\nodes.txt:2021", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\nodes.txt:2021", "target": "documentation"}, {"type": "contains", "source": "text_data\\nodes.txt:2021", "target": "agents"}, {"type": "contains", "source": "text_data\\nodes.txt:2022", "target": "evals"}, {"type": "contains", "source": "text_data\\nodes.txt:2022", "target": "input"}, {"type": "contains", "source": "text_data\\nodes.txt:2022", "target": "graphs"}, {"type": "contains", "source": "text_data\\nodes.txt:2022", "target": "graph"}, {"type": "contains", "source": "text_data\\nodes.txt:2022", "target": "image"}, {"type": "contains", "source": "text_data\\nodes.txt:2023", "target": "examples"}, {"type": "contains", "source": "text_data\\nodes.txt:2023", "target": "client"}, {"type": "contains", "source": "text_data\\nodes.txt:2023", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\nodes.txt:2023", "target": "server"}, {"type": "contains", "source": "text_data\\nodes.txt:2023", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\nodes.txt:2024", "target": "agent"}, {"type": "contains", "source": "text_data\\nodes.txt:2024", "target": "stream"}, {"type": "contains", "source": "text_data\\nodes.txt:2024", "target": "reference"}, {"type": "contains", "source": "text_data\\nodes.txt:2024", "target": "pydantic"}, {"type": "contains", "source": "text_data\\nodes.txt:2024", "target": "model"}, {"type": "contains", "source": "text_data\\nodes.txt:2025", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\nodes.txt:2025", "target": "result"}, {"type": "contains", "source": "text_data\\nodes.txt:2025", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\nodes.txt:2025", "target": "messages"}, {"type": "contains", "source": "text_data\\nodes.txt:2025", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\nodes.txt:2026", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\nodes.txt:2026", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\nodes.txt:2026", "target": "modelsgroq"}, {"type": "contains", "source": "text_data\\nodes.txt:2026", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\nodes.txt:2026", "target": "modelsinstrumented"}, {"type": "contains", "source": "text_data\\nodes.txt:2027", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\nodes.txt:2027", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\nodes.txt:2027", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\nodes.txt:2027", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\nodes.txt:2027", "target": "pydanticevalsgeneration"}, {"type": "contains", "source": "text_data\\nodes.txt:2028", "target": "statet"}, {"type": "contains", "source": "text_data\\nodes.txt:2028", "target": "graphruncontext"}, {"type": "contains", "source": "text_data\\nodes.txt:2028", "target": "state"}, {"type": "contains", "source": "text_data\\nodes.txt:2028", "target": "depst"}, {"type": "contains", "source": "text_data\\nodes.txt:2028", "target": "graph"}, {"type": "contains", "source": "text_data\\nodes.txt:2029", "target": "graph"}, {"type": "contains", "source": "text_data\\nodes.txt:2029", "target": "state"}, {"type": "contains", "source": "text_data\\nodes.txt:2029", "target": "depst"}, {"type": "contains", "source": "text_data\\nodes.txt:2029", "target": "class"}, {"type": "contains", "source": "text_data\\nodes.txt:2029", "target": "statet"}, {"type": "contains", "source": "text_data\\nodes.txt:2030", "target": "class"}, {"type": "contains", "source": "text_data\\nodes.txt:2030", "target": "source"}, {"type": "contains", "source": "text_data\\nodes.txt:2030", "target": "pydanticgraphpydanticgraphnodespy"}, {"type": "contains", "source": "text_data\\nodes.txt:2034", "target": "depst"}, {"type": "contains", "source": "text_data\\nodes.txt:2034", "target": "class"}, {"type": "contains", "source": "text_data\\nodes.txt:2034", "target": "diagram"}, {"type": "contains", "source": "text_data\\nodes.txt:2034", "target": "notes"}, {"type": "contains", "source": "text_data\\nodes.txt:2034", "target": "method"}, {"type": "contains", "source": "text_data\\nodes.txt:2035", "target": "graph"}, {"type": "contains", "source": "text_data\\nodes.txt:2035", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2035", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\nodes.txt:2035", "target": "runtime"}, {"type": "contains", "source": "text_data\\nodes.txt:2035", "target": "types"}, {"type": "contains", "source": "text_data\\nodes.txt:2036", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\nodes.txt:2036", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2036", "target": "selfdictsnapshotid"}, {"type": "contains", "source": "text_data\\nodes.txt:2036", "target": "classmethod"}, {"type": "contains", "source": "text_data\\nodes.txt:2036", "target": "generatesnapshotidselfgetnodeid"}, {"type": "contains", "source": "text_data\\nodes.txt:2037", "target": "docstring"}, {"type": "contains", "source": "text_data\\nodes.txt:2037", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2037", "target": "override"}, {"type": "contains", "source": "text_data\\nodes.txt:2037", "target": "method"}, {"type": "contains", "source": "text_data\\nodes.txt:2037", "target": "customise"}, {"type": "contains", "source": "text_data\\nodes.txt:2038", "target": "returntype"}, {"type": "contains", "source": "text_data\\nodes.txt:2038", "target": "annotations"}, {"type": "contains", "source": "text_data\\nodes.txt:2038", "target": "definition"}, {"type": "contains", "source": "text_data\\nodes.txt:2038", "target": "typehints"}, {"type": "contains", "source": "text_data\\nodes.txt:2038", "target": "gettypehintsclsrun"}, {"type": "contains", "source": "text_data\\nodes.txt:2039", "target": "returntypeorigin"}, {"type": "contains", "source": "text_data\\nodes.txt:2039", "target": "returntype"}, {"type": "contains", "source": "text_data\\nodes.txt:2039", "target": "endedge"}, {"type": "contains", "source": "text_data\\nodes.txt:2039", "target": "basenode"}, {"type": "contains", "source": "text_data\\nodes.txt:2039", "target": "returnsbasenode"}, {"type": "contains", "source": "text_data\\nodes.txt:2040", "target": "endedge"}, {"type": "contains", "source": "text_data\\nodes.txt:2040", "target": "returnsbasenode"}, {"type": "contains", "source": "text_data\\nodes.txt:2040", "target": "deepcopyself"}, {"type": "contains", "source": "text_data\\nodes.txt:2040", "target": "returns"}, {"type": "contains", "source": "text_data\\nodes.txt:2040", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2041", "target": "diagram"}, {"type": "contains", "source": "text_data\\nodes.txt:2041", "target": "notes"}, {"type": "contains", "source": "text_data\\nodes.txt:2041", "target": "method"}, {"type": "contains", "source": "text_data\\nodes.txt:2041", "target": "depst"}, {"type": "contains", "source": "text_data\\nodes.txt:2041", "target": "docstringnotes"}, {"type": "contains", "source": "text_data\\nodes.txt:2042", "target": "graph"}, {"type": "contains", "source": "text_data\\nodes.txt:2042", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2042", "target": "runtime"}, {"type": "contains", "source": "text_data\\nodes.txt:2042", "target": "description"}, {"type": "contains", "source": "text_data\\nodes.txt:2042", "target": "depst"}, {"type": "contains", "source": "text_data\\nodes.txt:2044", "target": "graph"}, {"type": "contains", "source": "text_data\\nodes.txt:2044", "target": "depst"}, {"type": "contains", "source": "text_data\\nodes.txt:2044", "target": "method"}, {"type": "contains", "source": "text_data\\nodes.txt:2044", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2044", "target": "runtime"}, {"type": "contains", "source": "text_data\\nodes.txt:2045", "target": "getnodeid"}, {"type": "contains", "source": "text_data\\nodes.txt:2045", "target": "cached"}, {"type": "contains", "source": "text_data\\nodes.txt:2045", "target": "classmethod"}, {"type": "contains", "source": "text_data\\nodes.txt:2046", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\nodes.txt:2046", "target": "source"}, {"type": "contains", "source": "text_data\\nodes.txt:2046", "target": "pydanticgraphpydanticgraphnodespy"}, {"type": "contains", "source": "text_data\\nodes.txt:2046", "target": "classmethod"}, {"type": "contains", "source": "text_data\\nodes.txt:2046", "target": "getnote"}, {"type": "contains", "source": "text_data\\nodes.txt:2047", "target": "source"}, {"type": "contains", "source": "text_data\\nodes.txt:2047", "target": "pydanticgraphpydanticgraphnodespy"}, {"type": "contains", "source": "text_data\\nodes.txt:2048", "target": "docstring"}, {"type": "contains", "source": "text_data\\nodes.txt:2048", "target": "classmethod"}, {"type": "contains", "source": "text_data\\nodes.txt:2048", "target": "getnotecls"}, {"type": "contains", "source": "text_data\\nodes.txt:2048", "target": "about"}, {"type": "contains", "source": "text_data\\nodes.txt:2048", "target": "render"}, {"type": "contains", "source": "text_data\\nodes.txt:2049", "target": "docstring"}, {"type": "contains", "source": "text_data\\nodes.txt:2049", "target": "remove"}, {"type": "contains", "source": "text_data\\nodes.txt:2049", "target": "indentation"}, {"type": "contains", "source": "text_data\\nodes.txt:2049", "target": "import"}, {"type": "contains", "source": "text_data\\nodes.txt:2049", "target": "inspect"}, {"type": "contains", "source": "text_data\\nodes.txt:2050", "target": "getnodedef"}, {"type": "contains", "source": "text_data\\nodes.txt:2050", "target": "localns"}, {"type": "contains", "source": "text_data\\nodes.txt:2050", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\nodes.txt:2050", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\nodes.txt:2050", "target": "typingany"}, {"type": "contains", "source": "text_data\\nodes.txt:2051", "target": "dictstr"}, {"type": "contains", "source": "text_data\\nodes.txt:2051", "target": "returntype"}, {"type": "contains", "source": "text_data\\nodes.txt:2051", "target": "classmethod"}, {"type": "contains", "source": "text_data\\nodes.txt:2051", "target": "getnodedefcls"}, {"type": "contains", "source": "text_data\\nodes.txt:2051", "target": "localns"}, {"type": "contains", "source": "text_data\\nodes.txt:2052", "target": "returntype"}, {"type": "contains", "source": "text_data\\nodes.txt:2052", "target": "returntypeorigin"}, {"type": "contains", "source": "text_data\\nodes.txt:2052", "target": "annotations"}, {"type": "contains", "source": "text_data\\nodes.txt:2052", "target": "basenode"}, {"type": "contains", "source": "text_data\\nodes.txt:2052", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2053", "target": "clsgetnodeid"}, {"type": "contains", "source": "text_data\\nodes.txt:2053", "target": "clsgetnote"}, {"type": "contains", "source": "text_data\\nodes.txt:2053", "target": "nextnodeedges"}, {"type": "contains", "source": "text_data\\nodes.txt:2053", "target": "endedge"}, {"type": "contains", "source": "text_data\\nodes.txt:2053", "target": "returnsbasenode"}, {"type": "contains", "source": "text_data\\nodes.txt:2054", "target": "returns"}, {"type": "contains", "source": "text_data\\nodes.txt:2054", "target": "source"}, {"type": "contains", "source": "text_data\\nodes.txt:2054", "target": "pydanticgraphpydanticgraphnodespy"}, {"type": "contains", "source": "text_data\\nodes.txt:2054", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2054", "target": "deepcopy"}, {"type": "contains", "source": "text_data\\nodes.txt:2055", "target": "source"}, {"type": "contains", "source": "text_data\\nodes.txt:2055", "target": "pydanticgraphpydanticgraphnodespy"}, {"type": "contains", "source": "text_data\\nodes.txt:2056", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2056", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\nodes.txt:2056", "target": "graph"}, {"type": "contains", "source": "text_data\\nodes.txt:2056", "target": "dataclass"}, {"type": "contains", "source": "text_data\\nodes.txt:2056", "target": "class"}, {"type": "contains", "source": "text_data\\nodes.txt:2057", "target": "setid"}, {"type": "contains", "source": "text_data\\nodes.txt:2057", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2057", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\nodes.txt:2057", "target": "setsnapshotidself"}, {"type": "contains", "source": "text_data\\nodes.txt:2057", "target": "selfdictsnapshotid"}, {"type": "contains", "source": "text_data\\nodes.txt:2058", "target": "return"}, {"type": "contains", "source": "text_data\\nodes.txt:2058", "target": "graph"}, {"type": "contains", "source": "text_data\\nodes.txt:2058", "target": "deepcopydata"}, {"type": "contains", "source": "text_data\\nodes.txt:2058", "target": "endrunendt"}, {"type": "contains", "source": "text_data\\nodes.txt:2058", "target": "returns"}, {"type": "contains", "source": "text_data\\nodes.txt:2059", "target": "label"}, {"type": "contains", "source": "text_data\\nodes.txt:2059", "target": "graph"}, {"type": "contains", "source": "text_data\\nodes.txt:2059", "target": "depst"}, {"type": "contains", "source": "text_data\\nodes.txt:2059", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\nodes.txt:2059", "target": "defaultnone"}, {"type": "contains", "source": "text_data\\nodes.txt:2060", "target": "noderunendt"}, {"type": "contains", "source": "text_data\\nodes.txt:2060", "target": "covarianttrue"}, {"type": "contains", "source": "text_data\\nodes.txt:2060", "target": "covariant"}, {"type": "contains", "source": "text_data\\nodes.txt:2060", "target": "variable"}, {"type": "contains", "source": "text_data\\nodes.txt:2060", "target": "return"}, {"type": "contains", "source": "text_data\\openai.txt:2060", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\openai.txt:2060", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\openai.txt:2060", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\openai.txt:2060", "target": "v0050"}, {"type": "contains", "source": "text_data\\openai.txt:2060", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\openai.txt:2061", "target": "tools"}, {"type": "contains", "source": "text_data\\openai.txt:2061", "target": "contributing"}, {"type": "contains", "source": "text_data\\openai.txt:2061", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\openai.txt:2061", "target": "documentation"}, {"type": "contains", "source": "text_data\\openai.txt:2061", "target": "agents"}, {"type": "contains", "source": "text_data\\openai.txt:2062", "target": "evals"}, {"type": "contains", "source": "text_data\\openai.txt:2062", "target": "input"}, {"type": "contains", "source": "text_data\\openai.txt:2062", "target": "graphs"}, {"type": "contains", "source": "text_data\\openai.txt:2062", "target": "graph"}, {"type": "contains", "source": "text_data\\openai.txt:2062", "target": "image"}, {"type": "contains", "source": "text_data\\openai.txt:2063", "target": "examples"}, {"type": "contains", "source": "text_data\\openai.txt:2063", "target": "client"}, {"type": "contains", "source": "text_data\\openai.txt:2063", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\openai.txt:2063", "target": "server"}, {"type": "contains", "source": "text_data\\openai.txt:2063", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\openai.txt:2064", "target": "agent"}, {"type": "contains", "source": "text_data\\openai.txt:2064", "target": "stream"}, {"type": "contains", "source": "text_data\\openai.txt:2064", "target": "reference"}, {"type": "contains", "source": "text_data\\openai.txt:2064", "target": "pydantic"}, {"type": "contains", "source": "text_data\\openai.txt:2064", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2065", "target": "pydanticaimodelsopenai"}, {"type": "contains", "source": "text_data\\openai.txt:2065", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\openai.txt:2065", "target": "result"}, {"type": "contains", "source": "text_data\\openai.txt:2065", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\openai.txt:2065", "target": "messages"}, {"type": "contains", "source": "text_data\\openai.txt:2066", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2066", "target": "system"}, {"type": "contains", "source": "text_data\\openai.txt:2066", "target": "openaitruncation"}, {"type": "contains", "source": "text_data\\openai.txt:2066", "target": "openaimodel"}, {"type": "contains", "source": "text_data\\openai.txt:2066", "target": "openairesponsesmodel"}, {"type": "contains", "source": "text_data\\openai.txt:2067", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\openai.txt:2067", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\openai.txt:2067", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\openai.txt:2067", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\openai.txt:2067", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\openai.txt:2068", "target": "setup"}, {"type": "contains", "source": "text_data\\openai.txt:2068", "target": "openaimodelname"}, {"type": "contains", "source": "text_data\\openai.txt:2068", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2068", "target": "system"}, {"type": "contains", "source": "text_data\\openai.txt:2068", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2069", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2069", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2069", "target": "openaimodelname"}, {"type": "contains", "source": "text_data\\openai.txt:2069", "target": "chatmodel"}, {"type": "contains", "source": "text_data\\openai.txt:2069", "target": "models"}, {"type": "contains", "source": "text_data\\openai.txt:2070", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2070", "target": "settings"}, {"type": "contains", "source": "text_data\\openai.txt:2070", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2070", "target": "request"}, {"type": "contains", "source": "text_data\\openai.txt:2070", "target": "fields"}, {"type": "contains", "source": "text_data\\openai.txt:2071", "target": "reasoning"}, {"type": "contains", "source": "text_data\\openai.txt:2071", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2071", "target": "effort"}, {"type": "contains", "source": "text_data\\openai.txt:2071", "target": "class"}, {"type": "contains", "source": "text_data\\openai.txt:2071", "target": "openaimodelsettingsmodelsettings"}, {"type": "contains", "source": "text_data\\openai.txt:2072", "target": "openais"}, {"type": "contains", "source": "text_data\\openai.txt:2072", "target": "safety"}, {"type": "contains", "source": "text_data\\openai.txt:2072", "target": "practiceshttpsplatformopenaicomdocsguidessafetybestpracticesenduserids"}, {"type": "contains", "source": "text_data\\openai.txt:2072", "target": "details"}, {"type": "contains", "source": "text_data\\openai.txt:2072", "target": "openaireasoningeffort"}, {"type": "contains", "source": "text_data\\openai.txt:2073", "target": "reasoning"}, {"type": "contains", "source": "text_data\\openai.txt:2073", "target": "effort"}, {"type": "contains", "source": "text_data\\openai.txt:2073", "target": "openaiuser"}, {"type": "contains", "source": "text_data\\openai.txt:2073", "target": "openaireasoningeffort"}, {"type": "contains", "source": "text_data\\openai.txt:2073", "target": "reasoningeffort"}, {"type": "contains", "source": "text_data\\openai.txt:2074", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2074", "target": "openairesponsesmodelsettings"}, {"type": "contains", "source": "text_data\\openai.txt:2074", "target": "bases"}, {"type": "contains", "source": "text_data\\openai.txt:2074", "target": "openaimodelsettings"}, {"type": "contains", "source": "text_data\\openai.txt:2074", "target": "settings"}, {"type": "contains", "source": "text_data\\openai.txt:2075", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2075", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2075", "target": "models"}, {"type": "contains", "source": "text_data\\openai.txt:2075", "target": "builtin"}, {"type": "contains", "source": "text_data\\openai.txt:2075", "target": "reasoning"}, {"type": "contains", "source": "text_data\\openai.txt:2076", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2076", "target": "response"}, {"type": "contains", "source": "text_data\\openai.txt:2076", "target": "context"}, {"type": "contains", "source": "text_data\\openai.txt:2076", "target": "window"}, {"type": "contains", "source": "text_data\\openai.txt:2076", "target": "concise"}, {"type": "contains", "source": "text_data\\openai.txt:2077", "target": "middle"}, {"type": "contains", "source": "text_data\\openai.txt:2077", "target": "conversation"}, {"type": "contains", "source": "text_data\\openai.txt:2077", "target": "openaibuiltintools"}, {"type": "contains", "source": "text_data\\openai.txt:2077", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\openai.txt:2078", "target": "builtin"}, {"type": "contains", "source": "text_data\\openai.txt:2078", "target": "openaireasoninggeneratesummary"}, {"type": "contains", "source": "text_data\\openai.txt:2078", "target": "openaibuiltintools"}, {"type": "contains", "source": "text_data\\openai.txt:2078", "target": "sequencehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcsequence"}, {"type": "contains", "source": "text_data\\openai.txt:2078", "target": "collectionsabcsequence"}, {"type": "contains", "source": "text_data\\openai.txt:2079", "target": "reasoning"}, {"type": "contains", "source": "text_data\\openai.txt:2079", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2079", "target": "openaitruncation"}, {"type": "contains", "source": "text_data\\openai.txt:2079", "target": "summary"}, {"type": "contains", "source": "text_data\\openai.txt:2079", "target": "performed"}, {"type": "contains", "source": "text_data\\openai.txt:2080", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2080", "target": "response"}, {"type": "contains", "source": "text_data\\openai.txt:2080", "target": "context"}, {"type": "contains", "source": "text_data\\openai.txt:2080", "target": "window"}, {"type": "contains", "source": "text_data\\openai.txt:2080", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2081", "target": "source"}, {"type": "contains", "source": "text_data\\openai.txt:2081", "target": "pydanticaislimpydanticaimodelsopenaipy"}, {"type": "contains", "source": "text_data\\openai.txt:2087", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2087", "target": "class"}, {"type": "contains", "source": "text_data\\openai.txt:2087", "target": "fieldreprfalse"}, {"type": "contains", "source": "text_data\\openai.txt:2087", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2087", "target": "openaimodelname"}, {"type": "contains", "source": "text_data\\openai.txt:2088", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2088", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2088", "target": "systempromptrole"}, {"type": "contains", "source": "text_data\\openai.txt:2088", "target": "provider"}, {"type": "contains", "source": "text_data\\openai.txt:2088", "target": "defaults"}, {"type": "contains", "source": "text_data\\openai.txt:2089", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\openai.txt:2089", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\openai.txt:2089", "target": "selfmodelname"}, {"type": "contains", "source": "text_data\\openai.txt:2089", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2089", "target": "isinstanceprovider"}, {"type": "contains", "source": "text_data\\openai.txt:2090", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\openai.txt:2090", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\openai.txt:2090", "target": "response"}, {"type": "contains", "source": "text_data\\openai.txt:2090", "target": "messages"}, {"type": "contains", "source": "text_data\\openai.txt:2090", "target": "await"}, {"type": "contains", "source": "text_data\\openai.txt:2091", "target": "async"}, {"type": "contains", "source": "text_data\\openai.txt:2091", "target": "property"}, {"type": "contains", "source": "text_data\\openai.txt:2091", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2091", "target": "return"}, {"type": "contains", "source": "text_data\\openai.txt:2091", "target": "overload"}, {"type": "contains", "source": "text_data\\openai.txt:2092", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\openai.txt:2092", "target": "async"}, {"type": "contains", "source": "text_data\\openai.txt:2092", "target": "completionscreate"}, {"type": "contains", "source": "text_data\\openai.txt:2092", "target": "messages"}, {"type": "contains", "source": "text_data\\openai.txt:2092", "target": "listmodelmessage"}, {"type": "contains", "source": "text_data\\openai.txt:2093", "target": "toolchoice"}, {"type": "contains", "source": "text_data\\openai.txt:2093", "target": "required"}, {"type": "contains", "source": "text_data\\openai.txt:2093", "target": "tools"}, {"type": "contains", "source": "text_data\\openai.txt:2093", "target": "literalnone"}, {"type": "contains", "source": "text_data\\openai.txt:2093", "target": "modelrequestparametersallowtextresult"}, {"type": "contains", "source": "text_data\\openai.txt:2094", "target": "notgiven"}, {"type": "contains", "source": "text_data\\openai.txt:2094", "target": "toolstools"}, {"type": "contains", "source": "text_data\\openai.txt:2094", "target": "toolchoicetoolchoice"}, {"type": "contains", "source": "text_data\\openai.txt:2094", "target": "streamstream"}, {"type": "contains", "source": "text_data\\openai.txt:2094", "target": "streamoptionsincludeusage"}, {"type": "contains", "source": "text_data\\openai.txt:2095", "target": "notgiven"}, {"type": "contains", "source": "text_data\\openai.txt:2095", "target": "raise"}, {"type": "contains", "source": "text_data\\openai.txt:2095", "target": "response"}, {"type": "contains", "source": "text_data\\openai.txt:2095", "target": "logitbiasmodelsettingsgetlogitbias"}, {"type": "contains", "source": "text_data\\openai.txt:2095", "target": "reasoningeffortmodelsettingsgetopenaireasoningeffort"}, {"type": "contains", "source": "text_data\\openai.txt:2096", "target": "response"}, {"type": "contains", "source": "text_data\\openai.txt:2096", "target": "choicemessagetoolcalls"}, {"type": "contains", "source": "text_data\\openai.txt:2096", "target": "return"}, {"type": "contains", "source": "text_data\\openai.txt:2096", "target": "choice"}, {"type": "contains", "source": "text_data\\openai.txt:2096", "target": "responsechoices0"}, {"type": "contains", "source": "text_data\\openai.txt:2097", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\openai.txt:2097", "target": "peekableresponse"}, {"type": "contains", "source": "text_data\\openai.txt:2097", "target": "utilspeekableasyncstreamresponse"}, {"type": "contains", "source": "text_data\\openai.txt:2097", "target": "firstchunk"}, {"type": "contains", "source": "text_data\\openai.txt:2097", "target": "await"}, {"type": "contains", "source": "text_data\\openai.txt:2098", "target": "modelrequestparametersresulttools"}, {"type": "contains", "source": "text_data\\openai.txt:2098", "target": "tools"}, {"type": "contains", "source": "text_data\\openai.txt:2098", "target": "async"}, {"type": "contains", "source": "text_data\\openai.txt:2098", "target": "isinstancemessage"}, {"type": "contains", "source": "text_data\\openai.txt:2098", "target": "selfmaptooldefinitionr"}, {"type": "contains", "source": "text_data\\openai.txt:2099", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\openai.txt:2099", "target": "texts"}, {"type": "contains", "source": "text_data\\openai.txt:2099", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2099", "target": "messageparts"}, {"type": "contains", "source": "text_data\\openai.txt:2099", "target": "textpart"}, {"type": "contains", "source": "text_data\\openai.txt:2100", "target": "toolcalls"}, {"type": "contains", "source": "text_data\\openai.txt:2100", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\openai.txt:2100", "target": "chatchatcompletionmessagetoolcallparam"}, {"type": "contains", "source": "text_data\\openai.txt:2100", "target": "return"}, {"type": "contains", "source": "text_data\\openai.txt:2100", "target": "function"}, {"type": "contains", "source": "text_data\\openai.txt:2101", "target": "selfsystempromptrole"}, {"type": "contains", "source": "text_data\\openai.txt:2101", "target": "yield"}, {"type": "contains", "source": "text_data\\openai.txt:2101", "target": "contentpartcontent"}, {"type": "contains", "source": "text_data\\openai.txt:2101", "target": "function"}, {"type": "contains", "source": "text_data\\openai.txt:2101", "target": "fname"}, {"type": "contains", "source": "text_data\\openai.txt:2102", "target": "yield"}, {"type": "contains", "source": "text_data\\openai.txt:2102", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\openai.txt:2102", "target": "chatchatcompletionsystemmessageparamrolesystem"}, {"type": "contains", "source": "text_data\\openai.txt:2102", "target": "contentpartcontent"}, {"type": "contains", "source": "text_data\\openai.txt:2102", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\openai.txt:2103", "target": "content"}, {"type": "contains", "source": "text_data\\openai.txt:2103", "target": "partcontent"}, {"type": "contains", "source": "text_data\\openai.txt:2103", "target": "yield"}, {"type": "contains", "source": "text_data\\openai.txt:2103", "target": "chatchatcompletiontoolmessageparam"}, {"type": "contains", "source": "text_data\\openai.txt:2103", "target": "roletool"}, {"type": "contains", "source": "text_data\\openai.txt:2104", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\openai.txt:2104", "target": "imageurl"}, {"type": "contains", "source": "text_data\\openai.txt:2104", "target": "contentappendchatcompletioncontentpartimageparamimageurlimageurl"}, {"type": "contains", "source": "text_data\\openai.txt:2104", "target": "typeimageurl"}, {"type": "contains", "source": "text_data\\openai.txt:2104", "target": "contentappendchatcompletioncontentparttextparamtextitem"}, {"type": "contains", "source": "text_data\\openai.txt:2105", "target": "pragma"}, {"type": "contains", "source": "text_data\\openai.txt:2105", "target": "cover"}, {"type": "contains", "source": "text_data\\openai.txt:2105", "target": "itemisaudio"}, {"type": "contains", "source": "text_data\\openai.txt:2105", "target": "assert"}, {"type": "contains", "source": "text_data\\openai.txt:2105", "target": "itemformat"}, {"type": "contains", "source": "text_data\\openai.txt:2106", "target": "following"}, {"type": "contains", "source": "text_data\\openai.txt:2106", "target": "responseraiseforstatus"}, {"type": "contains", "source": "text_data\\openai.txt:2106", "target": "base64encoded"}, {"type": "contains", "source": "text_data\\openai.txt:2106", "target": "base64b64encoderesponsecontentdecodeutf8"}, {"type": "contains", "source": "text_data\\openai.txt:2106", "target": "audio"}, {"type": "contains", "source": "text_data\\openai.txt:2107", "target": "messages1content1filedata"}, {"type": "contains", "source": "text_data\\openai.txt:2107", "target": "message"}, {"type": "contains", "source": "text_data\\openai.txt:2107", "target": "unknown"}, {"type": "contains", "source": "text_data\\openai.txt:2107", "target": "parameter"}, {"type": "contains", "source": "text_data\\openai.txt:2107", "target": "invalidrequesterror"}, {"type": "contains", "source": "text_data\\openai.txt:2108", "target": "filedata"}, {"type": "contains", "source": "text_data\\openai.txt:2108", "target": "itemurl"}, {"type": "contains", "source": "text_data\\openai.txt:2108", "target": "fdatamediatypebase64base64encoded"}, {"type": "contains", "source": "text_data\\openai.txt:2108", "target": "filefilefiledata"}, {"type": "contains", "source": "text_data\\openai.txt:2108", "target": "filename"}, {"type": "contains", "source": "text_data\\openai.txt:2109", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2109", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2109", "target": "openaimodelname"}, {"type": "contains", "source": "text_data\\openai.txt:2109", "target": "provider"}, {"type": "contains", "source": "text_data\\openai.txt:2109", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\openai.txt:2110", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2110", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2110", "target": "provider"}, {"type": "contains", "source": "text_data\\openai.txt:2110", "target": "description"}, {"type": "contains", "source": "text_data\\openai.txt:2110", "target": "default"}, {"type": "contains", "source": "text_data\\openai.txt:2111", "target": "system"}, {"type": "contains", "source": "text_data\\openai.txt:2111", "target": "systempromptrole"}, {"type": "contains", "source": "text_data\\openai.txt:2111", "target": "openaisystempromptrole"}, {"type": "contains", "source": "text_data\\openai.txt:2111", "target": "prompt"}, {"type": "contains", "source": "text_data\\openai.txt:2111", "target": "message"}, {"type": "contains", "source": "text_data\\openai.txt:2113", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2113", "target": "provider"}, {"type": "contains", "source": "text_data\\openai.txt:2113", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2113", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2113", "target": "openaimodelname"}, {"type": "contains", "source": "text_data\\openai.txt:2114", "target": "provider"}, {"type": "contains", "source": "text_data\\openai.txt:2114", "target": "defaults"}, {"type": "contains", "source": "text_data\\openai.txt:2114", "target": "systempromptrole"}, {"type": "contains", "source": "text_data\\openai.txt:2114", "target": "system"}, {"type": "contains", "source": "text_data\\openai.txt:2114", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2115", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2115", "target": "system"}, {"type": "contains", "source": "text_data\\openai.txt:2115", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2115", "target": "responses"}, {"type": "contains", "source": "text_data\\openai.txt:2115", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2116", "target": "searchhttpsplatformopenaicomdocsguidestoolswebsearch"}, {"type": "contains", "source": "text_data\\openai.txt:2116", "target": "searchhttpsplatformopenaicomdocsguidestoolsfilesearch"}, {"type": "contains", "source": "text_data\\openai.txt:2116", "target": "computer"}, {"type": "contains", "source": "text_data\\openai.txt:2116", "target": "usehttpsplatformopenaicomdocsguidestoolscomputeruse"}, {"type": "contains", "source": "text_data\\openai.txt:2116", "target": "openaibuiltintools"}, {"type": "contains", "source": "text_data\\openai.txt:2122", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2122", "target": "responses"}, {"type": "contains", "source": "text_data\\openai.txt:2122", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2122", "target": "tools"}, {"type": "contains", "source": "text_data\\openai.txt:2122", "target": "dataclassinitfalse"}, {"type": "contains", "source": "text_data\\openai.txt:2123", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2123", "target": "responses"}, {"type": "contains", "source": "text_data\\openai.txt:2123", "target": "fieldreprfalse"}, {"type": "contains", "source": "text_data\\openai.txt:2123", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2123", "target": "openaimodelname"}, {"type": "contains", "source": "text_data\\openai.txt:2124", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2124", "target": "provider"}, {"type": "contains", "source": "text_data\\openai.txt:2124", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2124", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2124", "target": "selfmodelname"}, {"type": "contains", "source": "text_data\\openai.txt:2125", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\openai.txt:2125", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\openai.txt:2125", "target": "messages"}, {"type": "contains", "source": "text_data\\openai.txt:2125", "target": "listmodelrequest"}, {"type": "contains", "source": "text_data\\openai.txt:2125", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\openai.txt:2126", "target": "response"}, {"type": "contains", "source": "text_data\\openai.txt:2126", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\openai.txt:2126", "target": "await"}, {"type": "contains", "source": "text_data\\openai.txt:2126", "target": "asynciteratorstreamedresponse"}, {"type": "contains", "source": "text_data\\openai.txt:2126", "target": "checkallowmodelrequests"}, {"type": "contains", "source": "text_data\\openai.txt:2127", "target": "response"}, {"type": "contains", "source": "text_data\\openai.txt:2127", "target": "return"}, {"type": "contains", "source": "text_data\\openai.txt:2127", "target": "itemsappendtextpartresponseoutputtext"}, {"type": "contains", "source": "text_data\\openai.txt:2127", "target": "responseoutput"}, {"type": "contains", "source": "text_data\\openai.txt:2127", "target": "itemtype"}, {"type": "contains", "source": "text_data\\openai.txt:2128", "target": "isinstancefirstchunk"}, {"type": "contains", "source": "text_data\\openai.txt:2128", "target": "utilsunset"}, {"type": "contains", "source": "text_data\\openai.txt:2128", "target": "pragma"}, {"type": "contains", "source": "text_data\\openai.txt:2128", "target": "cover"}, {"type": "contains", "source": "text_data\\openai.txt:2128", "target": "raise"}, {"type": "contains", "source": "text_data\\openai.txt:2129", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\openai.txt:2129", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\openai.txt:2129", "target": "openairesponsesmodelsettings"}, {"type": "contains", "source": "text_data\\openai.txt:2129", "target": "async"}, {"type": "contains", "source": "text_data\\openai.txt:2129", "target": "responsescreate"}, {"type": "contains", "source": "text_data\\openai.txt:2130", "target": "tools"}, {"type": "contains", "source": "text_data\\openai.txt:2130", "target": "toolchoice"}, {"type": "contains", "source": "text_data\\openai.txt:2130", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\openai.txt:2130", "target": "required"}, {"type": "contains", "source": "text_data\\openai.txt:2130", "target": "responsesresponse"}, {"type": "contains", "source": "text_data\\openai.txt:2131", "target": "notgiven"}, {"type": "contains", "source": "text_data\\openai.txt:2131", "target": "return"}, {"type": "contains", "source": "text_data\\openai.txt:2131", "target": "await"}, {"type": "contains", "source": "text_data\\openai.txt:2131", "target": "selfclientresponsescreate"}, {"type": "contains", "source": "text_data\\openai.txt:2131", "target": "inputopenaimessages"}, {"type": "contains", "source": "text_data\\openai.txt:2132", "target": "notgiven"}, {"type": "contains", "source": "text_data\\openai.txt:2132", "target": "raise"}, {"type": "contains", "source": "text_data\\openai.txt:2132", "target": "timeoutmodelsettingsgettimeout"}, {"type": "contains", "source": "text_data\\openai.txt:2132", "target": "reasoningreasoning"}, {"type": "contains", "source": "text_data\\openai.txt:2132", "target": "usermodelsettingsgetuser"}, {"type": "contains", "source": "text_data\\openai.txt:2133", "target": "return"}, {"type": "contains", "source": "text_data\\openai.txt:2133", "target": "tools"}, {"type": "contains", "source": "text_data\\openai.txt:2133", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\openai.txt:2133", "target": "selfmaptooldefinitionr"}, {"type": "contains", "source": "text_data\\openai.txt:2133", "target": "modelrequestparametersresulttools"}, {"type": "contains", "source": "text_data\\openai.txt:2134", "target": "messages"}, {"type": "contains", "source": "text_data\\openai.txt:2134", "target": "listresponsesresponseinputitemparam"}, {"type": "contains", "source": "text_data\\openai.txt:2134", "target": "return"}, {"type": "contains", "source": "text_data\\openai.txt:2134", "target": "fname"}, {"type": "contains", "source": "text_data\\openai.txt:2134", "target": "parameters"}, {"type": "contains", "source": "text_data\\openai.txt:2135", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\openai.txt:2135", "target": "systempromptpart"}, {"type": "contains", "source": "text_data\\openai.txt:2135", "target": "systemprompt"}, {"type": "contains", "source": "text_data\\openai.txt:2135", "target": "partcontent"}, {"type": "contains", "source": "text_data\\openai.txt:2135", "target": "userpromptpart"}, {"type": "contains", "source": "text_data\\openai.txt:2136", "target": "openaimessagesappend"}, {"type": "contains", "source": "text_data\\openai.txt:2136", "target": "isinstancepart"}, {"type": "contains", "source": "text_data\\openai.txt:2136", "target": "retrypromptpart"}, {"type": "contains", "source": "text_data\\openai.txt:2136", "target": "todomarcelo"}, {"type": "contains", "source": "text_data\\openai.txt:2136", "target": "conditional"}, {"type": "contains", "source": "text_data\\openai.txt:2137", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\openai.txt:2137", "target": "outputpartmodelresponse"}, {"type": "contains", "source": "text_data\\openai.txt:2137", "target": "assertneverpart"}, {"type": "contains", "source": "text_data\\openai.txt:2137", "target": "isinstancemessage"}, {"type": "contains", "source": "text_data\\openai.txt:2137", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\openai.txt:2138", "target": "content"}, {"type": "contains", "source": "text_data\\openai.txt:2138", "target": "return"}, {"type": "contains", "source": "text_data\\openai.txt:2138", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\openai.txt:2138", "target": "responsesresponsefunctiontoolcallparam"}, {"type": "contains", "source": "text_data\\openai.txt:2138", "target": "assertnevermessage"}, {"type": "contains", "source": "text_data\\openai.txt:2139", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\openai.txt:2139", "target": "content"}, {"type": "contains", "source": "text_data\\openai.txt:2139", "target": "partcontent"}, {"type": "contains", "source": "text_data\\openai.txt:2139", "target": "contentappendresponsesresponseinputtextparamtextitem"}, {"type": "contains", "source": "text_data\\openai.txt:2139", "target": "typeinputtext"}, {"type": "contains", "source": "text_data\\openai.txt:2140", "target": "itemisdocument"}, {"type": "contains", "source": "text_data\\openai.txt:2140", "target": "contentappend"}, {"type": "contains", "source": "text_data\\openai.txt:2140", "target": "responsesresponseinputfileparam"}, {"type": "contains", "source": "text_data\\openai.txt:2140", "target": "typeinputfile"}, {"type": "contains", "source": "text_data\\openai.txt:2140", "target": "filedatafdataitemmediatypebase64base64encoded"}, {"type": "contains", "source": "text_data\\openai.txt:2141", "target": "raise"}, {"type": "contains", "source": "text_data\\openai.txt:2141", "target": "binary"}, {"type": "contains", "source": "text_data\\openai.txt:2141", "target": "content"}, {"type": "contains", "source": "text_data\\openai.txt:2141", "target": "pragma"}, {"type": "contains", "source": "text_data\\openai.txt:2141", "target": "cover"}, {"type": "contains", "source": "text_data\\openai.txt:2142", "target": "isinstanceitem"}, {"type": "contains", "source": "text_data\\openai.txt:2142", "target": "pragma"}, {"type": "contains", "source": "text_data\\openai.txt:2142", "target": "cover"}, {"type": "contains", "source": "text_data\\openai.txt:2142", "target": "client"}, {"type": "contains", "source": "text_data\\openai.txt:2142", "target": "cachedasynchttpclient"}, {"type": "contains", "source": "text_data\\openai.txt:2143", "target": "client"}, {"type": "contains", "source": "text_data\\openai.txt:2143", "target": "cachedasynchttpclient"}, {"type": "contains", "source": "text_data\\openai.txt:2143", "target": "response"}, {"type": "contains", "source": "text_data\\openai.txt:2143", "target": "await"}, {"type": "contains", "source": "text_data\\openai.txt:2143", "target": "clientgetitemurl"}, {"type": "contains", "source": "text_data\\openai.txt:2145", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2145", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2145", "target": "openaimodelname"}, {"type": "contains", "source": "text_data\\openai.txt:2145", "target": "provider"}, {"type": "contains", "source": "text_data\\openai.txt:2145", "target": "literalhttpsdocspythonorg3librarytypinghtmltypingliteral"}, {"type": "contains", "source": "text_data\\openai.txt:2146", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2146", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2146", "target": "provider"}, {"type": "contains", "source": "text_data\\openai.txt:2146", "target": "initialize"}, {"type": "contains", "source": "text_data\\openai.txt:2146", "target": "responses"}, {"type": "contains", "source": "text_data\\openai.txt:2147", "target": "modelname"}, {"type": "contains", "source": "text_data\\openai.txt:2147", "target": "provider"}, {"type": "contains", "source": "text_data\\openai.txt:2147", "target": "openai"}, {"type": "contains", "source": "text_data\\openai.txt:2147", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2147", "target": "openaimodelname"}, {"type": "contains", "source": "text_data\\openai.txt:2148", "target": "system"}, {"type": "contains", "source": "text_data\\openai.txt:2148", "target": "model"}, {"type": "contains", "source": "text_data\\openai.txt:2148", "target": "provider"}, {"type": "contains", "source": "text_data\\openai.txt:2148", "target": "pydantic"}, {"type": "contains", "source": "text_data\\openai.txt:2148", "target": "services"}, {"type": "contains", "source": "text_data\\otel.txt:2148", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\otel.txt:2148", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\otel.txt:2148", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\otel.txt:2148", "target": "v0050"}, {"type": "contains", "source": "text_data\\otel.txt:2148", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\otel.txt:2149", "target": "tools"}, {"type": "contains", "source": "text_data\\otel.txt:2149", "target": "contributing"}, {"type": "contains", "source": "text_data\\otel.txt:2149", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\otel.txt:2149", "target": "documentation"}, {"type": "contains", "source": "text_data\\otel.txt:2149", "target": "agents"}, {"type": "contains", "source": "text_data\\otel.txt:2150", "target": "evals"}, {"type": "contains", "source": "text_data\\otel.txt:2150", "target": "input"}, {"type": "contains", "source": "text_data\\otel.txt:2150", "target": "graphs"}, {"type": "contains", "source": "text_data\\otel.txt:2150", "target": "graph"}, {"type": "contains", "source": "text_data\\otel.txt:2150", "target": "image"}, {"type": "contains", "source": "text_data\\otel.txt:2151", "target": "examples"}, {"type": "contains", "source": "text_data\\otel.txt:2151", "target": "client"}, {"type": "contains", "source": "text_data\\otel.txt:2151", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\otel.txt:2151", "target": "server"}, {"type": "contains", "source": "text_data\\otel.txt:2151", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\otel.txt:2152", "target": "agent"}, {"type": "contains", "source": "text_data\\otel.txt:2152", "target": "stream"}, {"type": "contains", "source": "text_data\\otel.txt:2152", "target": "reference"}, {"type": "contains", "source": "text_data\\otel.txt:2152", "target": "pydantic"}, {"type": "contains", "source": "text_data\\otel.txt:2152", "target": "model"}, {"type": "contains", "source": "text_data\\otel.txt:2153", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\otel.txt:2153", "target": "result"}, {"type": "contains", "source": "text_data\\otel.txt:2153", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\otel.txt:2153", "target": "messages"}, {"type": "contains", "source": "text_data\\otel.txt:2153", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\otel.txt:2154", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\otel.txt:2154", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\otel.txt:2154", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\otel.txt:2154", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\otel.txt:2154", "target": "modelsgroq"}, {"type": "contains", "source": "text_data\\otel.txt:2155", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\otel.txt:2155", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\otel.txt:2155", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\otel.txt:2155", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\otel.txt:2155", "target": "dataset"}, {"type": "contains", "source": "text_data\\otel.txt:2156", "target": "reprxml"}, {"type": "contains", "source": "text_data\\otel.txt:2156", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2156", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2156", "target": "spantree"}, {"type": "contains", "source": "text_data\\otel.txt:2156", "target": "addspans"}, {"type": "contains", "source": "text_data\\otel.txt:2157", "target": "spannode"}, {"type": "contains", "source": "text_data\\otel.txt:2157", "target": "reprxml"}, {"type": "contains", "source": "text_data\\otel.txt:2157", "target": "table"}, {"type": "contains", "source": "text_data\\otel.txt:2157", "target": "contents"}, {"type": "contains", "source": "text_data\\otel.txt:2157", "target": "duration"}, {"type": "contains", "source": "text_data\\otel.txt:2163", "target": "property"}, {"type": "contains", "source": "text_data\\otel.txt:2163", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2163", "target": "datetime"}, {"type": "contains", "source": "text_data\\otel.txt:2163", "target": "timedelta"}, {"type": "contains", "source": "text_data\\otel.txt:2163", "target": "listspannode"}, {"type": "contains", "source": "text_data\\otel.txt:2164", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2164", "target": "property"}, {"type": "contains", "source": "text_data\\otel.txt:2164", "target": "listspannode"}, {"type": "contains", "source": "text_data\\otel.txt:2164", "target": "descendantsself"}, {"type": "contains", "source": "text_data\\otel.txt:2164", "target": "descendants"}, {"type": "contains", "source": "text_data\\otel.txt:2165", "target": "spannode"}, {"type": "contains", "source": "text_data\\otel.txt:2165", "target": "assert"}, {"type": "contains", "source": "text_data\\otel.txt:2165", "target": "construction"}, {"type": "contains", "source": "text_data\\otel.txt:2165", "target": "postinitself"}, {"type": "contains", "source": "text_data\\otel.txt:2165", "target": "selfparent"}, {"type": "contains", "source": "text_data\\otel.txt:2166", "target": "tztimezoneutc"}, {"type": "contains", "source": "text_data\\otel.txt:2166", "target": "child"}, {"type": "contains", "source": "text_data\\otel.txt:2166", "target": "assert"}, {"type": "contains", "source": "text_data\\otel.txt:2166", "target": "parentspanidspanparentspanid"}, {"type": "contains", "source": "text_data\\otel.txt:2166", "target": "spanparent"}, {"type": "contains", "source": "text_data\\otel.txt:2167", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2167", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2167", "target": "child"}, {"type": "contains", "source": "text_data\\otel.txt:2167", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2167", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2168", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2168", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2168", "target": "child"}, {"type": "contains", "source": "text_data\\otel.txt:2168", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2168", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2169", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2169", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2169", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2169", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2169", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2170", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2170", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2170", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2170", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2170", "target": "stack"}, {"type": "contains", "source": "text_data\\otel.txt:2171", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2171", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2171", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2171", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2171", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2172", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2172", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2172", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2172", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2172", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2173", "target": "query"}, {"type": "contains", "source": "text_data\\otel.txt:2173", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2173", "target": "selfparent"}, {"type": "contains", "source": "text_data\\otel.txt:2173", "target": "while"}, {"type": "contains", "source": "text_data\\otel.txt:2173", "target": "nodematchespredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2174", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2174", "target": "conditions"}, {"type": "contains", "source": "text_data\\otel.txt:2174", "target": "query"}, {"type": "contains", "source": "text_data\\otel.txt:2174", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2174", "target": "selfmatchesqueryquery"}, {"type": "contains", "source": "text_data\\otel.txt:2175", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2175", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2175", "target": "selfname"}, {"type": "contains", "source": "text_data\\otel.txt:2175", "target": "existing"}, {"type": "contains", "source": "text_data\\otel.txt:2175", "target": "conditions"}, {"type": "contains", "source": "text_data\\otel.txt:2176", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2176", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2176", "target": "minduration"}, {"type": "contains", "source": "text_data\\otel.txt:2176", "target": "value"}, {"type": "contains", "source": "text_data\\otel.txt:2176", "target": "hasattributeskeys"}, {"type": "contains", "source": "text_data\\otel.txt:2177", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2177", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2177", "target": "maxduration"}, {"type": "contains", "source": "text_data\\otel.txt:2177", "target": "minchildcount"}, {"type": "contains", "source": "text_data\\otel.txt:2177", "target": "lenselfchildren"}, {"type": "contains", "source": "text_data\\otel.txt:2178", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2178", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2178", "target": "cache"}, {"type": "contains", "source": "text_data\\otel.txt:2178", "target": "child"}, {"type": "contains", "source": "text_data\\otel.txt:2178", "target": "selfchildren"}, {"type": "contains", "source": "text_data\\otel.txt:2179", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2179", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2179", "target": "pruneddescendants"}, {"type": "contains", "source": "text_data\\otel.txt:2179", "target": "mindescendantcount"}, {"type": "contains", "source": "text_data\\otel.txt:2179", "target": "lendescendants"}, {"type": "contains", "source": "text_data\\otel.txt:2180", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2180", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2180", "target": "cache"}, {"type": "contains", "source": "text_data\\otel.txt:2180", "target": "descendant"}, {"type": "contains", "source": "text_data\\otel.txt:2180", "target": "pruneddescendants"}, {"type": "contains", "source": "text_data\\otel.txt:2181", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2181", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2181", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2181", "target": "prunedancestors"}, {"type": "contains", "source": "text_data\\otel.txt:2181", "target": "mindepth"}, {"type": "contains", "source": "text_data\\otel.txt:2182", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2182", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2182", "target": "ancestor"}, {"type": "contains", "source": "text_data\\otel.txt:2182", "target": "prunedancestors"}, {"type": "contains", "source": "text_data\\otel.txt:2182", "target": "allancestorshave"}, {"type": "contains", "source": "text_data\\otel.txt:2183", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2183", "target": "includetraceid"}, {"type": "contains", "source": "text_data\\otel.txt:2183", "target": "includespanid"}, {"type": "contains", "source": "text_data\\otel.txt:2183", "target": "includestarttimestamp"}, {"type": "contains", "source": "text_data\\otel.txt:2183", "target": "includechildren"}, {"type": "contains", "source": "text_data\\otel.txt:2184", "target": "selfchildren"}, {"type": "contains", "source": "text_data\\otel.txt:2184", "target": "includestarttimestamp"}, {"type": "contains", "source": "text_data\\otel.txt:2184", "target": "firstlinepartsappendfstarttimestampselfstarttimestampisoformatr"}, {"type": "contains", "source": "text_data\\otel.txt:2184", "target": "includeduration"}, {"type": "contains", "source": "text_data\\otel.txt:2184", "target": "firstlinepartsappendfdurationselfduration"}, {"type": "contains", "source": "text_data\\otel.txt:2185", "target": "selfchildren"}, {"type": "contains", "source": "text_data\\otel.txt:2185", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2185", "target": "includespanidincludespanid"}, {"type": "contains", "source": "text_data\\otel.txt:2185", "target": "includestarttimestampincludestarttimestamp"}, {"type": "contains", "source": "text_data\\otel.txt:2185", "target": "includedurationincludeduration"}, {"type": "contains", "source": "text_data\\otel.txt:2186", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2186", "target": "fspannode"}, {"type": "contains", "source": "text_data\\otel.txt:2186", "target": "nameselfnamer"}, {"type": "contains", "source": "text_data\\otel.txt:2186", "target": "spanidselfspanid016x"}, {"type": "contains", "source": "text_data\\otel.txt:2186", "target": "reprself"}, {"type": "contains", "source": "text_data\\otel.txt:2187", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2187", "target": "descendants"}, {"type": "contains", "source": "text_data\\otel.txt:2187", "target": "ancestors"}, {"type": "contains", "source": "text_data\\otel.txt:2187", "target": "duration"}, {"type": "contains", "source": "text_data\\otel.txt:2187", "target": "property"}, {"type": "contains", "source": "text_data\\otel.txt:2188", "target": "child"}, {"type": "contains", "source": "text_data\\otel.txt:2188", "target": "assert"}, {"type": "contains", "source": "text_data\\otel.txt:2188", "target": "source"}, {"type": "contains", "source": "text_data\\otel.txt:2188", "target": "pydanticevalspydanticevalsotelspantreepy"}, {"type": "contains", "source": "text_data\\otel.txt:2188", "target": "addchildself"}, {"type": "contains", "source": "text_data\\otel.txt:2189", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2189", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2189", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2189", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2189", "target": "immediate"}, {"type": "contains", "source": "text_data\\otel.txt:2190", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2190", "target": "source"}, {"type": "contains", "source": "text_data\\otel.txt:2190", "target": "pydanticevalspydanticevalsotelspantreepy"}, {"type": "contains", "source": "text_data\\otel.txt:2190", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2190", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2191", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2191", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2191", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2191", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2191", "target": "finddescendants"}, {"type": "contains", "source": "text_data\\otel.txt:2192", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2192", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2192", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2192", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2192", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2193", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2193", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2193", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2193", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2193", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2194", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2194", "target": "returns"}, {"type": "contains", "source": "text_data\\otel.txt:2194", "target": "there"}, {"type": "contains", "source": "text_data\\otel.txt:2194", "target": "least"}, {"type": "contains", "source": "text_data\\otel.txt:2194", "target": "descendant"}, {"type": "contains", "source": "text_data\\otel.txt:2195", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2195", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2195", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2195", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2195", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2196", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2196", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2196", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2196", "target": "firstancestor"}, {"type": "contains", "source": "text_data\\otel.txt:2196", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2197", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2197", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2197", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2197", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2197", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2198", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2198", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2198", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2198", "target": "returns"}, {"type": "contains", "source": "text_data\\otel.txt:2198", "target": "ancestor"}, {"type": "contains", "source": "text_data\\otel.txt:2199", "target": "query"}, {"type": "contains", "source": "text_data\\otel.txt:2199", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2199", "target": "source"}, {"type": "contains", "source": "text_data\\otel.txt:2199", "target": "pydanticevalspydanticevalsotelspantreepy"}, {"type": "contains", "source": "text_data\\otel.txt:2199", "target": "matchesself"}, {"type": "contains", "source": "text_data\\otel.txt:2200", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\otel.txt:2200", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2200", "target": "reprxml"}, {"type": "contains", "source": "text_data\\otel.txt:2200", "target": "includechildren"}, {"type": "contains", "source": "text_data\\otel.txt:2200", "target": "includetraceid"}, {"type": "contains", "source": "text_data\\otel.txt:2201", "target": "source"}, {"type": "contains", "source": "text_data\\otel.txt:2201", "target": "pydanticevalspydanticevalsotelspantreepy"}, {"type": "contains", "source": "text_data\\otel.txt:2202", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2202", "target": "includetraceid"}, {"type": "contains", "source": "text_data\\otel.txt:2202", "target": "includespanid"}, {"type": "contains", "source": "text_data\\otel.txt:2202", "target": "includestarttimestamp"}, {"type": "contains", "source": "text_data\\otel.txt:2202", "target": "reprxml"}, {"type": "contains", "source": "text_data\\otel.txt:2203", "target": "selfchildren"}, {"type": "contains", "source": "text_data\\otel.txt:2203", "target": "includestarttimestamp"}, {"type": "contains", "source": "text_data\\otel.txt:2203", "target": "firstlinepartsappendfstarttimestampselfstarttimestampisoformatr"}, {"type": "contains", "source": "text_data\\otel.txt:2203", "target": "includeduration"}, {"type": "contains", "source": "text_data\\otel.txt:2203", "target": "firstlinepartsappendfdurationselfduration"}, {"type": "contains", "source": "text_data\\otel.txt:2204", "target": "includestarttimestampincludestarttimestamp"}, {"type": "contains", "source": "text_data\\otel.txt:2204", "target": "includedurationincludeduration"}, {"type": "contains", "source": "text_data\\otel.txt:2204", "target": "extralinesappendspannode"}, {"type": "contains", "source": "text_data\\otel.txt:2204", "target": "selfchildren"}, {"type": "contains", "source": "text_data\\otel.txt:2204", "target": "firstlinepartsappendchildren"}, {"type": "contains", "source": "text_data\\otel.txt:2205", "target": "bases"}, {"type": "contains", "source": "text_data\\otel.txt:2205", "target": "typeddicthttpstyping"}, {"type": "contains", "source": "text_data\\otel.txt:2205", "target": "extensionsreadthedocsioenlatestindexhtmltypingextensionstypeddict"}, {"type": "contains", "source": "text_data\\otel.txt:2205", "target": "typingextensionstypeddict"}, {"type": "contains", "source": "text_data\\otel.txt:2205", "target": "serializable"}, {"type": "contains", "source": "text_data\\otel.txt:2206", "target": "conditions"}, {"type": "contains", "source": "text_data\\otel.txt:2206", "target": "individual"}, {"type": "contains", "source": "text_data\\otel.txt:2206", "target": "because"}, {"type": "contains", "source": "text_data\\otel.txt:2206", "target": "fields"}, {"type": "contains", "source": "text_data\\otel.txt:2206", "target": "these"}, {"type": "contains", "source": "text_data\\otel.txt:2207", "target": "conditions"}, {"type": "contains", "source": "text_data\\otel.txt:2207", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2207", "target": "timedelta"}, {"type": "contains", "source": "text_data\\otel.txt:2207", "target": "float"}, {"type": "contains", "source": "text_data\\otel.txt:2207", "target": "listspanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2208", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2208", "target": "conditions"}, {"type": "contains", "source": "text_data\\otel.txt:2208", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2208", "target": "ancestor"}, {"type": "contains", "source": "text_data\\otel.txt:2208", "target": "depth"}, {"type": "contains", "source": "text_data\\otel.txt:2209", "target": "stoprecursingwhen"}, {"type": "contains", "source": "text_data\\otel.txt:2209", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2209", "target": "present"}, {"type": "contains", "source": "text_data\\otel.txt:2209", "target": "recursing"}, {"type": "contains", "source": "text_data\\otel.txt:2209", "target": "through"}, {"type": "contains", "source": "text_data\\otel.txt:2213", "target": "spannode"}, {"type": "contains", "source": "text_data\\otel.txt:2213", "target": "spans"}, {"type": "contains", "source": "text_data\\otel.txt:2213", "target": "listspannode"}, {"type": "contains", "source": "text_data\\otel.txt:2213", "target": "dataclassreprfalse"}, {"type": "contains", "source": "text_data\\otel.txt:2213", "target": "class"}, {"type": "contains", "source": "text_data\\otel.txt:2214", "target": "spans"}, {"type": "contains", "source": "text_data\\otel.txt:2214", "target": "readablespans"}, {"type": "contains", "source": "text_data\\otel.txt:2214", "target": "nodes"}, {"type": "contains", "source": "text_data\\otel.txt:2214", "target": "addspansself"}, {"type": "contains", "source": "text_data\\otel.txt:2214", "target": "listspannode"}, {"type": "contains", "source": "text_data\\otel.txt:2215", "target": "parentnodekey"}, {"type": "contains", "source": "text_data\\otel.txt:2215", "target": "selfnodesbyidvalues"}, {"type": "contains", "source": "text_data\\otel.txt:2215", "target": "nodeparentnodekey"}, {"type": "contains", "source": "text_data\\otel.txt:2215", "target": "parentnode"}, {"type": "contains", "source": "text_data\\otel.txt:2215", "target": "selfnodesbyid"}, {"type": "contains", "source": "text_data\\otel.txt:2216", "target": "parentnodekey"}, {"type": "contains", "source": "text_data\\otel.txt:2216", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2216", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2216", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2216", "target": "nodeparentnodekey"}, {"type": "contains", "source": "text_data\\otel.txt:2217", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2217", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2217", "target": "matches"}, {"type": "contains", "source": "text_data\\otel.txt:2217", "target": "returns"}, {"type": "contains", "source": "text_data\\otel.txt:2217", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2218", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2218", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2218", "target": "string"}, {"type": "contains", "source": "text_data\\otel.txt:2218", "target": "representation"}, {"type": "contains", "source": "text_data\\otel.txt:2218", "target": "iterselfnodesbyidvalues"}, {"type": "contains", "source": "text_data\\otel.txt:2219", "target": "spantree"}, {"type": "contains", "source": "text_data\\otel.txt:2219", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2219", "target": "reprparts"}, {"type": "contains", "source": "text_data\\otel.txt:2219", "target": "indent"}, {"type": "contains", "source": "text_data\\otel.txt:2219", "target": "rootreprxml"}, {"type": "contains", "source": "text_data\\otel.txt:2220", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2220", "target": "njoinreprparts"}, {"type": "contains", "source": "text_data\\otel.txt:2220", "target": "strself"}, {"type": "contains", "source": "text_data\\otel.txt:2220", "target": "fspantree"}, {"type": "contains", "source": "text_data\\otel.txt:2220", "target": "numrootslenselfroots"}, {"type": "contains", "source": "text_data\\otel.txt:2221", "target": "spans"}, {"type": "contains", "source": "text_data\\otel.txt:2221", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistspannode"}, {"type": "contains", "source": "text_data\\otel.txt:2221", "target": "rebuilding"}, {"type": "contains", "source": "text_data\\otel.txt:2221", "target": "structure"}, {"type": "contains", "source": "text_data\\otel.txt:2221", "target": "addspansspans"}, {"type": "contains", "source": "text_data\\otel.txt:2222", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2222", "target": "scanning"}, {"type": "contains", "source": "text_data\\otel.txt:2222", "target": "order"}, {"type": "contains", "source": "text_data\\otel.txt:2222", "target": "first"}, {"type": "contains", "source": "text_data\\otel.txt:2222", "target": "nodes"}, {"type": "contains", "source": "text_data\\otel.txt:2223", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2223", "target": "spanquery"}, {"type": "contains", "source": "text_data\\otel.txt:2223", "target": "spanpredicate"}, {"type": "contains", "source": "text_data\\otel.txt:2223", "target": "matches"}, {"type": "contains", "source": "text_data\\otel.txt:2223", "target": "returns"}, {"type": "contains", "source": "text_data\\otel.txt:2224", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2224", "target": "predicate"}, {"type": "contains", "source": "text_data\\otel.txt:2224", "target": "iterator"}, {"type": "contains", "source": "text_data\\otel.txt:2224", "target": "nodes"}, {"type": "contains", "source": "text_data\\otel.txt:2224", "target": "anyself"}, {"type": "contains", "source": "text_data\\otel.txt:2225", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\otel.txt:2225", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2225", "target": "reprxml"}, {"type": "contains", "source": "text_data\\otel.txt:2225", "target": "includechildren"}, {"type": "contains", "source": "text_data\\otel.txt:2225", "target": "includetraceid"}, {"type": "contains", "source": "text_data\\otel.txt:2226", "target": "source"}, {"type": "contains", "source": "text_data\\otel.txt:2226", "target": "pydanticevalspydanticevalsotelspantreepy"}, {"type": "contains", "source": "text_data\\otel.txt:2227", "target": "false"}, {"type": "contains", "source": "text_data\\otel.txt:2227", "target": "return"}, {"type": "contains", "source": "text_data\\otel.txt:2227", "target": "spantree"}, {"type": "contains", "source": "text_data\\otel.txt:2227", "target": "reprxml"}, {"type": "contains", "source": "text_data\\otel.txt:2227", "target": "includechildren"}, {"type": "contains", "source": "text_data\\otel.txt:2228", "target": "includespanidincludespanid"}, {"type": "contains", "source": "text_data\\otel.txt:2228", "target": "includestarttimestampincludestarttimestamp"}, {"type": "contains", "source": "text_data\\otel.txt:2228", "target": "includedurationincludeduration"}, {"type": "contains", "source": "text_data\\otel.txt:2228", "target": "selfroots"}, {"type": "contains", "source": "text_data\\otel.txt:2228", "target": "spantree"}, {"type": "contains", "source": "text_data\\persistence.txt:2228", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\persistence.txt:2228", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\persistence.txt:2228", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\persistence.txt:2228", "target": "v0050"}, {"type": "contains", "source": "text_data\\persistence.txt:2228", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\persistence.txt:2229", "target": "tools"}, {"type": "contains", "source": "text_data\\persistence.txt:2229", "target": "contributing"}, {"type": "contains", "source": "text_data\\persistence.txt:2229", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\persistence.txt:2229", "target": "documentation"}, {"type": "contains", "source": "text_data\\persistence.txt:2229", "target": "agents"}, {"type": "contains", "source": "text_data\\persistence.txt:2230", "target": "evals"}, {"type": "contains", "source": "text_data\\persistence.txt:2230", "target": "input"}, {"type": "contains", "source": "text_data\\persistence.txt:2230", "target": "graphs"}, {"type": "contains", "source": "text_data\\persistence.txt:2230", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2230", "target": "image"}, {"type": "contains", "source": "text_data\\persistence.txt:2231", "target": "examples"}, {"type": "contains", "source": "text_data\\persistence.txt:2231", "target": "client"}, {"type": "contains", "source": "text_data\\persistence.txt:2231", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\persistence.txt:2231", "target": "server"}, {"type": "contains", "source": "text_data\\persistence.txt:2231", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\persistence.txt:2232", "target": "agent"}, {"type": "contains", "source": "text_data\\persistence.txt:2232", "target": "stream"}, {"type": "contains", "source": "text_data\\persistence.txt:2232", "target": "reference"}, {"type": "contains", "source": "text_data\\persistence.txt:2232", "target": "pydantic"}, {"type": "contains", "source": "text_data\\persistence.txt:2232", "target": "model"}, {"type": "contains", "source": "text_data\\persistence.txt:2233", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\persistence.txt:2233", "target": "result"}, {"type": "contains", "source": "text_data\\persistence.txt:2233", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\persistence.txt:2233", "target": "messages"}, {"type": "contains", "source": "text_data\\persistence.txt:2233", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\persistence.txt:2234", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\persistence.txt:2234", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\persistence.txt:2234", "target": "modelsgroq"}, {"type": "contains", "source": "text_data\\persistence.txt:2234", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\persistence.txt:2234", "target": "modelsinstrumented"}, {"type": "contains", "source": "text_data\\persistence.txt:2235", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2235", "target": "startts"}, {"type": "contains", "source": "text_data\\persistence.txt:2235", "target": "duration"}, {"type": "contains", "source": "text_data\\persistence.txt:2235", "target": "status"}, {"type": "contains", "source": "text_data\\persistence.txt:2235", "target": "endsnapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2236", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\persistence.txt:2236", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\persistence.txt:2236", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\persistence.txt:2236", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\persistence.txt:2236", "target": "pydanticevalsgeneration"}, {"type": "contains", "source": "text_data\\persistence.txt:2237", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2237", "target": "shouldsettypes"}, {"type": "contains", "source": "text_data\\persistence.txt:2237", "target": "table"}, {"type": "contains", "source": "text_data\\persistence.txt:2237", "target": "contents"}, {"type": "contains", "source": "text_data\\persistence.txt:2237", "target": "persistence"}, {"type": "contains", "source": "text_data\\persistence.txt:2238", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2238", "target": "created"}, {"type": "contains", "source": "text_data\\persistence.txt:2238", "target": "running"}, {"type": "contains", "source": "text_data\\persistence.txt:2238", "target": "error"}, {"type": "contains", "source": "text_data\\persistence.txt:2238", "target": "snapshotstatus"}, {"type": "contains", "source": "text_data\\persistence.txt:2239", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2239", "target": "describing"}, {"type": "contains", "source": "text_data\\persistence.txt:2239", "target": "execution"}, {"type": "contains", "source": "text_data\\persistence.txt:2239", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2239", "target": "source"}, {"type": "contains", "source": "text_data\\persistence.txt:2240", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2240", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2240", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2240", "target": "duration"}, {"type": "contains", "source": "text_data\\persistence.txt:2240", "target": "status"}, {"type": "contains", "source": "text_data\\persistence.txt:2241", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2241", "target": "unsetsnapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2241", "target": "selfid"}, {"type": "contains", "source": "text_data\\persistence.txt:2241", "target": "literalnode"}, {"type": "contains", "source": "text_data\\persistence.txt:2241", "target": "discriminator"}, {"type": "contains", "source": "text_data\\persistence.txt:2242", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\persistence.txt:2242", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2242", "target": "startts"}, {"type": "contains", "source": "text_data\\persistence.txt:2242", "target": "classattribute"}, {"type": "contains", "source": "text_data\\persistence.txt:2242", "target": "statet"}, {"type": "contains", "source": "text_data\\persistence.txt:2243", "target": "classattribute"}, {"type": "contains", "source": "text_data\\persistence.txt:2243", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\persistence.txt:2243", "target": "duration"}, {"type": "contains", "source": "text_data\\persistence.txt:2243", "target": "status"}, {"type": "contains", "source": "text_data\\persistence.txt:2243", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2244", "target": "unique"}, {"type": "contains", "source": "text_data\\persistence.txt:2244", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2244", "target": "endsnapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2244", "target": "dataclass"}, {"type": "contains", "source": "text_data\\persistence.txt:2244", "target": "bases"}, {"type": "contains", "source": "text_data\\persistence.txt:2245", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2245", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2245", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2245", "target": "result"}, {"type": "contains", "source": "text_data\\persistence.txt:2245", "target": "unsetsnapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2246", "target": "selfid"}, {"type": "contains", "source": "text_data\\persistence.txt:2246", "target": "selfnodegetsnapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2246", "target": "property"}, {"type": "contains", "source": "text_data\\persistence.txt:2246", "target": "nodeself"}, {"type": "contains", "source": "text_data\\persistence.txt:2246", "target": "endrunendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2247", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2247", "target": "result"}, {"type": "contains", "source": "text_data\\persistence.txt:2247", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\persistence.txt:2247", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2247", "target": "classattribute"}, {"type": "contains", "source": "text_data\\persistence.txt:2248", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2248", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2248", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2248", "target": "discriminator"}, {"type": "contains", "source": "text_data\\persistence.txt:2248", "target": "deserializing"}, {"type": "contains", "source": "text_data\\persistence.txt:2249", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2249", "target": "basestatepersistence"}, {"type": "contains", "source": "text_data\\persistence.txt:2249", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2249", "target": "graphrungraphpydanticgraphgraphgraphrun"}, {"type": "contains", "source": "text_data\\persistence.txt:2249", "target": "returns"}, {"type": "contains", "source": "text_data\\persistence.txt:2253", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2253", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2253", "target": "class"}, {"type": "contains", "source": "text_data\\persistence.txt:2253", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2253", "target": "should"}, {"type": "contains", "source": "text_data\\persistence.txt:2254", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2254", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2254", "target": "raise"}, {"type": "contains", "source": "text_data\\persistence.txt:2254", "target": "notimplementederror"}, {"type": "contains", "source": "text_data\\persistence.txt:2254", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\persistence.txt:2255", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2255", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2255", "target": "raise"}, {"type": "contains", "source": "text_data\\persistence.txt:2255", "target": "notimplementederror"}, {"type": "contains", "source": "text_data\\persistence.txt:2255", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\persistence.txt:2256", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2256", "target": "nodesnapshotstatuspydanticgraphpersistencenodesnapshotstatus"}, {"type": "contains", "source": "text_data\\persistence.txt:2256", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2256", "target": "record"}, {"type": "contains", "source": "text_data\\persistence.txt:2256", "target": "raises"}, {"type": "contains", "source": "text_data\\persistence.txt:2257", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2257", "target": "status"}, {"type": "contains", "source": "text_data\\persistence.txt:2257", "target": "raise"}, {"type": "contains", "source": "text_data\\persistence.txt:2257", "target": "notimplementederror"}, {"type": "contains", "source": "text_data\\persistence.txt:2257", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\persistence.txt:2258", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2258", "target": "snapshots"}, {"type": "contains", "source": "text_data\\persistence.txt:2258", "target": "instead"}, {"type": "contains", "source": "text_data\\persistence.txt:2258", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2258", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2259", "target": "types"}, {"type": "contains", "source": "text_data\\persistence.txt:2259", "target": "return"}, {"type": "contains", "source": "text_data\\persistence.txt:2259", "target": "shouldsettypespydanticgraphpersistencebasestatepersistenceshouldsettypes"}, {"type": "contains", "source": "text_data\\persistence.txt:2259", "target": "selfshouldsettypes"}, {"type": "contains", "source": "text_data\\persistence.txt:2259", "target": "utilssetnodestypecontextgraphgetnodes"}, {"type": "contains", "source": "text_data\\persistence.txt:2260", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2260", "target": "types"}, {"type": "contains", "source": "text_data\\persistence.txt:2260", "target": "create"}, {"type": "contains", "source": "text_data\\persistence.txt:2260", "target": "adapterspydantictypeadapter"}, {"type": "contains", "source": "text_data\\persistence.txt:2260", "target": "serializing"}, {"type": "contains", "source": "text_data\\persistence.txt:2261", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2261", "target": "snapshotnode"}, {"type": "contains", "source": "text_data\\persistence.txt:2261", "target": "statet"}, {"type": "contains", "source": "text_data\\persistence.txt:2261", "target": "nextnode"}, {"type": "contains", "source": "text_data\\persistence.txt:2261", "target": "basenodenodespydanticgraphnodesbasenode"}, {"type": "contains", "source": "text_data\\persistence.txt:2262", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2262", "target": "required"}, {"type": "contains", "source": "text_data\\persistence.txt:2262", "target": "method"}, {"type": "contains", "source": "text_data\\persistence.txt:2262", "target": "should"}, {"type": "contains", "source": "text_data\\persistence.txt:2262", "target": "nodesnapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2263", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2263", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\persistence.txt:2263", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2263", "target": "nextnode"}, {"type": "contains", "source": "text_data\\persistence.txt:2263", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2264", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2264", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2264", "target": "snapshotnodeifnew"}, {"type": "contains", "source": "text_data\\persistence.txt:2264", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2264", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\persistence.txt:2265", "target": "required"}, {"type": "contains", "source": "text_data\\persistence.txt:2265", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2265", "target": "parameters"}, {"type": "contains", "source": "text_data\\persistence.txt:2265", "target": "description"}, {"type": "contains", "source": "text_data\\persistence.txt:2265", "target": "default"}, {"type": "contains", "source": "text_data\\persistence.txt:2266", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2266", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2266", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\persistence.txt:2266", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2266", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2267", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2267", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2267", "target": "statet"}, {"type": "contains", "source": "text_data\\persistence.txt:2267", "target": "endnodespydanticgraphnodesend"}, {"type": "contains", "source": "text_data\\persistence.txt:2267", "target": "pydanticgraphnodesendrunendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2268", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2268", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2268", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\persistence.txt:2268", "target": "recordrun"}, {"type": "contains", "source": "text_data\\persistence.txt:2268", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2269", "target": "record"}, {"type": "contains", "source": "text_data\\persistence.txt:2269", "target": "description"}, {"type": "contains", "source": "text_data\\persistence.txt:2269", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2269", "target": "error"}, {"type": "contains", "source": "text_data\\persistence.txt:2269", "target": "already"}, {"type": "contains", "source": "text_data\\persistence.txt:2270", "target": "nodesnapshotstatus"}, {"type": "contains", "source": "text_data\\persistence.txt:2270", "target": "description"}, {"type": "contains", "source": "text_data\\persistence.txt:2270", "target": "abstractasynccontextmanagerhttpsdocspythonorg3librarycontextlibhtmlcontextlibabstractasynccontextmanager"}, {"type": "contains", "source": "text_data\\persistence.txt:2270", "target": "contextlibabstractasynccontextmanagernone"}, {"type": "contains", "source": "text_data\\persistence.txt:2270", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2271", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2271", "target": "record"}, {"type": "contains", "source": "text_data\\persistence.txt:2271", "target": "running"}, {"type": "contains", "source": "text_data\\persistence.txt:2271", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2271", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\persistence.txt:2272", "target": "nodesnapshotstarttspydanticgraphpersistencenodesnapshotstartts"}, {"type": "contains", "source": "text_data\\persistence.txt:2272", "target": "starts"}, {"type": "contains", "source": "text_data\\persistence.txt:2272", "target": "nodesnapshotstatuspydanticgraphpersistencenodesnapshotstatus"}, {"type": "contains", "source": "text_data\\persistence.txt:2272", "target": "success"}, {"type": "contains", "source": "text_data\\persistence.txt:2272", "target": "error"}, {"type": "contains", "source": "text_data\\persistence.txt:2273", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2273", "target": "status"}, {"type": "contains", "source": "text_data\\persistence.txt:2273", "target": "created"}, {"type": "contains", "source": "text_data\\persistence.txt:2273", "target": "loadnext"}, {"type": "contains", "source": "text_data\\persistence.txt:2273", "target": "nodesnapshotstatet"}, {"type": "contains", "source": "text_data\\persistence.txt:2274", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2274", "target": "status"}, {"type": "contains", "source": "text_data\\persistence.txt:2274", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\persistence.txt:2274", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2274", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2275", "target": "snapshots"}, {"type": "contains", "source": "text_data\\persistence.txt:2275", "target": "entire"}, {"type": "contains", "source": "text_data\\persistence.txt:2275", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2275", "target": "loadall"}, {"type": "contains", "source": "text_data\\persistence.txt:2275", "target": "pydanticgraph"}, {"type": "contains", "source": "text_data\\persistence.txt:2276", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2276", "target": "snapshots"}, {"type": "contains", "source": "text_data\\persistence.txt:2276", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\persistence.txt:2276", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2276", "target": "loadallself"}, {"type": "contains", "source": "text_data\\persistence.txt:2277", "target": "types"}, {"type": "contains", "source": "text_data\\persistence.txt:2277", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2277", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2277", "target": "generally"}, {"type": "contains", "source": "text_data\\persistence.txt:2277", "target": "customise"}, {"type": "contains", "source": "text_data\\persistence.txt:2278", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2278", "target": "types"}, {"type": "contains", "source": "text_data\\persistence.txt:2278", "target": "shouldsettypes"}, {"type": "contains", "source": "text_data\\persistence.txt:2278", "target": "setgraphtypesself"}, {"type": "contains", "source": "text_data\\persistence.txt:2278", "target": "graphstatet"}, {"type": "contains", "source": "text_data\\persistence.txt:2279", "target": "types"}, {"type": "contains", "source": "text_data\\persistence.txt:2279", "target": "return"}, {"type": "contains", "source": "text_data\\persistence.txt:2279", "target": "whether"}, {"type": "contains", "source": "text_data\\persistence.txt:2279", "target": "implementations"}, {"type": "contains", "source": "text_data\\persistence.txt:2279", "target": "should"}, {"type": "contains", "source": "text_data\\persistence.txt:2280", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2280", "target": "required"}, {"type": "contains", "source": "text_data\\persistence.txt:2280", "target": "types"}, {"type": "contains", "source": "text_data\\persistence.txt:2280", "target": "create"}, {"type": "contains", "source": "text_data\\persistence.txt:2280", "target": "adaptershttpsdocspydanticdevlatestapitypeadapterpydantictypeadaptertypeadapter"}, {"type": "contains", "source": "text_data\\persistence.txt:2281", "target": "statetype"}, {"type": "contains", "source": "text_data\\persistence.txt:2281", "target": "runendtype"}, {"type": "contains", "source": "text_data\\persistence.txt:2281", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2281", "target": "settypesself"}, {"type": "contains", "source": "text_data\\persistence.txt:2281", "target": "typestatet"}, {"type": "contains", "source": "text_data\\persistence.txt:2282", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2282", "target": "buildsnapshotlisttypeadapter"}, {"type": "contains", "source": "text_data\\persistence.txt:2282", "target": "statet"}, {"type": "contains", "source": "text_data\\persistence.txt:2282", "target": "typehttpsdocspythonorg3libraryfunctionshtmltypestatet"}, {"type": "contains", "source": "text_data\\persistence.txt:2282", "target": "typehttpsdocspythonorg3libraryfunctionshtmltyperunendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2283", "target": "source"}, {"type": "contains", "source": "text_data\\persistence.txt:2283", "target": "pydanticgraphpydanticgraphpersistenceinitpy"}, {"type": "contains", "source": "text_data\\persistence.txt:2284", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2284", "target": "memory"}, {"type": "contains", "source": "text_data\\persistence.txt:2284", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2284", "target": "persistence"}, {"type": "contains", "source": "text_data\\persistence.txt:2284", "target": "buildsnapshotlisttypeadapter"}, {"type": "contains", "source": "text_data\\persistence.txt:2285", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2285", "target": "persistence"}, {"type": "contains", "source": "text_data\\persistence.txt:2285", "target": "simple"}, {"type": "contains", "source": "text_data\\persistence.txt:2285", "target": "memory"}, {"type": "contains", "source": "text_data\\persistence.txt:2285", "target": "module"}, {"type": "contains", "source": "text_data\\persistence.txt:2286", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2286", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2286", "target": "persistence"}, {"type": "contains", "source": "text_data\\persistence.txt:2286", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2286", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2287", "target": "selflastsnapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2287", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2287", "target": "selflastsnapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2287", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2287", "target": "nodesnapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2288", "target": "selflastsnapshotstatus"}, {"type": "contains", "source": "text_data\\persistence.txt:2288", "target": "start"}, {"type": "contains", "source": "text_data\\persistence.txt:2288", "target": "perfcounter"}, {"type": "contains", "source": "text_data\\persistence.txt:2288", "target": "selflastsnapshotduration"}, {"type": "contains", "source": "text_data\\persistence.txt:2288", "target": "exceptionsgraphnodestatuserrorcheckselflastsnapshotstatus"}, {"type": "contains", "source": "text_data\\persistence.txt:2289", "target": "selflastsnapshotstatus"}, {"type": "contains", "source": "text_data\\persistence.txt:2289", "target": "pending"}, {"type": "contains", "source": "text_data\\persistence.txt:2289", "target": "return"}, {"type": "contains", "source": "text_data\\persistence.txt:2289", "target": "selflastsnapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2289", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2290", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2290", "target": "lastsnapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2290", "target": "snapshotstatet"}, {"type": "contains", "source": "text_data\\persistence.txt:2290", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2290", "target": "fullstatepersistence"}, {"type": "contains", "source": "text_data\\persistence.txt:2291", "target": "source"}, {"type": "contains", "source": "text_data\\persistence.txt:2291", "target": "pydanticgraphpydanticgraphpersistenceinmempy"}, {"type": "contains", "source": "text_data\\persistence.txt:2292", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2292", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2292", "target": "persistence"}, {"type": "contains", "source": "text_data\\persistence.txt:2292", "target": "snapshots"}, {"type": "contains", "source": "text_data\\persistence.txt:2292", "target": "nodes"}, {"type": "contains", "source": "text_data\\persistence.txt:2293", "target": "nextnode"}, {"type": "contains", "source": "text_data\\persistence.txt:2293", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2293", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2293", "target": "statet"}, {"type": "contains", "source": "text_data\\persistence.txt:2293", "target": "basenodestatet"}, {"type": "contains", "source": "text_data\\persistence.txt:2294", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2294", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2294", "target": "nodesnapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2294", "target": "endsnapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2294", "target": "stateselfprepstatestate"}, {"type": "contains", "source": "text_data\\persistence.txt:2295", "target": "start"}, {"type": "contains", "source": "text_data\\persistence.txt:2295", "target": "perfcounter"}, {"type": "contains", "source": "text_data\\persistence.txt:2295", "target": "snapshotstatus"}, {"type": "contains", "source": "text_data\\persistence.txt:2295", "target": "snapshotduration"}, {"type": "contains", "source": "text_data\\persistence.txt:2295", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2296", "target": "return"}, {"type": "contains", "source": "text_data\\persistence.txt:2296", "target": "selfsnapshotstypeadapter"}, {"type": "contains", "source": "text_data\\persistence.txt:2296", "target": "bytes"}, {"type": "contains", "source": "text_data\\persistence.txt:2296", "target": "runendtype"}, {"type": "contains", "source": "text_data\\persistence.txt:2296", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2297", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2297", "target": "statet"}, {"type": "contains", "source": "text_data\\persistence.txt:2297", "target": "return"}, {"type": "contains", "source": "text_data\\persistence.txt:2297", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2297", "target": "assert"}, {"type": "contains", "source": "text_data\\persistence.txt:2298", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2298", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2298", "target": "nodes"}, {"type": "contains", "source": "text_data\\persistence.txt:2298", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2298", "target": "taken"}, {"type": "contains", "source": "text_data\\persistence.txt:2299", "target": "dumpjson"}, {"type": "contains", "source": "text_data\\persistence.txt:2299", "target": "bytes"}, {"type": "contains", "source": "text_data\\persistence.txt:2299", "target": "indent"}, {"type": "contains", "source": "text_data\\persistence.txt:2299", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2299", "target": "snapshots"}, {"type": "contains", "source": "text_data\\persistence.txt:2300", "target": "history"}, {"type": "contains", "source": "text_data\\persistence.txt:2300", "target": "loadjsonjsondata"}, {"type": "contains", "source": "text_data\\persistence.txt:2300", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\persistence.txt:2300", "target": "byteshttpsdocspythonorg3librarystdtypeshtmlbytes"}, {"type": "contains", "source": "text_data\\persistence.txt:2300", "target": "bytearrayhttpsdocspythonorg3librarystdtypeshtmlbytearray"}, {"type": "contains", "source": "text_data\\persistence.txt:2301", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2301", "target": "bases"}, {"type": "contains", "source": "text_data\\persistence.txt:2301", "target": "basestatepersistencestatet"}, {"type": "contains", "source": "text_data\\persistence.txt:2301", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2301", "target": "based"}, {"type": "contains", "source": "text_data\\persistence.txt:2305", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2305", "target": "persistence"}, {"type": "contains", "source": "text_data\\persistence.txt:2305", "target": "graph"}, {"type": "contains", "source": "text_data\\persistence.txt:2305", "target": "should"}, {"type": "contains", "source": "text_data\\persistence.txt:2305", "target": "run123abc"}, {"type": "contains", "source": "text_data\\persistence.txt:2306", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2306", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2306", "target": "await"}, {"type": "contains", "source": "text_data\\persistence.txt:2306", "target": "state"}, {"type": "contains", "source": "text_data\\persistence.txt:2306", "target": "statet"}, {"type": "contains", "source": "text_data\\persistence.txt:2307", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2307", "target": "await"}, {"type": "contains", "source": "text_data\\persistence.txt:2307", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2307", "target": "snapshots"}, {"type": "contains", "source": "text_data\\persistence.txt:2307", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2308", "target": "await"}, {"type": "contains", "source": "text_data\\persistence.txt:2308", "target": "start"}, {"type": "contains", "source": "text_data\\persistence.txt:2308", "target": "perfcounter"}, {"type": "contains", "source": "text_data\\persistence.txt:2308", "target": "duration"}, {"type": "contains", "source": "text_data\\persistence.txt:2308", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2309", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2309", "target": "snapshots"}, {"type": "contains", "source": "text_data\\persistence.txt:2309", "target": "await"}, {"type": "contains", "source": "text_data\\persistence.txt:2309", "target": "snapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2309", "target": "return"}, {"type": "contains", "source": "text_data\\persistence.txt:2310", "target": "return"}, {"type": "contains", "source": "text_data\\persistence.txt:2310", "target": "snapshots"}, {"type": "contains", "source": "text_data\\persistence.txt:2310", "target": "listsnapshotstatet"}, {"type": "contains", "source": "text_data\\persistence.txt:2310", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2310", "target": "snapshotid"}, {"type": "contains", "source": "text_data\\persistence.txt:2311", "target": "snapshots"}, {"type": "contains", "source": "text_data\\persistence.txt:2311", "target": "assert"}, {"type": "contains", "source": "text_data\\persistence.txt:2311", "target": "nodesnapshot"}, {"type": "contains", "source": "text_data\\persistence.txt:2311", "target": "listsnapshotstatet"}, {"type": "contains", "source": "text_data\\persistence.txt:2311", "target": "runendt"}, {"type": "contains", "source": "text_data\\persistence.txt:2312", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2312", "target": "await"}, {"type": "contains", "source": "text_data\\persistence.txt:2312", "target": "snapshots"}, {"type": "contains", "source": "text_data\\persistence.txt:2312", "target": "timeout"}, {"type": "contains", "source": "text_data\\persistence.txt:2312", "target": "appendsaveself"}, {"type": "contains", "source": "text_data\\persistence.txt:2313", "target": "lockid"}, {"type": "contains", "source": "text_data\\persistence.txt:2313", "target": "await"}, {"type": "contains", "source": "text_data\\persistence.txt:2313", "target": "timeout"}, {"type": "contains", "source": "text_data\\persistence.txt:2313", "target": "returns"}, {"type": "contains", "source": "text_data\\persistence.txt:2313", "target": "async"}, {"type": "contains", "source": "text_data\\persistence.txt:2314", "target": "should"}, {"type": "contains", "source": "text_data\\persistence.txt:2314", "target": "run123abc"}, {"type": "contains", "source": "text_data\\persistence.txt:2314", "target": "import"}, {"type": "contains", "source": "text_data\\persistence.txt:2314", "target": "shouldsettypes"}, {"type": "contains", "source": "text_data\\persistence.txt:2314", "target": "jsonfile"}, {"type": "contains", "source": "text_data\\persistence.txt:2315", "target": "whether"}, {"type": "contains", "source": "text_data\\persistence.txt:2315", "target": "types"}, {"type": "contains", "source": "text_data\\persistence.txt:2315", "target": "source"}, {"type": "contains", "source": "text_data\\persistence.txt:2315", "target": "pydanticgraphpydanticgraphpersistencefilepy"}, {"type": "contains", "source": "text_data\\persistence.txt:2315", "target": "shouldsettypesself"}, {"type": "contains", "source": "text_data\\providers.txt:2315", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\providers.txt:2315", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\providers.txt:2315", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\providers.txt:2315", "target": "v0050"}, {"type": "contains", "source": "text_data\\providers.txt:2315", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\providers.txt:2316", "target": "tools"}, {"type": "contains", "source": "text_data\\providers.txt:2316", "target": "contributing"}, {"type": "contains", "source": "text_data\\providers.txt:2316", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\providers.txt:2316", "target": "documentation"}, {"type": "contains", "source": "text_data\\providers.txt:2316", "target": "agents"}, {"type": "contains", "source": "text_data\\providers.txt:2317", "target": "input"}, {"type": "contains", "source": "text_data\\providers.txt:2317", "target": "image"}, {"type": "contains", "source": "text_data\\providers.txt:2317", "target": "audio"}, {"type": "contains", "source": "text_data\\providers.txt:2317", "target": "document"}, {"type": "contains", "source": "text_data\\providers.txt:2318", "target": "examples"}, {"type": "contains", "source": "text_data\\providers.txt:2318", "target": "client"}, {"type": "contains", "source": "text_data\\providers.txt:2318", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2318", "target": "server"}, {"type": "contains", "source": "text_data\\providers.txt:2318", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\providers.txt:2319", "target": "agent"}, {"type": "contains", "source": "text_data\\providers.txt:2319", "target": "stream"}, {"type": "contains", "source": "text_data\\providers.txt:2319", "target": "reference"}, {"type": "contains", "source": "text_data\\providers.txt:2319", "target": "pydantic"}, {"type": "contains", "source": "text_data\\providers.txt:2319", "target": "model"}, {"type": "contains", "source": "text_data\\providers.txt:2320", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\providers.txt:2320", "target": "result"}, {"type": "contains", "source": "text_data\\providers.txt:2320", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\providers.txt:2320", "target": "messages"}, {"type": "contains", "source": "text_data\\providers.txt:2320", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\providers.txt:2321", "target": "pydanticaiproviders"}, {"type": "contains", "source": "text_data\\providers.txt:2321", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\providers.txt:2321", "target": "modelsinstrumented"}, {"type": "contains", "source": "text_data\\providers.txt:2321", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\providers.txt:2321", "target": "modelsmistral"}, {"type": "contains", "source": "text_data\\providers.txt:2322", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\providers.txt:2322", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\providers.txt:2322", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\providers.txt:2322", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\providers.txt:2322", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\providers.txt:2323", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\providers.txt:2323", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\providers.txt:2323", "target": "pydanticevalsgeneration"}, {"type": "contains", "source": "text_data\\providers.txt:2324", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2324", "target": "client"}, {"type": "contains", "source": "text_data\\providers.txt:2324", "target": "table"}, {"type": "contains", "source": "text_data\\providers.txt:2324", "target": "contents"}, {"type": "contains", "source": "text_data\\providers.txt:2324", "target": "baseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2325", "target": "interface"}, {"type": "contains", "source": "text_data\\providers.txt:2325", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2325", "target": "supported"}, {"type": "contains", "source": "text_data\\providers.txt:2325", "target": "charge"}, {"type": "contains", "source": "text_data\\providers.txt:2325", "target": "providing"}, {"type": "contains", "source": "text_data\\providers.txt:2326", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2326", "target": "interface"}, {"type": "contains", "source": "text_data\\providers.txt:2326", "target": "class"}, {"type": "contains", "source": "text_data\\providers.txt:2326", "target": "client"}, {"type": "contains", "source": "text_data\\providers.txt:2326", "target": "supported"}, {"type": "contains", "source": "text_data\\providers.txt:2327", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2327", "target": "raise"}, {"type": "contains", "source": "text_data\\providers.txt:2327", "target": "notimplementederror"}, {"type": "contains", "source": "text_data\\providers.txt:2327", "target": "property"}, {"type": "contains", "source": "text_data\\providers.txt:2327", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\providers.txt:2328", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2328", "target": "client"}, {"type": "contains", "source": "text_data\\providers.txt:2328", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2328", "target": "baseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2328", "target": "abstractmethod"}, {"type": "contains", "source": "text_data\\providers.txt:2329", "target": "source"}, {"type": "contains", "source": "text_data\\providers.txt:2329", "target": "pydanticaislimpydanticaiprovidersgooglevertexpy"}, {"type": "contains", "source": "text_data\\providers.txt:2330", "target": "property"}, {"type": "contains", "source": "text_data\\providers.txt:2330", "target": "return"}, {"type": "contains", "source": "text_data\\providers.txt:2330", "target": "class"}, {"type": "contains", "source": "text_data\\providers.txt:2330", "target": "googlevertexproviderproviderhttpxasyncclient"}, {"type": "contains", "source": "text_data\\providers.txt:2330", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2331", "target": "serviceaccountfile"}, {"type": "contains", "source": "text_data\\providers.txt:2331", "target": "projectid"}, {"type": "contains", "source": "text_data\\providers.txt:2331", "target": "region"}, {"type": "contains", "source": "text_data\\providers.txt:2331", "target": "vertexairegion"}, {"type": "contains", "source": "text_data\\providers.txt:2331", "target": "uscentral1"}, {"type": "contains", "source": "text_data\\providers.txt:2332", "target": "serviceaccountfile"}, {"type": "contains", "source": "text_data\\providers.txt:2332", "target": "serviceaccountinfo"}, {"type": "contains", "source": "text_data\\providers.txt:2332", "target": "mappingstr"}, {"type": "contains", "source": "text_data\\providers.txt:2332", "target": "projectid"}, {"type": "contains", "source": "text_data\\providers.txt:2332", "target": "region"}, {"type": "contains", "source": "text_data\\providers.txt:2333", "target": "serviceaccountfile"}, {"type": "contains", "source": "text_data\\providers.txt:2333", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2333", "target": "credentials"}, {"type": "contains", "source": "text_data\\providers.txt:2333", "target": "region"}, {"type": "contains", "source": "text_data\\providers.txt:2333", "target": "publishers"}, {"type": "contains", "source": "text_data\\providers.txt:2334", "target": "serviceaccountinfo"}, {"type": "contains", "source": "text_data\\providers.txt:2334", "target": "serviceaccountfile"}, {"type": "contains", "source": "text_data\\providers.txt:2334", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2334", "target": "projectid"}, {"type": "contains", "source": "text_data\\providers.txt:2334", "target": "region"}, {"type": "contains", "source": "text_data\\providers.txt:2335", "target": "selfclientbaseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2335", "target": "selfbaseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2336", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2336", "target": "serviceaccountfile"}, {"type": "contains", "source": "text_data\\providers.txt:2336", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\providers.txt:2336", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\providers.txt:2336", "target": "projectid"}, {"type": "contains", "source": "text_data\\providers.txt:2337", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2337", "target": "serviceaccountinfo"}, {"type": "contains", "source": "text_data\\providers.txt:2337", "target": "mappinghttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcmapping"}, {"type": "contains", "source": "text_data\\providers.txt:2337", "target": "collectionsabcmappingstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2337", "target": "projectid"}, {"type": "contains", "source": "text_data\\providers.txt:2338", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2338", "target": "serviceaccountfile"}, {"type": "contains", "source": "text_data\\providers.txt:2338", "target": "pathhttpsdocspythonorg3librarypathlibhtmlpathlibpath"}, {"type": "contains", "source": "text_data\\providers.txt:2338", "target": "pathlibpath"}, {"type": "contains", "source": "text_data\\providers.txt:2338", "target": "serviceaccountinfo"}, {"type": "contains", "source": "text_data\\providers.txt:2339", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2339", "target": "asyncclient"}, {"type": "contains", "source": "text_data\\providers.txt:2340", "target": "create"}, {"type": "contains", "source": "text_data\\providers.txt:2340", "target": "vertex"}, {"type": "contains", "source": "text_data\\providers.txt:2340", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2340", "target": "parameters"}, {"type": "contains", "source": "text_data\\providers.txt:2341", "target": "default"}, {"type": "contains", "source": "text_data\\providers.txt:2341", "target": "serviceaccountfile"}, {"type": "contains", "source": "text_data\\providers.txt:2341", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2341", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2341", "target": "serviceaccountinfo"}, {"type": "contains", "source": "text_data\\providers.txt:2342", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2342", "target": "region"}, {"type": "contains", "source": "text_data\\providers.txt:2342", "target": "publishers"}, {"type": "contains", "source": "text_data\\providers.txt:2342", "target": "google"}, {"type": "contains", "source": "text_data\\providers.txt:2342", "target": "projectid"}, {"type": "contains", "source": "text_data\\providers.txt:2343", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2343", "target": "asyncclient"}, {"type": "contains", "source": "text_data\\providers.txt:2343", "target": "existing"}, {"type": "contains", "source": "text_data\\providers.txt:2343", "target": "httpxasyncclient"}, {"type": "contains", "source": "text_data\\providers.txt:2343", "target": "making"}, {"type": "contains", "source": "text_data\\providers.txt:2345", "target": "serviceaccountfile"}, {"type": "contains", "source": "text_data\\providers.txt:2345", "target": "serviceaccountinfo"}, {"type": "contains", "source": "text_data\\providers.txt:2345", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2345", "target": "default"}, {"type": "contains", "source": "text_data\\providers.txt:2345", "target": "environment"}, {"type": "contains", "source": "text_data\\providers.txt:2346", "target": "region"}, {"type": "contains", "source": "text_data\\providers.txt:2346", "target": "requests"}, {"type": "contains", "source": "text_data\\providers.txt:2346", "target": "publishers"}, {"type": "contains", "source": "text_data\\providers.txt:2346", "target": "projectid"}, {"type": "contains", "source": "text_data\\providers.txt:2346", "target": "project"}, {"type": "contains", "source": "text_data\\providers.txt:2347", "target": "serviceaccountinfo"}, {"type": "contains", "source": "text_data\\providers.txt:2347", "target": "serviceaccountfile"}, {"type": "contains", "source": "text_data\\providers.txt:2347", "target": "projectid"}, {"type": "contains", "source": "text_data\\providers.txt:2347", "target": "region"}, {"type": "contains", "source": "text_data\\providers.txt:2347", "target": "raise"}, {"type": "contains", "source": "text_data\\providers.txt:2348", "target": "bases"}, {"type": "contains", "source": "text_data\\providers.txt:2348", "target": "providerasyncopenai"}, {"type": "contains", "source": "text_data\\providers.txt:2348", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2348", "target": "openai"}, {"type": "contains", "source": "text_data\\providers.txt:2348", "target": "source"}, {"type": "contains", "source": "text_data\\providers.txt:2349", "target": "openai"}, {"type": "contains", "source": "text_data\\providers.txt:2349", "target": "property"}, {"type": "contains", "source": "text_data\\providers.txt:2349", "target": "return"}, {"type": "contains", "source": "text_data\\providers.txt:2349", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2349", "target": "asyncopenai"}, {"type": "contains", "source": "text_data\\providers.txt:2350", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2350", "target": "openai"}, {"type": "contains", "source": "text_data\\providers.txt:2350", "target": "baseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2350", "target": "environment"}, {"type": "contains", "source": "text_data\\providers.txt:2350", "target": "variable"}, {"type": "contains", "source": "text_data\\providers.txt:2351", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2351", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2351", "target": "baseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2351", "target": "openai"}, {"type": "contains", "source": "text_data\\providers.txt:2351", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2352", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2352", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2352", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2352", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2352", "target": "asyncopenaibaseurlbaseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2353", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2353", "target": "baseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2353", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2353", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2353", "target": "asyncopenai"}, {"type": "contains", "source": "text_data\\providers.txt:2354", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2354", "target": "baseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2354", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2354", "target": "environment"}, {"type": "contains", "source": "text_data\\providers.txt:2354", "target": "variable"}, {"type": "contains", "source": "text_data\\providers.txt:2355", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2355", "target": "asyncclient"}, {"type": "contains", "source": "text_data\\providers.txt:2355", "target": "existing"}, {"type": "contains", "source": "text_data\\providers.txt:2355", "target": "httpxasyncclient"}, {"type": "contains", "source": "text_data\\providers.txt:2355", "target": "making"}, {"type": "contains", "source": "text_data\\providers.txt:2357", "target": "baseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2357", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2357", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2357", "target": "openai"}, {"type": "contains", "source": "text_data\\providers.txt:2357", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2358", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2358", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2358", "target": "existing"}, {"type": "contains", "source": "text_data\\providers.txt:2358", "target": "client"}, {"type": "contains", "source": "text_data\\providers.txt:2358", "target": "baseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2359", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2359", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2359", "target": "assert"}, {"type": "contains", "source": "text_data\\providers.txt:2359", "target": "cannot"}, {"type": "contains", "source": "text_data\\providers.txt:2359", "target": "provide"}, {"type": "contains", "source": "text_data\\providers.txt:2360", "target": "bases"}, {"type": "contains", "source": "text_data\\providers.txt:2360", "target": "providerasyncopenai"}, {"type": "contains", "source": "text_data\\providers.txt:2360", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2360", "target": "deepseek"}, {"type": "contains", "source": "text_data\\providers.txt:2360", "target": "source"}, {"type": "contains", "source": "text_data\\providers.txt:2361", "target": "overload"}, {"type": "contains", "source": "text_data\\providers.txt:2361", "target": "initself"}, {"type": "contains", "source": "text_data\\providers.txt:2361", "target": "property"}, {"type": "contains", "source": "text_data\\providers.txt:2361", "target": "return"}, {"type": "contains", "source": "text_data\\providers.txt:2361", "target": "deepseek"}, {"type": "contains", "source": "text_data\\providers.txt:2362", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2362", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2362", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2362", "target": "asyncopenai"}, {"type": "contains", "source": "text_data\\providers.txt:2362", "target": "asynchttpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2363", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2363", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2363", "target": "asyncopenaibaseurlselfbaseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2363", "target": "apikeyapikey"}, {"type": "contains", "source": "text_data\\providers.txt:2363", "target": "httpclienthttpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2364", "target": "bases"}, {"type": "contains", "source": "text_data\\providers.txt:2364", "target": "providerbaseclient"}, {"type": "contains", "source": "text_data\\providers.txt:2364", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2364", "target": "bedrock"}, {"type": "contains", "source": "text_data\\providers.txt:2364", "target": "source"}, {"type": "contains", "source": "text_data\\providers.txt:2365", "target": "property"}, {"type": "contains", "source": "text_data\\providers.txt:2365", "target": "return"}, {"type": "contains", "source": "text_data\\providers.txt:2365", "target": "bedrock"}, {"type": "contains", "source": "text_data\\providers.txt:2365", "target": "baseclient"}, {"type": "contains", "source": "text_data\\providers.txt:2365", "target": "overload"}, {"type": "contains", "source": "text_data\\providers.txt:2366", "target": "float"}, {"type": "contains", "source": "text_data\\providers.txt:2366", "target": "awssessiontoken"}, {"type": "contains", "source": "text_data\\providers.txt:2366", "target": "awsreadtimeout"}, {"type": "contains", "source": "text_data\\providers.txt:2366", "target": "awsconnecttimeout"}, {"type": "contains", "source": "text_data\\providers.txt:2366", "target": "bedrockclient"}, {"type": "contains", "source": "text_data\\providers.txt:2367", "target": "access"}, {"type": "contains", "source": "text_data\\providers.txt:2367", "target": "awsreadtimeout"}, {"type": "contains", "source": "text_data\\providers.txt:2367", "target": "timeout"}, {"type": "contains", "source": "text_data\\providers.txt:2367", "target": "bedrock"}, {"type": "contains", "source": "text_data\\providers.txt:2367", "target": "client"}, {"type": "contains", "source": "text_data\\providers.txt:2368", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2368", "target": "boto3client"}, {"type": "contains", "source": "text_data\\providers.txt:2368", "target": "ignorereportunknownmembertype"}, {"type": "contains", "source": "text_data\\providers.txt:2368", "target": "bedrockruntime"}, {"type": "contains", "source": "text_data\\providers.txt:2368", "target": "awsaccesskeyidawsaccesskeyid"}, {"type": "contains", "source": "text_data\\providers.txt:2369", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2369", "target": "floathttpsdocspythonorg3libraryfunctionshtmlfloat"}, {"type": "contains", "source": "text_data\\providers.txt:2369", "target": "bedrockclient"}, {"type": "contains", "source": "text_data\\providers.txt:2369", "target": "baseclient"}, {"type": "contains", "source": "text_data\\providers.txt:2369", "target": "regionname"}, {"type": "contains", "source": "text_data\\providers.txt:2370", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2370", "target": "floathttpsdocspythonorg3libraryfunctionshtmlfloat"}, {"type": "contains", "source": "text_data\\providers.txt:2370", "target": "bedrockclient"}, {"type": "contains", "source": "text_data\\providers.txt:2370", "target": "baseclient"}, {"type": "contains", "source": "text_data\\providers.txt:2370", "target": "regionname"}, {"type": "contains", "source": "text_data\\providers.txt:2371", "target": "initialize"}, {"type": "contains", "source": "text_data\\providers.txt:2371", "target": "bedrock"}, {"type": "contains", "source": "text_data\\providers.txt:2371", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2371", "target": "parameters"}, {"type": "contains", "source": "text_data\\providers.txt:2372", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2372", "target": "access"}, {"type": "contains", "source": "text_data\\providers.txt:2372", "target": "description"}, {"type": "contains", "source": "text_data\\providers.txt:2372", "target": "default"}, {"type": "contains", "source": "text_data\\providers.txt:2372", "target": "bedrockclient"}, {"type": "contains", "source": "text_data\\providers.txt:2373", "target": "floathttpsdocspythonorg3libraryfunctionshtmlfloat"}, {"type": "contains", "source": "text_data\\providers.txt:2373", "target": "timeout"}, {"type": "contains", "source": "text_data\\providers.txt:2373", "target": "bedrock"}, {"type": "contains", "source": "text_data\\providers.txt:2373", "target": "client"}, {"type": "contains", "source": "text_data\\providers.txt:2373", "target": "awsreadtimeout"}, {"type": "contains", "source": "text_data\\providers.txt:2375", "target": "bedrockclient"}, {"type": "contains", "source": "text_data\\providers.txt:2375", "target": "regionname"}, {"type": "contains", "source": "text_data\\providers.txt:2375", "target": "awsaccesskeyid"}, {"type": "contains", "source": "text_data\\providers.txt:2375", "target": "awssecretaccesskey"}, {"type": "contains", "source": "text_data\\providers.txt:2375", "target": "awssessiontoken"}, {"type": "contains", "source": "text_data\\providers.txt:2376", "target": "awsreadtimeout"}, {"type": "contains", "source": "text_data\\providers.txt:2376", "target": "timeout"}, {"type": "contains", "source": "text_data\\providers.txt:2376", "target": "bedrock"}, {"type": "contains", "source": "text_data\\providers.txt:2376", "target": "client"}, {"type": "contains", "source": "text_data\\providers.txt:2376", "target": "awsconnecttimeout"}, {"type": "contains", "source": "text_data\\providers.txt:2377", "target": "awssecretaccesskeyawssecretaccesskey"}, {"type": "contains", "source": "text_data\\providers.txt:2377", "target": "awssessiontokenawssessiontoken"}, {"type": "contains", "source": "text_data\\providers.txt:2377", "target": "regionnameregionname"}, {"type": "contains", "source": "text_data\\providers.txt:2377", "target": "configconfigreadtimeoutreadtimeout"}, {"type": "contains", "source": "text_data\\providers.txt:2377", "target": "connecttimeoutconnecttimeout"}, {"type": "contains", "source": "text_data\\providers.txt:2378", "target": "bases"}, {"type": "contains", "source": "text_data\\providers.txt:2378", "target": "providerasyncgroq"}, {"type": "contains", "source": "text_data\\providers.txt:2378", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2378", "target": "source"}, {"type": "contains", "source": "text_data\\providers.txt:2378", "target": "pydanticaislimpydanticaiprovidersgroqpy"}, {"type": "contains", "source": "text_data\\providers.txt:2379", "target": "property"}, {"type": "contains", "source": "text_data\\providers.txt:2379", "target": "return"}, {"type": "contains", "source": "text_data\\providers.txt:2379", "target": "asyncgroq"}, {"type": "contains", "source": "text_data\\providers.txt:2379", "target": "overload"}, {"type": "contains", "source": "text_data\\providers.txt:2379", "target": "initself"}, {"type": "contains", "source": "text_data\\providers.txt:2380", "target": "groqclient"}, {"type": "contains", "source": "text_data\\providers.txt:2380", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2380", "target": "asynchttpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2380", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2380", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2381", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2381", "target": "groqclient"}, {"type": "contains", "source": "text_data\\providers.txt:2381", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2381", "target": "assert"}, {"type": "contains", "source": "text_data\\providers.txt:2381", "target": "cannot"}, {"type": "contains", "source": "text_data\\providers.txt:2382", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2382", "target": "cachedasynchttpclientprovidergroq"}, {"type": "contains", "source": "text_data\\providers.txt:2382", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2382", "target": "asyncgroqbaseurlselfbaseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2382", "target": "apikeyapikey"}, {"type": "contains", "source": "text_data\\providers.txt:2383", "target": "groqclient"}, {"type": "contains", "source": "text_data\\providers.txt:2383", "target": "asyncgroq"}, {"type": "contains", "source": "text_data\\providers.txt:2383", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2383", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2383", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2384", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2384", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2384", "target": "existing"}, {"type": "contains", "source": "text_data\\providers.txt:2384", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2384", "target": "create"}, {"type": "contains", "source": "text_data\\providers.txt:2386", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2386", "target": "groqclient"}, {"type": "contains", "source": "text_data\\providers.txt:2386", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2386", "target": "asynchttpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2386", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2387", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2387", "target": "groqclient"}, {"type": "contains", "source": "text_data\\providers.txt:2387", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2387", "target": "assert"}, {"type": "contains", "source": "text_data\\providers.txt:2387", "target": "cannot"}, {"type": "contains", "source": "text_data\\providers.txt:2388", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2388", "target": "cachedasynchttpclientprovidergroq"}, {"type": "contains", "source": "text_data\\providers.txt:2388", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2388", "target": "asyncgroqbaseurlselfbaseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2388", "target": "apikeyapikey"}, {"type": "contains", "source": "text_data\\providers.txt:2389", "target": "bases"}, {"type": "contains", "source": "text_data\\providers.txt:2389", "target": "providerasyncopenai"}, {"type": "contains", "source": "text_data\\providers.txt:2389", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2389", "target": "azure"}, {"type": "contains", "source": "text_data\\providers.txt:2389", "target": "openai"}, {"type": "contains", "source": "text_data\\providers.txt:2390", "target": "source"}, {"type": "contains", "source": "text_data\\providers.txt:2390", "target": "pydanticaislimpydanticaiprovidersazurepy"}, {"type": "contains", "source": "text_data\\providers.txt:2391", "target": "property"}, {"type": "contains", "source": "text_data\\providers.txt:2391", "target": "return"}, {"type": "contains", "source": "text_data\\providers.txt:2391", "target": "azure"}, {"type": "contains", "source": "text_data\\providers.txt:2391", "target": "selfbaseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2391", "target": "overload"}, {"type": "contains", "source": "text_data\\providers.txt:2392", "target": "apiversion"}, {"type": "contains", "source": "text_data\\providers.txt:2392", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2392", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2392", "target": "httpxasyncclient"}, {"type": "contains", "source": "text_data\\providers.txt:2392", "target": "azureendpoint"}, {"type": "contains", "source": "text_data\\providers.txt:2393", "target": "environment"}, {"type": "contains", "source": "text_data\\providers.txt:2393", "target": "variable"}, {"type": "contains", "source": "text_data\\providers.txt:2393", "target": "available"}, {"type": "contains", "source": "text_data\\providers.txt:2393", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2393", "target": "authentication"}, {"type": "contains", "source": "text_data\\providers.txt:2394", "target": "azureendpoint"}, {"type": "contains", "source": "text_data\\providers.txt:2394", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2394", "target": "provide"}, {"type": "contains", "source": "text_data\\providers.txt:2394", "target": "assert"}, {"type": "contains", "source": "text_data\\providers.txt:2394", "target": "cannot"}, {"type": "contains", "source": "text_data\\providers.txt:2395", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2395", "target": "openaiapikey"}, {"type": "contains", "source": "text_data\\providers.txt:2395", "target": "osenviron"}, {"type": "contains", "source": "text_data\\providers.txt:2395", "target": "pragma"}, {"type": "contains", "source": "text_data\\providers.txt:2395", "target": "cover"}, {"type": "contains", "source": "text_data\\providers.txt:2396", "target": "azureendpointazureendpoint"}, {"type": "contains", "source": "text_data\\providers.txt:2396", "target": "apikeyapikey"}, {"type": "contains", "source": "text_data\\providers.txt:2396", "target": "apiversionapiversion"}, {"type": "contains", "source": "text_data\\providers.txt:2396", "target": "httpclienthttpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2396", "target": "selfbaseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2397", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2397", "target": "azureendpoint"}, {"type": "contains", "source": "text_data\\providers.txt:2397", "target": "apiversion"}, {"type": "contains", "source": "text_data\\providers.txt:2397", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2397", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2398", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2398", "target": "asyncazureopenai"}, {"type": "contains", "source": "text_data\\providers.txt:2398", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2398", "target": "asyncclient"}, {"type": "contains", "source": "text_data\\providers.txt:2399", "target": "create"}, {"type": "contains", "source": "text_data\\providers.txt:2399", "target": "azure"}, {"type": "contains", "source": "text_data\\providers.txt:2399", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2399", "target": "parameters"}, {"type": "contains", "source": "text_data\\providers.txt:2400", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2400", "target": "authentication"}, {"type": "contains", "source": "text_data\\providers.txt:2400", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2400", "target": "environment"}, {"type": "contains", "source": "text_data\\providers.txt:2400", "target": "variable"}, {"type": "contains", "source": "text_data\\providers.txt:2401", "target": "existing"}, {"type": "contains", "source": "text_data\\providers.txt:2401", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2401", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2401", "target": "asyncazureopenai"}, {"type": "contains", "source": "text_data\\providers.txt:2401", "target": "asyncazureopenaihttpsgithubcomopenaiopenaipythonmicrosoftazureopenai"}, {"type": "contains", "source": "text_data\\providers.txt:2403", "target": "azureendpoint"}, {"type": "contains", "source": "text_data\\providers.txt:2403", "target": "apiversion"}, {"type": "contains", "source": "text_data\\providers.txt:2403", "target": "azure"}, {"type": "contains", "source": "text_data\\providers.txt:2403", "target": "authentication"}, {"type": "contains", "source": "text_data\\providers.txt:2403", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2404", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2404", "target": "environment"}, {"type": "contains", "source": "text_data\\providers.txt:2404", "target": "variable"}, {"type": "contains", "source": "text_data\\providers.txt:2404", "target": "available"}, {"type": "contains", "source": "text_data\\providers.txt:2404", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2405", "target": "azureendpoint"}, {"type": "contains", "source": "text_data\\providers.txt:2405", "target": "provide"}, {"type": "contains", "source": "text_data\\providers.txt:2405", "target": "openaiclient"}, {"type": "contains", "source": "text_data\\providers.txt:2405", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2405", "target": "assert"}, {"type": "contains", "source": "text_data\\providers.txt:2406", "target": "raise"}, {"type": "contains", "source": "text_data\\providers.txt:2406", "target": "usererror"}, {"type": "contains", "source": "text_data\\providers.txt:2406", "target": "provide"}, {"type": "contains", "source": "text_data\\providers.txt:2406", "target": "argument"}, {"type": "contains", "source": "text_data\\providers.txt:2406", "target": "environment"}, {"type": "contains", "source": "text_data\\providers.txt:2407", "target": "selfbaseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2407", "target": "strselfclientbaseurl"}, {"type": "contains", "source": "text_data\\providers.txt:2407", "target": "cohereprovider"}, {"type": "contains", "source": "text_data\\providers.txt:2408", "target": "bases"}, {"type": "contains", "source": "text_data\\providers.txt:2408", "target": "providerasyncclientv2"}, {"type": "contains", "source": "text_data\\providers.txt:2408", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2408", "target": "cohere"}, {"type": "contains", "source": "text_data\\providers.txt:2408", "target": "source"}, {"type": "contains", "source": "text_data\\providers.txt:2409", "target": "cohere"}, {"type": "contains", "source": "text_data\\providers.txt:2409", "target": "property"}, {"type": "contains", "source": "text_data\\providers.txt:2409", "target": "return"}, {"type": "contains", "source": "text_data\\providers.txt:2409", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2409", "target": "asyncclientv2"}, {"type": "contains", "source": "text_data\\providers.txt:2410", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2410", "target": "cohereclient"}, {"type": "contains", "source": "text_data\\providers.txt:2410", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2410", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2410", "target": "existing"}, {"type": "contains", "source": "text_data\\providers.txt:2411", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2411", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2411", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2411", "target": "cohereclient"}, {"type": "contains", "source": "text_data\\providers.txt:2411", "target": "osenvirongetcoapikey"}, {"type": "contains", "source": "text_data\\providers.txt:2412", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2412", "target": "cachedasynchttpclientprovidercohere"}, {"type": "contains", "source": "text_data\\providers.txt:2412", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2412", "target": "asyncclientv2apikeyapikey"}, {"type": "contains", "source": "text_data\\providers.txt:2412", "target": "httpxclienthttpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2413", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2413", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2413", "target": "cohereclient"}, {"type": "contains", "source": "text_data\\providers.txt:2413", "target": "asyncclientv2"}, {"type": "contains", "source": "text_data\\providers.txt:2413", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2414", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2414", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2414", "target": "existing"}, {"type": "contains", "source": "text_data\\providers.txt:2414", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2414", "target": "create"}, {"type": "contains", "source": "text_data\\providers.txt:2416", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2416", "target": "cohereclient"}, {"type": "contains", "source": "text_data\\providers.txt:2416", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2416", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2416", "target": "existing"}, {"type": "contains", "source": "text_data\\providers.txt:2417", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2417", "target": "cohereclient"}, {"type": "contains", "source": "text_data\\providers.txt:2417", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2417", "target": "assert"}, {"type": "contains", "source": "text_data\\providers.txt:2417", "target": "cannot"}, {"type": "contains", "source": "text_data\\providers.txt:2418", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2418", "target": "cachedasynchttpclientprovidercohere"}, {"type": "contains", "source": "text_data\\providers.txt:2418", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2418", "target": "asyncclientv2apikeyapikey"}, {"type": "contains", "source": "text_data\\providers.txt:2418", "target": "httpxclienthttpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2419", "target": "bases"}, {"type": "contains", "source": "text_data\\providers.txt:2419", "target": "providermistral"}, {"type": "contains", "source": "text_data\\providers.txt:2419", "target": "provider"}, {"type": "contains", "source": "text_data\\providers.txt:2419", "target": "mistral"}, {"type": "contains", "source": "text_data\\providers.txt:2419", "target": "source"}, {"type": "contains", "source": "text_data\\providers.txt:2420", "target": "mistral"}, {"type": "contains", "source": "text_data\\providers.txt:2420", "target": "property"}, {"type": "contains", "source": "text_data\\providers.txt:2420", "target": "return"}, {"type": "contains", "source": "text_data\\providers.txt:2420", "target": "overload"}, {"type": "contains", "source": "text_data\\providers.txt:2420", "target": "initself"}, {"type": "contains", "source": "text_data\\providers.txt:2421", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2421", "target": "mistralclient"}, {"type": "contains", "source": "text_data\\providers.txt:2421", "target": "mistral"}, {"type": "contains", "source": "text_data\\providers.txt:2421", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2421", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2422", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2422", "target": "mistralclient"}, {"type": "contains", "source": "text_data\\providers.txt:2422", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2422", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2422", "target": "assert"}, {"type": "contains", "source": "text_data\\providers.txt:2423", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2423", "target": "cachedasynchttpclientprovidermistral"}, {"type": "contains", "source": "text_data\\providers.txt:2423", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2423", "target": "mistralapikeyapikey"}, {"type": "contains", "source": "text_data\\providers.txt:2423", "target": "asyncclienthttpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2424", "target": "mistral"}, {"type": "contains", "source": "text_data\\providers.txt:2424", "target": "mistralclient"}, {"type": "contains", "source": "text_data\\providers.txt:2424", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2424", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\providers.txt:2424", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2425", "target": "mistral"}, {"type": "contains", "source": "text_data\\providers.txt:2425", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2425", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2425", "target": "existing"}, {"type": "contains", "source": "text_data\\providers.txt:2425", "target": "client"}, {"type": "contains", "source": "text_data\\providers.txt:2427", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2427", "target": "mistralclient"}, {"type": "contains", "source": "text_data\\providers.txt:2427", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2427", "target": "mistral"}, {"type": "contains", "source": "text_data\\providers.txt:2427", "target": "provided"}, {"type": "contains", "source": "text_data\\providers.txt:2428", "target": "apikey"}, {"type": "contains", "source": "text_data\\providers.txt:2428", "target": "selfclient"}, {"type": "contains", "source": "text_data\\providers.txt:2428", "target": "mistralclient"}, {"type": "contains", "source": "text_data\\providers.txt:2428", "target": "httpclient"}, {"type": "contains", "source": "text_data\\providers.txt:2428", "target": "mistralapikeyapikey"}, {"type": "contains", "source": "text_data\\providers.txt:2429", "target": "pydantic"}, {"type": "contains", "source": "text_data\\providers.txt:2429", "target": "services"}, {"type": "contains", "source": "text_data\\providers.txt:2429", "target": "present"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2429", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2429", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2429", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2429", "target": "v0050"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2429", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2430", "target": "tools"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2430", "target": "contributing"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2430", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2430", "target": "documentation"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2430", "target": "agents"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2431", "target": "input"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2431", "target": "image"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2431", "target": "audio"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2431", "target": "document"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2432", "target": "examples"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2432", "target": "client"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2432", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2432", "target": "server"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2432", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2433", "target": "pydantic"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2433", "target": "model"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2433", "target": "example"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2433", "target": "stream"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2433", "target": "reference"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2434", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2434", "target": "apimessages"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2434", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2434", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2434", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2435", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2435", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2435", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2435", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2435", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2436", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2436", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2436", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2436", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2436", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2437", "target": "example"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2437", "target": "running"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2437", "target": "pydantic"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2437", "target": "model"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2437", "target": "using"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2438", "target": "pydanticaimodelgemini15pro"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2438", "target": "pydanticaiexamplespydanticmodel"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2438", "target": "pipuv"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2438", "target": "python"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2438", "target": "pydanticaimodelgemini15flash"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2439", "target": "import"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2439", "target": "model"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2439", "target": "example"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2439", "target": "logfire"}, {"type": "contains", "source": "text_data\\pydantic-model.txt:2439", "target": "pydantic"}, {"type": "contains", "source": "text_data\\question-graph.txt:2439", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\question-graph.txt:2439", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\question-graph.txt:2439", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\question-graph.txt:2439", "target": "v0050"}, {"type": "contains", "source": "text_data\\question-graph.txt:2439", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\question-graph.txt:2440", "target": "tools"}, {"type": "contains", "source": "text_data\\question-graph.txt:2440", "target": "contributing"}, {"type": "contains", "source": "text_data\\question-graph.txt:2440", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\question-graph.txt:2440", "target": "documentation"}, {"type": "contains", "source": "text_data\\question-graph.txt:2440", "target": "agents"}, {"type": "contains", "source": "text_data\\question-graph.txt:2441", "target": "input"}, {"type": "contains", "source": "text_data\\question-graph.txt:2441", "target": "image"}, {"type": "contains", "source": "text_data\\question-graph.txt:2441", "target": "audio"}, {"type": "contains", "source": "text_data\\question-graph.txt:2441", "target": "document"}, {"type": "contains", "source": "text_data\\question-graph.txt:2442", "target": "examples"}, {"type": "contains", "source": "text_data\\question-graph.txt:2442", "target": "client"}, {"type": "contains", "source": "text_data\\question-graph.txt:2442", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\question-graph.txt:2442", "target": "server"}, {"type": "contains", "source": "text_data\\question-graph.txt:2442", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\question-graph.txt:2443", "target": "stream"}, {"type": "contains", "source": "text_data\\question-graph.txt:2443", "target": "question"}, {"type": "contains", "source": "text_data\\question-graph.txt:2443", "target": "graph"}, {"type": "contains", "source": "text_data\\question-graph.txt:2443", "target": "example"}, {"type": "contains", "source": "text_data\\question-graph.txt:2443", "target": "reference"}, {"type": "contains", "source": "text_data\\question-graph.txt:2444", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\question-graph.txt:2444", "target": "apimessages"}, {"type": "contains", "source": "text_data\\question-graph.txt:2444", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\question-graph.txt:2444", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\question-graph.txt:2444", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\question-graph.txt:2445", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\question-graph.txt:2445", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\question-graph.txt:2445", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\question-graph.txt:2445", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\question-graph.txt:2445", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\question-graph.txt:2446", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\question-graph.txt:2446", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\question-graph.txt:2446", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\question-graph.txt:2446", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\question-graph.txt:2446", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\question-graph.txt:2447", "target": "example"}, {"type": "contains", "source": "text_data\\question-graph.txt:2447", "target": "running"}, {"type": "contains", "source": "text_data\\question-graph.txt:2447", "target": "graph"}, {"type": "contains", "source": "text_data\\question-graph.txt:2447", "target": "pydanticaiexamplesquestiongraph"}, {"type": "contains", "source": "text_data\\question-graph.txt:2447", "target": "table"}, {"type": "contains", "source": "text_data\\question-graph.txt:2448", "target": "import"}, {"type": "contains", "source": "text_data\\question-graph.txt:2448", "target": "annotations"}, {"type": "contains", "source": "text_data\\question-graph.txt:2448", "target": "logfire"}, {"type": "contains", "source": "text_data\\question-graph.txt:2448", "target": "future"}, {"type": "contains", "source": "text_data\\question-graph.txt:2448", "target": "dataclasses"}, {"type": "contains", "source": "text_data\\question-graph.txt:2449", "target": "dataclass"}, {"type": "contains", "source": "text_data\\question-graph.txt:2449", "target": "class"}, {"type": "contains", "source": "text_data\\question-graph.txt:2449", "target": "question"}, {"type": "contains", "source": "text_data\\question-graph.txt:2449", "target": "listmodelmessage"}, {"type": "contains", "source": "text_data\\question-graph.txt:2449", "target": "fielddefaultfactorylist"}, {"type": "contains", "source": "text_data\\question-graph.txt:2450", "target": "answer"}, {"type": "contains", "source": "text_data\\question-graph.txt:2450", "target": "class"}, {"type": "contains", "source": "text_data\\question-graph.txt:2450", "target": "correct"}, {"type": "contains", "source": "text_data\\question-graph.txt:2450", "target": "dataclass"}, {"type": "contains", "source": "text_data\\question-graph.txt:2450", "target": "question"}, {"type": "contains", "source": "text_data\\question-graph.txt:2451", "target": "dataclass"}, {"type": "contains", "source": "text_data\\question-graph.txt:2451", "target": "class"}, {"type": "contains", "source": "text_data\\question-graph.txt:2451", "target": "answer"}, {"type": "contains", "source": "text_data\\question-graph.txt:2451", "target": "ctxstatequestion"}, {"type": "contains", "source": "text_data\\question-graph.txt:2451", "target": "return"}, {"type": "contains", "source": "text_data\\question-graph.txt:2452", "target": "async"}, {"type": "contains", "source": "text_data\\question-graph.txt:2452", "target": "dataclass"}, {"type": "contains", "source": "text_data\\question-graph.txt:2452", "target": "class"}, {"type": "contains", "source": "text_data\\question-graph.txt:2452", "target": "reprimandbasenodequestionstate"}, {"type": "contains", "source": "text_data\\question-graph.txt:2452", "target": "comment"}, {"type": "contains", "source": "text_data\\question-graph.txt:2453", "target": "await"}, {"type": "contains", "source": "text_data\\question-graph.txt:2453", "target": "answer"}, {"type": "contains", "source": "text_data\\question-graph.txt:2453", "target": "state"}, {"type": "contains", "source": "text_data\\question-graph.txt:2453", "target": "persistencesetgraphtypesquestiongraph"}, {"type": "contains", "source": "text_data\\question-graph.txt:2453", "target": "snapshot"}, {"type": "contains", "source": "text_data\\question-graph.txt:2454", "target": "history"}, {"type": "contains", "source": "text_data\\question-graph.txt:2454", "target": "break"}, {"type": "contains", "source": "text_data\\question-graph.txt:2454", "target": "import"}, {"type": "contains", "source": "text_data\\question-graph.txt:2454", "target": "subcommand"}, {"type": "contains", "source": "text_data\\question-graph.txt:2454", "target": "await"}, {"type": "contains", "source": "text_data\\question-graph.txt:2455", "target": "pydanticaiexamplesquestiongraph"}, {"type": "contains", "source": "text_data\\question-graph.txt:2455", "target": "subcommand"}, {"type": "contains", "source": "text_data\\question-graph.txt:2455", "target": "continuousn"}, {"type": "contains", "source": "text_data\\question-graph.txt:2455", "target": "answer"}, {"type": "contains", "source": "text_data\\question-graph.txt:2455", "target": "filesysstderr"}, {"type": "contains", "source": "text_data\\question-graph.txt:2456", "target": "mermaid"}, {"type": "contains", "source": "text_data\\question-graph.txt:2456", "target": "diagram"}, {"type": "contains", "source": "text_data\\question-graph.txt:2456", "target": "generated"}, {"type": "contains", "source": "text_data\\question-graph.txt:2456", "target": "example"}, {"type": "contains", "source": "text_data\\question-graph.txt:2456", "target": "looks"}, {"type": "contains", "source": "text_data\\rag.txt:2456", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\rag.txt:2456", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\rag.txt:2456", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\rag.txt:2456", "target": "v0050"}, {"type": "contains", "source": "text_data\\rag.txt:2456", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\rag.txt:2457", "target": "tools"}, {"type": "contains", "source": "text_data\\rag.txt:2457", "target": "contributing"}, {"type": "contains", "source": "text_data\\rag.txt:2457", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\rag.txt:2457", "target": "documentation"}, {"type": "contains", "source": "text_data\\rag.txt:2457", "target": "agents"}, {"type": "contains", "source": "text_data\\rag.txt:2458", "target": "input"}, {"type": "contains", "source": "text_data\\rag.txt:2458", "target": "image"}, {"type": "contains", "source": "text_data\\rag.txt:2458", "target": "audio"}, {"type": "contains", "source": "text_data\\rag.txt:2458", "target": "document"}, {"type": "contains", "source": "text_data\\rag.txt:2459", "target": "examples"}, {"type": "contains", "source": "text_data\\rag.txt:2459", "target": "client"}, {"type": "contains", "source": "text_data\\rag.txt:2459", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\rag.txt:2459", "target": "server"}, {"type": "contains", "source": "text_data\\rag.txt:2459", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\rag.txt:2460", "target": "stream"}, {"type": "contains", "source": "text_data\\rag.txt:2460", "target": "reference"}, {"type": "contains", "source": "text_data\\rag.txt:2460", "target": "pydantic"}, {"type": "contains", "source": "text_data\\rag.txt:2460", "target": "model"}, {"type": "contains", "source": "text_data\\rag.txt:2460", "target": "pydanticmodel"}, {"type": "contains", "source": "text_data\\rag.txt:2461", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\rag.txt:2461", "target": "apimessages"}, {"type": "contains", "source": "text_data\\rag.txt:2461", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\rag.txt:2461", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\rag.txt:2461", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\rag.txt:2462", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\rag.txt:2462", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\rag.txt:2462", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\rag.txt:2462", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\rag.txt:2462", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\rag.txt:2463", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\rag.txt:2463", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\rag.txt:2463", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\rag.txt:2463", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\rag.txt:2463", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\rag.txt:2464", "target": "search"}, {"type": "contains", "source": "text_data\\rag.txt:2464", "target": "example"}, {"type": "contains", "source": "text_data\\rag.txt:2464", "target": "documentation"}, {"type": "contains", "source": "text_data\\rag.txt:2464", "target": "agent"}, {"type": "contains", "source": "text_data\\rag.txt:2464", "target": "database"}, {"type": "contains", "source": "text_data\\rag.txt:2465", "target": "postgres"}, {"type": "contains", "source": "text_data\\rag.txt:2465", "target": "running"}, {"type": "contains", "source": "text_data\\rag.txt:2465", "target": "mkdir"}, {"type": "contains", "source": "text_data\\rag.txt:2465", "target": "postgresdata"}, {"type": "contains", "source": "text_data\\rag.txt:2465", "target": "docker"}, {"type": "contains", "source": "text_data\\rag.txt:2466", "target": "pydanticaiexamplesrag"}, {"type": "contains", "source": "text_data\\rag.txt:2466", "target": "pipuv"}, {"type": "contains", "source": "text_data\\rag.txt:2466", "target": "python"}, {"type": "contains", "source": "text_data\\rag.txt:2466", "target": "build"}, {"type": "contains", "source": "text_data\\rag.txt:2466", "target": "search"}, {"type": "contains", "source": "text_data\\rag.txt:2467", "target": "import"}, {"type": "contains", "source": "text_data\\rag.txt:2467", "target": "annotations"}, {"type": "contains", "source": "text_data\\rag.txt:2467", "target": "dataclass"}, {"type": "contains", "source": "text_data\\rag.txt:2467", "target": "logfire"}, {"type": "contains", "source": "text_data\\rag.txt:2467", "target": "openai"}, {"type": "contains", "source": "text_data\\rag.txt:2468", "target": "searchquery"}, {"type": "contains", "source": "text_data\\rag.txt:2468", "target": "search"}, {"type": "contains", "source": "text_data\\rag.txt:2468", "target": "query"}, {"type": "contains", "source": "text_data\\rag.txt:2468", "target": "context"}, {"type": "contains", "source": "text_data\\rag.txt:2468", "target": "embedding"}, {"type": "contains", "source": "text_data\\rag.txt:2469", "target": "embedding"}, {"type": "contains", "source": "text_data\\rag.txt:2469", "target": "lenembeddingdata"}, {"type": "contains", "source": "text_data\\rag.txt:2469", "target": "embeddingjson"}, {"type": "contains", "source": "text_data\\rag.txt:2469", "target": "assert"}, {"type": "contains", "source": "text_data\\rag.txt:2469", "target": "fexpected"}, {"type": "contains", "source": "text_data\\rag.txt:2470", "target": "openai"}, {"type": "contains", "source": "text_data\\rag.txt:2470", "target": "asyncopenai"}, {"type": "contains", "source": "text_data\\rag.txt:2470", "target": "logfireinstrumentopenaiopenai"}, {"type": "contains", "source": "text_data\\rag.txt:2470", "target": "logfireinfoasking"}, {"type": "contains", "source": "text_data\\rag.txt:2470", "target": "question"}, {"type": "contains", "source": "text_data\\rag.txt:2471", "target": "async"}, {"type": "contains", "source": "text_data\\rag.txt:2471", "target": "docsjson"}, {"type": "contains", "source": "text_data\\rag.txt:2471", "target": "httpsgistgithubusercontentcom"}, {"type": "contains", "source": "text_data\\rag.txt:2471", "target": "samuelcolvin4b5bb9bb163b1122ff17e29e48c10992raw"}, {"type": "contains", "source": "text_data\\rag.txt:2471", "target": "80c5925c42f1442c24963aaf5eb1a324d47afe95logfiredocsjson"}, {"type": "contains", "source": "text_data\\rag.txt:2472", "target": "async"}, {"type": "contains", "source": "text_data\\rag.txt:2472", "target": "section"}, {"type": "contains", "source": "text_data\\rag.txt:2472", "target": "await"}, {"type": "contains", "source": "text_data\\rag.txt:2472", "target": "openai"}, {"type": "contains", "source": "text_data\\rag.txt:2472", "target": "exists"}, {"type": "contains", "source": "text_data\\rag.txt:2473", "target": "embedding"}, {"type": "contains", "source": "text_data\\rag.txt:2473", "target": "await"}, {"type": "contains", "source": "text_data\\rag.txt:2473", "target": "lenembeddingdata"}, {"type": "contains", "source": "text_data\\rag.txt:2473", "target": "section"}, {"type": "contains", "source": "text_data\\rag.txt:2473", "target": "return"}, {"type": "contains", "source": "text_data\\rag.txt:2474", "target": "selfpath"}, {"type": "contains", "source": "text_data\\rag.txt:2474", "target": "return"}, {"type": "contains", "source": "text_data\\rag.txt:2474", "target": "pyright"}, {"type": "contains", "source": "text_data\\rag.txt:2474", "target": "sectiontitle"}, {"type": "contains", "source": "text_data\\rag.txt:2474", "target": "sectioncontent"}, {"type": "contains", "source": "text_data\\rag.txt:2475", "target": "database"}, {"type": "contains", "source": "text_data\\rag.txt:2475", "target": "await"}, {"type": "contains", "source": "text_data\\rag.txt:2475", "target": "createdb"}, {"type": "contains", "source": "text_data\\rag.txt:2475", "target": "dbexists"}, {"type": "contains", "source": "text_data\\rag.txt:2475", "target": "pyright"}, {"type": "contains", "source": "text_data\\rag.txt:2476", "target": "await"}, {"type": "contains", "source": "text_data\\rag.txt:2476", "target": "create"}, {"type": "contains", "source": "text_data\\rag.txt:2476", "target": "exists"}, {"type": "contains", "source": "text_data\\rag.txt:2476", "target": "finally"}, {"type": "contains", "source": "text_data\\rag.txt:2476", "target": "vector"}, {"type": "contains", "source": "text_data\\rag.txt:2477", "target": "value"}, {"type": "contains", "source": "text_data\\rag.txt:2477", "target": "separator"}, {"type": "contains", "source": "text_data\\rag.txt:2477", "target": "unicode"}, {"type": "contains", "source": "text_data\\rag.txt:2477", "target": "action"}, {"type": "contains", "source": "text_data\\rag.txt:2477", "target": "slugifyvalue"}, {"type": "contains", "source": "text_data\\rag.txt:2478", "target": "action"}, {"type": "contains", "source": "text_data\\rag.txt:2478", "target": "build"}, {"type": "contains", "source": "text_data\\rag.txt:2478", "target": "asynciorunbuildsearchdb"}, {"type": "contains", "source": "text_data\\rag.txt:2478", "target": "search"}, {"type": "contains", "source": "text_data\\rag.txt:2478", "target": "lensysargv"}, {"type": "contains", "source": "text_data\\rag.txt:2479", "target": "pydantic"}, {"type": "contains", "source": "text_data\\rag.txt:2479", "target": "services"}, {"type": "contains", "source": "text_data\\rag.txt:2479", "target": "present"}, {"type": "contains", "source": "text_data\\reporting.txt:2479", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\reporting.txt:2479", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\reporting.txt:2479", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\reporting.txt:2479", "target": "v0050"}, {"type": "contains", "source": "text_data\\reporting.txt:2479", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\reporting.txt:2480", "target": "tools"}, {"type": "contains", "source": "text_data\\reporting.txt:2480", "target": "contributing"}, {"type": "contains", "source": "text_data\\reporting.txt:2480", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\reporting.txt:2480", "target": "documentation"}, {"type": "contains", "source": "text_data\\reporting.txt:2480", "target": "agents"}, {"type": "contains", "source": "text_data\\reporting.txt:2481", "target": "evals"}, {"type": "contains", "source": "text_data\\reporting.txt:2481", "target": "input"}, {"type": "contains", "source": "text_data\\reporting.txt:2481", "target": "graphs"}, {"type": "contains", "source": "text_data\\reporting.txt:2481", "target": "graph"}, {"type": "contains", "source": "text_data\\reporting.txt:2481", "target": "image"}, {"type": "contains", "source": "text_data\\reporting.txt:2482", "target": "examples"}, {"type": "contains", "source": "text_data\\reporting.txt:2482", "target": "client"}, {"type": "contains", "source": "text_data\\reporting.txt:2482", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\reporting.txt:2482", "target": "server"}, {"type": "contains", "source": "text_data\\reporting.txt:2482", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\reporting.txt:2483", "target": "agent"}, {"type": "contains", "source": "text_data\\reporting.txt:2483", "target": "stream"}, {"type": "contains", "source": "text_data\\reporting.txt:2483", "target": "reference"}, {"type": "contains", "source": "text_data\\reporting.txt:2483", "target": "pydantic"}, {"type": "contains", "source": "text_data\\reporting.txt:2483", "target": "model"}, {"type": "contains", "source": "text_data\\reporting.txt:2484", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\reporting.txt:2484", "target": "result"}, {"type": "contains", "source": "text_data\\reporting.txt:2484", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\reporting.txt:2484", "target": "messages"}, {"type": "contains", "source": "text_data\\reporting.txt:2484", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\reporting.txt:2485", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\reporting.txt:2485", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\reporting.txt:2485", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\reporting.txt:2485", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\reporting.txt:2485", "target": "modelsgroq"}, {"type": "contains", "source": "text_data\\reporting.txt:2486", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\reporting.txt:2486", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\reporting.txt:2486", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\reporting.txt:2486", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\reporting.txt:2486", "target": "dataset"}, {"type": "contains", "source": "text_data\\reporting.txt:2487", "target": "diffformatter"}, {"type": "contains", "source": "text_data\\reporting.txt:2487", "target": "diffatol"}, {"type": "contains", "source": "text_data\\reporting.txt:2487", "target": "diffrtol"}, {"type": "contains", "source": "text_data\\reporting.txt:2487", "target": "diffincreasestyle"}, {"type": "contains", "source": "text_data\\reporting.txt:2487", "target": "diffdecreasestyle"}, {"type": "contains", "source": "text_data\\reporting.txt:2488", "target": "reportcase"}, {"type": "contains", "source": "text_data\\reporting.txt:2488", "target": "table"}, {"type": "contains", "source": "text_data\\reporting.txt:2488", "target": "contents"}, {"type": "contains", "source": "text_data\\reporting.txt:2488", "target": "reporting"}, {"type": "contains", "source": "text_data\\reporting.txt:2488", "target": "inputs"}, {"type": "contains", "source": "text_data\\reporting.txt:2489", "target": "source"}, {"type": "contains", "source": "text_data\\reporting.txt:2489", "target": "pydanticevalspydanticevalsreportinginitpy"}, {"type": "contains", "source": "text_data\\reporting.txt:2490", "target": "output"}, {"type": "contains", "source": "text_data\\reporting.txt:2490", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2490", "target": "inputs"}, {"type": "contains", "source": "text_data\\reporting.txt:2490", "target": "metadata"}, {"type": "contains", "source": "text_data\\reporting.txt:2490", "target": "float"}, {"type": "contains", "source": "text_data\\reporting.txt:2491", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2491", "target": "float"}, {"type": "contains", "source": "text_data\\reporting.txt:2491", "target": "fieldinitfalse"}, {"type": "contains", "source": "text_data\\reporting.txt:2491", "target": "scores"}, {"type": "contains", "source": "text_data\\reporting.txt:2491", "target": "evaluationresultint"}, {"type": "contains", "source": "text_data\\reporting.txt:2492", "target": "inputs"}, {"type": "contains", "source": "text_data\\reporting.txt:2492", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\reporting.txt:2492", "target": "metadata"}, {"type": "contains", "source": "text_data\\reporting.txt:2492", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\reporting.txt:2492", "target": "typingany"}, {"type": "contains", "source": "text_data\\reporting.txt:2493", "target": "output"}, {"type": "contains", "source": "text_data\\reporting.txt:2493", "target": "expectedoutput"}, {"type": "contains", "source": "text_data\\reporting.txt:2493", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\reporting.txt:2493", "target": "anyhttpsdocspythonorg3librarytypinghtmltypingany"}, {"type": "contains", "source": "text_data\\reporting.txt:2493", "target": "typingany"}, {"type": "contains", "source": "text_data\\reporting.txt:2494", "target": "source"}, {"type": "contains", "source": "text_data\\reporting.txt:2494", "target": "pydanticevalspydanticevalsreportinginitpy"}, {"type": "contains", "source": "text_data\\reporting.txt:2495", "target": "float"}, {"type": "contains", "source": "text_data\\reporting.txt:2495", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2495", "target": "synthetic"}, {"type": "contains", "source": "text_data\\reporting.txt:2495", "target": "scores"}, {"type": "contains", "source": "text_data\\reporting.txt:2495", "target": "labels"}, {"type": "contains", "source": "text_data\\reporting.txt:2496", "target": "float"}, {"type": "contains", "source": "text_data\\reporting.txt:2496", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2496", "target": "sumsbyname"}, {"type": "contains", "source": "text_data\\reporting.txt:2496", "target": "score"}, {"type": "contains", "source": "text_data\\reporting.txt:2496", "target": "countsbynamename"}, {"type": "contains", "source": "text_data\\reporting.txt:2497", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2497", "target": "float"}, {"type": "contains", "source": "text_data\\reporting.txt:2497", "target": "sumsbyname"}, {"type": "contains", "source": "text_data\\reporting.txt:2497", "target": "countsbynamename"}, {"type": "contains", "source": "text_data\\reporting.txt:2497", "target": "value"}, {"type": "contains", "source": "text_data\\reporting.txt:2498", "target": "cases"}, {"type": "contains", "source": "text_data\\reporting.txt:2498", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2498", "target": "float"}, {"type": "contains", "source": "text_data\\reporting.txt:2498", "target": "vvalue"}, {"type": "contains", "source": "text_data\\reporting.txt:2498", "target": "averageassertions"}, {"type": "contains", "source": "text_data\\reporting.txt:2499", "target": "nassertions"}, {"type": "contains", "source": "text_data\\reporting.txt:2499", "target": "cases"}, {"type": "contains", "source": "text_data\\reporting.txt:2499", "target": "npassing"}, {"type": "contains", "source": "text_data\\reporting.txt:2499", "target": "sumlencaseassertions"}, {"type": "contains", "source": "text_data\\reporting.txt:2499", "target": "assertion"}, {"type": "contains", "source": "text_data\\reporting.txt:2500", "target": "averagecases"}, {"type": "contains", "source": "text_data\\reporting.txt:2500", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistreportcase"}, {"type": "contains", "source": "text_data\\reporting.txt:2500", "target": "reportcaseaggregate"}, {"type": "contains", "source": "text_data\\reporting.txt:2500", "target": "produce"}, {"type": "contains", "source": "text_data\\reporting.txt:2500", "target": "synthetic"}, {"type": "contains", "source": "text_data\\reporting.txt:2501", "target": "float"}, {"type": "contains", "source": "text_data\\reporting.txt:2501", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2501", "target": "reportcaseaggregate"}, {"type": "contains", "source": "text_data\\reporting.txt:2501", "target": "numcases"}, {"type": "contains", "source": "text_data\\reporting.txt:2501", "target": "staticmethod"}, {"type": "contains", "source": "text_data\\reporting.txt:2502", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2502", "target": "countsbynamename"}, {"type": "contains", "source": "text_data\\reporting.txt:2502", "target": "score"}, {"type": "contains", "source": "text_data\\reporting.txt:2502", "target": "sumsbynamename"}, {"type": "contains", "source": "text_data\\reporting.txt:2502", "target": "return"}, {"type": "contains", "source": "text_data\\reporting.txt:2503", "target": "cases"}, {"type": "contains", "source": "text_data\\reporting.txt:2503", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2503", "target": "float"}, {"type": "contains", "source": "text_data\\reporting.txt:2503", "target": "value"}, {"type": "contains", "source": "text_data\\reporting.txt:2503", "target": "count"}, {"type": "contains", "source": "text_data\\reporting.txt:2504", "target": "cases"}, {"type": "contains", "source": "text_data\\reporting.txt:2504", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2504", "target": "float"}, {"type": "contains", "source": "text_data\\reporting.txt:2504", "target": "nassertions"}, {"type": "contains", "source": "text_data\\reporting.txt:2504", "target": "averageassertions"}, {"type": "contains", "source": "text_data\\reporting.txt:2505", "target": "metricsaveragemetrics"}, {"type": "contains", "source": "text_data\\reporting.txt:2505", "target": "assertionsaverageassertions"}, {"type": "contains", "source": "text_data\\reporting.txt:2505", "target": "taskdurationaveragetaskduration"}, {"type": "contains", "source": "text_data\\reporting.txt:2505", "target": "totaldurationaveragetotalduration"}, {"type": "contains", "source": "text_data\\reporting.txt:2505", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\reporting.txt:2506", "target": "bases"}, {"type": "contains", "source": "text_data\\reporting.txt:2506", "target": "basemodelhttpsdocspydanticdevlatestapibasemodelpydanticbasemodel"}, {"type": "contains", "source": "text_data\\reporting.txt:2506", "target": "pydanticbasemodel"}, {"type": "contains", "source": "text_data\\reporting.txt:2506", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2506", "target": "results"}, {"type": "contains", "source": "text_data\\reporting.txt:2510", "target": "false"}, {"type": "contains", "source": "text_data\\reporting.txt:2510", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2510", "target": "cases"}, {"type": "contains", "source": "text_data\\reporting.txt:2510", "target": "class"}, {"type": "contains", "source": "text_data\\reporting.txt:2510", "target": "evaluationreportbasemodel"}, {"type": "contains", "source": "text_data\\reporting.txt:2511", "target": "rendervalueconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2511", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2511", "target": "rendernumberconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2511", "target": "false"}, {"type": "contains", "source": "text_data\\reporting.txt:2511", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2512", "target": "control"}, {"type": "contains", "source": "text_data\\reporting.txt:2512", "target": "output"}, {"type": "contains", "source": "text_data\\reporting.txt:2512", "target": "consoletable"}, {"type": "contains", "source": "text_data\\reporting.txt:2512", "target": "instead"}, {"type": "contains", "source": "text_data\\reporting.txt:2512", "target": "richconsoleprint"}, {"type": "contains", "source": "text_data\\reporting.txt:2513", "target": "false"}, {"type": "contains", "source": "text_data\\reporting.txt:2513", "target": "outputconfigoutputconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2513", "target": "scoreconfigsscoreconfigs"}, {"type": "contains", "source": "text_data\\reporting.txt:2513", "target": "labelconfigslabelconfigs"}, {"type": "contains", "source": "text_data\\reporting.txt:2513", "target": "metricconfigsmetricconfigs"}, {"type": "contains", "source": "text_data\\reporting.txt:2514", "target": "rendervalueconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2514", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2514", "target": "rendernumberconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2514", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2514", "target": "table"}, {"type": "contains", "source": "text_data\\reporting.txt:2515", "target": "renderer"}, {"type": "contains", "source": "text_data\\reporting.txt:2515", "target": "evaluationrenderer"}, {"type": "contains", "source": "text_data\\reporting.txt:2515", "target": "includeinputincludeinput"}, {"type": "contains", "source": "text_data\\reporting.txt:2515", "target": "includemetadataincludemetadata"}, {"type": "contains", "source": "text_data\\reporting.txt:2515", "target": "includeexpectedoutputincludeexpectedoutput"}, {"type": "contains", "source": "text_data\\reporting.txt:2516", "target": "return"}, {"type": "contains", "source": "text_data\\reporting.txt:2516", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2516", "target": "scoreconfigsscoreconfigs"}, {"type": "contains", "source": "text_data\\reporting.txt:2516", "target": "labelconfigslabelconfigs"}, {"type": "contains", "source": "text_data\\reporting.txt:2516", "target": "metricconfigsmetricconfigs"}, {"type": "contains", "source": "text_data\\reporting.txt:2517", "target": "cases"}, {"type": "contains", "source": "text_data\\reporting.txt:2517", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2517", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2517", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\reporting.txt:2517", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistreportcase"}, {"type": "contains", "source": "text_data\\reporting.txt:2518", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\reporting.txt:2518", "target": "false"}, {"type": "contains", "source": "text_data\\reporting.txt:2518", "target": "print"}, {"type": "contains", "source": "text_data\\reporting.txt:2518", "target": "width"}, {"type": "contains", "source": "text_data\\reporting.txt:2518", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\reporting.txt:2519", "target": "rendervalueconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2519", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\reporting.txt:2519", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2519", "target": "includeremovedcases"}, {"type": "contains", "source": "text_data\\reporting.txt:2519", "target": "false"}, {"type": "contains", "source": "text_data\\reporting.txt:2520", "target": "rendernumberconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2520", "target": "metricconfigs"}, {"type": "contains", "source": "text_data\\reporting.txt:2520", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2520", "target": "durationconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2521", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2521", "target": "print"}, {"type": "contains", "source": "text_data\\reporting.txt:2521", "target": "console"}, {"type": "contains", "source": "text_data\\reporting.txt:2521", "target": "optionally"}, {"type": "contains", "source": "text_data\\reporting.txt:2521", "target": "comparing"}, {"type": "contains", "source": "text_data\\reporting.txt:2522", "target": "false"}, {"type": "contains", "source": "text_data\\reporting.txt:2522", "target": "rendervalueconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2522", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2522", "target": "print"}, {"type": "contains", "source": "text_data\\reporting.txt:2522", "target": "width"}, {"type": "contains", "source": "text_data\\reporting.txt:2523", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2523", "target": "rendernumberconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2523", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2523", "target": "labelconfigs"}, {"type": "contains", "source": "text_data\\reporting.txt:2523", "target": "rendervalueconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2524", "target": "includedurationsincludedurations"}, {"type": "contains", "source": "text_data\\reporting.txt:2524", "target": "includetotaldurationincludetotalduration"}, {"type": "contains", "source": "text_data\\reporting.txt:2524", "target": "includeremovedcasesincluderemovedcases"}, {"type": "contains", "source": "text_data\\reporting.txt:2524", "target": "includeaveragesincludeaverages"}, {"type": "contains", "source": "text_data\\reporting.txt:2524", "target": "inputconfiginputconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2525", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\reporting.txt:2525", "target": "false"}, {"type": "contains", "source": "text_data\\reporting.txt:2525", "target": "consoletable"}, {"type": "contains", "source": "text_data\\reporting.txt:2525", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2525", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\reporting.txt:2526", "target": "rendervalueconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2526", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2526", "target": "includeaverages"}, {"type": "contains", "source": "text_data\\reporting.txt:2526", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\reporting.txt:2526", "target": "inputconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2527", "target": "rendernumberconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2527", "target": "metricconfigs"}, {"type": "contains", "source": "text_data\\reporting.txt:2527", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2527", "target": "durationconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2527", "target": "tablehttpsrichreadthedocsioenstablereferencetablehtmlrichtabletable"}, {"type": "contains", "source": "text_data\\reporting.txt:2528", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2528", "target": "return"}, {"type": "contains", "source": "text_data\\reporting.txt:2528", "target": "table"}, {"type": "contains", "source": "text_data\\reporting.txt:2528", "target": "containing"}, {"type": "contains", "source": "text_data\\reporting.txt:2528", "target": "between"}, {"type": "contains", "source": "text_data\\reporting.txt:2529", "target": "false"}, {"type": "contains", "source": "text_data\\reporting.txt:2529", "target": "rendervalueconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2529", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2529", "target": "consoletable"}, {"type": "contains", "source": "text_data\\reporting.txt:2529", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2530", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2530", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2530", "target": "rendernumberconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2530", "target": "table"}, {"type": "contains", "source": "text_data\\reporting.txt:2530", "target": "labelconfigs"}, {"type": "contains", "source": "text_data\\reporting.txt:2531", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2531", "target": "return"}, {"type": "contains", "source": "text_data\\reporting.txt:2531", "target": "includeremovedcasesincluderemovedcases"}, {"type": "contains", "source": "text_data\\reporting.txt:2531", "target": "includeaveragesincludeaverages"}, {"type": "contains", "source": "text_data\\reporting.txt:2531", "target": "inputconfigdefaultvalueconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2532", "target": "return"}, {"type": "contains", "source": "text_data\\reporting.txt:2532", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2532", "target": "string"}, {"type": "contains", "source": "text_data\\reporting.txt:2532", "target": "representation"}, {"type": "contains", "source": "text_data\\reporting.txt:2532", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2533", "target": "callableany"}, {"type": "contains", "source": "text_data\\reporting.txt:2533", "target": "configuration"}, {"type": "contains", "source": "text_data\\reporting.txt:2533", "target": "rendering"}, {"type": "contains", "source": "text_data\\reporting.txt:2533", "target": "values"}, {"type": "contains", "source": "text_data\\reporting.txt:2533", "target": "evaluation"}, {"type": "contains", "source": "text_data\\reporting.txt:2534", "target": "rendering"}, {"type": "contains", "source": "text_data\\reporting.txt:2534", "target": "configuration"}, {"type": "contains", "source": "text_data\\reporting.txt:2534", "target": "particular"}, {"type": "contains", "source": "text_data\\reporting.txt:2534", "target": "score"}, {"type": "contains", "source": "text_data\\reporting.txt:2534", "target": "metric"}, {"type": "contains", "source": "text_data\\reporting.txt:2535", "target": "rendering"}, {"type": "contains", "source": "text_data\\reporting.txt:2535", "target": "callablefloat"}, {"type": "contains", "source": "text_data\\reporting.txt:2535", "target": "values"}, {"type": "contains", "source": "text_data\\reporting.txt:2535", "target": "format"}, {"type": "contains", "source": "text_data\\reporting.txt:2535", "target": "least"}, {"type": "contains", "source": "text_data\\reporting.txt:2536", "target": "about"}, {"type": "contains", "source": "text_data\\reporting.txt:2536", "target": "difference"}, {"type": "contains", "source": "text_data\\reporting.txt:2536", "target": "values"}, {"type": "contains", "source": "text_data\\reporting.txt:2536", "target": "format"}, {"type": "contains", "source": "text_data\\reporting.txt:2536", "target": "least"}, {"type": "contains", "source": "text_data\\reporting.txt:2537", "target": "difference"}, {"type": "contains", "source": "text_data\\reporting.txt:2537", "target": "significant"}, {"type": "contains", "source": "text_data\\reporting.txt:2537", "target": "extra"}, {"type": "contains", "source": "text_data\\reporting.txt:2537", "target": "float"}, {"type": "contains", "source": "text_data\\reporting.txt:2537", "target": "rendered"}, {"type": "contains", "source": "text_data\\reporting.txt:2538", "target": "significant"}, {"type": "contains", "source": "text_data\\reporting.txt:2538", "target": "provided"}, {"type": "contains", "source": "text_data\\reporting.txt:2538", "target": "difference"}, {"type": "contains", "source": "text_data\\reporting.txt:2538", "target": "description"}, {"type": "contains", "source": "text_data\\reporting.txt:2538", "target": "diffatol"}, {"type": "contains", "source": "text_data\\reporting.txt:2539", "target": "significant"}, {"type": "contains", "source": "text_data\\reporting.txt:2539", "target": "diffdecreasestyle"}, {"type": "contains", "source": "text_data\\reporting.txt:2539", "target": "style"}, {"type": "contains", "source": "text_data\\reporting.txt:2539", "target": "apply"}, {"type": "contains", "source": "text_data\\reporting.txt:2539", "target": "diffed"}, {"type": "contains", "source": "text_data\\reporting.txt:2540", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2540", "target": "values"}, {"type": "contains", "source": "text_data\\reporting.txt:2540", "target": "format"}, {"type": "contains", "source": "text_data\\reporting.txt:2540", "target": "least"}, {"type": "contains", "source": "text_data\\reporting.txt:2540", "target": "custom"}, {"type": "contains", "source": "text_data\\reporting.txt:2541", "target": "diffformatter"}, {"type": "contains", "source": "text_data\\reporting.txt:2541", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2541", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\reporting.txt:2541", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\reporting.txt:2541", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\reporting.txt:2542", "target": "about"}, {"type": "contains", "source": "text_data\\reporting.txt:2542", "target": "difference"}, {"type": "contains", "source": "text_data\\reporting.txt:2542", "target": "values"}, {"type": "contains", "source": "text_data\\reporting.txt:2542", "target": "format"}, {"type": "contains", "source": "text_data\\reporting.txt:2542", "target": "least"}, {"type": "contains", "source": "text_data\\reporting.txt:2543", "target": "difference"}, {"type": "contains", "source": "text_data\\reporting.txt:2543", "target": "significant"}, {"type": "contains", "source": "text_data\\reporting.txt:2543", "target": "diffatol"}, {"type": "contains", "source": "text_data\\reporting.txt:2543", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\reporting.txt:2543", "target": "floathttpsdocspythonorg3libraryfunctionshtmlfloat"}, {"type": "contains", "source": "text_data\\reporting.txt:2544", "target": "significant"}, {"type": "contains", "source": "text_data\\reporting.txt:2544", "target": "difference"}, {"type": "contains", "source": "text_data\\reporting.txt:2544", "target": "description"}, {"type": "contains", "source": "text_data\\reporting.txt:2544", "target": "diffatol"}, {"type": "contains", "source": "text_data\\reporting.txt:2544", "target": "details"}, {"type": "contains", "source": "text_data\\reporting.txt:2545", "target": "diffdecreasestyle"}, {"type": "contains", "source": "text_data\\reporting.txt:2545", "target": "significant"}, {"type": "contains", "source": "text_data\\reporting.txt:2545", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\reporting.txt:2545", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2545", "target": "style"}, {"type": "contains", "source": "text_data\\reporting.txt:2550", "target": "rendervalueconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2550", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2550", "target": "class"}, {"type": "contains", "source": "text_data\\reporting.txt:2550", "target": "include"}, {"type": "contains", "source": "text_data\\reporting.txt:2550", "target": "rendernumberconfig"}, {"type": "contains", "source": "text_data\\reporting.txt:2551", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\reporting.txt:2551", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2551", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2551", "target": "return"}, {"type": "contains", "source": "text_data\\reporting.txt:2551", "target": "selfallcasesreport"}, {"type": "contains", "source": "text_data\\reporting.txt:2552", "target": "return"}, {"type": "contains", "source": "text_data\\reporting.txt:2552", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2552", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\reporting.txt:2552", "target": "reportcases"}, {"type": "contains", "source": "text_data\\reporting.txt:2552", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2553", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2553", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\reporting.txt:2553", "target": "getcaserenderer"}, {"type": "contains", "source": "text_data\\reporting.txt:2553", "target": "report"}, {"type": "contains", "source": "text_data\\reporting.txt:2553", "target": "reportcaserenderer"}, {"type": "contains", "source": "text_data\\reporting.txt:2554", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2554", "target": "return"}, {"type": "contains", "source": "text_data\\reporting.txt:2554", "target": "reportcaserenderer"}, {"type": "contains", "source": "text_data\\reporting.txt:2554", "target": "includeinputselfincludeinput"}, {"type": "contains", "source": "text_data\\reporting.txt:2554", "target": "includemetadataselfincludemetadata"}, {"type": "contains", "source": "text_data\\reporting.txt:2555", "target": "table"}, {"type": "contains", "source": "text_data\\reporting.txt:2555", "target": "inputrendererinputrenderer"}, {"type": "contains", "source": "text_data\\reporting.txt:2555", "target": "metadatarenderermetadatarenderer"}, {"type": "contains", "source": "text_data\\reporting.txt:2555", "target": "outputrendereroutputrenderer"}, {"type": "contains", "source": "text_data\\reporting.txt:2555", "target": "scorerenderersscorerenderers"}, {"type": "contains", "source": "text_data\\reporting.txt:2556", "target": "reportcases"}, {"type": "contains", "source": "text_data\\reporting.txt:2556", "target": "table"}, {"type": "contains", "source": "text_data\\reporting.txt:2556", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\reporting.txt:2556", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2556", "target": "baselinecases"}, {"type": "contains", "source": "text_data\\reporting.txt:2557", "target": "maybereportcase"}, {"type": "contains", "source": "text_data\\reporting.txt:2557", "target": "maybebaselinecase"}, {"type": "contains", "source": "text_data\\reporting.txt:2557", "target": "addedcases"}, {"type": "contains", "source": "text_data\\reporting.txt:2557", "target": "listreportcase"}, {"type": "contains", "source": "text_data\\reporting.txt:2557", "target": "caseid"}, {"type": "contains", "source": "text_data\\reporting.txt:2558", "target": "diffname"}, {"type": "contains", "source": "text_data\\reporting.txt:2558", "target": "baselinename"}, {"type": "contains", "source": "text_data\\reporting.txt:2558", "target": "reportname"}, {"type": "contains", "source": "text_data\\reporting.txt:2558", "target": "baselinecase"}, {"type": "contains", "source": "text_data\\reporting.txt:2558", "target": "caserendererbuildrowcase"}, {"type": "contains", "source": "text_data\\reporting.txt:2559", "target": "baselineaverage"}, {"type": "contains", "source": "text_data\\reporting.txt:2559", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\reporting.txt:2559", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2559", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2559", "target": "caserendererbuildrowcase"}, {"type": "contains", "source": "text_data\\reporting.txt:2560", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2560", "target": "score"}, {"type": "contains", "source": "text_data\\reporting.txt:2560", "target": "allrenderers"}, {"type": "contains", "source": "text_data\\reporting.txt:2560", "target": "values"}, {"type": "contains", "source": "text_data\\reporting.txt:2560", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\reporting.txt:2561", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2561", "target": "valuerenderer"}, {"type": "contains", "source": "text_data\\reporting.txt:2561", "target": "allcases"}, {"type": "contains", "source": "text_data\\reporting.txt:2561", "target": "baseline"}, {"type": "contains", "source": "text_data\\reporting.txt:2561", "target": "allnames"}, {"type": "contains", "source": "text_data\\reporting.txt:2562", "target": "dictstr"}, {"type": "contains", "source": "text_data\\reporting.txt:2562", "target": "numberrenderer"}, {"type": "contains", "source": "text_data\\reporting.txt:2562", "target": "allcases"}, {"type": "contains", "source": "text_data\\reporting.txt:2562", "target": "allrenderers"}, {"type": "contains", "source": "text_data\\reporting.txt:2562", "target": "values"}, {"type": "contains", "source": "text_data\\reporting.txt:2563", "target": "allcases"}, {"type": "contains", "source": "text_data\\reporting.txt:2563", "target": "alldurations"}, {"type": "contains", "source": "text_data\\reporting.txt:2563", "target": "return"}, {"type": "contains", "source": "text_data\\reporting.txt:2563", "target": "evaluationreport"}, {"type": "contains", "source": "text_data\\reporting.txt:2563", "target": "baseline"}, {"type": "contains", "source": "text_data\\result.txt:2563", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\result.txt:2563", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\result.txt:2563", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\result.txt:2563", "target": "v0050"}, {"type": "contains", "source": "text_data\\result.txt:2563", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\result.txt:2564", "target": "tools"}, {"type": "contains", "source": "text_data\\result.txt:2564", "target": "contributing"}, {"type": "contains", "source": "text_data\\result.txt:2564", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\result.txt:2564", "target": "documentation"}, {"type": "contains", "source": "text_data\\result.txt:2564", "target": "agents"}, {"type": "contains", "source": "text_data\\result.txt:2565", "target": "input"}, {"type": "contains", "source": "text_data\\result.txt:2565", "target": "image"}, {"type": "contains", "source": "text_data\\result.txt:2565", "target": "audio"}, {"type": "contains", "source": "text_data\\result.txt:2565", "target": "document"}, {"type": "contains", "source": "text_data\\result.txt:2566", "target": "examples"}, {"type": "contains", "source": "text_data\\result.txt:2566", "target": "client"}, {"type": "contains", "source": "text_data\\result.txt:2566", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\result.txt:2566", "target": "server"}, {"type": "contains", "source": "text_data\\result.txt:2566", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\result.txt:2567", "target": "agent"}, {"type": "contains", "source": "text_data\\result.txt:2567", "target": "stream"}, {"type": "contains", "source": "text_data\\result.txt:2567", "target": "reference"}, {"type": "contains", "source": "text_data\\result.txt:2567", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\result.txt:2567", "target": "pydantic"}, {"type": "contains", "source": "text_data\\result.txt:2568", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\result.txt:2568", "target": "usage"}, {"type": "contains", "source": "text_data\\result.txt:2568", "target": "table"}, {"type": "contains", "source": "text_data\\result.txt:2568", "target": "contents"}, {"type": "contains", "source": "text_data\\result.txt:2568", "target": "result"}, {"type": "contains", "source": "text_data\\result.txt:2569", "target": "pydanticaimodels"}, {"type": "contains", "source": "text_data\\result.txt:2569", "target": "modelsbase"}, {"type": "contains", "source": "text_data\\result.txt:2569", "target": "pydanticaimodelsopenai"}, {"type": "contains", "source": "text_data\\result.txt:2569", "target": "modelsopenai"}, {"type": "contains", "source": "text_data\\result.txt:2569", "target": "pydanticaimodelsanthropic"}, {"type": "contains", "source": "text_data\\result.txt:2570", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\result.txt:2570", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\result.txt:2570", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\result.txt:2570", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\result.txt:2570", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\result.txt:2571", "target": "resultdatat"}, {"type": "contains", "source": "text_data\\result.txt:2571", "target": "result"}, {"type": "contains", "source": "text_data\\result.txt:2571", "target": "streamedrunresult"}, {"type": "contains", "source": "text_data\\result.txt:2571", "target": "table"}, {"type": "contains", "source": "text_data\\result.txt:2571", "target": "contents"}, {"type": "contains", "source": "text_data\\result.txt:2572", "target": "streamedrunresult"}, {"type": "contains", "source": "text_data\\result.txt:2572", "target": "dataclass"}, {"type": "contains", "source": "text_data\\result.txt:2572", "target": "bases"}, {"type": "contains", "source": "text_data\\result.txt:2572", "target": "generichttpsdocspythonorg3librarytypinghtmltypinggeneric"}, {"type": "contains", "source": "text_data\\result.txt:2572", "target": "typinggenericagentdepsttoolspydanticaitoolsagentdepst"}, {"type": "contains", "source": "text_data\\result.txt:2578", "target": "resultdatat"}, {"type": "contains", "source": "text_data\\result.txt:2578", "target": "usagelimits"}, {"type": "contains", "source": "text_data\\result.txt:2578", "target": "dataclass"}, {"type": "contains", "source": "text_data\\result.txt:2578", "target": "class"}, {"type": "contains", "source": "text_data\\result.txt:2578", "target": "streamedrunresultgenericagentdepst"}, {"type": "contains", "source": "text_data\\result.txt:2579", "target": "iscomplete"}, {"type": "contains", "source": "text_data\\result.txt:2579", "target": "fielddefaultfalse"}, {"type": "contains", "source": "text_data\\result.txt:2579", "target": "initfalse"}, {"type": "contains", "source": "text_data\\result.txt:2579", "target": "whether"}, {"type": "contains", "source": "text_data\\result.txt:2579", "target": "stream"}, {"type": "contains", "source": "text_data\\result.txt:2580", "target": "result"}, {"type": "contains", "source": "text_data\\result.txt:2580", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2580", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2580", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2580", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2581", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2581", "target": "bytes"}, {"type": "contains", "source": "text_data\\result.txt:2581", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2581", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2581", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2582", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2582", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2582", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2582", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2582", "target": "bytes"}, {"type": "contains", "source": "text_data\\result.txt:2583", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2583", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2583", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2583", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2583", "target": "bytes"}, {"type": "contains", "source": "text_data\\result.txt:2584", "target": "result"}, {"type": "contains", "source": "text_data\\result.txt:2584", "target": "response"}, {"type": "contains", "source": "text_data\\result.txt:2584", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2584", "target": "provides"}, {"type": "contains", "source": "text_data\\result.txt:2584", "target": "convenient"}, {"type": "contains", "source": "text_data\\result.txt:2585", "target": "structured"}, {"type": "contains", "source": "text_data\\result.txt:2585", "target": "response"}, {"type": "contains", "source": "text_data\\result.txt:2585", "target": "debouncing"}, {"type": "contains", "source": "text_data\\result.txt:2585", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2585", "target": "pydantic"}, {"type": "contains", "source": "text_data\\result.txt:2586", "target": "result"}, {"type": "contains", "source": "text_data\\result.txt:2586", "target": "yield"}, {"type": "contains", "source": "text_data\\result.txt:2586", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2586", "target": "delta"}, {"type": "contains", "source": "text_data\\result.txt:2586", "target": "false"}, {"type": "contains", "source": "text_data\\result.txt:2587", "target": "responses"}, {"type": "contains", "source": "text_data\\result.txt:2587", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2587", "target": "selfstreamresponsetextdeltadelta"}, {"type": "contains", "source": "text_data\\result.txt:2587", "target": "debouncebydebounceby"}, {"type": "contains", "source": "text_data\\result.txt:2587", "target": "yield"}, {"type": "contains", "source": "text_data\\result.txt:2588", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2588", "target": "debounceby"}, {"type": "contains", "source": "text_data\\result.txt:2588", "target": "response"}, {"type": "contains", "source": "text_data\\result.txt:2588", "target": "structured"}, {"type": "contains", "source": "text_data\\result.txt:2588", "target": "debouncing"}, {"type": "contains", "source": "text_data\\result.txt:2589", "target": "yield"}, {"type": "contains", "source": "text_data\\result.txt:2589", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2589", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2589", "target": "selfstreamresponseget"}, {"type": "contains", "source": "text_data\\result.txt:2589", "target": "false"}, {"type": "contains", "source": "text_data\\result.txt:2590", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2590", "target": "usage"}, {"type": "contains", "source": "text_data\\result.txt:2590", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2590", "target": "stream"}, {"type": "contains", "source": "text_data\\result.txt:2590", "target": "whole"}, {"type": "contains", "source": "text_data\\result.txt:2591", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2591", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2591", "target": "selfresulttoolname"}, {"type": "contains", "source": "text_data\\result.txt:2591", "target": "match"}, {"type": "contains", "source": "text_data\\result.txt:2591", "target": "selfinitialrunctxusage"}, {"type": "contains", "source": "text_data\\result.txt:2592", "target": "resultdata"}, {"type": "contains", "source": "text_data\\result.txt:2592", "target": "validator"}, {"type": "contains", "source": "text_data\\result.txt:2592", "target": "selfresultvalidators"}, {"type": "contains", "source": "text_data\\result.txt:2592", "target": "await"}, {"type": "contains", "source": "text_data\\result.txt:2592", "target": "raise"}, {"type": "contains", "source": "text_data\\result.txt:2593", "target": "await"}, {"type": "contains", "source": "text_data\\result.txt:2593", "target": "validatorvalidate"}, {"type": "contains", "source": "text_data\\result.txt:2593", "target": "selfrunctx"}, {"type": "contains", "source": "text_data\\result.txt:2593", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2593", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2594", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2594", "target": "debounceby"}, {"type": "contains", "source": "text_data\\result.txt:2594", "target": "float"}, {"type": "contains", "source": "text_data\\result.txt:2594", "target": "groupiter"}, {"type": "contains", "source": "text_data\\result.txt:2594", "target": "items"}, {"type": "contains", "source": "text_data\\result.txt:2595", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2595", "target": "partindex"}, {"type": "contains", "source": "text_data\\result.txt:2595", "target": "partcontent"}, {"type": "contains", "source": "text_data\\result.txt:2595", "target": "items"}, {"type": "contains", "source": "text_data\\result.txt:2595", "target": "receive"}, {"type": "contains", "source": "text_data\\result.txt:2596", "target": "yield"}, {"type": "contains", "source": "text_data\\result.txt:2596", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2596", "target": "isinstanceevent"}, {"type": "contains", "source": "text_data\\result.txt:2596", "target": "eventpartcontent"}, {"type": "contains", "source": "text_data\\result.txt:2596", "target": "eventindex"}, {"type": "contains", "source": "text_data\\result.txt:2597", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2597", "target": "streamtextdeltas"}, {"type": "contains", "source": "text_data\\result.txt:2597", "target": "groupiter"}, {"type": "contains", "source": "text_data\\result.txt:2597", "target": "items"}, {"type": "contains", "source": "text_data\\result.txt:2597", "target": "yield"}, {"type": "contains", "source": "text_data\\result.txt:2598", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2598", "target": "streamtextdeltas"}, {"type": "contains", "source": "text_data\\result.txt:2598", "target": "deltasappendtext"}, {"type": "contains", "source": "text_data\\result.txt:2598", "target": "yield"}, {"type": "contains", "source": "text_data\\result.txt:2598", "target": "joindeltas"}, {"type": "contains", "source": "text_data\\result.txt:2599", "target": "stream"}, {"type": "contains", "source": "text_data\\result.txt:2599", "target": "allmessages"}, {"type": "contains", "source": "text_data\\result.txt:2599", "target": "iscomplete"}, {"type": "contains", "source": "text_data\\result.txt:2599", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\result.txt:2599", "target": "fieldhttpsdocspythonorg3librarydataclasseshtmldataclassesfield"}, {"type": "contains", "source": "text_data\\result.txt:2600", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2600", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2600", "target": "description"}, {"type": "contains", "source": "text_data\\result.txt:2600", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2600", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2602", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2602", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2602", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2602", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2602", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2603", "target": "result"}, {"type": "contains", "source": "text_data\\result.txt:2603", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2603", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2603", "target": "raise"}, {"type": "contains", "source": "text_data\\result.txt:2603", "target": "notimplementederrorsetting"}, {"type": "contains", "source": "text_data\\result.txt:2604", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2604", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\result.txt:2604", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2604", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2604", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2605", "target": "description"}, {"type": "contains", "source": "text_data\\result.txt:2605", "target": "byteshttpsdocspythonorg3librarystdtypeshtmlbytes"}, {"type": "contains", "source": "text_data\\result.txt:2605", "target": "bytes"}, {"type": "contains", "source": "text_data\\result.txt:2605", "target": "representing"}, {"type": "contains", "source": "text_data\\result.txt:2605", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2606", "target": "bytes"}, {"type": "contains", "source": "text_data\\result.txt:2606", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2606", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2606", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2606", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2607", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2607", "target": "messagesmodelmessagestypeadapterdumpjson"}, {"type": "contains", "source": "text_data\\result.txt:2607", "target": "selfallmessagesresulttoolreturncontentresulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2607", "target": "newmessages"}, {"type": "contains", "source": "text_data\\result.txt:2608", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2608", "target": "newmessages"}, {"type": "contains", "source": "text_data\\result.txt:2608", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2608", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\result.txt:2608", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\result.txt:2609", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2609", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2609", "target": "result"}, {"type": "contains", "source": "text_data\\result.txt:2609", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2609", "target": "older"}, {"type": "contains", "source": "text_data\\result.txt:2610", "target": "description"}, {"type": "contains", "source": "text_data\\result.txt:2610", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\result.txt:2610", "target": "pydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\result.txt:2610", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2610", "target": "source"}, {"type": "contains", "source": "text_data\\result.txt:2611", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2611", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2611", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2611", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2611", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2612", "target": "returns"}, {"type": "contains", "source": "text_data\\result.txt:2612", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2612", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2612", "target": "selfallmessagesresulttoolreturncontentresulttoolreturncontentselfnewmessageindex"}, {"type": "contains", "source": "text_data\\result.txt:2612", "target": "newmessagesjson"}, {"type": "contains", "source": "text_data\\result.txt:2613", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2613", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\result.txt:2613", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2613", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2613", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2614", "target": "description"}, {"type": "contains", "source": "text_data\\result.txt:2614", "target": "byteshttpsdocspythonorg3librarystdtypeshtmlbytes"}, {"type": "contains", "source": "text_data\\result.txt:2614", "target": "bytes"}, {"type": "contains", "source": "text_data\\result.txt:2614", "target": "representing"}, {"type": "contains", "source": "text_data\\result.txt:2614", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2615", "target": "bytes"}, {"type": "contains", "source": "text_data\\result.txt:2615", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2615", "target": "resulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2615", "target": "messages"}, {"type": "contains", "source": "text_data\\result.txt:2615", "target": "content"}, {"type": "contains", "source": "text_data\\result.txt:2616", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2616", "target": "messagesmodelmessagestypeadapterdumpjson"}, {"type": "contains", "source": "text_data\\result.txt:2616", "target": "selfnewmessagesresulttoolreturncontentresulttoolreturncontent"}, {"type": "contains", "source": "text_data\\result.txt:2616", "target": "stream"}, {"type": "contains", "source": "text_data\\result.txt:2616", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2617", "target": "stream"}, {"type": "contains", "source": "text_data\\result.txt:2617", "target": "debounceby"}, {"type": "contains", "source": "text_data\\result.txt:2617", "target": "floathttpsdocspythonorg3libraryfunctionshtmlfloat"}, {"type": "contains", "source": "text_data\\result.txt:2617", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\result.txt:2617", "target": "collectionsabcasynciteratorresultdatat"}, {"type": "contains", "source": "text_data\\result.txt:2618", "target": "description"}, {"type": "contains", "source": "text_data\\result.txt:2618", "target": "response"}, {"type": "contains", "source": "text_data\\result.txt:2618", "target": "debouncing"}, {"type": "contains", "source": "text_data\\result.txt:2618", "target": "parameters"}, {"type": "contains", "source": "text_data\\result.txt:2618", "target": "default"}, {"type": "contains", "source": "text_data\\result.txt:2620", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2620", "target": "response"}, {"type": "contains", "source": "text_data\\result.txt:2620", "target": "debounceby"}, {"type": "contains", "source": "text_data\\result.txt:2620", "target": "iterable"}, {"type": "contains", "source": "text_data\\result.txt:2620", "target": "structured"}, {"type": "contains", "source": "text_data\\result.txt:2621", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2621", "target": "islast"}, {"type": "contains", "source": "text_data\\result.txt:2621", "target": "result"}, {"type": "contains", "source": "text_data\\result.txt:2621", "target": "iterable"}, {"type": "contains", "source": "text_data\\result.txt:2621", "target": "response"}, {"type": "contains", "source": "text_data\\result.txt:2622", "target": "result"}, {"type": "contains", "source": "text_data\\result.txt:2622", "target": "streamtext"}, {"type": "contains", "source": "text_data\\result.txt:2622", "target": "delta"}, {"type": "contains", "source": "text_data\\result.txt:2622", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\result.txt:2622", "target": "false"}, {"type": "contains", "source": "text_data\\result.txt:2623", "target": "default"}, {"type": "contains", "source": "text_data\\result.txt:2623", "target": "yield"}, {"type": "contains", "source": "text_data\\result.txt:2623", "target": "received"}, {"type": "contains", "source": "text_data\\result.txt:2623", "target": "false"}, {"type": "contains", "source": "text_data\\result.txt:2623", "target": "debouncing"}, {"type": "contains", "source": "text_data\\result.txt:2625", "target": "result"}, {"type": "contains", "source": "text_data\\result.txt:2625", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2625", "target": "delta"}, {"type": "contains", "source": "text_data\\result.txt:2625", "target": "false"}, {"type": "contains", "source": "text_data\\result.txt:2625", "target": "debounceby"}, {"type": "contains", "source": "text_data\\result.txt:2626", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2626", "target": "selfstreamresponsetextdeltadelta"}, {"type": "contains", "source": "text_data\\result.txt:2626", "target": "debouncebydebounceby"}, {"type": "contains", "source": "text_data\\result.txt:2626", "target": "yield"}, {"type": "contains", "source": "text_data\\result.txt:2626", "target": "combinedvalidatedtext"}, {"type": "contains", "source": "text_data\\result.txt:2627", "target": "streamstructured"}, {"type": "contains", "source": "text_data\\result.txt:2627", "target": "debounceby"}, {"type": "contains", "source": "text_data\\result.txt:2627", "target": "floathttpsdocspythonorg3libraryfunctionshtmlfloat"}, {"type": "contains", "source": "text_data\\result.txt:2627", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\result.txt:2627", "target": "collectionsabcasynciteratortuplehttpsdocspythonorg3librarystdtypeshtmltuplemodelresponsemessagespydanticaimessagesmodelresponse"}, {"type": "contains", "source": "text_data\\result.txt:2628", "target": "debouncing"}, {"type": "contains", "source": "text_data\\result.txt:2628", "target": "parameters"}, {"type": "contains", "source": "text_data\\result.txt:2628", "target": "description"}, {"type": "contains", "source": "text_data\\result.txt:2628", "target": "default"}, {"type": "contains", "source": "text_data\\result.txt:2628", "target": "debounceby"}, {"type": "contains", "source": "text_data\\result.txt:2629", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2629", "target": "description"}, {"type": "contains", "source": "text_data\\result.txt:2629", "target": "asynciteratorhttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcasynciterator"}, {"type": "contains", "source": "text_data\\result.txt:2629", "target": "collectionsabcasynciteratortuplehttpsdocspythonorg3librarystdtypeshtmltuplemodelresponsemessagespydanticaimessagesmodelresponse"}, {"type": "contains", "source": "text_data\\result.txt:2629", "target": "pydanticaimessagesmodelresponse"}, {"type": "contains", "source": "text_data\\result.txt:2630", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2630", "target": "response"}, {"type": "contains", "source": "text_data\\result.txt:2630", "target": "structured"}, {"type": "contains", "source": "text_data\\result.txt:2630", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2630", "target": "debounceby"}, {"type": "contains", "source": "text_data\\result.txt:2631", "target": "yield"}, {"type": "contains", "source": "text_data\\result.txt:2631", "target": "selfstreamresponseget"}, {"type": "contains", "source": "text_data\\result.txt:2631", "target": "false"}, {"type": "contains", "source": "text_data\\result.txt:2631", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2631", "target": "msgparts"}, {"type": "contains", "source": "text_data\\result.txt:2632", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2632", "target": "resultdatat"}, {"type": "contains", "source": "text_data\\result.txt:2632", "target": "stream"}, {"type": "contains", "source": "text_data\\result.txt:2632", "target": "whole"}, {"type": "contains", "source": "text_data\\result.txt:2632", "target": "response"}, {"type": "contains", "source": "text_data\\result.txt:2633", "target": "usage"}, {"type": "contains", "source": "text_data\\result.txt:2633", "target": "return"}, {"type": "contains", "source": "text_data\\result.txt:2633", "target": "whole"}, {"type": "contains", "source": "text_data\\result.txt:2633", "target": "until"}, {"type": "contains", "source": "text_data\\result.txt:2633", "target": "stream"}, {"type": "contains", "source": "text_data\\result.txt:2634", "target": "timestamp"}, {"type": "contains", "source": "text_data\\result.txt:2634", "target": "response"}, {"type": "contains", "source": "text_data\\result.txt:2634", "target": "source"}, {"type": "contains", "source": "text_data\\result.txt:2634", "target": "pydanticaislimpydanticairesultpy"}, {"type": "contains", "source": "text_data\\result.txt:2634", "target": "validatestructuredresult"}, {"type": "contains", "source": "text_data\\result.txt:2635", "target": "source"}, {"type": "contains", "source": "text_data\\result.txt:2635", "target": "pydanticaislimpydanticairesultpy"}, {"type": "contains", "source": "text_data\\result.txt:2636", "target": "match"}, {"type": "contains", "source": "text_data\\result.txt:2636", "target": "message"}, {"type": "contains", "source": "text_data\\result.txt:2636", "target": "selfresulttoolname"}, {"type": "contains", "source": "text_data\\result.txt:2636", "target": "async"}, {"type": "contains", "source": "text_data\\result.txt:2636", "target": "validatestructuredresult"}, {"type": "contains", "source": "text_data\\result.txt:2637", "target": "validator"}, {"type": "contains", "source": "text_data\\result.txt:2637", "target": "selfresultvalidators"}, {"type": "contains", "source": "text_data\\result.txt:2637", "target": "resultdata"}, {"type": "contains", "source": "text_data\\result.txt:2637", "target": "await"}, {"type": "contains", "source": "text_data\\result.txt:2637", "target": "selfrunctx"}, {"type": "contains", "source": "text_data\\results.txt:2637", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\results.txt:2637", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\results.txt:2637", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\results.txt:2637", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\results.txt:2637", "target": "repository"}, {"type": "contains", "source": "text_data\\results.txt:2638", "target": "tools"}, {"type": "contains", "source": "text_data\\results.txt:2638", "target": "results"}, {"type": "contains", "source": "text_data\\results.txt:2638", "target": "contributing"}, {"type": "contains", "source": "text_data\\results.txt:2638", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\results.txt:2638", "target": "documentation"}, {"type": "contains", "source": "text_data\\results.txt:2639", "target": "evals"}, {"type": "contains", "source": "text_data\\results.txt:2639", "target": "input"}, {"type": "contains", "source": "text_data\\results.txt:2639", "target": "debugging"}, {"type": "contains", "source": "text_data\\results.txt:2639", "target": "monitoring"}, {"type": "contains", "source": "text_data\\results.txt:2639", "target": "logfire"}, {"type": "contains", "source": "text_data\\results.txt:2640", "target": "examples"}, {"type": "contains", "source": "text_data\\results.txt:2640", "target": "client"}, {"type": "contains", "source": "text_data\\results.txt:2640", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\results.txt:2640", "target": "server"}, {"type": "contains", "source": "text_data\\results.txt:2640", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\results.txt:2641", "target": "stream"}, {"type": "contains", "source": "text_data\\results.txt:2641", "target": "reference"}, {"type": "contains", "source": "text_data\\results.txt:2641", "target": "pydantic"}, {"type": "contains", "source": "text_data\\results.txt:2641", "target": "model"}, {"type": "contains", "source": "text_data\\results.txt:2641", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\results.txt:2642", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\results.txt:2642", "target": "apimessages"}, {"type": "contains", "source": "text_data\\results.txt:2642", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\results.txt:2642", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\results.txt:2642", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\results.txt:2643", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\results.txt:2643", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\results.txt:2643", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\results.txt:2643", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\results.txt:2643", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\results.txt:2644", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\results.txt:2644", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\results.txt:2644", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\results.txt:2644", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\results.txt:2644", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\results.txt:2645", "target": "results"}, {"type": "contains", "source": "text_data\\results.txt:2645", "target": "result"}, {"type": "contains", "source": "text_data\\results.txt:2645", "target": "streaming"}, {"type": "contains", "source": "text_data\\results.txt:2645", "target": "values"}, {"type": "contains", "source": "text_data\\results.txt:2645", "target": "returned"}, {"type": "contains", "source": "text_data\\results.txt:2646", "target": "import"}, {"type": "contains", "source": "text_data\\results.txt:2646", "target": "agent"}, {"type": "contains", "source": "text_data\\results.txt:2646", "target": "olympicspy"}, {"type": "contains", "source": "text_data\\results.txt:2646", "target": "pydantic"}, {"type": "contains", "source": "text_data\\results.txt:2646", "target": "basemodel"}, {"type": "contains", "source": "text_data\\results.txt:2647", "target": "model"}, {"type": "contains", "source": "text_data\\results.txt:2647", "target": "result"}, {"type": "contains", "source": "text_data\\results.txt:2647", "target": "response"}, {"type": "contains", "source": "text_data\\results.txt:2647", "target": "plain"}, {"type": "contains", "source": "text_data\\results.txt:2647", "target": "union"}, {"type": "contains", "source": "text_data\\results.txt:2648", "target": "schema"}, {"type": "contains", "source": "text_data\\results.txt:2648", "target": "object"}, {"type": "contains", "source": "text_data\\results.txt:2648", "target": "result"}, {"type": "contains", "source": "text_data\\results.txt:2648", "target": "tools"}, {"type": "contains", "source": "text_data\\results.txt:2648", "target": "model"}, {"type": "contains", "source": "text_data\\results.txt:2649", "target": "import"}, {"type": "contains", "source": "text_data\\results.txt:2649", "target": "agent"}, {"type": "contains", "source": "text_data\\results.txt:2649", "target": "units"}, {"type": "contains", "source": "text_data\\results.txt:2649", "target": "extract"}, {"type": "contains", "source": "text_data\\results.txt:2649", "target": "dimensions"}, {"type": "contains", "source": "text_data\\results.txt:2650", "target": "result"}, {"type": "contains", "source": "text_data\\results.txt:2650", "target": "agentrunsyncthe"}, {"type": "contains", "source": "text_data\\results.txt:2650", "target": "10x20x30"}, {"type": "contains", "source": "text_data\\results.txt:2650", "target": "printresultdata"}, {"type": "contains", "source": "text_data\\results.txt:2650", "target": "width10"}, {"type": "contains", "source": "text_data\\results.txt:2651", "target": "agent"}, {"type": "contains", "source": "text_data\\results.txt:2651", "target": "example"}, {"type": "contains", "source": "text_data\\results.txt:2651", "target": "union"}, {"type": "contains", "source": "text_data\\results.txt:2651", "target": "import"}, {"type": "contains", "source": "text_data\\results.txt:2651", "target": "listint"}, {"type": "contains", "source": "text_data\\results.txt:2652", "target": "validation"}, {"type": "contains", "source": "text_data\\results.txt:2652", "target": "validators"}, {"type": "contains", "source": "text_data\\results.txt:2652", "target": "functions"}, {"type": "contains", "source": "text_data\\results.txt:2652", "target": "example"}, {"type": "contains", "source": "text_data\\results.txt:2652", "target": "complete"}, {"type": "contains", "source": "text_data\\results.txt:2653", "target": "import"}, {"type": "contains", "source": "text_data\\results.txt:2653", "target": "response"}, {"type": "contains", "source": "text_data\\results.txt:2653", "target": "agent"}, {"type": "contains", "source": "text_data\\results.txt:2653", "target": "class"}, {"type": "contains", "source": "text_data\\results.txt:2653", "target": "typing"}, {"type": "contains", "source": "text_data\\results.txt:2654", "target": "result"}, {"type": "contains", "source": "text_data\\results.txt:2654", "target": "return"}, {"type": "contains", "source": "text_data\\results.txt:2654", "target": "users"}, {"type": "contains", "source": "text_data\\results.txt:2654", "target": "isinstanceresult"}, {"type": "contains", "source": "text_data\\results.txt:2654", "target": "invalidrequest"}, {"type": "contains", "source": "text_data\\results.txt:2655", "target": "streamed"}, {"type": "contains", "source": "text_data\\results.txt:2655", "target": "response"}, {"type": "contains", "source": "text_data\\results.txt:2655", "target": "example"}, {"type": "contains", "source": "text_data\\results.txt:2655", "target": "complete"}, {"type": "contains", "source": "text_data\\results.txt:2655", "target": "results"}, {"type": "contains", "source": "text_data\\results.txt:2656", "target": "streaming"}, {"type": "contains", "source": "text_data\\results.txt:2656", "target": "async"}, {"type": "contains", "source": "text_data\\results.txt:2656", "target": "agent"}, {"type": "contains", "source": "text_data\\results.txt:2656", "target": "method"}, {"type": "contains", "source": "text_data\\results.txt:2656", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\results.txt:2657", "target": "first"}, {"type": "contains", "source": "text_data\\results.txt:2657", "target": "known"}, {"type": "contains", "source": "text_data\\results.txt:2657", "target": "hello"}, {"type": "contains", "source": "text_data\\results.txt:2657", "target": "world"}, {"type": "contains", "source": "text_data\\results.txt:2657", "target": "textbook"}, {"type": "contains", "source": "text_data\\results.txt:2658", "target": "example"}, {"type": "contains", "source": "text_data\\results.txt:2658", "target": "complete"}, {"type": "contains", "source": "text_data\\results.txt:2658", "target": "youll"}, {"type": "contains", "source": "text_data\\results.txt:2658", "target": "addasynciorunmain"}, {"type": "contains", "source": "text_data\\results.txt:2658", "target": "stream"}, {"type": "contains", "source": "text_data\\results.txt:2659", "target": "async"}, {"type": "contains", "source": "text_data\\results.txt:2659", "target": "agent"}, {"type": "contains", "source": "text_data\\results.txt:2659", "target": "hello"}, {"type": "contains", "source": "text_data\\results.txt:2659", "target": "world"}, {"type": "contains", "source": "text_data\\results.txt:2659", "target": "streameddeltahelloworldpy"}, {"type": "contains", "source": "text_data\\results.txt:2660", "target": "result"}, {"type": "contains", "source": "text_data\\results.txt:2660", "target": "messages"}, {"type": "contains", "source": "text_data\\results.txt:2660", "target": "example"}, {"type": "contains", "source": "text_data\\results.txt:2660", "target": "message"}, {"type": "contains", "source": "text_data\\results.txt:2660", "target": "streaming"}, {"type": "contains", "source": "text_data\\results.txt:2661", "target": "import"}, {"type": "contains", "source": "text_data\\results.txt:2661", "target": "agent"}, {"type": "contains", "source": "text_data\\results.txt:2661", "target": "async"}, {"type": "contains", "source": "text_data\\results.txt:2661", "target": "profile"}, {"type": "contains", "source": "text_data\\results.txt:2661", "target": "datetime"}, {"type": "contains", "source": "text_data\\results.txt:2662", "target": "date1990"}, {"type": "contains", "source": "text_data\\results.txt:2662", "target": "likes"}, {"type": "contains", "source": "text_data\\results.txt:2662", "target": "chain"}, {"type": "contains", "source": "text_data\\results.txt:2662", "target": "pyramid"}, {"type": "contains", "source": "text_data\\results.txt:2663", "target": "validation"}, {"type": "contains", "source": "text_data\\results.txt:2663", "target": "example"}, {"type": "contains", "source": "text_data\\results.txt:2663", "target": "complete"}, {"type": "contains", "source": "text_data\\results.txt:2663", "target": "youll"}, {"type": "contains", "source": "text_data\\results.txt:2663", "target": "addasynciorunmain"}, {"type": "contains", "source": "text_data\\results.txt:2664", "target": "import"}, {"type": "contains", "source": "text_data\\results.txt:2664", "target": "async"}, {"type": "contains", "source": "text_data\\results.txt:2664", "target": "agent"}, {"type": "contains", "source": "text_data\\results.txt:2664", "target": "datetime"}, {"type": "contains", "source": "text_data\\results.txt:2664", "target": "pydantic"}, {"type": "contains", "source": "text_data\\results.txt:2665", "target": "streamstructuredapiresultpydanticairesultstreamedrunresultstreamstructured"}, {"type": "contains", "source": "text_data\\results.txt:2665", "target": "streams"}, {"type": "contains", "source": "text_data\\results.txt:2665", "target": "modelresponseapimessagespydanticaimessagesmodelresponse"}, {"type": "contains", "source": "text_data\\results.txt:2665", "target": "objects"}, {"type": "contains", "source": "text_data\\results.txt:2665", "target": "iteration"}, {"type": "contains", "source": "text_data\\results.txt:2666", "target": "date1990"}, {"type": "contains", "source": "text_data\\results.txt:2666", "target": "likes"}, {"type": "contains", "source": "text_data\\results.txt:2666", "target": "chain"}, {"type": "contains", "source": "text_data\\results.txt:2666", "target": "pyramid"}, {"type": "contains", "source": "text_data\\results.txt:2666", "target": "allowpartialnot"}, {"type": "contains", "source": "text_data\\results.txt:2667", "target": "examples"}, {"type": "contains", "source": "text_data\\results.txt:2667", "target": "stream"}, {"type": "contains", "source": "text_data\\results.txt:2667", "target": "example"}, {"type": "contains", "source": "text_data\\results.txt:2667", "target": "complete"}, {"type": "contains", "source": "text_data\\results.txt:2667", "target": "youll"}, {"type": "contains", "source": "text_data\\run-python.txt:2667", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\run-python.txt:2667", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\run-python.txt:2667", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\run-python.txt:2667", "target": "v0050"}, {"type": "contains", "source": "text_data\\run-python.txt:2667", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\run-python.txt:2668", "target": "tools"}, {"type": "contains", "source": "text_data\\run-python.txt:2668", "target": "contributing"}, {"type": "contains", "source": "text_data\\run-python.txt:2668", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\run-python.txt:2668", "target": "documentation"}, {"type": "contains", "source": "text_data\\run-python.txt:2668", "target": "agents"}, {"type": "contains", "source": "text_data\\run-python.txt:2669", "target": "input"}, {"type": "contains", "source": "text_data\\run-python.txt:2669", "target": "image"}, {"type": "contains", "source": "text_data\\run-python.txt:2669", "target": "audio"}, {"type": "contains", "source": "text_data\\run-python.txt:2669", "target": "document"}, {"type": "contains", "source": "text_data\\run-python.txt:2670", "target": "examples"}, {"type": "contains", "source": "text_data\\run-python.txt:2670", "target": "client"}, {"type": "contains", "source": "text_data\\run-python.txt:2670", "target": "server"}, {"type": "contains", "source": "text_data\\run-python.txt:2670", "target": "python"}, {"type": "contains", "source": "text_data\\run-python.txt:2670", "target": "table"}, {"type": "contains", "source": "text_data\\run-python.txt:2671", "target": "stream"}, {"type": "contains", "source": "text_data\\run-python.txt:2671", "target": "reference"}, {"type": "contains", "source": "text_data\\run-python.txt:2671", "target": "pydantic"}, {"type": "contains", "source": "text_data\\run-python.txt:2671", "target": "model"}, {"type": "contains", "source": "text_data\\run-python.txt:2671", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\run-python.txt:2672", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\run-python.txt:2672", "target": "apiresult"}, {"type": "contains", "source": "text_data\\run-python.txt:2672", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\run-python.txt:2672", "target": "apimessages"}, {"type": "contains", "source": "text_data\\run-python.txt:2672", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\run-python.txt:2673", "target": "pydanticaimodelsgemini"}, {"type": "contains", "source": "text_data\\run-python.txt:2673", "target": "apimodelsgemini"}, {"type": "contains", "source": "text_data\\run-python.txt:2673", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\run-python.txt:2673", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\run-python.txt:2673", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\run-python.txt:2674", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\run-python.txt:2674", "target": "apipydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\run-python.txt:2674", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\run-python.txt:2674", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\run-python.txt:2674", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\run-python.txt:2675", "target": "python"}, {"type": "contains", "source": "text_data\\run-python.txt:2675", "target": "features"}, {"type": "contains", "source": "text_data\\run-python.txt:2675", "target": "environment"}, {"type": "contains", "source": "text_data\\run-python.txt:2675", "target": "table"}, {"type": "contains", "source": "text_data\\run-python.txt:2675", "target": "contents"}, {"type": "contains", "source": "text_data\\run-python.txt:2676", "target": "error"}, {"type": "contains", "source": "text_data\\run-python.txt:2676", "target": "python"}, {"type": "contains", "source": "text_data\\run-python.txt:2676", "target": "standard"}, {"type": "contains", "source": "text_data\\run-python.txt:2676", "target": "features"}, {"type": "contains", "source": "text_data\\run-python.txt:2676", "target": "secure"}, {"type": "contains", "source": "text_data\\run-python.txt:2677", "target": "server"}, {"type": "contains", "source": "text_data\\run-python.txt:2677", "target": "usage"}, {"type": "contains", "source": "text_data\\run-python.txt:2677", "target": "pydanticmcprunpython"}, {"type": "contains", "source": "text_data\\run-python.txt:2677", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\run-python.txt:2677", "target": "using"}, {"type": "contains", "source": "text_data\\run-python.txt:2678", "target": "mcprunpythonpy"}, {"type": "contains", "source": "text_data\\run-python.txt:2679", "target": "import"}, {"type": "contains", "source": "text_data\\run-python.txt:2679", "target": "async"}, {"type": "contains", "source": "text_data\\run-python.txt:2679", "target": "stdioserverparameters"}, {"type": "contains", "source": "text_data\\run-python.txt:2679", "target": "write"}, {"type": "contains", "source": "text_data\\run-python.txt:2679", "target": "await"}, {"type": "contains", "source": "text_data\\run-python.txt:2680", "target": "pythoncode"}, {"type": "contains", "source": "text_data\\run-python.txt:2680", "target": "output"}, {"type": "contains", "source": "text_data\\run-python.txt:2680", "target": "printreprtoolstools0inputschema"}, {"type": "contains", "source": "text_data\\run-python.txt:2680", "target": "object"}, {"type": "contains", "source": "text_data\\run-python.txt:2680", "target": "properties"}, {"type": "contains", "source": "text_data\\run-python.txt:2681", "target": "returnvalue"}, {"type": "contains", "source": "text_data\\run-python.txt:2682", "target": "dependencies"}, {"type": "contains", "source": "text_data\\run-python.txt:2682", "target": "exception"}, {"type": "contains", "source": "text_data\\run-python.txt:2682", "target": "defined"}, {"type": "contains", "source": "text_data\\run-python.txt:2682", "target": "inferred"}, {"type": "contains", "source": "text_data\\run-python.txt:2682", "target": "imports"}, {"type": "contains", "source": "text_data\\run-python.txt:2683", "target": "allows"}, {"type": "contains", "source": "text_data\\run-python.txt:2683", "target": "dependencies"}, {"type": "contains", "source": "text_data\\run-python.txt:2683", "target": "arent"}, {"type": "contains", "source": "text_data\\run-python.txt:2683", "target": "imported"}, {"type": "contains", "source": "text_data\\run-python.txt:2683", "target": "explicit"}, {"type": "contains", "source": "text_data\\run-python.txt:2684", "target": "import"}, {"type": "contains", "source": "text_data\\run-python.txt:2684", "target": "async"}, {"type": "contains", "source": "text_data\\run-python.txt:2684", "target": "stdioserverparameters"}, {"type": "contains", "source": "text_data\\run-python.txt:2684", "target": "pydantic"}, {"type": "contains", "source": "text_data\\run-python.txt:2684", "target": "write"}, {"type": "contains", "source": "text_data\\run-python.txt:2685", "target": "output"}, {"type": "contains", "source": "text_data\\run-python.txt:2685", "target": "printresultcontent0text"}, {"type": "contains", "source": "text_data\\run-python.txt:2685", "target": "statussuccessstatus"}, {"type": "contains", "source": "text_data\\run-python.txt:2685", "target": "dependenciespydanticemailvalidatordependencies"}, {"type": "contains", "source": "text_data\\run-python.txt:2685", "target": "emailhellopydanticdev"}, {"type": "contains", "source": "text_data\\run-python.txt:2686", "target": "supports"}, {"type": "contains", "source": "text_data\\run-python.txt:2686", "target": "logging"}, {"type": "contains", "source": "text_data\\run-python.txt:2686", "target": "level"}, {"type": "contains", "source": "text_data\\run-python.txt:2686", "target": "packages"}, {"type": "contains", "source": "text_data\\run-python.txt:2686", "target": "dependencies"}, {"type": "contains", "source": "text_data\\run-python.txt:2687", "target": "currently"}, {"type": "contains", "source": "text_data\\run-python.txt:2687", "target": "possible"}, {"type": "contains", "source": "text_data\\run-python.txt:2687", "target": "demonstrate"}, {"type": "contains", "source": "text_data\\run-python.txt:2687", "target": "python"}, {"type": "contains", "source": "text_data\\run-python.txt:2687", "target": "client"}, {"type": "contains", "source": "text_data\\server.txt:2687", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\server.txt:2687", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\server.txt:2687", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\server.txt:2687", "target": "v0050"}, {"type": "contains", "source": "text_data\\server.txt:2687", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\server.txt:2688", "target": "tools"}, {"type": "contains", "source": "text_data\\server.txt:2688", "target": "contributing"}, {"type": "contains", "source": "text_data\\server.txt:2688", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\server.txt:2688", "target": "documentation"}, {"type": "contains", "source": "text_data\\server.txt:2688", "target": "agents"}, {"type": "contains", "source": "text_data\\server.txt:2689", "target": "input"}, {"type": "contains", "source": "text_data\\server.txt:2689", "target": "image"}, {"type": "contains", "source": "text_data\\server.txt:2689", "target": "audio"}, {"type": "contains", "source": "text_data\\server.txt:2689", "target": "document"}, {"type": "contains", "source": "text_data\\server.txt:2690", "target": "examples"}, {"type": "contains", "source": "text_data\\server.txt:2690", "target": "client"}, {"type": "contains", "source": "text_data\\server.txt:2690", "target": "server"}, {"type": "contains", "source": "text_data\\server.txt:2690", "target": "python"}, {"type": "contains", "source": "text_data\\server.txt:2690", "target": "runpython"}, {"type": "contains", "source": "text_data\\server.txt:2691", "target": "stream"}, {"type": "contains", "source": "text_data\\server.txt:2691", "target": "reference"}, {"type": "contains", "source": "text_data\\server.txt:2691", "target": "pydantic"}, {"type": "contains", "source": "text_data\\server.txt:2691", "target": "model"}, {"type": "contains", "source": "text_data\\server.txt:2691", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\server.txt:2692", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\server.txt:2692", "target": "apiresult"}, {"type": "contains", "source": "text_data\\server.txt:2692", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\server.txt:2692", "target": "apimessages"}, {"type": "contains", "source": "text_data\\server.txt:2692", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\server.txt:2693", "target": "pydanticaimodelsgemini"}, {"type": "contains", "source": "text_data\\server.txt:2693", "target": "apimodelsgemini"}, {"type": "contains", "source": "text_data\\server.txt:2693", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\server.txt:2693", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\server.txt:2693", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\server.txt:2694", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\server.txt:2694", "target": "apipydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\server.txt:2694", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\server.txt:2694", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\server.txt:2694", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\server.txt:2695", "target": "server"}, {"type": "contains", "source": "text_data\\server.txt:2695", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\server.txt:2695", "target": "within"}, {"type": "contains", "source": "text_data\\server.txt:2695", "target": "import"}, {"type": "contains", "source": "text_data\\server.txt:2695", "target": "agent"}, {"type": "contains", "source": "text_data\\server.txt:2696", "target": "client"}, {"type": "contains", "source": "text_data\\server.txt:2696", "target": "server"}, {"type": "contains", "source": "text_data\\server.txt:2696", "target": "queried"}, {"type": "contains", "source": "text_data\\server.txt:2696", "target": "example"}, {"type": "contains", "source": "text_data\\server.txt:2696", "target": "using"}, {"type": "contains", "source": "text_data\\server.txt:2697", "target": "import"}, {"type": "contains", "source": "text_data\\server.txt:2697", "target": "async"}, {"type": "contains", "source": "text_data\\server.txt:2697", "target": "stdioserverparameters"}, {"type": "contains", "source": "text_data\\server.txt:2697", "target": "write"}, {"type": "contains", "source": "text_data\\server.txt:2697", "target": "await"}, {"type": "contains", "source": "text_data\\server.txt:2698", "target": "nestle"}, {"type": "contains", "source": "text_data\\server.txt:2698", "target": "softly"}, {"type": "contains", "source": "text_data\\server.txt:2698", "target": "round"}, {"type": "contains", "source": "text_data\\server.txt:2698", "target": "cotton"}, {"type": "contains", "source": "text_data\\server.txt:2698", "target": "blended"}, {"type": "contains", "source": "text_data\\server.txt:2699", "target": "samplinghttpsmodelcontextprotocoliodocsconceptssamplingsampling"}, {"type": "contains", "source": "text_data\\server.txt:2699", "target": "whereby"}, {"type": "contains", "source": "text_data\\server.txt:2699", "target": "servers"}, {"type": "contains", "source": "text_data\\server.txt:2699", "target": "request"}, {"type": "contains", "source": "text_data\\server.txt:2699", "target": "completions"}, {"type": "contains", "source": "text_data\\settings.txt:2699", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\settings.txt:2699", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\settings.txt:2699", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\settings.txt:2699", "target": "v0050"}, {"type": "contains", "source": "text_data\\settings.txt:2699", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\settings.txt:2700", "target": "tools"}, {"type": "contains", "source": "text_data\\settings.txt:2700", "target": "contributing"}, {"type": "contains", "source": "text_data\\settings.txt:2700", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\settings.txt:2700", "target": "documentation"}, {"type": "contains", "source": "text_data\\settings.txt:2700", "target": "agents"}, {"type": "contains", "source": "text_data\\settings.txt:2701", "target": "input"}, {"type": "contains", "source": "text_data\\settings.txt:2701", "target": "image"}, {"type": "contains", "source": "text_data\\settings.txt:2701", "target": "audio"}, {"type": "contains", "source": "text_data\\settings.txt:2701", "target": "document"}, {"type": "contains", "source": "text_data\\settings.txt:2702", "target": "examples"}, {"type": "contains", "source": "text_data\\settings.txt:2702", "target": "client"}, {"type": "contains", "source": "text_data\\settings.txt:2702", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\settings.txt:2702", "target": "server"}, {"type": "contains", "source": "text_data\\settings.txt:2702", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\settings.txt:2703", "target": "agent"}, {"type": "contains", "source": "text_data\\settings.txt:2703", "target": "stream"}, {"type": "contains", "source": "text_data\\settings.txt:2703", "target": "reference"}, {"type": "contains", "source": "text_data\\settings.txt:2703", "target": "pydantic"}, {"type": "contains", "source": "text_data\\settings.txt:2703", "target": "model"}, {"type": "contains", "source": "text_data\\settings.txt:2704", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\settings.txt:2704", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\settings.txt:2704", "target": "result"}, {"type": "contains", "source": "text_data\\settings.txt:2704", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\settings.txt:2704", "target": "messages"}, {"type": "contains", "source": "text_data\\settings.txt:2705", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\settings.txt:2705", "target": "pydanticaimodelsanthropic"}, {"type": "contains", "source": "text_data\\settings.txt:2705", "target": "modelsanthropic"}, {"type": "contains", "source": "text_data\\settings.txt:2705", "target": "pydanticaimodelsbedrock"}, {"type": "contains", "source": "text_data\\settings.txt:2705", "target": "modelsbedrock"}, {"type": "contains", "source": "text_data\\settings.txt:2706", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\settings.txt:2706", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\settings.txt:2706", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\settings.txt:2706", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\settings.txt:2706", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\settings.txt:2707", "target": "settings"}, {"type": "contains", "source": "text_data\\settings.txt:2707", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\settings.txt:2707", "target": "models"}, {"type": "contains", "source": "text_data\\settings.txt:2707", "target": "table"}, {"type": "contains", "source": "text_data\\settings.txt:2707", "target": "contents"}, {"type": "contains", "source": "text_data\\settings.txt:2711", "target": "settings"}, {"type": "contains", "source": "text_data\\settings.txt:2711", "target": "models"}, {"type": "contains", "source": "text_data\\settings.txt:2711", "target": "multiple"}, {"type": "contains", "source": "text_data\\settings.txt:2711", "target": "supported"}, {"type": "contains", "source": "text_data\\settings.txt:2711", "target": "temperature"}, {"type": "contains", "source": "text_data\\settings.txt:2712", "target": "temperature"}, {"type": "contains", "source": "text_data\\settings.txt:2712", "target": "results"}, {"type": "contains", "source": "text_data\\settings.txt:2712", "target": "supported"}, {"type": "contains", "source": "text_data\\settings.txt:2712", "target": "gemini"}, {"type": "contains", "source": "text_data\\settings.txt:2712", "target": "anthropic"}, {"type": "contains", "source": "text_data\\settings.txt:2713", "target": "openai"}, {"type": "contains", "source": "text_data\\settings.txt:2713", "target": "anthropic"}, {"type": "contains", "source": "text_data\\settings.txt:2713", "target": "timeout"}, {"type": "contains", "source": "text_data\\settings.txt:2713", "target": "supported"}, {"type": "contains", "source": "text_data\\settings.txt:2713", "target": "gemini"}, {"type": "contains", "source": "text_data\\settings.txt:2714", "target": "supported"}, {"type": "contains", "source": "text_data\\settings.txt:2714", "target": "openai"}, {"type": "contains", "source": "text_data\\settings.txt:2714", "target": "cohere"}, {"type": "contains", "source": "text_data\\settings.txt:2714", "target": "mistral"}, {"type": "contains", "source": "text_data\\settings.txt:2714", "target": "tokens"}, {"type": "contains", "source": "text_data\\settings.txt:2715", "target": "supported"}, {"type": "contains", "source": "text_data\\settings.txt:2715", "target": "openai"}, {"type": "contains", "source": "text_data\\settings.txt:2715", "target": "maxtokens"}, {"type": "contains", "source": "text_data\\settings.txt:2715", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\settings.txt:2716", "target": "temperature"}, {"type": "contains", "source": "text_data\\settings.txt:2716", "target": "maximum"}, {"type": "contains", "source": "text_data\\settings.txt:2716", "target": "supported"}, {"type": "contains", "source": "text_data\\settings.txt:2716", "target": "gemini"}, {"type": "contains", "source": "text_data\\settings.txt:2716", "target": "anthropic"}, {"type": "contains", "source": "text_data\\settings.txt:2717", "target": "timeout"}, {"type": "contains", "source": "text_data\\settings.txt:2717", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\settings.txt:2717", "target": "floathttpsdocspythonorg3libraryfunctionshtmlfloat"}, {"type": "contains", "source": "text_data\\settings.txt:2717", "target": "sampling"}, {"type": "contains", "source": "text_data\\settings.txt:2717", "target": "temperature"}, {"type": "contains", "source": "text_data\\settings.txt:2718", "target": "supported"}, {"type": "contains", "source": "text_data\\settings.txt:2718", "target": "openai"}, {"type": "contains", "source": "text_data\\settings.txt:2718", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\settings.txt:2718", "target": "anthropic"}, {"type": "contains", "source": "text_data\\settings.txt:2718", "target": "mistral"}, {"type": "contains", "source": "text_data\\settings.txt:2719", "target": "tokens"}, {"type": "contains", "source": "text_data\\settings.txt:2719", "target": "supported"}, {"type": "contains", "source": "text_data\\settings.txt:2719", "target": "penalize"}, {"type": "contains", "source": "text_data\\settings.txt:2719", "target": "based"}, {"type": "contains", "source": "text_data\\settings.txt:2719", "target": "openai"}, {"type": "contains", "source": "text_data\\settings.txt:2720", "target": "supported"}, {"type": "contains", "source": "text_data\\settings.txt:2720", "target": "openai"}, {"type": "contains", "source": "text_data\\settings.txt:2720", "target": "pydantic"}, {"type": "contains", "source": "text_data\\settings.txt:2720", "target": "services"}, {"type": "contains", "source": "text_data\\settings.txt:2720", "target": "present"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2720", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2720", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2720", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2720", "target": "v0050"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2720", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2721", "target": "tools"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2721", "target": "contributing"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2721", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2721", "target": "documentation"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2721", "target": "agents"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2722", "target": "input"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2722", "target": "image"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2722", "target": "audio"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2722", "target": "document"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2723", "target": "examples"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2723", "target": "client"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2723", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2723", "target": "server"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2723", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2724", "target": "generation"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2724", "target": "example"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2724", "target": "stream"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2724", "target": "reference"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2724", "target": "pydantic"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2725", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2725", "target": "apimessages"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2725", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2725", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2725", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2726", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2726", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2726", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2726", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2726", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2727", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2727", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2727", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2727", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2727", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2728", "target": "example"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2728", "target": "running"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2728", "target": "postgresql"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2728", "target": "docker"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2728", "target": "table"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2729", "target": "pydanticaiexamplessqlgen"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2729", "target": "postgres"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2729", "target": "pipuv"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2729", "target": "python"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2729", "target": "errors"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2730", "target": "import"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2730", "target": "logfire"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2730", "target": "asyncio"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2730", "target": "collectionsabc"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2730", "target": "asyncgenerator"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2731", "target": "records"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2731", "target": "timestamptz"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2731", "target": "where"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2731", "target": "false"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2731", "target": "logfireinstrumentasyncpg"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2732", "target": "records"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2732", "target": "where"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2732", "target": "foobar"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2732", "target": "response"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2732", "target": "request"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2733", "target": "response"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2733", "target": "agent"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2733", "target": "ignore"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2733", "target": "could"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2733", "target": "successfully"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2734", "target": "async"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2734", "target": "return"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2734", "target": "result"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2734", "target": "response"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2734", "target": "instrumenttrue"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2735", "target": "raise"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2735", "target": "query"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2735", "target": "await"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2735", "target": "result"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2735", "target": "async"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2736", "target": "await"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2736", "target": "database"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2736", "target": "pyright"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2736", "target": "dbexists"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2736", "target": "result"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2737", "target": "await"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2737", "target": "asyncpgconnectfserverdsndatabase"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2737", "target": "logfirespancreate"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2737", "target": "schema"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2737", "target": "async"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2738", "target": "pydantic"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2738", "target": "services"}, {"type": "contains", "source": "text_data\\sql-gen.txt:2738", "target": "present"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2738", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2738", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2738", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2738", "target": "v0050"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2738", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2739", "target": "tools"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2739", "target": "contributing"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2739", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2739", "target": "documentation"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2739", "target": "agents"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2740", "target": "input"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2740", "target": "image"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2740", "target": "audio"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2740", "target": "document"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2741", "target": "examples"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2741", "target": "client"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2741", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2741", "target": "server"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2741", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2742", "target": "stream"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2742", "target": "markdown"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2742", "target": "example"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2742", "target": "reference"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2742", "target": "pydantic"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2743", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2743", "target": "apimessages"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2743", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2743", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2743", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2744", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2744", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2744", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2744", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2744", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2745", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2745", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2745", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2745", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2745", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2746", "target": "example"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2746", "target": "running"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2746", "target": "stream"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2746", "target": "markdown"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2746", "target": "environment"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2747", "target": "import"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2747", "target": "logfire"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2747", "target": "agent"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2747", "target": "models"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2747", "target": "asyncio"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2748", "target": "async"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2748", "target": "model"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2748", "target": "console"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2748", "target": "prompt"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2748", "target": "envvar"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2749", "target": "console"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2749", "target": "yield"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2749", "target": "liveupdatemarkdownmessage"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2749", "target": "consolelogresultusage"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2749", "target": "consolelogfmodel"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2750", "target": "selflexername"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2750", "target": "themeselftheme"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2750", "target": "backgroundcolordefault"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2750", "target": "wordwraptrue"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2750", "target": "yield"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2751", "target": "pydantic"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2751", "target": "services"}, {"type": "contains", "source": "text_data\\stream-markdown.txt:2751", "target": "present"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2751", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2751", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2751", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2751", "target": "v0050"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2751", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2752", "target": "tools"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2752", "target": "contributing"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2752", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2752", "target": "documentation"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2752", "target": "agents"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2753", "target": "input"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2753", "target": "image"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2753", "target": "audio"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2753", "target": "document"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2754", "target": "examples"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2754", "target": "client"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2754", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2754", "target": "server"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2754", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2755", "target": "stream"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2755", "target": "whales"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2755", "target": "example"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2755", "target": "reference"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2755", "target": "pydantic"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2756", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2756", "target": "apimessages"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2756", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2756", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2756", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2757", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2757", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2757", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2757", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2757", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2758", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2758", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2758", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2758", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2758", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2759", "target": "example"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2759", "target": "whales"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2759", "target": "structured"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2759", "target": "table"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2759", "target": "running"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2760", "target": "import"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2760", "target": "annotated"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2760", "target": "logfire"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2760", "target": "notrequired"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2760", "target": "length"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2761", "target": "weight"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2761", "target": "whale"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2761", "target": "description"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2761", "target": "async"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2761", "target": "console"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2762", "target": "message"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2762", "target": "table"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2762", "target": "consoleprintresponse"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2762", "target": "stylegreen"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2762", "target": "async"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2763", "target": "justifyright"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2763", "target": "whale"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2763", "target": "tableaddcolumnavg"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2763", "target": "titlespecies"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2763", "target": "captionstreaming"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2764", "target": "fwhalelength00f"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2764", "target": "fw00f"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2764", "target": "whalegetweight"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2764", "target": "whalegetocean"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2764", "target": "whalegetdescription"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2765", "target": "pydantic"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2765", "target": "services"}, {"type": "contains", "source": "text_data\\stream-whales.txt:2765", "target": "present"}, {"type": "contains", "source": "text_data\\test.txt:2765", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\test.txt:2765", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\test.txt:2765", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\test.txt:2765", "target": "v0050"}, {"type": "contains", "source": "text_data\\test.txt:2765", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\test.txt:2766", "target": "tools"}, {"type": "contains", "source": "text_data\\test.txt:2766", "target": "contributing"}, {"type": "contains", "source": "text_data\\test.txt:2766", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\test.txt:2766", "target": "documentation"}, {"type": "contains", "source": "text_data\\test.txt:2766", "target": "agents"}, {"type": "contains", "source": "text_data\\test.txt:2767", "target": "evals"}, {"type": "contains", "source": "text_data\\test.txt:2767", "target": "input"}, {"type": "contains", "source": "text_data\\test.txt:2767", "target": "graphs"}, {"type": "contains", "source": "text_data\\test.txt:2767", "target": "graph"}, {"type": "contains", "source": "text_data\\test.txt:2767", "target": "image"}, {"type": "contains", "source": "text_data\\test.txt:2768", "target": "examples"}, {"type": "contains", "source": "text_data\\test.txt:2768", "target": "client"}, {"type": "contains", "source": "text_data\\test.txt:2768", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\test.txt:2768", "target": "server"}, {"type": "contains", "source": "text_data\\test.txt:2768", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\test.txt:2769", "target": "agent"}, {"type": "contains", "source": "text_data\\test.txt:2769", "target": "stream"}, {"type": "contains", "source": "text_data\\test.txt:2769", "target": "reference"}, {"type": "contains", "source": "text_data\\test.txt:2769", "target": "pydantic"}, {"type": "contains", "source": "text_data\\test.txt:2769", "target": "model"}, {"type": "contains", "source": "text_data\\test.txt:2770", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\test.txt:2770", "target": "result"}, {"type": "contains", "source": "text_data\\test.txt:2770", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\test.txt:2770", "target": "messages"}, {"type": "contains", "source": "text_data\\test.txt:2770", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\test.txt:2771", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\test.txt:2771", "target": "modelname"}, {"type": "contains", "source": "text_data\\test.txt:2771", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\test.txt:2771", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\test.txt:2771", "target": "mistral"}, {"type": "contains", "source": "text_data\\test.txt:2772", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\test.txt:2772", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\test.txt:2772", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\test.txt:2772", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\test.txt:2772", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\test.txt:2773", "target": "modelname"}, {"type": "contains", "source": "text_data\\test.txt:2773", "target": "table"}, {"type": "contains", "source": "text_data\\test.txt:2773", "target": "contents"}, {"type": "contains", "source": "text_data\\test.txt:2773", "target": "testmodel"}, {"type": "contains", "source": "text_data\\test.txt:2773", "target": "calltools"}, {"type": "contains", "source": "text_data\\test.txt:2774", "target": "testmodel"}, {"type": "contains", "source": "text_data\\test.txt:2774", "target": "import"}, {"type": "contains", "source": "text_data\\test.txt:2774", "target": "agent"}, {"type": "contains", "source": "text_data\\test.txt:2774", "target": "myagent"}, {"type": "contains", "source": "text_data\\test.txt:2774", "target": "assert"}, {"type": "contains", "source": "text_data\\test.txt:2775", "target": "model"}, {"type": "contains", "source": "text_data\\test.txt:2775", "target": "response"}, {"type": "contains", "source": "text_data\\test.txt:2775", "target": "bases"}, {"type": "contains", "source": "text_data\\test.txt:2775", "target": "modelbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\test.txt:2775", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\test.txt:2779", "target": "tools"}, {"type": "contains", "source": "text_data\\test.txt:2779", "target": "dataclass"}, {"type": "contains", "source": "text_data\\test.txt:2779", "target": "class"}, {"type": "contains", "source": "text_data\\test.txt:2779", "target": "model"}, {"type": "contains", "source": "text_data\\test.txt:2779", "target": "response"}, {"type": "contains", "source": "text_data\\test.txt:2780", "target": "result"}, {"type": "contains", "source": "text_data\\test.txt:2780", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\test.txt:2780", "target": "request"}, {"type": "contains", "source": "text_data\\test.txt:2780", "target": "passed"}, {"type": "contains", "source": "text_data\\test.txt:2780", "target": "function"}, {"type": "contains", "source": "text_data\\test.txt:2781", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\test.txt:2781", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\test.txt:2781", "target": "usage"}, {"type": "contains", "source": "text_data\\test.txt:2781", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\test.txt:2781", "target": "fielddefaulttest"}, {"type": "contains", "source": "text_data\\test.txt:2782", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\test.txt:2782", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\test.txt:2782", "target": "property"}, {"type": "contains", "source": "text_data\\test.txt:2782", "target": "model"}, {"type": "contains", "source": "text_data\\test.txt:2782", "target": "messages"}, {"type": "contains", "source": "text_data\\test.txt:2783", "target": "return"}, {"type": "contains", "source": "text_data\\test.txt:2783", "target": "tooldefinition"}, {"type": "contains", "source": "text_data\\test.txt:2783", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\test.txt:2783", "target": "selfcalltools"}, {"type": "contains", "source": "text_data\\test.txt:2783", "target": "rname"}, {"type": "contains", "source": "text_data\\test.txt:2784", "target": "assert"}, {"type": "contains", "source": "text_data\\test.txt:2784", "target": "return"}, {"type": "contains", "source": "text_data\\test.txt:2784", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\test.txt:2784", "target": "customresulttext"}, {"type": "contains", "source": "text_data\\test.txt:2784", "target": "selfcustomresultargs"}, {"type": "contains", "source": "text_data\\test.txt:2785", "target": "return"}, {"type": "contains", "source": "text_data\\test.txt:2785", "target": "textresultnone"}, {"type": "contains", "source": "text_data\\test.txt:2785", "target": "modelsettings"}, {"type": "contains", "source": "text_data\\test.txt:2785", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\test.txt:2785", "target": "resulttool"}, {"type": "contains", "source": "text_data\\test.txt:2786", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\test.txt:2786", "target": "toolcalls"}, {"type": "contains", "source": "text_data\\test.txt:2786", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\test.txt:2786", "target": "messages"}, {"type": "contains", "source": "text_data\\test.txt:2786", "target": "selfgettoolcallsmodelrequestparameters"}, {"type": "contains", "source": "text_data\\test.txt:2787", "target": "tools"}, {"type": "contains", "source": "text_data\\test.txt:2787", "target": "check"}, {"type": "contains", "source": "text_data\\test.txt:2787", "target": "newretrynames"}, {"type": "contains", "source": "text_data\\test.txt:2787", "target": "modelrequest"}, {"type": "contains", "source": "text_data\\test.txt:2787", "target": "retry"}, {"type": "contains", "source": "text_data\\test.txt:2788", "target": "resulttools"}, {"type": "contains", "source": "text_data\\test.txt:2788", "target": "toolname"}, {"type": "contains", "source": "text_data\\test.txt:2788", "target": "resultvalue"}, {"type": "contains", "source": "text_data\\test.txt:2788", "target": "check"}, {"type": "contains", "source": "text_data\\test.txt:2788", "target": "result"}, {"type": "contains", "source": "text_data\\test.txt:2789", "target": "output"}, {"type": "contains", "source": "text_data\\test.txt:2789", "target": "isinstanceresult"}, {"type": "contains", "source": "text_data\\test.txt:2789", "target": "textresult"}, {"type": "contains", "source": "text_data\\test.txt:2789", "target": "responsetext"}, {"type": "contains", "source": "text_data\\test.txt:2789", "target": "resultvalue"}, {"type": "contains", "source": "text_data\\test.txt:2790", "target": "return"}, {"type": "contains", "source": "text_data\\test.txt:2790", "target": "modelnameselfmodelname"}, {"type": "contains", "source": "text_data\\test.txt:2790", "target": "customresultargs"}, {"type": "contains", "source": "text_data\\test.txt:2790", "target": "modelresponsepartstextpartsuccess"}, {"type": "contains", "source": "text_data\\test.txt:2790", "target": "calls"}, {"type": "contains", "source": "text_data\\test.txt:2791", "target": "responseargs"}, {"type": "contains", "source": "text_data\\test.txt:2791", "target": "selfgentoolargsresulttool"}, {"type": "contains", "source": "text_data\\test.txt:2791", "target": "return"}, {"type": "contains", "source": "text_data\\test.txt:2791", "target": "modelresponsepartstoolcallpartresulttoolname"}, {"type": "contains", "source": "text_data\\test.txt:2791", "target": "modelnameselfmodelname"}, {"type": "contains", "source": "text_data\\test.txt:2792", "target": "tools"}, {"type": "contains", "source": "text_data\\test.txt:2792", "target": "customresulttext"}, {"type": "contains", "source": "text_data\\test.txt:2792", "target": "classattribute"}, {"type": "contains", "source": "text_data\\test.txt:2792", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\test.txt:2792", "target": "customresultargs"}, {"type": "contains", "source": "text_data\\test.txt:2793", "target": "passed"}, {"type": "contains", "source": "text_data\\test.txt:2793", "target": "classattribute"}, {"type": "contains", "source": "text_data\\test.txt:2793", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\test.txt:2793", "target": "lastmodelrequestparameters"}, {"type": "contains", "source": "text_data\\test.txt:2793", "target": "these"}, {"type": "contains", "source": "text_data\\test.txt:2794", "target": "model"}, {"type": "contains", "source": "text_data\\test.txt:2794", "target": "request"}, {"type": "contains", "source": "text_data\\test.txt:2794", "target": "system"}, {"type": "contains", "source": "text_data\\test.txt:2794", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\test.txt:2794", "target": "function"}, {"type": "contains", "source": "text_data\\test.txt:2795", "target": "structured"}, {"type": "contains", "source": "text_data\\test.txt:2795", "target": "response"}, {"type": "contains", "source": "text_data\\test.txt:2795", "target": "streams"}, {"type": "contains", "source": "text_data\\test.txt:2795", "target": "source"}, {"type": "contains", "source": "text_data\\test.txt:2795", "target": "pydanticaislimpydanticaimodelstestpy"}, {"type": "contains", "source": "text_data\\test.txt:2796", "target": "messages"}, {"type": "contains", "source": "text_data\\test.txt:2796", "target": "dataclass"}, {"type": "contains", "source": "text_data\\test.txt:2796", "target": "class"}, {"type": "contains", "source": "text_data\\test.txt:2796", "target": "teststreamedresponsestreamedresponse"}, {"type": "contains", "source": "text_data\\test.txt:2796", "target": "structured"}, {"type": "contains", "source": "text_data\\test.txt:2797", "target": "words"}, {"type": "contains", "source": "text_data\\test.txt:2797", "target": "yield"}, {"type": "contains", "source": "text_data\\test.txt:2797", "target": "lentext"}, {"type": "contains", "source": "text_data\\test.txt:2797", "target": "textmid"}, {"type": "contains", "source": "text_data\\test.txt:2797", "target": "selfusage"}, {"type": "contains", "source": "text_data\\test.txt:2798", "target": "property"}, {"type": "contains", "source": "text_data\\test.txt:2798", "target": "response"}, {"type": "contains", "source": "text_data\\test.txt:2798", "target": "return"}, {"type": "contains", "source": "text_data\\test.txt:2798", "target": "yield"}, {"type": "contains", "source": "text_data\\test.txt:2798", "target": "selfpartsmanagerhandletoolcallpart"}, {"type": "contains", "source": "text_data\\test.txt:2799", "target": "timestamp"}, {"type": "contains", "source": "text_data\\test.txt:2799", "target": "response"}, {"type": "contains", "source": "text_data\\test.txt:2799", "target": "modelname"}, {"type": "contains", "source": "text_data\\test.txt:2799", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\test.txt:2799", "target": "model"}, {"type": "contains", "source": "text_data\\testing.txt:2799", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\testing.txt:2799", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\testing.txt:2799", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\testing.txt:2799", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\testing.txt:2799", "target": "repository"}, {"type": "contains", "source": "text_data\\testing.txt:2800", "target": "testing"}, {"type": "contains", "source": "text_data\\testing.txt:2800", "target": "tools"}, {"type": "contains", "source": "text_data\\testing.txt:2800", "target": "contributing"}, {"type": "contains", "source": "text_data\\testing.txt:2800", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\testing.txt:2800", "target": "documentation"}, {"type": "contains", "source": "text_data\\testing.txt:2801", "target": "evals"}, {"type": "contains", "source": "text_data\\testing.txt:2801", "target": "input"}, {"type": "contains", "source": "text_data\\testing.txt:2801", "target": "multiagent"}, {"type": "contains", "source": "text_data\\testing.txt:2801", "target": "applications"}, {"type": "contains", "source": "text_data\\testing.txt:2801", "target": "multiagentapplications"}, {"type": "contains", "source": "text_data\\testing.txt:2802", "target": "examples"}, {"type": "contains", "source": "text_data\\testing.txt:2802", "target": "client"}, {"type": "contains", "source": "text_data\\testing.txt:2802", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\testing.txt:2802", "target": "server"}, {"type": "contains", "source": "text_data\\testing.txt:2802", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\testing.txt:2803", "target": "stream"}, {"type": "contains", "source": "text_data\\testing.txt:2803", "target": "reference"}, {"type": "contains", "source": "text_data\\testing.txt:2803", "target": "pydantic"}, {"type": "contains", "source": "text_data\\testing.txt:2803", "target": "model"}, {"type": "contains", "source": "text_data\\testing.txt:2803", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\testing.txt:2804", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\testing.txt:2804", "target": "apimessages"}, {"type": "contains", "source": "text_data\\testing.txt:2804", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\testing.txt:2804", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\testing.txt:2804", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\testing.txt:2805", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\testing.txt:2805", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\testing.txt:2805", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\testing.txt:2805", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\testing.txt:2805", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\testing.txt:2806", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\testing.txt:2806", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\testing.txt:2806", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\testing.txt:2806", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\testing.txt:2806", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\testing.txt:2807", "target": "testing"}, {"type": "contains", "source": "text_data\\testing.txt:2807", "target": "tests"}, {"type": "contains", "source": "text_data\\testing.txt:2807", "target": "writing"}, {"type": "contains", "source": "text_data\\testing.txt:2807", "target": "table"}, {"type": "contains", "source": "text_data\\testing.txt:2807", "target": "contents"}, {"type": "contains", "source": "text_data\\testing.txt:2808", "target": "model"}, {"type": "contains", "source": "text_data\\testing.txt:2808", "target": "pytesthttpsdocspytestorgenstable"}, {"type": "contains", "source": "text_data\\testing.txt:2808", "target": "harness"}, {"type": "contains", "source": "text_data\\testing.txt:2808", "target": "yourself"}, {"type": "contains", "source": "text_data\\testing.txt:2808", "target": "typing"}, {"type": "contains", "source": "text_data\\testing.txt:2809", "target": "allowmodelrequestsfalseapimodelsbasepydanticaimodelsallowmodelrequests"}, {"type": "contains", "source": "text_data\\testing.txt:2809", "target": "globally"}, {"type": "contains", "source": "text_data\\testing.txt:2809", "target": "block"}, {"type": "contains", "source": "text_data\\testing.txt:2809", "target": "requests"}, {"type": "contains", "source": "text_data\\testing.txt:2809", "target": "being"}, {"type": "contains", "source": "text_data\\testing.txt:2810", "target": "testmodel"}, {"type": "contains", "source": "text_data\\testing.txt:2810", "target": "tools"}, {"type": "contains", "source": "text_data\\testing.txt:2810", "target": "agent"}, {"type": "contains", "source": "text_data\\testing.txt:2810", "target": "return"}, {"type": "contains", "source": "text_data\\testing.txt:2810", "target": "plain"}, {"type": "contains", "source": "text_data\\testing.txt:2811", "target": "write"}, {"type": "contains", "source": "text_data\\testing.txt:2811", "target": "resulting"}, {"type": "contains", "source": "text_data\\testing.txt:2811", "target": "pretty"}, {"type": "contains", "source": "text_data\\testing.txt:2811", "target": "relevant"}, {"type": "contains", "source": "text_data\\testing.txt:2811", "target": "should"}, {"type": "contains", "source": "text_data\\testing.txt:2812", "target": "import"}, {"type": "contains", "source": "text_data\\testing.txt:2812", "target": "weatherservice"}, {"type": "contains", "source": "text_data\\testing.txt:2812", "target": "weather"}, {"type": "contains", "source": "text_data\\testing.txt:2812", "target": "agent"}, {"type": "contains", "source": "text_data\\testing.txt:2812", "target": "databaseconn"}, {"type": "contains", "source": "text_data\\testing.txt:2813", "target": "forecastdate"}, {"type": "contains", "source": "text_data\\testing.txt:2813", "target": "async"}, {"type": "contains", "source": "text_data\\testing.txt:2813", "target": "return"}, {"type": "contains", "source": "text_data\\testing.txt:2813", "target": "weatherservice"}, {"type": "contains", "source": "text_data\\testing.txt:2813", "target": "datetoday"}, {"type": "contains", "source": "text_data\\testing.txt:2814", "target": "userid"}, {"type": "contains", "source": "text_data\\testing.txt:2814", "target": "await"}, {"type": "contains", "source": "text_data\\testing.txt:2814", "target": "runforecastprompt"}, {"type": "contains", "source": "text_data\\testing.txt:2814", "target": "async"}, {"type": "contains", "source": "text_data\\testing.txt:2814", "target": "result"}, {"type": "contains", "source": "text_data\\testing.txt:2815", "target": "objects"}, {"type": "contains", "source": "text_data\\testing.txt:2815", "target": "function"}, {"type": "contains", "source": "text_data\\testing.txt:2815", "target": "takes"}, {"type": "contains", "source": "text_data\\testing.txt:2815", "target": "userprompt"}, {"type": "contains", "source": "text_data\\testing.txt:2815", "target": "userid"}, {"type": "contains", "source": "text_data\\testing.txt:2816", "target": "import"}, {"type": "contains", "source": "text_data\\testing.txt:2816", "target": "datetime"}, {"type": "contains", "source": "text_data\\testing.txt:2816", "target": "timezone"}, {"type": "contains", "source": "text_data\\testing.txt:2816", "target": "pytest"}, {"type": "contains", "source": "text_data\\testing.txt:2816", "target": "dirtyequals"}, {"type": "contains", "source": "text_data\\testing.txt:2817", "target": "modelsallowmodelrequests"}, {"type": "contains", "source": "text_data\\testing.txt:2817", "target": "false"}, {"type": "contains", "source": "text_data\\testing.txt:2817", "target": "safety"}, {"type": "contains", "source": "text_data\\testing.txt:2817", "target": "measure"}, {"type": "contains", "source": "text_data\\testing.txt:2817", "target": "accidentally"}, {"type": "contains", "source": "text_data\\testing.txt:2818", "target": "replace"}, {"type": "contains", "source": "text_data\\testing.txt:2818", "target": "model"}, {"type": "contains", "source": "text_data\\testing.txt:2818", "target": "override"}, {"type": "contains", "source": "text_data\\testing.txt:2818", "target": "inside"}, {"type": "contains", "source": "text_data\\testing.txt:2818", "target": "agent"}, {"type": "contains", "source": "text_data\\testing.txt:2819", "target": "testmodel"}, {"type": "contains", "source": "text_data\\testing.txt:2819", "target": "tools"}, {"type": "contains", "source": "text_data\\testing.txt:2819", "target": "assert"}, {"type": "contains", "source": "text_data\\testing.txt:2819", "target": "messages"}, {"type": "contains", "source": "text_data\\testing.txt:2819", "target": "which"}, {"type": "contains", "source": "text_data\\testing.txt:2820", "target": "parts"}, {"type": "contains", "source": "text_data\\testing.txt:2820", "target": "weather"}, {"type": "contains", "source": "text_data\\testing.txt:2820", "target": "timestampisnowtztimezoneutc"}, {"type": "contains", "source": "text_data\\testing.txt:2820", "target": "systempromptpart"}, {"type": "contains", "source": "text_data\\testing.txt:2820", "target": "contentproviding"}, {"type": "contains", "source": "text_data\\testing.txt:2821", "target": "parts"}, {"type": "contains", "source": "text_data\\testing.txt:2821", "target": "toolnameweatherforecast"}, {"type": "contains", "source": "text_data\\testing.txt:2821", "target": "values"}, {"type": "contains", "source": "text_data\\testing.txt:2821", "target": "toolcallpart"}, {"type": "contains", "source": "text_data\\testing.txt:2821", "target": "location"}, {"type": "contains", "source": "text_data\\testing.txt:2822", "target": "chance"}, {"type": "contains", "source": "text_data\\testing.txt:2822", "target": "timestampisnowtztimezoneutc"}, {"type": "contains", "source": "text_data\\testing.txt:2822", "target": "contentsunny"}, {"type": "contains", "source": "text_data\\testing.txt:2822", "target": "toolcallidisstr"}, {"type": "contains", "source": "text_data\\testing.txt:2822", "target": "modelresponse"}, {"type": "contains", "source": "text_data\\testing.txt:2823", "target": "weatherforecast"}, {"type": "contains", "source": "text_data\\testing.txt:2823", "target": "functionmodel"}, {"type": "contains", "source": "text_data\\testing.txt:2823", "target": "called"}, {"type": "contains", "source": "text_data\\testing.txt:2823", "target": "testing"}, {"type": "contains", "source": "text_data\\testing.txt:2823", "target": "above"}, {"type": "contains", "source": "text_data\\testing.txt:2824", "target": "import"}, {"type": "contains", "source": "text_data\\testing.txt:2824", "target": "pytest"}, {"type": "contains", "source": "text_data\\testing.txt:2824", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\testing.txt:2824", "target": "models"}, {"type": "contains", "source": "text_data\\testing.txt:2824", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\testing.txt:2825", "target": "function"}, {"type": "contains", "source": "text_data\\testing.txt:2825", "target": "callweatherforecast"}, {"type": "contains", "source": "text_data\\testing.txt:2825", "target": "tools"}, {"type": "contains", "source": "text_data\\testing.txt:2825", "target": "define"}, {"type": "contains", "source": "text_data\\testing.txt:2825", "target": "called"}, {"type": "contains", "source": "text_data\\testing.txt:2826", "target": "return"}, {"type": "contains", "source": "text_data\\testing.txt:2826", "target": "assert"}, {"type": "contains", "source": "text_data\\testing.txt:2826", "target": "location"}, {"type": "contains", "source": "text_data\\testing.txt:2826", "target": "forecast"}, {"type": "contains", "source": "text_data\\testing.txt:2826", "target": "london"}, {"type": "contains", "source": "text_data\\testing.txt:2827", "target": "forecast"}, {"type": "contains", "source": "text_data\\testing.txt:2827", "target": "await"}, {"type": "contains", "source": "text_data\\testing.txt:2827", "target": "functionmodelapimodelsfunctionpydanticaimodelsfunctionfunctionmodel"}, {"type": "contains", "source": "text_data\\testing.txt:2827", "target": "replace"}, {"type": "contains", "source": "text_data\\testing.txt:2827", "target": "agents"}, {"type": "contains", "source": "text_data\\testing.txt:2828", "target": "model"}, {"type": "contains", "source": "text_data\\testing.txt:2828", "target": "pytest"}, {"type": "contains", "source": "text_data\\testing.txt:2828", "target": "overriding"}, {"type": "contains", "source": "text_data\\testing.txt:2828", "target": "fixtures"}, {"type": "contains", "source": "text_data\\testing.txt:2828", "target": "youre"}, {"type": "contains", "source": "text_data\\testing.txt:2829", "target": "import"}, {"type": "contains", "source": "text_data\\testing.txt:2829", "target": "testspy"}, {"type": "contains", "source": "text_data\\testing.txt:2829", "target": "pytest"}, {"type": "contains", "source": "text_data\\testing.txt:2829", "target": "weatherapp"}, {"type": "contains", "source": "text_data\\testing.txt:2829", "target": "weatheragent"}, {"type": "contains", "source": "text_data\\tools.txt:2829", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\tools.txt:2829", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\tools.txt:2829", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\tools.txt:2829", "target": "v0050"}, {"type": "contains", "source": "text_data\\tools.txt:2829", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\tools.txt:2830", "target": "tools"}, {"type": "contains", "source": "text_data\\tools.txt:2830", "target": "contributing"}, {"type": "contains", "source": "text_data\\tools.txt:2830", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\tools.txt:2830", "target": "documentation"}, {"type": "contains", "source": "text_data\\tools.txt:2830", "target": "agents"}, {"type": "contains", "source": "text_data\\tools.txt:2831", "target": "input"}, {"type": "contains", "source": "text_data\\tools.txt:2831", "target": "image"}, {"type": "contains", "source": "text_data\\tools.txt:2831", "target": "audio"}, {"type": "contains", "source": "text_data\\tools.txt:2831", "target": "document"}, {"type": "contains", "source": "text_data\\tools.txt:2832", "target": "examples"}, {"type": "contains", "source": "text_data\\tools.txt:2832", "target": "client"}, {"type": "contains", "source": "text_data\\tools.txt:2832", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\tools.txt:2832", "target": "server"}, {"type": "contains", "source": "text_data\\tools.txt:2832", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\tools.txt:2833", "target": "model"}, {"type": "contains", "source": "text_data\\tools.txt:2833", "target": "agent"}, {"type": "contains", "source": "text_data\\tools.txt:2833", "target": "stream"}, {"type": "contains", "source": "text_data\\tools.txt:2833", "target": "reference"}, {"type": "contains", "source": "text_data\\tools.txt:2833", "target": "pydanticaitools"}, {"type": "contains", "source": "text_data\\tools.txt:2834", "target": "messages"}, {"type": "contains", "source": "text_data\\tools.txt:2834", "target": "runcontext"}, {"type": "contains", "source": "text_data\\tools.txt:2834", "target": "model"}, {"type": "contains", "source": "text_data\\tools.txt:2834", "target": "usage"}, {"type": "contains", "source": "text_data\\tools.txt:2834", "target": "prompt"}, {"type": "contains", "source": "text_data\\tools.txt:2835", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\tools.txt:2835", "target": "exceptions"}, {"type": "contains", "source": "text_data\\tools.txt:2835", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\tools.txt:2835", "target": "settings"}, {"type": "contains", "source": "text_data\\tools.txt:2835", "target": "pydanticaiusage"}, {"type": "contains", "source": "text_data\\tools.txt:2836", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\tools.txt:2836", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\tools.txt:2836", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\tools.txt:2836", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\tools.txt:2836", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\tools.txt:2837", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\tools.txt:2837", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\tools.txt:2837", "target": "pydanticevalsgeneration"}, {"type": "contains", "source": "text_data\\tools.txt:2838", "target": "agentdepst"}, {"type": "contains", "source": "text_data\\tools.txt:2838", "target": "runcontext"}, {"type": "contains", "source": "text_data\\tools.txt:2838", "target": "table"}, {"type": "contains", "source": "text_data\\tools.txt:2838", "target": "contents"}, {"type": "contains", "source": "text_data\\tools.txt:2838", "target": "tools"}, {"type": "contains", "source": "text_data\\tools.txt:2839", "target": "variable"}, {"type": "contains", "source": "text_data\\tools.txt:2839", "target": "agent"}, {"type": "contains", "source": "text_data\\tools.txt:2839", "target": "dependencies"}, {"type": "contains", "source": "text_data\\tools.txt:2839", "target": "runcontext"}, {"type": "contains", "source": "text_data\\tools.txt:2839", "target": "dataclass"}, {"type": "contains", "source": "text_data\\tools.txt:2840", "target": "usage"}, {"type": "contains", "source": "text_data\\tools.txt:2840", "target": "model"}, {"type": "contains", "source": "text_data\\tools.txt:2840", "target": "prompt"}, {"type": "contains", "source": "text_data\\tools.txt:2840", "target": "messages"}, {"type": "contains", "source": "text_data\\tools.txt:2840", "target": "dataclassesdataclass"}, {"type": "contains", "source": "text_data\\tools.txt:2841", "target": "retry"}, {"type": "contains", "source": "text_data\\tools.txt:2841", "target": "toolname"}, {"type": "contains", "source": "text_data\\tools.txt:2841", "target": "utilsunset"}, {"type": "contains", "source": "text_data\\tools.txt:2841", "target": "kwargs"}, {"type": "contains", "source": "text_data\\tools.txt:2841", "target": "being"}, {"type": "contains", "source": "text_data\\tools.txt:2842", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\tools.txt:2842", "target": "model"}, {"type": "contains", "source": "text_data\\tools.txt:2842", "target": "usage"}, {"type": "contains", "source": "text_data\\tools.txt:2842", "target": "prompt"}, {"type": "contains", "source": "text_data\\tools.txt:2842", "target": "agentdepst"}, {"type": "contains", "source": "text_data\\tools.txt:2843", "target": "messages"}, {"type": "contains", "source": "text_data\\tools.txt:2843", "target": "classattribute"}, {"type": "contains", "source": "text_data\\tools.txt:2843", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\tools.txt:2843", "target": "toolcallid"}, {"type": "contains", "source": "text_data\\tools.txt:2843", "target": "listhttpsdocspythonorg3librarystdtypeshtmllistmodelmessagemessagespydanticaimessagesmodelmessage"}, {"type": "contains", "source": "text_data\\tools.txt:2844", "target": "classattribute"}, {"type": "contains", "source": "text_data\\tools.txt:2844", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\tools.txt:2844", "target": "toolname"}, {"type": "contains", "source": "text_data\\tools.txt:2844", "target": "retry"}, {"type": "contains", "source": "text_data\\tools.txt:2844", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\tools.txt:2845", "target": "retrieval"}, {"type": "contains", "source": "text_data\\tools.txt:2845", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2845", "target": "param"}, {"type": "contains", "source": "text_data\\tools.txt:2845", "target": "systempromptfunc"}, {"type": "contains", "source": "text_data\\tools.txt:2845", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\tools.txt:2846", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\tools.txt:2846", "target": "typingcallableruncontextagentdepst"}, {"type": "contains", "source": "text_data\\tools.txt:2846", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\tools.txt:2846", "target": "systempromptfunc"}, {"type": "contains", "source": "text_data\\tools.txt:2846", "target": "unionhttpsdocspythonorg3librarytypinghtmltypingunion"}, {"type": "contains", "source": "text_data\\tools.txt:2847", "target": "callablehttpsdocspythonorg3librarytypinghtmltypingcallable"}, {"type": "contains", "source": "text_data\\tools.txt:2847", "target": "typingcallable"}, {"type": "contains", "source": "text_data\\tools.txt:2847", "target": "awaitablehttpsdocspythonorg3librarycollectionsabchtmlcollectionsabcawaitable"}, {"type": "contains", "source": "text_data\\tools.txt:2847", "target": "collectionsabcawaitablestrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\tools.txt:2848", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2848", "target": "runcontext"}, {"type": "contains", "source": "text_data\\tools.txt:2848", "target": "argument"}, {"type": "contains", "source": "text_data\\tools.txt:2848", "target": "usage"}, {"type": "contains", "source": "text_data\\tools.txt:2848", "target": "toolfunccontext"}, {"type": "contains", "source": "text_data\\tools.txt:2849", "target": "toolfuncplain"}, {"type": "contains", "source": "text_data\\tools.txt:2849", "target": "moduleattribute"}, {"type": "contains", "source": "text_data\\tools.txt:2849", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2849", "target": "usage"}, {"type": "contains", "source": "text_data\\tools.txt:2849", "target": "toolfunceither"}, {"type": "contains", "source": "text_data\\tools.txt:2850", "target": "toolpreparefunc"}, {"type": "contains", "source": "text_data\\tools.txt:2850", "target": "definition"}, {"type": "contains", "source": "text_data\\tools.txt:2850", "target": "usage"}, {"type": "contains", "source": "text_data\\tools.txt:2850", "target": "toolfunceitheragentdepst"}, {"type": "contains", "source": "text_data\\tools.txt:2850", "target": "toolparams"}, {"type": "contains", "source": "text_data\\tools.txt:2851", "target": "import"}, {"type": "contains", "source": "text_data\\tools.txt:2851", "target": "onlyif42"}, {"type": "contains", "source": "text_data\\tools.txt:2851", "target": "tooldefinition"}, {"type": "contains", "source": "text_data\\tools.txt:2851", "target": "runcontextint"}, {"type": "contains", "source": "text_data\\tools.txt:2851", "target": "tooldef"}, {"type": "contains", "source": "text_data\\tools.txt:2852", "target": "docstrings"}, {"type": "contains", "source": "text_data\\tools.txt:2852", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\tools.txt:2852", "target": "google"}, {"type": "contains", "source": "text_data\\tools.txt:2852", "target": "numpy"}, {"type": "contains", "source": "text_data\\tools.txt:2852", "target": "sphinx"}, {"type": "contains", "source": "text_data\\tools.txt:2853", "target": "dataclass"}, {"type": "contains", "source": "text_data\\tools.txt:2853", "target": "bases"}, {"type": "contains", "source": "text_data\\tools.txt:2853", "target": "generichttpsdocspythonorg3librarytypinghtmltypinggeneric"}, {"type": "contains", "source": "text_data\\tools.txt:2853", "target": "typinggenericagentdepst"}, {"type": "contains", "source": "text_data\\tools.txt:2853", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2858", "target": "fieldinitfalse"}, {"type": "contains", "source": "text_data\\tools.txt:2858", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2858", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\tools.txt:2858", "target": "dataclassinitfalse"}, {"type": "contains", "source": "text_data\\tools.txt:2858", "target": "class"}, {"type": "contains", "source": "text_data\\tools.txt:2859", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\tools.txt:2859", "target": "parametersjsonschema"}, {"type": "contains", "source": "text_data\\tools.txt:2859", "target": "objectjsonschema"}, {"type": "contains", "source": "text_data\\tools.txt:2859", "target": "fieldinitfalse"}, {"type": "contains", "source": "text_data\\tools.txt:2859", "target": "state"}, {"type": "contains", "source": "text_data\\tools.txt:2860", "target": "import"}, {"type": "contains", "source": "text_data\\tools.txt:2860", "target": "agent"}, {"type": "contains", "source": "text_data\\tools.txt:2860", "target": "python"}, {"type": "contains", "source": "text_data\\tools.txt:2860", "target": "noqai001"}, {"type": "contains", "source": "text_data\\tools.txt:2860", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\tools.txt:2861", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2861", "target": "tooldefinition"}, {"type": "contains", "source": "text_data\\tools.txt:2861", "target": "async"}, {"type": "contains", "source": "text_data\\tools.txt:2861", "target": "runcontextint"}, {"type": "contains", "source": "text_data\\tools.txt:2861", "target": "return"}, {"type": "contains", "source": "text_data\\tools.txt:2862", "target": "inferred"}, {"type": "contains", "source": "text_data\\tools.txt:2862", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2862", "target": "description"}, {"type": "contains", "source": "text_data\\tools.txt:2862", "target": "prepare"}, {"type": "contains", "source": "text_data\\tools.txt:2862", "target": "unset"}, {"type": "contains", "source": "text_data\\tools.txt:2863", "target": "takesctx"}, {"type": "contains", "source": "text_data\\tools.txt:2863", "target": "defaults"}, {"type": "contains", "source": "text_data\\tools.txt:2863", "target": "requireparameterdescriptions"}, {"type": "contains", "source": "text_data\\tools.txt:2863", "target": "schemagenerator"}, {"type": "contains", "source": "text_data\\tools.txt:2863", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2864", "target": "selfname"}, {"type": "contains", "source": "text_data\\tools.txt:2864", "target": "functionname"}, {"type": "contains", "source": "text_data\\tools.txt:2864", "target": "selfdescription"}, {"type": "contains", "source": "text_data\\tools.txt:2864", "target": "description"}, {"type": "contains", "source": "text_data\\tools.txt:2864", "target": "fdescription"}, {"type": "contains", "source": "text_data\\tools.txt:2865", "target": "return"}, {"type": "contains", "source": "text_data\\tools.txt:2865", "target": "tooldef"}, {"type": "contains", "source": "text_data\\tools.txt:2865", "target": "definition"}, {"type": "contains", "source": "text_data\\tools.txt:2865", "target": "returns"}, {"type": "contains", "source": "text_data\\tools.txt:2865", "target": "selfprepare"}, {"type": "contains", "source": "text_data\\tools.txt:2866", "target": "tracer"}, {"type": "contains", "source": "text_data\\tools.txt:2866", "target": "genaitoolcallid"}, {"type": "contains", "source": "text_data\\tools.txt:2866", "target": "return"}, {"type": "contains", "source": "text_data\\tools.txt:2866", "target": "tooldef"}, {"type": "contains", "source": "text_data\\tools.txt:2866", "target": "async"}, {"type": "contains", "source": "text_data\\tools.txt:2867", "target": "genaitoolcallid"}, {"type": "contains", "source": "text_data\\tools.txt:2867", "target": "toolarguments"}, {"type": "contains", "source": "text_data\\tools.txt:2867", "target": "object"}, {"type": "contains", "source": "text_data\\tools.txt:2867", "target": "messagetoolcallid"}, {"type": "contains", "source": "text_data\\tools.txt:2867", "target": "messageargsasjsonstr"}, {"type": "contains", "source": "text_data\\tools.txt:2868", "target": "runcontext"}, {"type": "contains", "source": "text_data\\tools.txt:2868", "target": "message"}, {"type": "contains", "source": "text_data\\tools.txt:2868", "target": "return"}, {"type": "contains", "source": "text_data\\tools.txt:2868", "target": "argsdict"}, {"type": "contains", "source": "text_data\\tools.txt:2868", "target": "await"}, {"type": "contains", "source": "text_data\\tools.txt:2869", "target": "responsecontent"}, {"type": "contains", "source": "text_data\\tools.txt:2869", "target": "await"}, {"type": "contains", "source": "text_data\\tools.txt:2869", "target": "kwargs"}, {"type": "contains", "source": "text_data\\tools.txt:2869", "target": "return"}, {"type": "contains", "source": "text_data\\tools.txt:2869", "target": "message"}, {"type": "contains", "source": "text_data\\tools.txt:2870", "target": "argsdict"}, {"type": "contains", "source": "text_data\\tools.txt:2870", "target": "runcontext"}, {"type": "contains", "source": "text_data\\tools.txt:2870", "target": "selfsingleargname"}, {"type": "contains", "source": "text_data\\tools.txt:2870", "target": "runcontextagentdepst"}, {"type": "contains", "source": "text_data\\tools.txt:2870", "target": "tuplelistany"}, {"type": "contains", "source": "text_data\\tools.txt:2871", "target": "selfmaxretries"}, {"type": "contains", "source": "text_data\\tools.txt:2871", "target": "return"}, {"type": "contains", "source": "text_data\\tools.txt:2871", "target": "validationerror"}, {"type": "contains", "source": "text_data\\tools.txt:2871", "target": "messagesretrypromptpart"}, {"type": "contains", "source": "text_data\\tools.txt:2871", "target": "selfcurrentretry"}, {"type": "contains", "source": "text_data\\tools.txt:2872", "target": "contentcontent"}, {"type": "contains", "source": "text_data\\tools.txt:2872", "target": "toolcallidcallmessagetoolcallid"}, {"type": "contains", "source": "text_data\\tools.txt:2873", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\tools.txt:2873", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\tools.txt:2873", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\tools.txt:2873", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2873", "target": "toolfunceitheragentdepst"}, {"type": "contains", "source": "text_data\\tools.txt:2874", "target": "generatejsonschemahttpsdocspydanticdevlatestapijsonschemapydanticjsonschemageneratejsonschema"}, {"type": "contains", "source": "text_data\\tools.txt:2874", "target": "pydanticjsonschemageneratejsonschema"}, {"type": "contains", "source": "text_data\\tools.txt:2874", "target": "generatetooljsonschema"}, {"type": "contains", "source": "text_data\\tools.txt:2875", "target": "agent"}, {"type": "contains", "source": "text_data\\tools.txt:2875", "target": "create"}, {"type": "contains", "source": "text_data\\tools.txt:2875", "target": "instance"}, {"type": "contains", "source": "text_data\\tools.txt:2875", "target": "example"}, {"type": "contains", "source": "text_data\\tools.txt:2875", "target": "usage"}, {"type": "contains", "source": "text_data\\tools.txt:2876", "target": "import"}, {"type": "contains", "source": "text_data\\tools.txt:2876", "target": "agent"}, {"type": "contains", "source": "text_data\\tools.txt:2876", "target": "tooldefinition"}, {"type": "contains", "source": "text_data\\tools.txt:2876", "target": "async"}, {"type": "contains", "source": "text_data\\tools.txt:2876", "target": "runcontextint"}, {"type": "contains", "source": "text_data\\tools.txt:2877", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2877", "target": "default"}, {"type": "contains", "source": "text_data\\tools.txt:2877", "target": "inferred"}, {"type": "contains", "source": "text_data\\tools.txt:2877", "target": "description"}, {"type": "contains", "source": "text_data\\tools.txt:2877", "target": "toolfunceitheragentdepst"}, {"type": "contains", "source": "text_data\\tools.txt:2878", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\tools.txt:2878", "target": "description"}, {"type": "contains", "source": "text_data\\tools.txt:2878", "target": "inferred"}, {"type": "contains", "source": "text_data\\tools.txt:2878", "target": "prepare"}, {"type": "contains", "source": "text_data\\tools.txt:2878", "target": "format"}, {"type": "contains", "source": "text_data\\tools.txt:2879", "target": "defaults"}, {"type": "contains", "source": "text_data\\tools.txt:2879", "target": "false"}, {"type": "contains", "source": "text_data\\tools.txt:2879", "target": "generatetooljsonschema"}, {"type": "contains", "source": "text_data\\tools.txt:2879", "target": "requireparameterdescriptions"}, {"type": "contains", "source": "text_data\\tools.txt:2879", "target": "boolhttpsdocspythonorg3libraryfunctionshtmlbool"}, {"type": "contains", "source": "text_data\\tools.txt:2881", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\tools.txt:2881", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2881", "target": "toolfunceitheragentdepst"}, {"type": "contains", "source": "text_data\\tools.txt:2881", "target": "takesctx"}, {"type": "contains", "source": "text_data\\tools.txt:2881", "target": "maxretries"}, {"type": "contains", "source": "text_data\\tools.txt:2882", "target": "return"}, {"type": "contains", "source": "text_data\\tools.txt:2882", "target": "agent"}, {"type": "contains", "source": "text_data\\tools.txt:2882", "target": "import"}, {"type": "contains", "source": "text_data\\tools.txt:2882", "target": "fctxdeps"}, {"type": "contains", "source": "text_data\\tools.txt:2882", "target": "agenttest"}, {"type": "contains", "source": "text_data\\tools.txt:2883", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2883", "target": "inferred"}, {"type": "contains", "source": "text_data\\tools.txt:2883", "target": "agent"}, {"type": "contains", "source": "text_data\\tools.txt:2883", "target": "description"}, {"type": "contains", "source": "text_data\\tools.txt:2883", "target": "prepare"}, {"type": "contains", "source": "text_data\\tools.txt:2884", "target": "defaults"}, {"type": "contains", "source": "text_data\\tools.txt:2884", "target": "format"}, {"type": "contains", "source": "text_data\\tools.txt:2884", "target": "docstring"}, {"type": "contains", "source": "text_data\\tools.txt:2884", "target": "takesctx"}, {"type": "contains", "source": "text_data\\tools.txt:2884", "target": "given"}, {"type": "contains", "source": "text_data\\tools.txt:2885", "target": "takesctx"}, {"type": "contains", "source": "text_data\\tools.txt:2885", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2885", "target": "docstringformat"}, {"type": "contains", "source": "text_data\\tools.txt:2885", "target": "requireparameterdescriptions"}, {"type": "contains", "source": "text_data\\tools.txt:2885", "target": "pydantictakesctxfunction"}, {"type": "contains", "source": "text_data\\tools.txt:2886", "target": "selfpositionalfields"}, {"type": "contains", "source": "text_data\\tools.txt:2886", "target": "fpositionalfields"}, {"type": "contains", "source": "text_data\\tools.txt:2886", "target": "selfvarpositionalfield"}, {"type": "contains", "source": "text_data\\tools.txt:2886", "target": "fvarpositionalfield"}, {"type": "contains", "source": "text_data\\tools.txt:2886", "target": "selfvalidator"}, {"type": "contains", "source": "text_data\\tools.txt:2887", "target": "tooldefinition"}, {"type": "contains", "source": "text_data\\tools.txt:2887", "target": "definition"}, {"type": "contains", "source": "text_data\\tools.txt:2887", "target": "returns"}, {"type": "contains", "source": "text_data\\tools.txt:2887", "target": "preparetooldef"}, {"type": "contains", "source": "text_data\\tools.txt:2887", "target": "runcontextagentdepst"}, {"type": "contains", "source": "text_data\\tools.txt:2888", "target": "tooldefinition"}, {"type": "contains", "source": "text_data\\tools.txt:2888", "target": "return"}, {"type": "contains", "source": "text_data\\tools.txt:2888", "target": "tooldef"}, {"type": "contains", "source": "text_data\\tools.txt:2888", "target": "async"}, {"type": "contains", "source": "text_data\\tools.txt:2888", "target": "definition"}, {"type": "contains", "source": "text_data\\tools.txt:2889", "target": "tracer"}, {"type": "contains", "source": "text_data\\tools.txt:2889", "target": "message"}, {"type": "contains", "source": "text_data\\tools.txt:2889", "target": "toolcallpartmessagespydanticaimessagestoolcallpart"}, {"type": "contains", "source": "text_data\\tools.txt:2889", "target": "pydanticaimessagestoolcallpart"}, {"type": "contains", "source": "text_data\\tools.txt:2889", "target": "runcontext"}, {"type": "contains", "source": "text_data\\tools.txt:2890", "target": "source"}, {"type": "contains", "source": "text_data\\tools.txt:2890", "target": "pydanticaislimpydanticaitoolspy"}, {"type": "contains", "source": "text_data\\tools.txt:2891", "target": "tracer"}, {"type": "contains", "source": "text_data\\tools.txt:2891", "target": "selfname"}, {"type": "contains", "source": "text_data\\tools.txt:2891", "target": "genaitoolcallid"}, {"type": "contains", "source": "text_data\\tools.txt:2891", "target": "async"}, {"type": "contains", "source": "text_data\\tools.txt:2891", "target": "message"}, {"type": "contains", "source": "text_data\\tools.txt:2892", "target": "object"}, {"type": "contains", "source": "text_data\\tools.txt:2892", "target": "logfiremsg"}, {"type": "contains", "source": "text_data\\tools.txt:2892", "target": "frunning"}, {"type": "contains", "source": "text_data\\tools.txt:2892", "target": "selfname"}, {"type": "contains", "source": "text_data\\tools.txt:2892", "target": "schema"}, {"type": "contains", "source": "text_data\\tools.txt:2893", "target": "tools"}, {"type": "contains", "source": "text_data\\tools.txt:2893", "target": "object"}, {"type": "contains", "source": "text_data\\tools.txt:2893", "target": "tooldefinition"}, {"type": "contains", "source": "text_data\\tools.txt:2893", "target": "objectjsonschema"}, {"type": "contains", "source": "text_data\\tools.txt:2893", "target": "typealiashttpstypingextensionsreadthedocsioenlatestindexhtmltypingextensionstypealias"}, {"type": "contains", "source": "text_data\\tools.txt:2894", "target": "tools"}, {"type": "contains", "source": "text_data\\tools.txt:2894", "target": "function"}, {"type": "contains", "source": "text_data\\tools.txt:2894", "target": "result"}, {"type": "contains", "source": "text_data\\tools.txt:2894", "target": "source"}, {"type": "contains", "source": "text_data\\tools.txt:2894", "target": "pydanticaislimpydanticaitoolspy"}, {"type": "contains", "source": "text_data\\tools.txt:2895", "target": "tools"}, {"type": "contains", "source": "text_data\\tools.txt:2895", "target": "result"}, {"type": "contains", "source": "text_data\\tools.txt:2895", "target": "description"}, {"type": "contains", "source": "text_data\\tools.txt:2895", "target": "schema"}, {"type": "contains", "source": "text_data\\tools.txt:2895", "target": "dataclass"}, {"type": "contains", "source": "text_data\\tools.txt:2896", "target": "description"}, {"type": "contains", "source": "text_data\\tools.txt:2896", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\tools.txt:2896", "target": "strhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\tools.txt:2896", "target": "parametersjsonschema"}, {"type": "contains", "source": "text_data\\tools.txt:2896", "target": "schema"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2896", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2896", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2896", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2896", "target": "v0050"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2896", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2897", "target": "tools"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2897", "target": "contributing"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2897", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2897", "target": "documentation"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2897", "target": "agents"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2898", "target": "testing"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2898", "target": "evals"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2898", "target": "input"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2898", "target": "debugging"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2898", "target": "monitoring"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2899", "target": "examples"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2899", "target": "client"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2899", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2899", "target": "server"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2899", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2900", "target": "stream"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2900", "target": "reference"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2900", "target": "pydantic"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2900", "target": "model"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2900", "target": "examplespydanticmodel"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2901", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2901", "target": "apimessages"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2901", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2901", "target": "apiexceptions"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2901", "target": "pydanticaisettings"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2902", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2902", "target": "apimodelsinstrumented"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2902", "target": "pydanticaimodelsmistral"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2902", "target": "apimodelsmistral"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2902", "target": "pydanticaimodelstest"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2903", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2903", "target": "apipydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2903", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2903", "target": "apipydanticevalsdataset"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2903", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2904", "target": "errors"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2904", "target": "jupyter"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2904", "target": "notebook"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2904", "target": "runtimeerror"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2904", "target": "event"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2905", "target": "event"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2905", "target": "running"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2905", "target": "conflicts"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2905", "target": "environment"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2905", "target": "variable"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2906", "target": "httpx"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2906", "target": "requests"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2906", "target": "monitoring"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2906", "target": "custom"}, {"type": "contains", "source": "text_data\\troubleshooting.txt:2906", "target": "clients"}, {"type": "contains", "source": "text_data\\usage.txt:2906", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\usage.txt:2906", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\usage.txt:2906", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\usage.txt:2906", "target": "v0050"}, {"type": "contains", "source": "text_data\\usage.txt:2906", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\usage.txt:2907", "target": "tools"}, {"type": "contains", "source": "text_data\\usage.txt:2907", "target": "contributing"}, {"type": "contains", "source": "text_data\\usage.txt:2907", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\usage.txt:2907", "target": "documentation"}, {"type": "contains", "source": "text_data\\usage.txt:2907", "target": "agents"}, {"type": "contains", "source": "text_data\\usage.txt:2908", "target": "input"}, {"type": "contains", "source": "text_data\\usage.txt:2908", "target": "image"}, {"type": "contains", "source": "text_data\\usage.txt:2908", "target": "audio"}, {"type": "contains", "source": "text_data\\usage.txt:2908", "target": "document"}, {"type": "contains", "source": "text_data\\usage.txt:2909", "target": "examples"}, {"type": "contains", "source": "text_data\\usage.txt:2909", "target": "client"}, {"type": "contains", "source": "text_data\\usage.txt:2909", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\usage.txt:2909", "target": "server"}, {"type": "contains", "source": "text_data\\usage.txt:2909", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\usage.txt:2910", "target": "agent"}, {"type": "contains", "source": "text_data\\usage.txt:2910", "target": "stream"}, {"type": "contains", "source": "text_data\\usage.txt:2910", "target": "reference"}, {"type": "contains", "source": "text_data\\usage.txt:2910", "target": "pydantic"}, {"type": "contains", "source": "text_data\\usage.txt:2910", "target": "model"}, {"type": "contains", "source": "text_data\\usage.txt:2911", "target": "pydanticaiusage"}, {"type": "contains", "source": "text_data\\usage.txt:2911", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2911", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\usage.txt:2911", "target": "result"}, {"type": "contains", "source": "text_data\\usage.txt:2911", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\usage.txt:2912", "target": "pydanticaiformatasxml"}, {"type": "contains", "source": "text_data\\usage.txt:2912", "target": "formatasxml"}, {"type": "contains", "source": "text_data\\usage.txt:2912", "target": "pydanticaimodels"}, {"type": "contains", "source": "text_data\\usage.txt:2912", "target": "modelsbase"}, {"type": "contains", "source": "text_data\\usage.txt:2912", "target": "pydanticaimodelsopenai"}, {"type": "contains", "source": "text_data\\usage.txt:2913", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\usage.txt:2913", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\usage.txt:2913", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\usage.txt:2913", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\usage.txt:2913", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\usage.txt:2914", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2914", "target": "requests"}, {"type": "contains", "source": "text_data\\usage.txt:2914", "target": "model"}, {"type": "contains", "source": "text_data\\usage.txt:2914", "target": "table"}, {"type": "contains", "source": "text_data\\usage.txt:2914", "target": "contents"}, {"type": "contains", "source": "text_data\\usage.txt:2915", "target": "source"}, {"type": "contains", "source": "text_data\\usage.txt:2915", "target": "pydanticaislimpydanticaiusagepy"}, {"type": "contains", "source": "text_data\\usage.txt:2916", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2916", "target": "requests"}, {"type": "contains", "source": "text_data\\usage.txt:2916", "target": "tokens"}, {"type": "contains", "source": "text_data\\usage.txt:2916", "target": "model"}, {"type": "contains", "source": "text_data\\usage.txt:2916", "target": "requesttokens"}, {"type": "contains", "source": "text_data\\usage.txt:2917", "target": "requests"}, {"type": "contains", "source": "text_data\\usage.txt:2917", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2917", "target": "increment"}, {"type": "contains", "source": "text_data\\usage.txt:2917", "target": "selfvalue"}, {"type": "contains", "source": "text_data\\usage.txt:2917", "target": "othervalue"}, {"type": "contains", "source": "text_data\\usage.txt:2918", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2918", "target": "selfdetails"}, {"type": "contains", "source": "text_data\\usage.txt:2918", "target": "value"}, {"type": "contains", "source": "text_data\\usage.txt:2918", "target": "newusage"}, {"type": "contains", "source": "text_data\\usage.txt:2918", "target": "incrusagedetails"}, {"type": "contains", "source": "text_data\\usage.txt:2919", "target": "value"}, {"type": "contains", "source": "text_data\\usage.txt:2919", "target": "genaiusageinputtokens"}, {"type": "contains", "source": "text_data\\usage.txt:2919", "target": "selfrequesttokens"}, {"type": "contains", "source": "text_data\\usage.txt:2919", "target": "genaiusageoutputtokens"}, {"type": "contains", "source": "text_data\\usage.txt:2919", "target": "selfresponsetokens"}, {"type": "contains", "source": "text_data\\usage.txt:2920", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\usage.txt:2920", "target": "requests"}, {"type": "contains", "source": "text_data\\usage.txt:2920", "target": "classattribute"}, {"type": "contains", "source": "text_data\\usage.txt:2920", "target": "instanceattribute"}, {"type": "contains", "source": "text_data\\usage.txt:2920", "target": "requesttokens"}, {"type": "contains", "source": "text_data\\usage.txt:2921", "target": "details"}, {"type": "contains", "source": "text_data\\usage.txt:2921", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\usage.txt:2921", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2921", "target": "total"}, {"type": "contains", "source": "text_data\\usage.txt:2921", "target": "tokens"}, {"type": "contains", "source": "text_data\\usage.txt:2922", "target": "increment"}, {"type": "contains", "source": "text_data\\usage.txt:2922", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2922", "target": "requests"}, {"type": "contains", "source": "text_data\\usage.txt:2922", "target": "place"}, {"type": "contains", "source": "text_data\\usage.txt:2922", "target": "parameters"}, {"type": "contains", "source": "text_data\\usage.txt:2923", "target": "requests"}, {"type": "contains", "source": "text_data\\usage.txt:2923", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2923", "target": "increment"}, {"type": "contains", "source": "text_data\\usage.txt:2923", "target": "selfvalue"}, {"type": "contains", "source": "text_data\\usage.txt:2923", "target": "othervalue"}, {"type": "contains", "source": "text_data\\usage.txt:2924", "target": "value"}, {"type": "contains", "source": "text_data\\usage.txt:2924", "target": "incrusagedetailsitems"}, {"type": "contains", "source": "text_data\\usage.txt:2924", "target": "selfdetailskey"}, {"type": "contains", "source": "text_data\\usage.txt:2924", "target": "selfdetailsgetkey"}, {"type": "contains", "source": "text_data\\usage.txt:2925", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2925", "target": "usages"}, {"type": "contains", "source": "text_data\\usage.txt:2925", "target": "together"}, {"type": "contains", "source": "text_data\\usage.txt:2925", "target": "provided"}, {"type": "contains", "source": "text_data\\usage.txt:2925", "target": "trivial"}, {"type": "contains", "source": "text_data\\usage.txt:2926", "target": "opentelemetryattributes"}, {"type": "contains", "source": "text_data\\usage.txt:2926", "target": "dicthttpsdocspythonorg3librarystdtypeshtmldictstrhttpsdocspythonorg3librarystdtypeshtmlstr"}, {"type": "contains", "source": "text_data\\usage.txt:2926", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\usage.txt:2926", "target": "token"}, {"type": "contains", "source": "text_data\\usage.txt:2926", "target": "limits"}, {"type": "contains", "source": "text_data\\usage.txt:2927", "target": "limits"}, {"type": "contains", "source": "text_data\\usage.txt:2927", "target": "value"}, {"type": "contains", "source": "text_data\\usage.txt:2927", "target": "opentelemetryattributesself"}, {"type": "contains", "source": "text_data\\usage.txt:2927", "target": "dictstr"}, {"type": "contains", "source": "text_data\\usage.txt:2927", "target": "token"}, {"type": "contains", "source": "text_data\\usage.txt:2928", "target": "limits"}, {"type": "contains", "source": "text_data\\usage.txt:2928", "target": "model"}, {"type": "contains", "source": "text_data\\usage.txt:2928", "target": "request"}, {"type": "contains", "source": "text_data\\usage.txt:2928", "target": "limit"}, {"type": "contains", "source": "text_data\\usage.txt:2928", "target": "checked"}, {"type": "contains", "source": "text_data\\usage.txt:2929", "target": "source"}, {"type": "contains", "source": "text_data\\usage.txt:2929", "target": "pydanticaislimpydanticaiusagepy"}, {"type": "contains", "source": "text_data\\usage.txt:2930", "target": "model"}, {"type": "contains", "source": "text_data\\usage.txt:2930", "target": "limits"}, {"type": "contains", "source": "text_data\\usage.txt:2930", "target": "request"}, {"type": "contains", "source": "text_data\\usage.txt:2930", "target": "maximum"}, {"type": "contains", "source": "text_data\\usage.txt:2930", "target": "number"}, {"type": "contains", "source": "text_data\\usage.txt:2931", "target": "limits"}, {"type": "contains", "source": "text_data\\usage.txt:2931", "target": "maximum"}, {"type": "contains", "source": "text_data\\usage.txt:2931", "target": "number"}, {"type": "contains", "source": "text_data\\usage.txt:2931", "target": "tokens"}, {"type": "contains", "source": "text_data\\usage.txt:2931", "target": "allowed"}, {"type": "contains", "source": "text_data\\usage.txt:2932", "target": "requestlimit"}, {"type": "contains", "source": "text_data\\usage.txt:2932", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2932", "target": "limit"}, {"type": "contains", "source": "text_data\\usage.txt:2932", "target": "raises"}, {"type": "contains", "source": "text_data\\usage.txt:2932", "target": "usagelimitexceeded"}, {"type": "contains", "source": "text_data\\usage.txt:2933", "target": "requesttokens"}, {"type": "contains", "source": "text_data\\usage.txt:2933", "target": "selfrequesttokenslimit"}, {"type": "contains", "source": "text_data\\usage.txt:2933", "target": "responsetokens"}, {"type": "contains", "source": "text_data\\usage.txt:2933", "target": "selfresponsetokenslimit"}, {"type": "contains", "source": "text_data\\usage.txt:2933", "target": "raise"}, {"type": "contains", "source": "text_data\\usage.txt:2934", "target": "totaltokens"}, {"type": "contains", "source": "text_data\\usage.txt:2934", "target": "selftotaltokenslimit"}, {"type": "contains", "source": "text_data\\usage.txt:2934", "target": "usagetotaltokens"}, {"type": "contains", "source": "text_data\\usage.txt:2934", "target": "raise"}, {"type": "contains", "source": "text_data\\usage.txt:2934", "target": "usagelimitexceededfexceeded"}, {"type": "contains", "source": "text_data\\usage.txt:2935", "target": "inthttpsdocspythonorg3libraryfunctionshtmlint"}, {"type": "contains", "source": "text_data\\usage.txt:2935", "target": "maximum"}, {"type": "contains", "source": "text_data\\usage.txt:2935", "target": "number"}, {"type": "contains", "source": "text_data\\usage.txt:2935", "target": "allowed"}, {"type": "contains", "source": "text_data\\usage.txt:2935", "target": "model"}, {"type": "contains", "source": "text_data\\usage.txt:2936", "target": "limits"}, {"type": "contains", "source": "text_data\\usage.txt:2936", "target": "totaltokenslimit"}, {"type": "contains", "source": "text_data\\usage.txt:2936", "target": "hastokenlimits"}, {"type": "contains", "source": "text_data\\usage.txt:2936", "target": "returns"}, {"type": "contains", "source": "text_data\\usage.txt:2936", "target": "token"}, {"type": "contains", "source": "text_data\\usage.txt:2937", "target": "source"}, {"type": "contains", "source": "text_data\\usage.txt:2937", "target": "pydanticaislimpydanticaiusagepy"}, {"type": "contains", "source": "text_data\\usage.txt:2938", "target": "limits"}, {"type": "contains", "source": "text_data\\usage.txt:2938", "target": "returns"}, {"type": "contains", "source": "text_data\\usage.txt:2938", "target": "token"}, {"type": "contains", "source": "text_data\\usage.txt:2938", "target": "limit"}, {"type": "contains", "source": "text_data\\usage.txt:2938", "target": "hastokenlimitsself"}, {"type": "contains", "source": "text_data\\usage.txt:2939", "target": "requestlimit"}, {"type": "contains", "source": "text_data\\usage.txt:2939", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2939", "target": "request"}, {"type": "contains", "source": "text_data\\usage.txt:2939", "target": "would"}, {"type": "contains", "source": "text_data\\usage.txt:2939", "target": "exceed"}, {"type": "contains", "source": "text_data\\usage.txt:2940", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2940", "target": "checktokensusage"}, {"type": "contains", "source": "text_data\\usage.txt:2940", "target": "raises"}, {"type": "contains", "source": "text_data\\usage.txt:2940", "target": "usagelimitexceeded"}, {"type": "contains", "source": "text_data\\usage.txt:2940", "target": "exception"}, {"type": "contains", "source": "text_data\\usage.txt:2941", "target": "usage"}, {"type": "contains", "source": "text_data\\usage.txt:2941", "target": "usagelimitexceeded"}, {"type": "contains", "source": "text_data\\usage.txt:2941", "target": "requesttokens"}, {"type": "contains", "source": "text_data\\usage.txt:2941", "target": "selfrequesttokenslimit"}, {"type": "contains", "source": "text_data\\usage.txt:2941", "target": "responsetokens"}, {"type": "contains", "source": "text_data\\usage.txt:2942", "target": "totaltokens"}, {"type": "contains", "source": "text_data\\usage.txt:2942", "target": "selftotaltokenslimit"}, {"type": "contains", "source": "text_data\\usage.txt:2942", "target": "usagetotaltokens"}, {"type": "contains", "source": "text_data\\usage.txt:2942", "target": "raise"}, {"type": "contains", "source": "text_data\\usage.txt:2942", "target": "usagelimitexceededfexceeded"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2942", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2942", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2942", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2942", "target": "v0050"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2942", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2943", "target": "tools"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2943", "target": "contributing"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2943", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2943", "target": "documentation"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2943", "target": "agents"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2944", "target": "input"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2944", "target": "image"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2944", "target": "audio"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2944", "target": "document"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2945", "target": "examples"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2945", "target": "client"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2945", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2945", "target": "server"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2945", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2946", "target": "weather"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2946", "target": "agent"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2946", "target": "running"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2946", "target": "example"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2946", "target": "stream"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2947", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2947", "target": "apiresult"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2947", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2947", "target": "apimessages"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2947", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2948", "target": "pydanticaimodelsgemini"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2948", "target": "apimodelsgemini"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2948", "target": "pydanticaimodelsgroq"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2948", "target": "apimodelsgroq"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2948", "target": "pydanticaimodelsinstrumented"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2949", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2949", "target": "apipydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2949", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2949", "target": "apipydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2949", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2950", "target": "agent"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2950", "target": "example"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2950", "target": "weather"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2950", "target": "running"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2950", "target": "locations"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2951", "target": "example"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2951", "target": "pydanticaiexamplesweatheragent"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2951", "target": "running"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2951", "target": "properly"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2951", "target": "might"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2952", "target": "import"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2952", "target": "annotations"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2952", "target": "dataclass"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2952", "target": "logfire"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2952", "target": "asyncclient"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2953", "target": "getlatlng"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2953", "target": "latitude"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2953", "target": "longitude"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2953", "target": "locationdescription"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2953", "target": "location"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2954", "target": "return"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2954", "target": "ctxdepsgeoapikey"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2954", "target": "paramsparams"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2954", "target": "provided"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2954", "target": "dummy"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2955", "target": "location"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2955", "target": "float"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2955", "target": "weather"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2955", "target": "ctxdepsweatherapikey"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2955", "target": "return"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2956", "target": "cloudy"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2956", "target": "clear"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2956", "target": "mostly"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2956", "target": "light"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2956", "target": "await"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2957", "target": "freezing"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2957", "target": "light"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2957", "target": "heavy"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2957", "target": "pellets"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2957", "target": "async"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2958", "target": "create"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2958", "target": "httpswwwtomorrowioweatherapi"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2958", "target": "weatherapikey"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2958", "target": "osgetenvweatherapikey"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2958", "target": "httpsgeocodemapsco"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2959", "target": "agent"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2959", "target": "python"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2959", "target": "applications"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2959", "target": "running"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2959", "target": "build"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2960", "target": "import"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2960", "target": "gradio"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2960", "target": "annotations"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2960", "target": "asyncclient"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2960", "target": "importerror"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2961", "target": "async"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2961", "target": "chatbot"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2961", "target": "prompt"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2961", "target": "geoapikey"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2961", "target": "osgetenvgeoapikey"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2962", "target": "metadata"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2962", "target": "calltoolcallid"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2962", "target": "hasattrcallargs"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2962", "target": "argsjson"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2962", "target": "jsondumpscallargsargsdict"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2963", "target": "grskip"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2963", "target": "chatbot"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2963", "target": "yield"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2963", "target": "message"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2963", "target": "isinstancecall"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2964", "target": "pastmessages"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2964", "target": "newhistory"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2964", "target": "yield"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2964", "target": "async"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2964", "target": "chatbot"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2965", "target": "center"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2965", "target": "stylemargin"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2965", "target": "assistant"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2965", "target": "selectdatamessage"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2965", "target": "grselectdata"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2966", "target": "weather"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2966", "target": "prompt"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2966", "target": "chatbot"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2966", "target": "pastmessages"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2966", "target": "labelpacking"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2967", "target": "chatbot"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2967", "target": "pastmessages"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2967", "target": "prompt"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2967", "target": "chatbotretry"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2967", "target": "handleretry"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2968", "target": "pydantic"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2968", "target": "services"}, {"type": "contains", "source": "text_data\\weather-agent.txt:2968", "target": "present"}, {"type": "contains", "source": "text_data\\wrapper.txt:2968", "target": "pydanticai"}, {"type": "contains", "source": "text_data\\wrapper.txt:2968", "target": "logoimglogowhitesvg"}, {"type": "contains", "source": "text_data\\wrapper.txt:2968", "target": "pydanticpydanticai"}, {"type": "contains", "source": "text_data\\wrapper.txt:2968", "target": "v0050"}, {"type": "contains", "source": "text_data\\wrapper.txt:2968", "target": "httpsgithubcompydanticpydanticai"}, {"type": "contains", "source": "text_data\\wrapper.txt:2969", "target": "tools"}, {"type": "contains", "source": "text_data\\wrapper.txt:2969", "target": "contributing"}, {"type": "contains", "source": "text_data\\wrapper.txt:2969", "target": "troubleshooting"}, {"type": "contains", "source": "text_data\\wrapper.txt:2969", "target": "documentation"}, {"type": "contains", "source": "text_data\\wrapper.txt:2969", "target": "agents"}, {"type": "contains", "source": "text_data\\wrapper.txt:2970", "target": "evals"}, {"type": "contains", "source": "text_data\\wrapper.txt:2970", "target": "input"}, {"type": "contains", "source": "text_data\\wrapper.txt:2970", "target": "graphs"}, {"type": "contains", "source": "text_data\\wrapper.txt:2970", "target": "graph"}, {"type": "contains", "source": "text_data\\wrapper.txt:2970", "target": "image"}, {"type": "contains", "source": "text_data\\wrapper.txt:2971", "target": "examples"}, {"type": "contains", "source": "text_data\\wrapper.txt:2971", "target": "client"}, {"type": "contains", "source": "text_data\\wrapper.txt:2971", "target": "mcpclient"}, {"type": "contains", "source": "text_data\\wrapper.txt:2971", "target": "server"}, {"type": "contains", "source": "text_data\\wrapper.txt:2971", "target": "mcpserver"}, {"type": "contains", "source": "text_data\\wrapper.txt:2972", "target": "agent"}, {"type": "contains", "source": "text_data\\wrapper.txt:2972", "target": "stream"}, {"type": "contains", "source": "text_data\\wrapper.txt:2972", "target": "reference"}, {"type": "contains", "source": "text_data\\wrapper.txt:2972", "target": "pydantic"}, {"type": "contains", "source": "text_data\\wrapper.txt:2972", "target": "model"}, {"type": "contains", "source": "text_data\\wrapper.txt:2973", "target": "pydanticairesult"}, {"type": "contains", "source": "text_data\\wrapper.txt:2973", "target": "result"}, {"type": "contains", "source": "text_data\\wrapper.txt:2973", "target": "pydanticaimessages"}, {"type": "contains", "source": "text_data\\wrapper.txt:2973", "target": "messages"}, {"type": "contains", "source": "text_data\\wrapper.txt:2973", "target": "pydanticaiexceptions"}, {"type": "contains", "source": "text_data\\wrapper.txt:2974", "target": "pydanticaimodelswrapper"}, {"type": "contains", "source": "text_data\\wrapper.txt:2974", "target": "pydanticgraphnodes"}, {"type": "contains", "source": "text_data\\wrapper.txt:2974", "target": "pydanticgraphpersistence"}, {"type": "contains", "source": "text_data\\wrapper.txt:2974", "target": "pydanticgraphmermaid"}, {"type": "contains", "source": "text_data\\wrapper.txt:2974", "target": "pydanticgraphexceptions"}, {"type": "contains", "source": "text_data\\wrapper.txt:2975", "target": "pydanticevalsdataset"}, {"type": "contains", "source": "text_data\\wrapper.txt:2975", "target": "pydanticevalsevaluators"}, {"type": "contains", "source": "text_data\\wrapper.txt:2975", "target": "pydanticevalsreporting"}, {"type": "contains", "source": "text_data\\wrapper.txt:2975", "target": "pydanticevalsotel"}, {"type": "contains", "source": "text_data\\wrapper.txt:2975", "target": "pydanticevalsgeneration"}, {"type": "contains", "source": "text_data\\wrapper.txt:2976", "target": "wrappermodel"}, {"type": "contains", "source": "text_data\\wrapper.txt:2976", "target": "model"}, {"type": "contains", "source": "text_data\\wrapper.txt:2976", "target": "table"}, {"type": "contains", "source": "text_data\\wrapper.txt:2976", "target": "contents"}, {"type": "contains", "source": "text_data\\wrapper.txt:2976", "target": "wrapper"}, {"type": "contains", "source": "text_data\\wrapper.txt:2977", "target": "model"}, {"type": "contains", "source": "text_data\\wrapper.txt:2977", "target": "wrapped"}, {"type": "contains", "source": "text_data\\wrapper.txt:2977", "target": "class"}, {"type": "contains", "source": "text_data\\wrapper.txt:2977", "target": "async"}, {"type": "contains", "source": "text_data\\wrapper.txt:2977", "target": "kwargs"}, {"type": "contains", "source": "text_data\\wrapper.txt:2978", "target": "modelrequestparameters"}, {"type": "contains", "source": "text_data\\wrapper.txt:2978", "target": "return"}, {"type": "contains", "source": "text_data\\wrapper.txt:2978", "target": "responsestream"}, {"type": "contains", "source": "text_data\\wrapper.txt:2978", "target": "property"}, {"type": "contains", "source": "text_data\\wrapper.txt:2978", "target": "asynciteratorstreamedresponse"}, {"type": "contains", "source": "text_data\\wrapper.txt:2979", "target": "wrapped"}, {"type": "contains", "source": "text_data\\wrapper.txt:2979", "target": "modelbasepydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\wrapper.txt:2979", "target": "pydanticaimodelsmodel"}, {"type": "contains", "source": "text_data\\wrapper.txt:2979", "target": "infermodelwrapped"}, {"type": "contains", "source": "text_data\\wrapper.txt:2979", "target": "underlying"}]}